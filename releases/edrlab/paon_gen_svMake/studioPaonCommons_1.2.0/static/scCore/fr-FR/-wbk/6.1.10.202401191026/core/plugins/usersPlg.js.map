{"version":3,"sources":["/@back@/core/plugins/usersPlg.tsx"],"names":["Action","ActionHackCtx","REG","POPUP","EUserAspects","initApp","reg","WrapReg","[object Object]","sub","super","this","ctx","buttonNode","initButtonNode","wrap","action","addToList","OpenUsersMgr","requireVisiblePerm","OpenGroupsMgr","OpenRolesExplorer","_label","_group","_icon","ev","MOD","import","ct","UsersMgr","initialize","uiContext","preSelectAccount","showDialog","titleBar","barLabel","label","closeButton","resizer","initWidth","initHeight","onNextClose","env","universe","adminUsers","isVisible","isEnabled","GroupsMgr","hasAspect","groupable","_description","RolesExplorer"],"mappings":"OAAQA,OAAQC,kBAAuB;OACZC,QAAI;;OAIvBC,UAAM;OAENC,iBAAa;OASf,SAAUC,QAAQC,IAA8BJ,IAAII,KAEzD,MAAMC,gBAAgBN,cACrBO,YAAYC,IAA6CH,KACxDI,MAAMD;AADkDE,KAAAL,IAAAA,IAIzDE,QAAQI,KAAuC,OAAOD,KAAKL,IAE3DE,eAAeK,WAAqBD,KAElCC,WAA6CP,IAAMK,KAAKL;AACzDK,KAAKF,IAAIK,eAAeD,WAAYF,KAAKL,MAI3C,SAASS,KAAKC,QACb,OAAO,IAAIT,QAAQS,OAAQV,KAI5BJ,IAAII,IAAIW,UAAU,iCAAkC,QAAS,EAAGF,MAAK,IAAIG,cAAeC,mBAAmB,sBAAuB;AAClIjB,IAAII,IAAIW,UAAU,iCAAkC,SAAU,EAAGF,MAAK,IAAIK,eAAgBD,mBAAmB,uBAAwB;AACrIjB,IAAII,IAAIW,UAAU,iCAAkC,QAAS,EAAGF,MAAK,IAAIM,mBAAoBF,mBAAmB,8BAA+B,YAQ1I,MAAOD,qBAAqBlB,OAEjCQ,cACCE,MAAM;AACNC,KAAKW,OAAS;AACdX,KAAKY,OAAS;AACdZ,KAAKa,MAAQ,gCAGdhB,cAAcI,IAAuBa,IACpC,MAAMC,UAAYC,OAAM;AACxB,MAAMC,IAAK,IAAIF,IAAIG,UAAWC,WAAW,CACxCxB,IAAKM,IAAIN,IACTyB,UAAW,QACXC,iBAAkBpB,IAAIoB;MAEjB7B,MAAM8B,WAAWL,GAAI,KAAM,CAChCM,SAAU,CAACC,SAAU,CAACC,MAAO,8BAA+BC,YAAa,IACzEC,QAAS,GACTC,UAAW,iBACXC,WAAY,SACVC,cAGJjC,UAAUI,KACT,IAAKA,IAAIN,IAAIoC,IAAIC,SAASC,WAAY,OAAO;AAC7C,OAAOlC,MAAMmC,UAAUjC,KAGxBJ,UAAUI,KAET,OAAOF,MAAMoC,UAAUlC,aAiBnB,MAAOQ,sBAAsBpB,OAElCQ,cACCE,MAAM;AACNC,KAAKW,OAAS;AACdX,KAAKY,OAAS;AACdZ,KAAKa,MAAQ,iCAGdhB,cAAcI,IAAuBa,IACpC,MAAMC,UAAYC,OAAM;AACxB,MAAMC,IAAK,IAAIF,IAAIqB,WAAYjB,WAAW,CACzCxB,IAAKM,IAAIN,IACTyB,UAAW,QACXC,iBAAkBpB,IAAIoB;MAEjB7B,MAAM8B,WAAWL,GAAI,KAAM,CAChCM,SAAU,CAACC,SAAU,CAACC,MAAO,yBAA0BC,YAAa,IACpEC,QAAS,GACTC,UAAW,iBACXC,WAAY,SACVC,cAGJjC,UAAUI,KACT,IAAKA,IAAIN,IAAIoC,IAAIC,SAASC,aAAehC,IAAIN,IAAIoC,IAAIC,SAASC,WAAWI,UAAU5C,aAAa6C,WAAY,OAAO;AACnH,OAAOvC,MAAMmC,UAAUjC,KAGxBJ,UAAUI,KAET,OAAOF,MAAMoC,UAAUlC,aAanB,MAAOS,0BAA0BrB,OAEtCQ,cACCE,MAAM;AACNC,KAAKW,OAAS;AACdX,KAAKuC,aAAe;AACpBvC,KAAKY,OAAS,QAGff,cAAcI,IAA6Ba,IAC1C,MAAMC,UAAYC,OAAM;AACxB,MAAMC,IAAK,IAAIF,IAAIyB,eAAgBrB,WAAW,CAC7CxB,IAAKM,IAAIN,IACTyB,UAAW;MAEN5B,MAAM8B,WAAWL,GAAI,KAAM,CAChCM,SAAU,CAACC,SAAU,CAACC,MAAO,2BAA4BC,YAAa,IACtEC,QAAS,GACTC,UAAW,kBACXC,WAAY,SACVC,cAGJjC,UAAUI,KACT,IAAKA,IAAIN,IAAIoC,IAAIC,SAASC,WAAY,OAAO;AAC7C,OAAOlC,MAAMmC,UAAUjC,KAGxBJ,UAAUI,KAET,OAAOF,MAAMoC,UAAUlC","sourcesContent":["import {Action, ActionHackCtx, IAction} from \"lib/commons/actions\";\nimport {IReg, IRegPointer, REG} from 'lib/commons/registry';\nimport {JSX} from \"lib/commons/xml/dom\";\nimport \"back/core/plugins/plugins_Perms\";\nimport {ICoreUniverseEnv} from \"lib/core/universe\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {OUsersMgrInit} from \"back/core/dialogs/usersMgr\";\nimport {EUserAspects} from \"lib/core/user\";\nimport {ORolesExplorerInit} from \"back/core/dialogs/rolesExplorer\";\n\n\n/**\n * Gestionnaire des utilisateurs\n *\n * @param reg Registre à exploiter correspondant\n */\nexport function initApp(reg: IReg<ICoreUniverseEnv> = REG.reg) {\n\n\tclass WrapReg extends ActionHackCtx<Element, IReg<ICoreUniverseEnv>> {\n\t\tconstructor(sub: IAction<IReg<ICoreUniverseEnv>>, public reg: IReg<ICoreUniverseEnv>) {\n\t\t\tsuper(sub);\n\t\t}\n\n\t\twrapCtx(ctx: Element): IReg<ICoreUniverseEnv> {return this.reg}\n\n\t\tinitButtonNode(buttonNode: Element, ctx: Element) {\n\t\t\t//Affectation du bon registre dans le contexte graphique.\n\t\t\t(buttonNode as IRegPointer<ICoreUniverseEnv>).reg = this.reg;\n\t\t\tthis.sub.initButtonNode(buttonNode, this.reg);\n\t\t}\n\t}\n\n\tfunction wrap(action: IAction<IReg<ICoreUniverseEnv>>): IAction<Element> {\n\t\treturn new WrapReg(action, reg);\n\t}\n\n\t//Menu Options\n\tREG.reg.addToList(\"appframe:header:toolbar:params\", \"users\", 1, wrap(new OpenUsersMgr().requireVisiblePerm(\"ui.usersPlg.users\")), 100);\n\tREG.reg.addToList(\"appframe:header:toolbar:params\", \"groups\", 1, wrap(new OpenGroupsMgr().requireVisiblePerm(\"ui.usersPlg.groups\")), 101);\n\tREG.reg.addToList(\"appframe:header:toolbar:params\", \"roles\", 1, wrap(new OpenRolesExplorer().requireVisiblePerm(\"ui.usersPlg.rolesExplorer\")), 200);\n\n}\n\n/**\n * Ouverture du gestionnaire des utilisateurs\n */\n\nexport class OpenUsersMgr extends Action<IOpenUsersMgrCtx> {\n\n\tconstructor() {\n\t\tsuper(\"usersMgr\");\n\t\tthis._label = \"Gestion des utilisateurs...\";\n\t\tthis._group = 'users';\n\t\tthis._icon = '/@skin@/core/objects/user.svg';\n\t}\n\n\tasync execute(ctx: IOpenUsersMgrCtx, ev?: Event) {\n\t\tconst MOD = await import(\"back/core/dialogs/usersMgr.js\");\n\t\tconst ct = new MOD.UsersMgr().initialize({\n\t\t\treg: ctx.reg,\n\t\t\tuiContext: \"popup\",\n\t\t\tpreSelectAccount: ctx.preSelectAccount,\n\t\t} as OUsersMgrInit);\n\t\tawait POPUP.showDialog(ct, null, {\n\t\t\ttitleBar: {barLabel: {label: \"Gestion des utilisateurs\"}, closeButton: {}},\n\t\t\tresizer: {},\n\t\t\tinitWidth: \"max(80vw,50em)\",\n\t\t\tinitHeight: \"90vh\"\n\t\t}).onNextClose();\n\t}\n\n\tisVisible(ctx: IOpenUsersMgrCtx): boolean {\n\t\tif (!ctx.reg.env.universe.adminUsers) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisEnabled(ctx: IOpenUsersMgrCtx): boolean {\n\t\t//if (!Desk.checkCompat('formElt')) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\t// getDescription(ctx: IReg<ICoreUniverseEnv>): string {\n\t// \tif (!Desk.checkCompat('formElt')) return \"Ce navigateur n'est pas compatible avec cette fonction\";\n\t// }\n\n}\n\nexport interface IOpenUsersMgrCtx extends IReg<ICoreUniverseEnv> {\n\tpreSelectAccount?: string\n}\n\n\n/**\n * Ouverture du gestionnaire des groupes\n */\nexport class OpenGroupsMgr extends Action<IOpenUsersMgrCtx> {\n\n\tconstructor() {\n\t\tsuper(\"usersMgr\");\n\t\tthis._label = \"Gestion des groupes...\";\n\t\tthis._group = 'users';\n\t\tthis._icon = '/@skin@/core/objects/group.svg';\n\t}\n\n\tasync execute(ctx: IOpenUsersMgrCtx, ev?: Event) {\n\t\tconst MOD = await import(\"back/core/dialogs/usersMgr.js\");\n\t\tconst ct = new MOD.GroupsMgr().initialize({\n\t\t\treg: ctx.reg,\n\t\t\tuiContext: \"popup\",\n\t\t\tpreSelectAccount: ctx.preSelectAccount,\n\t\t} as OUsersMgrInit);\n\t\tawait POPUP.showDialog(ct, null, {\n\t\t\ttitleBar: {barLabel: {label: \"Gestion des groupes\"}, closeButton: {}},\n\t\t\tresizer: {},\n\t\t\tinitWidth: \"min(90vw,40em)\",\n\t\t\tinitHeight: \"90vh\"\n\t\t}).onNextClose();\n\t}\n\n\tisVisible(ctx: IOpenUsersMgrCtx): boolean {\n\t\tif (!ctx.reg.env.universe.adminUsers || !ctx.reg.env.universe.adminUsers.hasAspect(EUserAspects.groupable)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisEnabled(ctx: IOpenUsersMgrCtx): boolean {\n\t\t//if (!Desk.checkCompat('formElt')) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\t// getDescription(ctx: IReg<ICoreUniverseEnv>): string {\n\t// \tif (!Desk.checkCompat('formElt')) return \"Ce navigateur n'est pas compatible avec cette fonction\";\n\t// }\n\n}\n\n\n/**\n * Ouverture de l'explorateur des rôles\n */\nexport class OpenRolesExplorer extends Action<IReg<ICoreUniverseEnv>> {\n\n\tconstructor() {\n\t\tsuper(\"usersMgr\");\n\t\tthis._label = \"Explorateur des rôles...\";\n\t\tthis._description = \"Explorateur des rôles affectés des utilisateurs sur les différents composants applicatifs\";\n\t\tthis._group = 'users';\n\t}\n\n\tasync execute(ctx: IReg<ICoreUniverseEnv>, ev?: Event) {\n\t\tconst MOD = await import(\"back/core/dialogs/rolesExplorer.js\");\n\t\tconst ct = new MOD.RolesExplorer().initialize({\n\t\t\treg: ctx.reg,\n\t\t\tuiContext: \"popup\",\n\t\t} as ORolesExplorerInit);\n\t\tawait POPUP.showDialog(ct, null, {\n\t\t\ttitleBar: {barLabel: {label: \"Explorateur des rôles\"}, closeButton: {}},\n\t\t\tresizer: {},\n\t\t\tinitWidth: \"min(90vw,100em)\",\n\t\t\tinitHeight: \"90vh\"\n\t\t}).onNextClose();\n\t}\n\n\tisVisible(ctx: IReg<ICoreUniverseEnv>): boolean {\n\t\tif (!ctx.reg.env.universe.adminUsers) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisEnabled(ctx: IReg<ICoreUniverseEnv>): boolean {\n\t\t//if (!Desk.checkCompat('formElt')) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n}"]}