{"version":3,"sources":["/@back@/wsp/views/myTasksRepos.tsx"],"names":["BaseAreaViewAsync","REG","WSPMETA","DOMSH","Tabs","JSX","IO","Grid","SRC","GridColDef","CellBuilderSrcIconCode","CellBuilderString","GridDataHolderJsonArray","Action","ITEM","POPUP","EInvolvement","TASK","MyTasksRepos","[object Object]","init","super","_initialize","sr","this","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","emptyBody","fetchState","createElement","level","tabs","id","skin-over","columnDefs","setLabel","setDefaultSort","setFlex","setMinWidth","setSortable","setCellBuilder","CellBuilderReposTk","reg","pendingTodo","appendChild","code","label","î","dataHolder","defaultAction","OpenTaskApp","SINGELTON","selType","skinScroll","pendingTofollow","fetchPendings","datas","env","universe","wspServer","config","tasksUrl","fetchJson","qs","reposTaskFields","wspMap","Map","wspMeatsCache","WspMetasCache","w","wsps","fetchWspMetaUi","wspMeta","atomWspTypeInst","waitForAll","wspMetaUi","getWspMetaUi","set","wspCd","toDoTk","toFollowTk","userFlatGroups","auth","fetchFlattenedGroups","tasks","extractWspCdFromReposUri","srcUri","wspInfo","get","taskData","extractSrcUriFromReposUri","actTi","itModel","extractTaskModelFromReposUri","wspTi","title","tkDeadline","inv","getInvolvementForAccounts","executor","push","follower","setDatas","e","registerSkin","customElements","define","join","sortSrcUriTree","row","cacheHolder","srcRdr","getMainName","rowDatas","getIcon","getSecondName","ctx","ev","getSelectedRow","getRow","rowKey","desk","findAndOpenApp","task","extractTaskIdFromSrcUri","findPopupableParent","close","reposUri","substring","indexOf","lastIndexOf","startsWith","ANNOT_PREFIX","ID_PREFIX","length"],"mappings":"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","sourcesContent":["import {BaseAreaViewAsync, OBaseAreaViewInit} from \"lib/commons/views\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {IWspUiEnv, JWspTypeInst, WSPMETA} from \"lib/wsp/wsp\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {Tabs} from \"back/commons/widgets/tabs\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {IO} from \"lib/commons/io/io\";\nimport {IChainEnv} from \"lib/wsp/chain\";\nimport {Grid, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {ESrcField, JSrcFields, SRC, srcId, srcUri} from \"lib/wsp/src\";\nimport {WspMetaUi} from \"lib/wsp/wspMetaUi\";\nimport {GridColDef} from \"back/commons/widgets/grid-core\";\nimport {CellBuilderSrcIconCode} from \"back/wsp/widgets/srcGridColumns\";\nimport {CellBuilderString, GridDataHolderJsonArray, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {Action} from \"lib/commons/actions\";\nimport {AppFrameDeskFeat} from \"back/core/appFrame\";\nimport {JTaskAppDef} from \"back/wsp/plugins/tasksPlg\";\nimport {ITEM} from \"lib/wsp/item\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {EInvolvement, TASK} from \"lib/wsp/lcTask\";\n\n\n/**\n * Liste des tâches du user trans-ateliers (au niveau Repository).\n */\nexport interface MyTasksRepos extends BaseAreaViewAsync<IRegPointer<IWspUiEnv>> {\n\tinitialize(init: OMyTasksReposInit): this\n}\n\nexport interface OMyTasksReposInit extends OBaseAreaViewInit<IRegPointer<IWspUiEnv>> {\n}\n\nexport class MyTasksRepos extends BaseAreaViewAsync<IRegPointer<IWspUiEnv>> {\n\treg: IReg<IChainEnv | IWspUiEnv>;\n\t/** Map des définitions d'ateliers */\n\twspMap: Map<string, {\n\t\twspCd: string\n\t\ttitle: string\n\t\twspMeta: JWspTypeInst\n\t\twspMetaUi?: WspMetaUi //ajouté localement\n\t}>; //MyTasks inter-wsp (IChainEnv)\n\ttabs: Tabs;\n\tpendingTodo: Grid;\n\tpendingTofollow: Grid;\n\tforthcoming: Grid;\n\ttkClosed: Grid;\n\n\tfetchState: 'done' | 'failed';\n\n\tprotected async _initialize(init: OMyTasksReposInit): Promise<void> {\n\t\tsuper._initialize(init); //init this.reg, this.area, this.areaContext\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tconst emptyBody = () => {\n\t\t\tswitch (this.fetchState) {\n\t\t\tcase \"done\":\n\t\t\t\treturn <c-msg>Aucune tâche</c-msg>;\n\t\t\tcase \"failed\":\n\t\t\t\treturn <c-msg level=\"error\">Échec au chargement</c-msg>;\n\t\t\tdefault:\n\t\t\t\treturn <c-msg>Chargement en cours...</c-msg>;\n\t\t\t}\n\t\t};\n\n\t\tthis.tabs = <Tabs id=\"tabs\" skin-over=\"wsp-mytasks/tabs\"/> as Tabs;\n\t\tconst columnDefs = [new GridColDef('srcCode').setLabel(\"Libellé\")\n\t\t\t.setDefaultSort(1, 'ascendant')\n\t\t\t.setFlex('25em', 1, 1).setMinWidth('8em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderReposTk(this.reg)),\n\t\t\tnew GridColDef('wspTi').setLabel(\"Atelier\")\n\t\t\t\t.setFlex('10em', 1, 1).setMinWidth('8em').setSortable(true)\n\t\t\t\t.setCellBuilder(new CellBuilderString('wspTi'))\n\t\t];\n\t\tthis.pendingTodo = this.tabs.appendChild(<Grid code=\"pendingTodo\" label=\"À faire\" î={{\n\t\t\treg: this.reg,\n\t\t\tcolumnDefs,\n\t\t\tdataHolder: new GridDataHolderJsonArray<ITaskReposData>(),\n\t\t\tdefaultAction: OpenTaskApp.SINGELTON,\n\t\t\tselType: \"monoOver\",\n\t\t\tskinScroll: 'scroll/small',\n\t\t\temptyBody\n\t\t} as OGridSmallInit}/>) as Grid;\n\t\tthis.pendingTofollow = this.tabs.appendChild(<Grid code=\"pendingTofollow\" label=\"À suivre\" î={{\n\t\t\treg: this.reg,\n\t\t\tcolumnDefs,\n\t\t\tdataHolder: new GridDataHolderJsonArray<ITaskReposData>(),\n\t\t\tdefaultAction: OpenTaskApp.SINGELTON,\n\t\t\tselType: \"monoOver\",\n\t\t\tskinScroll: 'scroll/small',\n\t\t\temptyBody\n\t\t} as OGridSmallInit}/>) as Grid;\n\t\t// this.forthcoming = this.tabs.appendChild(<SrcGrid code=\"forthcoming\" label=\"À venir\" î={{\n\t\t// \treg: this.reg,\n\t\t// } as OSrcGridConfigs}/>) as Grid;\n\t\t// this.tkClosed = this.tabs.appendChild(<SrcGrid code=\"tkClosed\" label=\"Fermées\" î={{\n\t\t// \treg: this.reg,\n\t\t// } as OSrcGridConfigs}/>) as Grid;\n\n\t\tsr.appendChild(this.tabs);\n\n\t\treturn this.fetchPendings();\n\t}\n\n\tasync fetchPendings() {\n\t\ttry {\n\t\t\tconst datas = await this.reg.env.universe.wspServer.config.tasksUrl.fetchJson<JMyTasksRepos>(IO.qs(\"cdaction\", \"GetMyTasksAtRepos\", \"fields\", reposTaskFields));\n\n\t\t\t//console.log(\"fetchTasks:::::::::\", datas);\n\t\t\tthis.wspMap = new Map();\n\t\t\tconst wspMeatsCache = new WSPMETA.WspMetasCache(this.reg.env.universe.wspServer);\n\t\t\tfor (const w of datas.wsps) wspMeatsCache.fetchWspMetaUi(w.wspMeta = wspMeatsCache.atomWspTypeInst(w.wspMeta));\n\t\t\tawait wspMeatsCache.waitForAll();\n\t\t\tfor (const w of datas.wsps) {\n\t\t\t\tw.wspMetaUi = wspMeatsCache.getWspMetaUi(w.wspMeta);\n\t\t\t\tthis.wspMap.set(w.wspCd, w);\n\t\t\t}\n\t\t\tconst toDoTk: ITaskReposData[] = [];\n\t\t\tconst toFollowTk: ITaskReposData[] = [];\n\t\t\tconst userFlatGroups: string[] = await this.reg.env.universe.auth.fetchFlattenedGroups();\n\t\t\tfor (const w of datas.tasks) {\n\t\t\t\tconst wspCd = extractWspCdFromReposUri(w.srcUri);\n\t\t\t\tconst wspInfo = this.wspMap.get(wspCd);\n\t\t\t\tif (wspInfo) {\n\t\t\t\t\tconst taskData: ITaskReposData = {\n\t\t\t\t\t\tsrcUri: extractSrcUriFromReposUri(w.srcUri),\n\t\t\t\t\t\tactTi: w.actTi,\n\t\t\t\t\t\titModel: extractTaskModelFromReposUri(w.srcUri),\n\t\t\t\t\t\twspMetaUi: wspInfo.wspMetaUi,\n\t\t\t\t\t\twspTi: wspInfo.title,\n\t\t\t\t\t\twspCd: wspCd,\n\t\t\t\t\t\ttkDeadline: w.tkDeadline\n\t\t\t\t\t};\n\t\t\t\t\tw.itModel = extractTaskModelFromReposUri(w.srcUri);\n\t\t\t\t\tconst inv = TASK.getInvolvementForAccounts(userFlatGroups, w, wspInfo.wspMetaUi);\n\t\t\t\t\tif ((inv & EInvolvement.executor) != 0) {\n\t\t\t\t\t\ttoDoTk.push(taskData);\n\t\t\t\t\t}\n\t\t\t\t\tif ((inv & EInvolvement.follower) != 0) {\n\t\t\t\t\t\ttoFollowTk.push(taskData);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// wsp lié à la tache non chargé => tache ignorée\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(\"toDoTk:::::::::::::\", toDoTk);\n\t\t\tthis.fetchState = \"done\"; //Avant le setData pour l'eval du empty.\n\t\t\t(this.pendingTodo.dataHolder as GridDataHolderJsonArray<ITaskReposData>).setDatas(toDoTk);\n\t\t\t(this.pendingTofollow.dataHolder as GridDataHolderJsonArray<ITaskReposData>).setDatas(toFollowTk);\n\t\t} catch (e) {\n\t\t\tthis.fetchState = \"failed\";\n\t\t\t(this.pendingTodo.dataHolder as GridDataHolderJsonArray<ITaskReposData>).setDatas([]);\n\t\t\t(this.pendingTofollow.dataHolder as GridDataHolderJsonArray<ITaskReposData>).setDatas([]);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin(\"wsp-mytasks-repos\", 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\twidth: 35em;\n\t}\n\n\t#tabs {\n\t\tflex: 1;\n\t}\n\n\tc-grid {\n\t\tborder: none;\n\t}\n`);\n\n//REG.reg.registerSkin(\"wsp-mytasks/tabs\", 1, /* language=CSS */ ``);\n\ncustomElements.define(\"wsp-mytasks-repos\", MyTasksRepos);\n\n\n/** Fields disponibles hors atelier (au niveau du repos). */\nconst reposTaskFields = ([\"srcUri\", \"actTi\", \"tkDeadline\", \"rspUsrs\", \"lcSt\"] as ESrcField[]).join('*');\n\n/** Donnée retourné par le fetch dans les grid dans le contexte du Repos. */\ninterface JMyTasksRepos {\n\ttasks: JSrcFields[]\n\twsps: {\n\t\twspCd: string\n\t\ttitle: string\n\t\twspMeta: JWspTypeInst\n\t\twspMetaUi?: WspMetaUi //ajouté localement\n\t}[]\n}\n\n/** Struct de donnée des tasks dans les grid dans le contexte du Repos.  */\ninterface ITaskReposData {\n\tsrcUri: string\n\titModel: string\n\twspTi: string\n\twspCd: string\n\twspMetaUi: WspMetaUi\n\tactTi: string\n\ttkDeadline: number\n}\n\nclass CellBuilderReposTk extends CellBuilderSrcIconCode {\n\n\tconstructor(reg: IReg<any>) {\n\t\tsuper(reg, null, true, SRC.sortSrcUriTree);\n\t}\n\n\tprotected _getValue(row: GridDataRowJson<ITaskReposData>): string {\n\t\treturn row.cacheHolder['code'] || (row.cacheHolder['code'] = this.srcRdr.getMainName(row.rowDatas, row.rowDatas.wspMetaUi));\n\t}\n\n\tprotected _getIcon(row: GridDataRowJson<ITaskReposData>): string {\n\t\treturn row.cacheHolder['icon'] || (row.cacheHolder['icon'] = this.srcRdr.getIcon(row.rowDatas, row.rowDatas.wspMetaUi));\n\t}\n\n\tprotected _getDescription(row: GridDataRowJson<ITaskReposData>): any {\n\t\treturn this.srcRdr.getSecondName(row.rowDatas, row.rowDatas.wspMetaUi);\n\t}\n}\n\nclass OpenTaskApp extends Action<Grid> {\n\tstatic SINGELTON = new OpenTaskApp();\n\n\texecute(ctx: Grid, ev?: Event): any | \"noPreventDefault\" {\n\t\tconst row = ctx.getSelectedRow();\n\t\tif (row >= 0) {\n\t\t\tconst rowDatas = ctx.dataHolder.getRow(row).rowKey as ITaskReposData;\n\t\t\t(desk as AppFrameDeskFeat).findAndOpenApp({task: extractTaskIdFromSrcUri(rowDatas.srcUri), w: rowDatas.wspCd} as JTaskAppDef, ev);\n\t\t\tPOPUP.findPopupableParent(ctx).close();\n\t\t}\n\t}\n}\n\nfunction extractWspCdFromReposUri(reposUri: string) {\n\treturn reposUri.substring(1, reposUri.indexOf('/', 1));\n}\n\nfunction extractSrcUriFromReposUri(reposUri: string) {\n\treturn reposUri.substring(reposUri.indexOf('/', 1));\n}\n\nfunction extractTaskModelFromReposUri(reposUri: string) {\n\treturn \"stk_\" + reposUri.substring(reposUri.lastIndexOf('/') + 1, reposUri.lastIndexOf('.'));\n}\n\nfunction extractTaskIdFromSrcUri(srcUri: srcUri): srcId {\n\tif (!srcUri || !srcUri.startsWith(ITEM.ANNOT_PREFIX)) return null;\n\treturn SRC.ID_PREFIX + srcUri.substring(ITEM.ANNOT_PREFIX.length, srcUri.indexOf('/', ITEM.ANNOT_PREFIX.length + 1));\n}\n"]}