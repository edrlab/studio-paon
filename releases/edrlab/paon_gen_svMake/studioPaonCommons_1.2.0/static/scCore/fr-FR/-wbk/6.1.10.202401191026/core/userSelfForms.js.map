{"version":3,"sources":["/@back@/core/userSelfForms.ts"],"names":["DOM","Desk","initLoginForm","form","userSelfServer","authServer","options","checkForm","accountInput","elements","namedItem","passwordInput","pwdLostElt","querySelector","msgElt","errorElt","config","pwdLostUrl","setHidden","value","required","fixedAccount","readOnly","defaultAccount","currentAccount","focus","startMessage","showMsg","onchange","resetValidity","onkeydown","onclick","async","event","preventDefault","checkValidity","reportValidity","response","pwdLost","nickOrAccount","result","setCustomValidity","getMsg","msgs","console","log","onsubmit","props","currentPwd","electron","cookieMaxAge","secondaryResults","login","localStorage","setItem","showRenewPwd","renewPwdFrom","initRenewPwdForm","renewPwdDone","hideRenewPwd","ts","disabledEndDt","Date","now","lang","document","documentElement","date","localeDate","toLocaleDateString","localeTime","toLocaleTimeString","hour","minute","currentPwdInput","newPwdInput","confirmPwdInput","account","addEventListener","initEditPwdFields","renewPwd","password","msg","initInitPwdForm","pwdLostUpdate","updateToken","initPwdDone","this","checkPwd","message","key","map","msgType","setAttr","innerHTML","hidden","alert","HTMLFormElement","body","textContent","Error","method"],"mappings":"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","sourcesContent":["import {AuthSrv} from 'lib/core/user';\nimport {OLoginMainStepProps, UserSelfSrv} from 'lib/core/userSelf';\nimport {DOM} from \"lib/commons/xml/dom\";\nimport {Desk} from \"lib/commons/desk\";\n\n/**\n * Librairie pure js de gestion des écrans relatifs aux users.\n *\n */\n\n/**\n * Ecran de login.\n * Champs du formulaire attendus:\n * - name=account\n * - name=password\n * Bouton de fonction \"perte de mot de passe\" : class=\"pwdLost\"\n * Zone de message / info : class=\"message\"\n *    data-type=['', 'pending']\n * Zone de message d'erreur : class=\"error\"\n */\n\nexport interface OLoginFormOptions {\n\tstartMessage?: string\n\tdefaultAccount?: string\n\tfixedAccount?: string\n\n\t/** Passage de l'écran de login à celui du renouvellement du mot de passe. */\n\tshowRenewPwd?: () => HTMLFormElement\n\n\t/** Retour à l'écran de login */\n\thideRenewPwd?: (renewForm: HTMLFormElement) => void\n\n\t/** Messages personnalisables */\n\tmsgs?: OUserSelfFormsMsgs\n}\n\nexport function initLoginForm(form: HTMLFormElement, userSelfServer: UserSelfSrv, authServer: AuthSrv, options: OLoginFormOptions = {}): void {\n\tcheckForm(form);\n\tconst accountInput = form.elements.namedItem('account') as HTMLInputElement;\n\tconst passwordInput = form.elements.namedItem('password') as HTMLInputElement;\n\tconst pwdLostElt = form.querySelector('.pwdLost') as HTMLElement;\n\tconst msgElt = form.querySelector('.message') as HTMLElement;\n\tconst errorElt = form.querySelector('.error') as HTMLElement;\n\n\tif (!userSelfServer.config.pwdLostUrl)\n\t\tDOM.setHidden(pwdLostElt, true);\n\n\taccountInput.value = passwordInput.value = '';\n\taccountInput.required = passwordInput.required = true;\n\n\tif (options.fixedAccount) {\n\t\taccountInput.value = options.fixedAccount;\n\t\taccountInput.readOnly = true;\n\t} else {\n\t\taccountInput.value = options.defaultAccount || authServer.currentAccount || \"\";\n\t}\n\tif (accountInput.value) passwordInput.focus();\n\telse accountInput.focus();\n\n\tif (options.startMessage) showMsg(msgElt, options.startMessage);\n\n\taccountInput.onchange = resetValidity;\n\taccountInput.onkeydown = resetValidity;\n\tpasswordInput.onchange = resetValidity;\n\tpasswordInput.onkeydown = resetValidity;\n\n\tif (pwdLostElt) {\n\t\tpwdLostElt.onclick = async (event) => {\n\t\t\tshowMsg(errorElt);\n\t\t\tevent.preventDefault();\n\t\t\tif (!accountInput.checkValidity()) {\n\t\t\t\tform.reportValidity();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tshowMsg(msgElt, \"Veuillez patienter...\", null, null, \"pending\");\n\t\t\tconst response = await userSelfServer.pwdLost({nickOrAccount: accountInput.value});\n\t\t\tshowMsg(msgElt);\n\t\t\tconst result = response ? response.result : \"otherFailure\";\n\t\t\tswitch (result) {\n\t\t\tcase 'accountNotFound':\n\t\t\t\taccountInput.setCustomValidity(getMsg(\"Ce compte n'existe pas.\", 'accountNotFound', options.msgs));\n\t\t\t\tform.reportValidity();\n\t\t\t\tbreak;\n\t\t\tcase 'datasNotAvailable' :\n\t\t\t\tshowMsg(errorElt, \"Nous ne disposons pas des informations nécessaires pour vous envoyer les instructions.\", 'datasNotAvailable', options.msgs);\n\t\t\t\tbreak;\n\t\t\tcase 'instructionsSent' :\n\t\t\t\taccountInput.setCustomValidity('');\n\t\t\t\tshowMsg(msgElt, \"Les instructions pour renouveler votre mot de passe vous ont été envoyées.\", 'instructionsSent', options.msgs);\n\t\t\t\tbreak;\n\t\t\tcase 'otherFailure':\n\t\t\t\tshowMsg(errorElt, \"Le système de validation des mots de passe est indisponible. Veuillez essayer ultérieurement.\", 'otherFailure', options.msgs);\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tconsole.log(`Unknow auth result: ${result}'`);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t}\n\n\tform.onsubmit = async function (event) {\n\t\tevent.preventDefault();\n\t\tconst props: OLoginMainStepProps = {nickOrAccount: accountInput.value, currentPwd: passwordInput.value};\n\t\t// Session maximale pour Electron, limité par le serveur\n\t\tif (Desk.electron) props.cookieMaxAge = 999999999;\n\t\tconst {result, secondaryResults} = await userSelfServer.login(props);\n\t\tswitch (result) {\n\t\tcase 'logged' :\n\t\t\tshowMsg(errorElt);\n\t\t\taccountInput.setCustomValidity('');\n\t\t\tpasswordInput.setCustomValidity('');\n\t\t\tlocalStorage.setItem(\"login:lastAccount\", props.nickOrAccount);\n\t\t\tbreak;\n\t\tcase 'invalidPassword':\n\t\t\tshowMsg(errorElt);\n\t\t\tpasswordInput.setCustomValidity(getMsg(\"Ce mot de passe est incorrect.\", 'invalidPassword', options.msgs));\n\t\t\tform.reportValidity();\n\t\t\tbreak;\n\t\tcase 'obsoletPassword':\n\t\t\tif (options.showRenewPwd) {\n\t\t\t\tshowMsg(errorElt);\n\t\t\t\tconst renewPwdFrom = options.showRenewPwd();\n\t\t\t\tinitRenewPwdForm(renewPwdFrom, userSelfServer, authServer, {\n\t\t\t\t\tfixedAccount: accountInput.value,\n\t\t\t\t\tstartMessage: getMsg(\"Votre mot de passe a expiré, vous devez le renouveler.\", 'obsoletPassword', options.msgs),\n\t\t\t\t\trenewPwdDone: () => {\n\t\t\t\t\t\tif (options.hideRenewPwd) options.hideRenewPwd(renewPwdFrom);\n\t\t\t\t\t\treturn form;\n\t\t\t\t\t},\n\t\t\t\t\tshowRenewPwd: options.showRenewPwd,\n\t\t\t\t\tmsgs: options.msgs\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tshowMsg(errorElt, \"Votre mot de passe a expiré, vous devez le renouveler.\", 'obsoletPassword', options.msgs);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'accountNotFound':\n\t\t\tshowMsg(errorElt);\n\t\t\taccountInput.setCustomValidity(getMsg(\"Ce compte n'existe pas.\", 'accountNotFound', options.msgs));\n\t\t\tform.reportValidity();\n\t\t\tbreak;\n\t\tcase 'accountDisabled':\n\t\t\tconst ts = secondaryResults ? secondaryResults.disabledEndDt : 0;\n\t\t\tif (ts > (Date.now() - 5000)) {\n\t\t\t\tconst lang = document.documentElement.lang || \"fr\";\n\t\t\t\tconst date = new Date(ts);\n\t\t\t\tconst localeDate = date.toLocaleDateString(lang);\n\t\t\t\tconst localeTime = date.toLocaleTimeString(lang, {hour: \"numeric\", minute: \"numeric\"});\n\t\t\t\tshowMsg(errorElt, `Ce compte a été temporairement désactivé. Il sera de nouveau actif le ${localeDate} vers ${localeTime}.`, 'accountDisabled', options.msgs);\n\t\t\t} else {\n\t\t\t\tshowMsg(errorElt, \"Votre compte est désactivé.\", 'accountDisabled', options.msgs);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'otherFailure':\n\t\t\tshowMsg(errorElt, \"Le système de validation des mots de passe est indisponible. Veuillez essayer ultérieurement.\", 'otherFailure', options.msgs);\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.log(`Unknow auth result: '${result}'`);\n\t\t\tbreak;\n\t\t}\n\t};\n}\n\n\n/**\n * Ecran de renouvellemment du mot de passe avec demande de (re)saisie du mot de passe actuel.\n * Champs du formulaire attendus:\n * - [optionnel] name=account\n * - name=currentPwd\n * - name=newPwd\n * - name=confirmPwd\n *\n * Zone de message / info : class=\"message\"\n * Zone de message d'erreur : class=\"error\"\n */\nexport interface ORenewPwdFormOptions {\n\tstartMessage?: string\n\tfixedAccount?: string\n\n\t/**\n\t * Callback lorsque le renouvellement du password a été réalisé.\n\t * Si un formulaire est retourné, l'écran de login est réactivé avec ce formulaire.\n\t */\n\trenewPwdDone?: () => void | HTMLFormElement\n\n\t/** Messages personnalisables */\n\tmsgs?: OUserSelfFormsMsgs\n\n\t/** Interne. Pour permettre les cycles en cas de retour au login de renewPwdDone(). */\n\tshowRenewPwd?: () => HTMLFormElement\n}\n\nexport function initRenewPwdForm(form: HTMLFormElement, userSelfServer: UserSelfSrv, authServer: AuthSrv, options: ORenewPwdFormOptions) {\n\tcheckForm(form);\n\tconst accountInput = form.elements.namedItem('account') as HTMLInputElement;\n\tconst currentPwdInput = form.elements.namedItem('currentPwd') as HTMLInputElement;\n\tconst newPwdInput = form.elements.namedItem('newPwd') as HTMLInputElement;\n\tconst confirmPwdInput = form.elements.namedItem('confirmPwd') as HTMLInputElement;\n\tconst errorElt = form.querySelector('.error') as HTMLElement;\n\n\tlet account = {value: options.fixedAccount || authServer.currentAccount};\n\n\tif (accountInput) {\n\t\tif (account.value) {\n\t\t\taccountInput.value = account.value;\n\t\t\taccountInput.readOnly = true;\n\t\t} else {\n\t\t\taccountInput.required = true;\n\t\t\taccount = accountInput;\n\t\t}\n\t}\n\n\tif (options.startMessage) showMsg(form.querySelector('.message') as HTMLElement, options.startMessage);\n\n\tcurrentPwdInput.value = newPwdInput.value = confirmPwdInput.value = '';\n\tcurrentPwdInput.required = newPwdInput.required = confirmPwdInput.required = true;\n\tcurrentPwdInput.addEventListener('input', () => {\n\t\tcurrentPwdInput.setCustomValidity('');\n\t});\n\n\tinitEditPwdFields(newPwdInput, confirmPwdInput, userSelfServer, options.msgs);\n\n\tform.onsubmit = async function (event) {\n\t\tevent.preventDefault();\n\t\tconst response = await userSelfServer.renewPwd({nickOrAccount: account.value, currentPwd: currentPwdInput.value, password: newPwdInput.value});\n\t\tswitch (response.result) {\n\t\tcase 'updated' :\n\t\t\tconfirmPwdInput.setCustomValidity('');\n\t\t\tnewPwdInput.setCustomValidity('');\n\t\t\tconfirmPwdInput.setCustomValidity('');\n\t\t\tshowMsg(errorElt);\n\t\t\tif (options.renewPwdDone) {\n\t\t\t\tconst form = options.renewPwdDone();\n\t\t\t\tif (form) initLoginForm(form, userSelfServer, authServer, {\n\t\t\t\t\tdefaultAccount: account.value,\n\t\t\t\t\tstartMessage: \"Votre mot de passe a bien été renouvelé, authentifiez-vous avec ce dernier.\",\n\t\t\t\t\tshowRenewPwd: options.showRenewPwd,\n\t\t\t\t\tmsgs: options.msgs\n\t\t\t\t})\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'invalidToken' :\n\t\t\tcurrentPwdInput.setCustomValidity(\"Votre mot de passe actuel est incorrect.\");\n\t\t\t// TODO Edge ne supporte pas reportValidity : https://caniuse.com/#feat=constraint-validation\n\t\t\tform.reportValidity();\n\t\t\tbreak;\n\t\tcase 'failedInvalidDatas':\n\t\t\tconst msg = response.secondaryResults && response.secondaryResults.msgs && response.secondaryResults.msgs[0];\n\t\t\tif (msg) newPwdInput.setCustomValidity(msg);\n\t\t\telse newPwdInput.setCustomValidity(\"Ce mot de passe n'est pas autorisé.\");\n\t\t\tform.reportValidity();\n\t\t\tbreak;\n\t\tcase 'otherFailure':\n\t\t\tshowMsg(errorElt, \"Le système de validation des mots de passe est indisponible. Veuillez essayer ultérieurement.\", 'otherFailure', options.msgs);\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.log(`Unknown auth result: '${response.result}'`);\n\t\t\tbreak;\n\t\t}\n\t};\n}\n\n/**\n * Ecran de définition d'un nouveau mot de passe, suite à une procédure de type \"perte de mot de passe\",\n * avec token sans demande de (re)saisie du mote de passe courant.\n * Champs du formulaire attendus:\n * - [optionnel] name=account\n * - name=newPwd\n * - name=confirmPwd\n *\n * Zone de message d'erreur : class=\"error\"\n */\nexport interface OInitPwdFormOptions {\n\t/** Token de validation de la procédure (issu de l'URL envoyé dans le mail de perte de mot de passe par ex.) */\n\tupdateToken: string\n\n\t/** Compte concerné. */\n\taccount: string\n\n\t/**\n\t * Callback lorsque l'initialisation du password a été réalisé.\n\t * Si un formulaire est retourné, l'écran de login est réactivé avec ce formulaire.\n\t */\n\tinitPwdDone?: () => null | HTMLFormElement\n\n\t/** Personalisation des messages. */\n\tmsgs?: OUserSelfFormsMsgs\n\n\t/** Interne. Pour permettre les cycles en cas de retour au login de renewPwdDone(). */\n\tshowRenewPwd?: () => HTMLFormElement\n}\n\nexport function initInitPwdForm(form: HTMLFormElement, userSelfServer: UserSelfSrv, authServer: AuthSrv, options: OInitPwdFormOptions) {\n\tcheckForm(form);\n\tconst accountInput = form.elements.namedItem('account') as HTMLInputElement;\n\tconst newPwdInput = form.elements.namedItem('newPwd') as HTMLInputElement;\n\tconst confirmPwdInput = form.elements.namedItem('confirmPwd') as HTMLInputElement;\n\tconst errorElt = form.querySelector('.error') as HTMLElement;\n\n\tif (accountInput) {\n\t\taccountInput.value = options.account;\n\t\taccountInput.readOnly = true;\n\t}\n\n\tinitEditPwdFields(newPwdInput, confirmPwdInput, userSelfServer, options.msgs);\n\n\tform.onsubmit = async function (event) {\n\t\tevent.preventDefault();\n\t\tconst response = await userSelfServer.pwdLostUpdate({nickOrAccount: options.account, updateToken: options.updateToken, password: newPwdInput.value});\n\t\tswitch (response.result) {\n\t\tcase 'updated' :\n\t\t\tconfirmPwdInput.setCustomValidity('');\n\t\t\tnewPwdInput.setCustomValidity('');\n\t\t\tconfirmPwdInput.setCustomValidity('');\n\t\t\tshowMsg(errorElt);\n\t\t\tif (options.initPwdDone) {\n\t\t\t\tconst form = options.initPwdDone();\n\t\t\t\tif (form) initLoginForm(form, userSelfServer, authServer, {\n\t\t\t\t\tdefaultAccount: options.account,\n\t\t\t\t\tstartMessage: \"Votre mot de passe a bien été initialisé, authentifiez-vous avec ce dernier.\",\n\t\t\t\t\tshowRenewPwd: options.showRenewPwd,\n\t\t\t\t\tmsgs: options.msgs\n\t\t\t\t})\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'tooOldToken' :\n\t\t\tshowMsg(errorElt, getMsg(\"Votre demande de changement de mot de passe a expiré. Veuillez faire une nouvelle demande.\", 'tooOldToken', options.msgs));\n\t\t\tbreak;\n\t\tcase 'invalidToken' :\n\t\tcase 'accountNotFound' :\n\t\t\tshowMsg(errorElt, \"Nous n'avons pas reconnu votre identité, l'URL de cette page obtenue à partir du mail que vous avez reçu est probablement incorrecte. Veuillez faire une nouvelle demande.\");\n\t\t\tbreak;\n\t\tcase 'accountDisabled' :\n\t\t\t//TODO\n\t\t\t// var vTs = pSecondaryResults ? parseInt(pSecondaryResults[0], 10) : 0;\n\t\t\t// if (vTs > (Date.now() - 5000)) {\n\t\t\t// \tvar vDt = new Date(vTs);\n\t\t\t// \tthis.setError(i18n.formatStr(\"Ce compte a été temporairement désactivé. Il sera de nouveau actif le %s vers %s.\", vDt.toLocaleDateString(), vDt.toLocaleTimeString()));\n\t\t\t// } else {\n\t\t\t// \tthis.setError(\"Ce compte est désactivé\");\n\t\t\t// }\n\t\t\tshowMsg(errorElt, \"Votre demande ne peut pas être prise en compte car votre compte est désactivé.\");\n\t\t\tbreak;\n\t\tcase 'failedInvalidDatas':\n\t\t\tconst msg = response.secondaryResults && response.secondaryResults.msgs && response.secondaryResults.msgs[0];\n\t\t\tif (msg) newPwdInput.setCustomValidity(msg);\n\t\t\telse newPwdInput.setCustomValidity(\"Ce mot de passe n'est pas autorisé.\");\n\t\t\tform.reportValidity();\n\t\t\tbreak;\n\t\tcase 'otherFailure':\n\t\t\tshowMsg(errorElt, \"Le système de validation des mots de passe est indisponible. Veuillez essayer ultérieurement.\", 'otherFailure', options.msgs);\n\t\t\tbreak;\n\t\tdefault :\n\t\t\tconsole.log(`Unknown auth result: '${response.result}'`);\n\t\t\tbreak;\n\t\t}\n\t};\n}\n\n\n/** Messages personnalisables. */\ninterface OUserSelfFormsMsgs {\n\taccountNotFound: string\n\tdatasNotAvailable: string\n\tinstructionsSent: string\n\totherFailure: string\n\tinvalidPassword: string\n\tobsoletPassword: string\n\taccountDisabled: string\n\ttooOldToken: string\n}\n\n\nfunction initEditPwdFields(newPwdInput: HTMLInputElement, confirmPwdInput: HTMLInputElement, userSelfServer: UserSelfSrv, msgs: OUserSelfFormsMsgs) {\n\n\tnewPwdInput.onchange = async function (this: HTMLInputElement) {\n\t\tif (this.value) {\n\t\t\tif (confirmPwdInput.value === this.value) {\n\t\t\t\tconfirmPwdInput.setCustomValidity(''); //reset l'erreur de confirmation.\n\t\t\t}\n\t\t\tconst response = await userSelfServer.checkPwd({password: this.value});\n\t\t\tif (response.result != 'ok') this.setCustomValidity(response.secondaryResults.msgs[0]);\n\t\t\telse this.setCustomValidity('');\n\t\t} else {\n\t\t\tthis.setCustomValidity('');\n\t\t}\n\t};\n\tnewPwdInput.onkeydown = resetValidity;\n\n\tconfirmPwdInput.onchange = async function (this: HTMLInputElement) {\n\t\tif (this.value && this.value !== newPwdInput.value) {\n\t\t\tthis.setCustomValidity(\"Cette confirmation ne correspond pas au nouveau mot de passe saisi.\");\n\t\t} else {\n\t\t\tthis.setCustomValidity('');\n\t\t}\n\t};\n\tconfirmPwdInput.onkeydown = resetValidity;\n}\n\nfunction resetValidity(this: HTMLInputElement) {\n\tthis.setCustomValidity('');\n}\n\nfunction getMsg(message: string, key?: keyof OUserSelfFormsMsgs, map?: OUserSelfFormsMsgs): string {\n\treturn map && key && map[key] ? map[key] : message;\n}\n\nfunction showMsg(msgElt: HTMLElement, message?: string, key?: keyof OUserSelfFormsMsgs, map?: OUserSelfFormsMsgs, msgType?: string) {\n\tif (map && key && map[key]) message = map[key];\n\tif (msgElt) {\n\t\tDOM.setAttr(msgElt, \"data-type\", msgType);\n\t\tif (message) {\n\t\t\tmsgElt.innerHTML = message;\n\t\t\tmsgElt.hidden = false;\n\t\t} else {\n\t\t\tmsgElt.innerHTML = '';\n\t\t\tmsgElt.hidden = true;\n\t\t}\n\t} else if (message) {\n\t\talert(message);\n\t}\n}\n\nfunction checkForm(form: HTMLFormElement) {\n\t//sécurité car si mauvaise config il y a un risque que le form affiche les params en QS dans l'URL\n\t// à la validation dont le password (car la config du form.onsubmit avec preventDefault sans effet)...\n\tif (!(form instanceof HTMLFormElement)) {\n\t\tdocument.body.textContent = \"Configuration error\";\n\t\tthrow Error(\"form is not a HTMLFormElement : \" + form);\n\t}\n\tif (form.method !== 'post') form.method = 'post'; //en cas d'exception avant l'init form.onsubmit, évite la publication du password dans l'URL\n}\n"]}