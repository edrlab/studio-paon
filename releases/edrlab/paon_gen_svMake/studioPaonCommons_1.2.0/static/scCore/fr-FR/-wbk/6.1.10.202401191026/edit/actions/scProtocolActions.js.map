{"version":3,"sources":["/@back@/edit/actions/scProtocolActions.tsx"],"names":["ENodeType","SCPRTC","findElementWedlet","WEDLET","XA","isWedletSingleElt","WedFocusNodeScProtocolExec","[object Object]","params","reg","emitter","ev","vEltWedlet","wedMgr","wedlet","docHolder","selectOnXmlRel","node","findDomLast","wedAnchor","getDocument","nodeType","element","selectedNode","querySelector","focusWedlet","fromNode","selectOnXml","selectOnWedRel","wedParent","_a","vWdl","focus","selectOnWed","rootWedlet","registerEditProtocolsActions","addToList","LIST_EXECUTORS"],"mappings":"OACaA,cAAe;;OAEoBC,WAAO;OAC/CC,kBAAmCC,WAAO;OAC1CC,OAAG;OACHC,sBAAkB;OAwBpB,MAAOC,2BACZC,cAAcC,OAAWC,IAAmBC,QAAkBC;AAC7D,MAAMC,WAA6BV,kBAAkBQ,QAAS;AAC9D,GAAIE,WAAY,CACf,MAAMC,OAASD,WAAWE,OAAOD;AACjC,MAAME,UAAYF,OAAOE;AACzB,GAAIP,OAAOQ,eAAgB,CAC1B,MAAMC,KAAab,GAAGc,YAAYN,WAAWE,OAAOK,UAAWJ,UAAUK;AACzE,GAAIH,KAAKI,WAAarB,UAAUsB,QAAS,CACxC,IAAIC,aAAsBN,KAAiBO,cAAchB,OAAOQ;AAChE,GAAIO,aAAcpB,OAAOsB,YAAYrB,GAAGsB,SAASH,cAAeV,cAE3D,GAAIL,OAAOmB,YAAa,CAC9B,IAAIJ,aAAqBR,UAAUK,cAAcI,cAAchB,OAAOmB;AACtE,GAAIJ,aAAcpB,OAAOsB,YAAYrB,GAAGsB,SAASH,cAAeV,aAC1D,GAAIL,OAAOoB,eAAgB,CAEjC,IAAId,OAASF,WAAWE;AACxB,MAAOA,SAAWT,kBAAkBS,QAASA,OAASA,OAAOe;AAC7D,GAAIxB,kBAAkBS,QAAS,CAC9B,IAAIS,cAAqBO,GAAAhB,OAAOQ,WAAO,MAAAQ,UAAA,OAAA,EAAAA,GAAEN,cAAchB,OAAOoB;AAC9D,MAAMG,KAAuB7B,kBAAkBqB,aAAc;AAC7DQ,KAAKC,cAEA,GAAIxB,OAAOyB,YAAa,CAC9B,MAAMC,WAAarB,OAAOqB;AAC1B,GAAI7B,kBAAkB6B,YAAa,CAClC,IAAIX,aAAqBW,WAAWZ,QAAQE,cAAchB,OAAOyB;AACjE,GAAIV,aAAcpB,OAAOsB,YAAYrB,GAAGsB,SAASH,cAAeV,cAGjEV,OAAOsB,YAAYrB,GAAGsB,SAASd,YAAaC,iBAS1C,SAAUsB,6BAA6B1B,KAC5CA,IAAI2B,UAAUnC,OAAOoC,eAAgB,eAAgB,EAAG,IAAI/B","sourcesContent":["import {IReg, IUiEnv} from 'lib/commons/registry';\nimport {DOM, ENodeType, JSX} from \"lib/commons/xml/dom\";\nimport \"back/wsp/views/views_Perms\";\nimport {IScProtocolExecutor, JScProtocolParams, SCPRTC} from \"lib/core/scenariProtocol\";\nimport {findElementWedlet, IElementWedlet, WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {XA} from \"lib/commons/xml/xAddr\";\nimport {isWedletSingleElt} from \"back/edit/wed/wedlets/wedletSingleElt\";\n\n\n/**\n * Protocole scenari pour sélectioner un noeud de l'éditeur\n * Contexte requis : Wedlet dans les ascendants de l'emitter\n *\n * ex : scenari:{\"action\":\"wedFocusNode\",\"selector\":\"*[xxx]\"}\n */\nexport interface JWedFocusNodeScProtocolParams extends JScProtocolParams {\n\n\taction: \"wedFocusNode\"\n\n\t/** Querry selector sur le DOM XML des contenus, depuis la racine */\n\tselectOnXml?: string\n\t/** Querry selector sur le DOM XML des contenus, depuis l'élément courant du contexte d'appel */\n\tselectOnXmlRel?: string\n\t/** Querry selector sur la structure WED, depuis la racine */\n\tselectOnWed?: string\n\t/** Querry selector sur le DOM XML des contenus, depuis l'élément courant du contexte d'appel */\n\tselectOnWedRel?: string\n\n}\n\nexport class WedFocusNodeScProtocolExec<P extends JWedFocusNodeScProtocolParams> implements IScProtocolExecutor<P> {\n\tasync execute(params: P, reg: IReg<IUiEnv>, emitter: Element, ev: Event) {\n\t\tconst vEltWedlet: IElementWedlet = findElementWedlet(emitter, false);\n\t\tif (vEltWedlet) {\n\t\t\tconst wedMgr = vEltWedlet.wedlet.wedMgr;\n\t\t\tconst docHolder = wedMgr.docHolder;\n\t\t\tif (params.selectOnXmlRel) {\n\t\t\t\tconst node: Node = XA.findDomLast(vEltWedlet.wedlet.wedAnchor, docHolder.getDocument());\n\t\t\t\tif (node.nodeType === ENodeType.element) {\n\t\t\t\t\tlet selectedNode: Node = (node as Element).querySelector(params.selectOnXmlRel);\n\t\t\t\t\tif (selectedNode) WEDLET.focusWedlet(XA.fromNode(selectedNode), wedMgr);\n\t\t\t\t}\n\t\t\t} else if (params.selectOnXml) {\n\t\t\t\tlet selectedNode: Node = docHolder.getDocument().querySelector(params.selectOnXml);\n\t\t\t\tif (selectedNode) WEDLET.focusWedlet(XA.fromNode(selectedNode), wedMgr);\n\t\t\t} else if (params.selectOnWedRel) {\n\t\t\t\t//const vEltWedlet : IElementWedlet = findWedlet(emitter, false);\n\t\t\t\tlet wedlet = vEltWedlet.wedlet;\n\t\t\t\twhile (wedlet && !isWedletSingleElt(wedlet)) wedlet = wedlet.wedParent;\n\t\t\t\tif (isWedletSingleElt(wedlet)) {\n\t\t\t\t\tlet selectedNode: Node = wedlet.element?.querySelector(params.selectOnWedRel);\n\t\t\t\t\tconst vWdl: IElementWedlet = findElementWedlet(selectedNode, false);\n\t\t\t\t\tvWdl.focus();\n\t\t\t\t}\n\t\t\t} else if (params.selectOnWed) {\n\t\t\t\tconst rootWedlet = wedMgr.rootWedlet;\n\t\t\t\tif (isWedletSingleElt(rootWedlet)) {\n\t\t\t\t\tlet selectedNode: Node = rootWedlet.element.querySelector(params.selectOnWed);\n\t\t\t\t\tif (selectedNode) WEDLET.focusWedlet(XA.fromNode(selectedNode), wedMgr);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tWEDLET.focusWedlet(XA.fromNode(vEltWedlet), wedMgr);\n\t\t}\n\t}\n}\n\n/**\n * Ajoute les différents exécutors au registre\n * @param reg\n */\nexport function registerEditProtocolsActions(reg: IReg<any>) {\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'wedFocusNode', 1, new WedFocusNodeScProtocolExec());\n}"]}