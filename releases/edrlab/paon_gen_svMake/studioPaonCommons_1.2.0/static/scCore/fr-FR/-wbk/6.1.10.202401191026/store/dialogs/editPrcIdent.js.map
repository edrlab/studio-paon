{"version":3,"sources":["/@back@/store/dialogs/editPrcIdent.tsx"],"names":["BaseElement","BASIS","isEltInitableAsyncPending","Button","POPUP","REG","DOM","JSX","DOMSH","ResTypesTree","URLTREE","FORMS","EditPrcIdent","holder","this","_holder","findPopupableParent","[object Object]","init","reg","findReg","config","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","preview","_a","type","startsWith","img","appendChild","createElement","id","src","URL","createObjectURL","classList","add","mainTag","resTypesTree","initialize","newInit","addEventListener","onResTypeSelected","identForm","doLabel","doBtnLabel","footer","msgArea","doBtn","label","class","ui-context","onclick","onDoBtn","cancelBtn","onCancelBtn","onkeypress","onKeypress","countResTypesUntil","selectFirst","setHidden","parentElement","prcFound","defaultPrc","findAndSelect","resType","prc","leafName","matchResName","defaultRes","env","resTypes","defaultResFileType","defaultFolder","defaultFolderType","checkAsyncValidity","metas","processing","formToJson","reportValidity","ev","stopImmediatePropagation","newResType","getSelectedResType","currentIdentFormArea","textContent","setCustomMsg","disabled","identFormArea","resForm","currentTarget","targetPath","ctx","universe","newDepotResUiRegInCreation","folderPath","extractParentPath","folderUi","extractUnversionedLeafName","leafUi","version","extractVersionLeaf","versionUi","resUpdatable","buildControlLabel","callback","form","loadBody","initializedAsync","otherMetasIn","jsonToForm","findFirstFocusable","focus","popup","updatePosition","key","r","makeCidParams","close","me","findHost","resState","msg","msgLevel","registerSkin","customElements","define"],"mappings":"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","sourcesContent":["import {BaseElement, BASIS, isEltInitableAsyncPending, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {Button} from \"back/commons/widgets/buttons\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IDepotUiEnv} from \"lib/store/depot\";\nimport {IResFormCtx, IResFormIdentCtx, IResType, JCidInteractionMetas, JCidMetas, OResFormIdentConfig, resPath} from \"lib/store/res\";\nimport {OResTypesTreeInit, ResTypesTree} from \"back/store/widgets/resTypesTree\";\nimport {URLTREE} from \"lib/store/urlTree\";\nimport {ICloseable} from \"back/commons/widgets/popupable\";\nimport {FORMS} from \"lib/commons/forms\";\nimport {IArea} from \"lib/commons/areas\";\n\n/**\n * Dialogue d'édition du processing et des metas identificatoires\n * Ce dialogue n'exécute pas le push cid mais retourne les paramètres Cid.\n * Ce dialogue fournit en retour un JCidMetas avec a minima les propriétés suivantes :\n * - path (path versionné si VCB)\n * - processing\n * - olderResId (= \"\" en mode concurence lâche, \"000000A000\" si connu, undefined si aucun prédécesseur pour la reprise des metas)\n * - et toutes le metas annexes constitutives de l'identité\n */\nexport interface EditPrcIdent extends BaseElement {\n\tinitialize(init: OEditPrcIdentInit): this\n}\n\nexport interface OEditPrcIdentInit extends OSkinableInit, OResFormIdentConfig {\n\n\treg?: IReg<IDepotUiEnv>\n\n\n\t/** Metas prédéfinies (configuration de l'identForm via CID) */\n\totherMetasIn?: JCidInteractionMetas\n\n\n\t/** Configuration de l'affichage des ResTypes. */\n\tresTypesTree?: OResTypesTreeInit\n\n\t/** Processing à sélectionner par défaut dans la liste définie par resTypesTree. */\n\tdefaultPrc?: string\n\n\t/**\n\t * Label du bouton, \"Importer\" par défaut.\n\t * Si fonction dynamique, réévalué après chaque changement de targetPath ou de processing.\n\t */\n\tdoBtnLabel?: string | ((widget: EditPrcIdent) => string)\n\n\t/** Contenu prédéfini pour preview */\n\tpreview?: File | Blob\n\n\t/** Contexte d'appel auprès duquel retourner le résultat avec toutes les metas indentificatoires. */\n\tholder?: ICloseable<JCidMetas | null>\n}\n\nexport class EditPrcIdent extends BaseElement {\n\n\t/** Contexte */\n\treg: IReg<IDepotUiEnv>;\n\n\tconfig: OEditPrcIdentInit;\n\n\t/** Nom dynamique, du brtn de validation. */\n\tdoBtnLabel?: (widget: EditPrcIdent) => string\n\n\t/** Eléments UI */\n\tmainTag: HTMLElement;\n\tmsgArea: MsgLabel;\n\tdoBtn: Button;\n\tcancelBtn: Button;\n\n\tresTypesTree: ResTypesTree;\n\tidentForm: HTMLFormElement;\n\n\t/** Etats internes */\n\tresType: IResType;\n\tcurrentIdentFormArea: IArea<IResFormCtx>;\n\ttargetPath?: resPath;\n\n\tget holder(): ICloseable<Pick<JCidMetas, \"path\" | \"processing\" | \"olderResId\"> | null> {return this._holder || POPUP.findPopupableParent(this)}\n\n\t_holder?: ICloseable<Pick<JCidMetas, \"path\" | \"processing\" | \"olderResId\"> | null>\n\n\tprotected _initialize(init: OEditPrcIdentInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis._holder = init.holder;\n\t\tthis.config = init;\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin(\"standard-dialog\", sr);\n\t\tthis.reg.installSkin(\"form-control-areas\", sr); //Pour les inputs de l'identForm\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tif (init.preview && init.preview.type?.startsWith(\"image/\")) {\n\t\t\tconst img = sr.appendChild(<img id=\"preview\"/>) as HTMLImageElement;\n\t\t\timg.src = URL.createObjectURL(init.preview);\n\t\t\tthis.classList.add(\"preview\");\n\t\t}\n\t\tthis.mainTag = sr.appendChild(<main/>);\n\t\tthis.resTypesTree = new ResTypesTree().initialize(BASIS.newInit(init.resTypesTree, this.reg));\n\t\tthis.mainTag.appendChild(<div id=\"resTypes\"><label>Traitement</label>{this.resTypesTree}</div>);\n\t\tthis.addEventListener('grid-select', this.onResTypeSelected);\n\t\tthis.identForm = this.mainTag.appendChild(<form/>) as HTMLFormElement;\n\t\tlet doLabel: string;\n\t\tif (typeof init.doBtnLabel === \"function\") {\n\t\t\tthis.doBtnLabel = init.doBtnLabel;\n\t\t\tdoLabel = \"\";\n\t\t} else {\n\t\t\tdoLabel = init.doBtnLabel || \"Importer\";\n\t\t}\n\t\tconst footer = sr.appendChild(<div id=\"footer\"/>);\n\t\tthis.msgArea = footer.appendChild(<c-msg id=\"msg\"/>) as MsgLabel;\n\t\tthis.doBtn = footer.appendChild(<Button id=\"import\" label={doLabel} class=\"default\" ui-context=\"dialog\" onclick={this.onDoBtn}/>) as Button;\n\t\tthis.cancelBtn = footer.appendChild(<Button id=\"cancel\" label=\"Annuler\" ui-context=\"dialog\" onclick={this.onCancelBtn}/>) as Button;\n\t\tthis.onkeypress = this.onKeypress;\n\n\t\t//Select du meilleur resType.\n\t\tif (this.resTypesTree.countResTypesUntil(2) === 1) {\n\t\t\t//Un seul ResType dans la liste.\n\t\t\t//On sélectionne le 1er et on masque la zone de sélection du resType.\n\t\t\tthis.resTypesTree.selectFirst();\n\t\t\tDOM.setHidden(this.resTypesTree.parentElement, true);\n\t\t} else {\n\t\t\tthis.classList.add(\"resTypes\");\n\t\t\tlet prcFound = null;\n\t\t\tif (init.defaultPrc) {\n\t\t\t\tprcFound = this.resTypesTree.findAndSelect((resType) => resType.prc === init.defaultPrc);\n\t\t\t}\n\t\t\tif (!prcFound && init.leafName) {\n\t\t\t\t//sniff le resType\n\t\t\t\tprcFound = this.resTypesTree.findAndSelect((resType) => resType.matchResName(init.leafName));\n\t\t\t}\n\t\t\tif (!prcFound) {\n\t\t\t\t//Res voir Folder par défaut\n\t\t\t\tconst defaultRes = this.reg.env.resTypes.defaultResFileType;\n\t\t\t\tif (defaultRes) prcFound = this.resTypesTree.findAndSelect((resType) => resType === defaultRes);\n\t\t\t\tif (!prcFound) {\n\t\t\t\t\tconst defaultFolder = this.reg.env.resTypes.defaultFolderType;\n\t\t\t\t\tif (defaultFolder) prcFound = this.resTypesTree.findAndSelect((resType) => resType === defaultFolder);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _refresh() {\n\t\t//appelé une fois inséré dans l'arbre.\n\t\t// Promise.resolve().then(() => {\n\t\t// \t//En asynch car dialog.showModal() écrase le focus.\n\t\t// \tif (!this.resType) {\n\t\t// \t\t//restype non trouvé, on focus le choix du restype\n\t\t// \t\tthis.resTypesTree.grid.focus();\n\t\t// \t} else if (this.nameInput && !this.nameInput.readOnly) {\n\t\t// \t\tthis.nameInput.focus();\n\t\t// \t} else {\n\t\t// \t\tconst toFocus = DOMSH.findFlatNext(this.shadowRoot, this.shadowRoot, DOM.IS_focusable);\n\t\t// \t\tif (toFocus) toFocus.focus();\n\t\t// \t}\n\t\t// });\n\t}\n\n\tasync makeCidParams(): Promise<JCidMetas> {\n\t\tif (this.resType) {\n\t\t\tif (await FORMS.checkAsyncValidity(this.identForm)) {\n\t\t\t\tconst metas: JCidMetas = {\n\t\t\t\t\tprocessing: this.resType.prc\n\t\t\t\t}\n\t\t\t\tFORMS.formToJson(this.identForm, metas);\n\t\t\t\treturn metas;\n\t\t\t} else {\n\t\t\t\tFORMS.reportValidity(this.identForm);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync onResTypeSelected(ev?: CustomEvent) {\n\t\tif (ev) ev.stopImmediatePropagation();\n\t\tconst newResType = this.resTypesTree.getSelectedResType();\n\t\tif (this.resType === newResType) return;\n\t\tthis.resType = newResType;\n\t\tif (this.resType == null) {\n\t\t\tthis.currentIdentFormArea = null;\n\t\t\tthis.identForm.textContent = null;\n\t\t\tif (this.resTypesTree.countResTypesUntil(1) === 0) {\n\t\t\t\tthis.msgArea.setCustomMsg(\"Aucun traitement n'est compatible\", 'error');\n\t\t\t} else {\n\t\t\t\tthis.msgArea.setCustomMsg(\"Sélectionnez un traitement dans la liste\", 'warning');\n\t\t\t}\n\t\t\tthis.doBtn.disabled = true;\n\t\t\tif (this.doBtnLabel) this.doBtnLabel(this);\n\t\t\treturn;\n\t\t}\n\t\tconst identFormArea = this.resType.resForm(\"editIdent\");\n\t\tif (this.currentIdentFormArea === identFormArea) return;\n\t\tthis.currentIdentFormArea = identFormArea;\n\t\tconst currentTarget = this.targetPath;\n\t\tconst ctx: IResFormIdentCtx = {\n\t\t\treg: this.reg.env.universe.newDepotResUiRegInCreation(this.reg, null, this.resType),\n\t\t\tfolderPath: currentTarget != null ? URLTREE.extractParentPath(currentTarget) : this.config.folderPath,\n\t\t\tfolderUi: this.config.folderUi,\n\t\t\tleafName: currentTarget != null ? URLTREE.extractUnversionedLeafName(currentTarget) : this.config.leafName,\n\t\t\tleafUi: this.config.leafUi,\n\t\t\tversion: currentTarget != null ? URLTREE.extractVersionLeaf(currentTarget) : this.config.version,\n\t\t\tversionUi: this.config.versionUi,\n\t\t\tresUpdatable: this.config.resUpdatable,\n\t\t\tbuildControlLabel: true,\n\t\t\tcallback: this\n\t\t};\n\t\tconst form = await identFormArea.loadBody(ctx);\n\t\tthis.identForm.textContent = null;\n\t\tthis.identForm.appendChild(form);\n\t\tif(isEltInitableAsyncPending(form)) await form.initializedAsync; //XXX ajouter await en récursif sur tous les nodes shadows et descendants ?\n\t\tif (this.config.otherMetasIn) FORMS.jsonToForm(this.config.otherMetasIn, this.identForm);\n\t\tFORMS.findFirstFocusable(form)?.focus();\n\t\tthis.msgArea.setCustomMsg(null);\n\t\tthis.doBtn.disabled = false;\n\t\tif (this.doBtnLabel) this.doBtnLabel(this);\n\t\tconst popup = POPUP.findPopupableParent(this);\n\t\tif (popup) popup.updatePosition();\n\t}\n\n\tasync onKeypress(ev: KeyboardEvent) {\n\t\tif (ev.key === \"Enter\") {\n\t\t\tconst r = await this.makeCidParams();\n\t\t\tif (r) this.holder.close(r);\n\t\t}\n\t}\n\n\tonCancelBtn(this: Button) {\n\t\tconst me = DOMSH.findHost<EditPrcIdent>(this);\n\t\tme.holder.close();\n\t}\n\n\tasync onDoBtn(this: Button) {\n\t\tif (this.disabled) return;\n\t\tconst me = DOMSH.findHost<EditPrcIdent>(this);\n\t\tconst r = await me.makeCidParams();\n\t\tif (r) me.holder.close(r);\n\t}\n\n\t/** cf IResFormIdentCtx.callback */\n\tidentState(resState: 'invalid' | 'pending' | 'exist' | 'free' | 'inTrash', targetPath?: resPath | null, msg?: string, msgLevel?: 'info' | 'error' | 'warning' | 'valid') {\n\t\tif (this.identForm) {\n\t\t\tthis.msgArea.setCustomMsg(msg, msgLevel);\n\t\t\tthis.doBtn.disabled = resState === \"invalid\";\n\t\t\tif (this.doBtnLabel) this.doBtnLabel(this);\n\t\t\tif (resState === 'pending') FORMS.checkAsyncValidity(this.identForm);\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('store-edit-prcident', 1, /* language=CSS */ `\n\t#preview {\n\t\tflex: 1 3 auto;\n\t\talign-self: center;\n\t\tmax-width: 60vw;\n\t\tmax-height: 10em;\n\t\t/*min-height: 2em;*/\n\t\t/*height: 5em;*/\n\t\tmargin: .5em;\n\t}\n\n\tmain {\n\t\tflex: 1000;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tflex-direction: column;\n\t}\n\n\t#resTypes {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-width: 0;\n\t\tmin-height: 5em;\n\t\tpadding: .3em;\n\t}\n\n\t#preview + #resTypes {\n\t\tborder-top: 1px solid var(--border-color);\n\t}\n\n\tstore-restypes-tree {\n\t\tborder: 1px solid var(--border-color);\n\t}\n\n\t#resTypes[hidden] {\n\t\tdisplay: none;\n\t}\n\n\tlabel {\n\t\tcolor: var(--alt1-color);\n\t}\n\n  :focus-visible {\n\t\toutline: var(--focus-outline);\n\t}\n\n\tform {\n\t\tmargin: .5em;\n\t}\n\n\t#msg {\n\t\tflex: 1;\n\t\tmargin: 0 .5em;\n\t\tjustify-content: start;\n\t}\n`);\n\ncustomElements.define(\"store-edit-prcident\", EditPrcIdent);"]}