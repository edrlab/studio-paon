{"version":3,"sources":["/@back@/store/views/resAncView.tsx"],"names":["BaseAreaView","REG","DOMSH","DOM","JSX","URLTREE","BASIS","InfoFocusRes","ResAncView","[object Object]","init","this","reg","areaContext","findReg","super","_initialize","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","_a","env","nodeInfosChange","on","_ancLstn","refresh","nodeInfos","clearContent","shadowRoot","draw","nodeInfosPending","then","bind","nodes","urlAnc","setHidden","sr","nodePath","node","appendLeafToPath","nodeType","resTypes","getResTypeFor","version","prcVersionning","createElement","class","resVersion","appendChild","onclick","onClickEntry","data-path","src","resIcon","resName","ev","me","findHost","infoBroker","dispatchInfo","getAttribute","closed","removeListener","registerSkin","customElements","define"],"mappings":"OAAQA,iBAAgC;OAEbC,QAAI;OACvBC,UAAM;OACNC,IAAKC,QAAI;OACGC,YAAQ;OACpBC,UAAM;OACNC,iBAAa;OAWf,MAAOC,mBAAmBR,aAGrBS,YAAYC;AACrBC,KAAKC,IAAMF,KAAKG,YAAYD,KAAOD,KAAKG,QAAQJ;AAChDK,MAAMC,YAAYN;AAClBC,KAAKM,aAAaf,MAAMgB;AACxBP,KAAKQ,oBAAoBR,KAAKS,UAAWV,OAEzCW,GAAAV,KAAKC,IAAIU,IAAIC,mBAAe,MAAAF,UAAA,OAAA,EAAAA,GAAEG,GAAG,eAAiBb,KAAKc,SAAW,KAAOd,KAAKe,YAKrEjB,WACT,MAAMa,IAAMX,KAAKC,IAAIU;AACrB,GAAIA,IAAIK,UAAW,CAClBrB,MAAMsB,aAAajB,KAAKkB;AACxBlB,KAAKmB,YACC,GAAIR,IAAIS,iBAAkB,CAChCT,IAAIS,iBAAiBC,KAAKrB,KAAKe,QAAQO,KAAKtB,WACtC,CAENL,MAAMsB,aAAajB,KAAKkB,aAIhBpB,OACT,IAAIyB,MAAQvB,KAAKC,IAAIU,IAAIK,UAAUQ;AACnChC,IAAIiC,UAAUzB,KAAMuB,OAAS;AAC7B,GAAIA,OAAS,KAAM;AACnB,MAAMG,GAAK1B,KAAKkB;AAChB,IAAIS,SAAW;AACf,IAAK,IAAIC,QAAQL,MAAO,CACvBI,SAAWjC,QAAQmC,iBAAiBF,SAAUC;AAC9C,MAAME,SAAW9B,KAAKC,IAAIU,IAAIoB,SAASC,cAAcJ;AAErD,IAAIK;AACJ,GAAIH,SAASI,iBAAmB,MAAO,CACtCD,QAAUxC,IAAA0C,cAAA,OAAA,CAAMC,MAAM,WAAWN,SAASO,WAAWT,OAEtDF,GAAGY,YAAY7C,IAAA0C,cAAA,OAAA,CAAMC,MAAM,OAAM3C,IAAA0C,cAAA,WAAA,CAAUC,MAAM,MAAMG,QAASvC,KAAKwC,aAAYC,YAAad,UAC7FlC,IAAA0C,cAAA,MAAA,CAAKC,MAAM,OAAOM,IAAKZ,SAASa,QAAQf,QACxCnC,IAAA0C,cAAA,OAAA,CAAMC,MAAM,QAAQN,SAASc,QAAQhB,OACpCK,YAKJnC,aAAsC+C,IACrC,MAAMC,GAAKvD,MAAMwD,SAAqB/C;AACtC,MAAMgD,WAAaF,GAAG7C,IAAIU,IAAIqC;AAC9B,GAAIA,WAAYA,WAAWC,aAAa,IAAIrD,aAAaI,KAAKkD,aAAa,cAAeJ,IAG3FhD,aAAaqD;AACZ,GAAIA,QAAUnD,KAAKc,SAAU,EAC5BJ,GAAAV,KAAKC,IAAIU,IAAIC,mBAAe,MAAAF,UAAA,OAAA,EAAAA,GAAE0C,eAAe,eAAgBpD,KAAKc,YAKrExB,IAAIW,IAAIoD,aAAa,gBAAiB,EAAsB;AAwC5DC,eAAeC,OAAO,gBAAiB1D","sourcesContent":["import {BaseAreaView, OBaseAreaViewInit} from \"lib/commons/views\";\nimport {IDepotResUiEnv, IDepotUiEnv} from \"lib/store/depot\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {JNodeInfos, URLTREE} from \"lib/store/urlTree\";\nimport {BASIS} from \"back/commons/basis\";\nimport {InfoFocusRes} from \"lib/store/res\";\n\n\nexport interface ResAncView extends BaseAreaView<IRegPointer<IDepotResUiEnv>> {\n\tinitialize(init: OResAncViewInit): this\n}\n\nexport interface OResAncViewInit extends OBaseAreaViewInit<IRegPointer<IDepotResUiEnv>> {\n\t//listenAncChanges?: boolean\n}\n\nexport class ResAncView extends BaseAreaView<IRegPointer<IDepotResUiEnv>> {\n\treg: IReg<IDepotResUiEnv & IDepotUiEnv>;\n\n\tprotected _initialize(init: OResAncViewInit) {\n\t\tthis.reg = init.areaContext.reg || this.findReg(init);\n\t\tsuper._initialize(init); //init this.area, this.areaContext\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\t//if (init.listenAncChanges)\n\t\tthis.reg.env.nodeInfosChange?.on(\"urlAncChange\", (this._ancLstn = () => {this.refresh()}));\n\t}\n\n\tprotected _ancLstn: (niNew: JNodeInfos, ancOld: JNodeInfos[]) => void;\n\n\tprotected _refresh() {\n\t\tconst env = this.reg.env;\n\t\tif (env.nodeInfos) {\n\t\t\tBASIS.clearContent(this.shadowRoot);\n\t\t\tthis.draw();\n\t\t} else if (env.nodeInfosPending) {\n\t\t\tenv.nodeInfosPending.then(this.refresh.bind(this));\n\t\t} else {\n\t\t\t//Pas de nodeInfos, ni de chargement en cours => erreur\n\t\t\tBASIS.clearContent(this.shadowRoot);\n\t\t}\n\t}\n\n\tprotected draw() {\n\t\tlet nodes = this.reg.env.nodeInfos.urlAnc;\n\t\tDOM.setHidden(this, nodes == null);\n\t\tif (nodes == null) return; //La config de l'urlTree renderer ne retourne pas les ancêtres dans le nodeInfo.\n\t\tconst sr = this.shadowRoot;\n\t\tlet nodePath = null;\n\t\tfor (let node of nodes) {\n\t\t\tnodePath = URLTREE.appendLeafToPath(nodePath, node);\n\t\t\tconst nodeType = this.reg.env.resTypes.getResTypeFor(node);\n\t\t\t//todo: version ?\n\t\t\tlet version: HTMLElement;\n\t\t\tif (nodeType.prcVersionning === \"VCB\") {\n\t\t\t\tversion = <span class=\"version\">{nodeType.resVersion(node)}</span>;\n\t\t\t}\n\t\t\tsr.appendChild(<span class=\"sep\"><c-button class=\"anc\" onclick={this.onClickEntry} data-path={nodePath}>\n\t\t\t\t<img class=\"icon\" src={nodeType.resIcon(node)}/>\n\t\t\t\t<span class=\"name\">{nodeType.resName(node)}</span>\n\t\t\t\t{version}\n\t\t\t</c-button></span>);\n\t\t}\n\t}\n\n\tonClickEntry(this: HTMLButtonElement, ev: MouseEvent) {\n\t\tconst me = DOMSH.findHost<ResAncView>(this);\n\t\tconst infoBroker = me.reg.env.infoBroker;\n\t\tif (infoBroker) infoBroker.dispatchInfo(new InfoFocusRes(this.getAttribute('data-path')), me);\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\tif (closed && this._ancLstn) {\n\t\t\tthis.reg.env.nodeInfosChange?.removeListener(\"urlAncChange\", this._ancLstn);\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('store-res-anc', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t  flex-flow: wrap;\n  }\n\n  .sep {\n\t  display: flex;\n  }\n\n  .sep::after {\n\t  content: \"❯\";\n\t  display: flex;\n\t  align-items: center;\n\t  color: var(--alt1-color);\n  }\n\n  .sep:lang(ar)::after {\n\t  content: \"❮\";\n  }\n\n  .name {\n\t  margin-inline-start: .2em;\n\t  word-break: normal;\n  }\n\n  .version {\n\t  color: var(--alt1-color);\n  }\n\n  .version::before {\n\t  content: '@';\n  }\n\n  .icon {\n\t  filter: var(--filter);\n\t  height: var(--icon-size);\n  }\n`);\n\ncustomElements.define('store-res-anc', ResAncView);"]}