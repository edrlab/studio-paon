{"version":3,"sources":["/@back@/styler/dialogs/skinSelector.tsx"],"names":["BaseElement","BASIS","Button","POPUP","REG","DOM","JSX","DOMSH","GridSmall","GridColDef","CellBuilderIconLabel","STYLER","GridDataHolderJsonTree","SKINPACK","SkinSelectorForSkinClassStl","[object Object]","this","skinDH","init","reg","findReg","wsp","env","conf","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","skinGrid","appendChild","initialize","Object","assign","selType","autoSelOnFocus","columnDefs","setFlex","setCellBuilder","setIconKey","setDescriptionFunc","row","getData","dataHolder","setOpenAll","hideHeaders","lineDrawer","skinOver","emptyBody","createElement","label","level","newInit","addEventListener","_onGridSelect","refreshDatasTree","footer","id","msgArea","selectBtn","buttonLabel","class","ui-context","onclick","onSelectBtn","onCancelBtn","startSkinSel","selectBySkin","_refresh","selection","getSelectedSkin","disabled","datas","Map","currentSkinClassStl","getSkinClassStl","skinClassStl","currentSkinClass","skinClass","skinsFromSkinsPacks","Set","skinsFromSkinsPacksEntries","list","listSkinsFromSkinsPacks","universe","packServer","uiRoot","lang","forEach","elt","has","add","push","code","name","title","iconUrl","getIconUrl","resUrl","getSkinUrl","length","set","isOwner","ch","skinMatchFilter","skin","equals","getRegisteredSkins","call","owner","key","version","ownerEntry","get","wspServer","getSrcUrl","setDatas","Array","from","values","me","findHost","onSelChange","getRow","getSelectedRow","rowDatas","skinCode","selectedRows","i","c","countRows","skinRow","setSelectedRows","clearSel","msg","allowSelect","textContent","findPopupableParent","close","r","visitor","options","line","isOwnerRow","ownerVersion","setAttrBool","registerSkin","customElements","define"],"mappings":"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","sourcesContent":["import {BaseElement, BASIS, OSkinableInit} from \"back/commons/basis\";\nimport {Button, ButtonActions} from \"back/commons/widgets/buttons\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {IView, IViewsContainer, OViewVisitOptions} from \"lib/commons/views\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {Grid, GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridColDef, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {CellBuilderIconLabel, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {RegisteredSkin, STYLER} from \"lib/styler/styler\";\nimport {IWspUiEnv, Wsp} from \"lib/wsp/wsp\";\nimport {GridDataHolderJsonTree} from \"back/commons/widgets/tree\";\nimport {SKINPACK} from \"lib/wsp/pack\";\nimport JSkinPackSkin = STYLER.JSkinPackSkin;\n\n/**\n * Dialogue de sélection d'un skin présent dans le contexte, associé à un skinCLassStyler donné\n * @return : skin sélectionné, ou null\n */\nexport interface SkinSelectorForSkinClassStl extends BaseElement, IView {\n\tinitialize(init: OSkinSelectorForSkinClassStlInit): this\n}\n\nexport interface OSkinSelectorForSkinClassStlInit extends OSkinableInit {\n\tskinClassStl: string\n\tskinGrid?: OGridSmallInit\n\tbuttonLabel?: string\n\tonSelChange?: (sel: OSkinSelectorEntry) => void\n\tstartSkinSel?: string;\n\t/** Retourne true si le skin est conservé */\n\tskinMatchFilter?: (skin: RegisteredSkin) => boolean\n}\n\nexport interface OSkinSelectorEntry {\n\tcode: string\n\tname: string\n\ticonUrl: string\n\tresUrl: string\n}\n\nexport interface OSkinSelectorOwner extends OSkinSelectorEntry {\n\tversion: string\n\tch: OSkinSelectorEntry[]\n\tisOwner: true\n}\n\nexport class SkinSelectorForSkinClassStl extends BaseElement implements IViewsContainer, IGridLineDrawer {\n\treg: IReg<IWspUiEnv>;\n\twsp: Wsp;\n\n\tprotected conf: OSkinSelectorForSkinClassStlInit;\n\n\tprotected skinGrid: GridSmall;\n\tprotected skinDH = new GridDataHolderJsonTree<OSkinSelectorOwner | OSkinSelectorEntry>('ch');\n\n\tmsgArea: HTMLElement;\n\tselectBtn: ButtonActions<SkinSelectorForSkinClassStl>;\n\n\tprotected _initialize(init: OSkinSelectorForSkinClassStlInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.wsp = this.reg.env.wsp;\n\t\tthis.conf = init;\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tREG.reg.installSkin(\"standard-dialog\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tthis.skinGrid = sr.appendChild(new GridSmall().initialize(Object.assign({\n\t\t\tselType: 'mono',\n\t\t\tautoSelOnFocus: \"first\",\n\t\t\tcolumnDefs: [\n\t\t\t\t//new GridColDef('icon').setMinWidth('60px').setCellBuilder(new CellBuilderSkinImage()),\n\t\t\t\tnew GridColDef('value')\n\t\t\t\t\t.setFlex('1rem', 1, 1)\n\t\t\t\t\t.setCellBuilder(new CellBuilderIconLabel('name').setIconKey('iconUrl').setDescriptionFunc((row)=>row.getData(\"name\")))\n\t\t\t],\n\t\t\tdataHolder: this.skinDH.setOpenAll(true),\n\t\t\thideHeaders: true,\n\t\t\tlineDrawer: this,\n\t\t\tskinOver: 'styler-skins-selector/grid',\n\t\t\temptyBody: (): Node => <c-msg label=\"Aucun skin compatible installé\" level=\"info\"/>\n\t\t}, BASIS.newInit(init.skinGrid, this.reg))));\n\n\t\tthis.skinGrid.addEventListener(\"grid-select\", this._onGridSelect);\n\n\t\tthis.refreshDatasTree();\n\n\t\tconst footer = sr.appendChild(<div id=\"footer\"/>);\n\t\tthis.msgArea = footer.appendChild(<div id=\"msg\"/>);\n\t\tthis.selectBtn = footer.appendChild(<Button id=\"select\" label={init.buttonLabel || \"Sélectionner\"} class=\"default\" ui-context=\"dialog\" onclick={this.onSelectBtn}/>) as ButtonActions<SkinSelectorForSkinClassStl>;\n\t\tfooter.appendChild(<Button id=\"cancel\" label=\"Annuler\" ui-context=\"dialog\" onclick={this.onCancelBtn}/>);\n\n\t\tif (init.startSkinSel) this.selectBySkin(init.startSkinSel);\n\n\t\tthis._refresh();\n\t}\n\n\t_refresh() {\n\t\tconst selection = this.getSelectedSkin();\n\t\tthis.selectBtn.disabled = !selection;\n\t}\n\n\t/**\n\t * Calcul des datas du tree :\n\t * \t- skins issus des wspDef/extDef activés\n\t * \t- skins issus des skinPack\n\t * @private\n\t */\n\tprivate async refreshDatasTree(): Promise<void> {\n\t\tconst datas: Map<String, OSkinSelectorOwner> = new Map();\n\t\tconst currentSkinClassStl = STYLER.getSkinClassStl(this.wsp, this.conf.skinClassStl);\n\t\tconst currentSkinClass = currentSkinClassStl?.skinClass(this.wsp);\n\n\t\t// - Skins issus des skinPack\n\t\tif (currentSkinClassStl) {\n\t\t\tconst skinsFromSkinsPacks: Set<JSkinPackSkin> = new Set();\n\t\t\tconst skinsFromSkinsPacksEntries: OSkinSelectorEntry[] = [];\n\t\t\tconst list = await STYLER.listSkinsFromSkinsPacks(this.reg.env.universe.packServer, currentSkinClassStl.class, this.reg.env.uiRoot.lang);\n\t\t\tlist.forEach((elt) => {\n\t\t\t\tif (!skinsFromSkinsPacks.has(elt)) {\n\t\t\t\t\tskinsFromSkinsPacks.add(elt);\n\t\t\t\t\tskinsFromSkinsPacksEntries.push({\n\t\t\t\t\t\tcode: elt.code,\n\t\t\t\t\t\tname: elt.title,\n\t\t\t\t\t\ticonUrl: SKINPACK.getIconUrl(this.reg.env.universe.packServer, elt.code),\n\t\t\t\t\t\tresUrl: STYLER.getSkinUrl(this.reg.env.universe.packServer, elt.code, currentSkinClassStl.class, this.reg.env.uiRoot.lang)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (skinsFromSkinsPacksEntries.length)\n\t\t\t\tdatas.set('_skinSet', {\n\t\t\t\t\tisOwner: true,\n\t\t\t\t\tname: 'Habillages graphiques installés',\n\t\t\t\t\tch: skinsFromSkinsPacksEntries\n\t\t\t\t} as OSkinSelectorOwner)\n\t\t}\n\n\t\t// - Skins apportés par des extDef/wspDef\n\t\tfunction skinMatchFilter(this: SkinSelectorForSkinClassStl, skin: RegisteredSkin): boolean {\n\t\t\tif (currentSkinClass && !currentSkinClass.equals(skin.skinClass(this.wsp)))\n\t\t\t\treturn false;\n\t\t\tif (this.conf.skinMatchFilter) return this.conf.skinMatchFilter(skin);\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (const skin of await STYLER.getRegisteredSkins(this.wsp, [currentSkinClassStl.class])) {\n\t\t\tif (skinMatchFilter.call(this, skin)) {\n\t\t\t\tif (!datas.has(skin.owner.key)) datas.set(skin.owner.key, {\n\t\t\t\t\tisOwner: true,\n\t\t\t\t\tname: skin.owner.name,\n\t\t\t\t\tversion: skin.owner.version,\n\t\t\t\t\tch: []\n\t\t\t\t} as OSkinSelectorOwner);\n\t\t\t\tconst ownerEntry = datas.get(skin.owner.key);\n\t\t\t\townerEntry.ch.push({\n\t\t\t\t\tcode: skin.code,\n\t\t\t\t\tname: skin.name,\n\t\t\t\t\ticonUrl: skin.getIconUrl(this.reg.env.wsp.wspServer),\n\t\t\t\t\tresUrl: skin.getSrcUrl(this.reg.env.wsp.wspServer)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.skinDH.setDatas(Array.from(datas.values()));\n\t}\n\n\tprotected _onGridSelect(this: Grid) {\n\t\tconst me = DOMSH.findHost<SkinSelectorForSkinClassStl>(this);\n\t\tme._refresh();\n\t\tif (me.conf.onSelChange) me.conf.onSelChange(me.getSelectedSkin());\n\t}\n\n\t/** Skin actuellement sélectionné, ou null */\n\tgetSelectedSkin(): OSkinSelectorEntry | null {\n\t\tif (this.skinDH) {\n\t\t\tconst row = this.skinDH.getRow(this.skinGrid.getSelectedRow());\n\t\t\tif (!row) return null;\n\t\t\treturn (row.rowDatas as OSkinSelectorOwner).isOwner ? null : row.rowDatas as OSkinSelectorEntry;\n\t\t}\n\t}\n\n\t/**\n\t * Sélection de l'entrée de l'arbre via un code de skin sur un tree **chargé**\n\t * Si un skin demandé n'est pas présent dans le tree, aucune erreur n'est remontée\n\t */\n\tselectBySkin(skinCode: string): void {\n\t\tif (skinCode != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.skinDH.countRows(); i < c; i++) {\n\t\t\t\tconst skinRow = this.skinDH.getRow(i).rowDatas as OSkinSelectorEntry;\n\t\t\t\tif (skinRow && skinRow.code === skinCode) {\n\t\t\t\t\tselectedRows.push(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedRows.length > 0)\n\t\t\t\tthis.skinGrid.setSelectedRows(selectedRows);\n\t\t\telse\n\t\t\t\tthis.skinGrid.clearSel();\n\t\t}\n\t}\n\n\tsetMsg(msg: string, allowSelect: boolean) {\n\t\tthis.msgArea.textContent = msg;\n\t\tthis.selectBtn.disabled = !allowSelect;\n\t}\n\n\n\tonCancelBtn(this: Button) {\n\t\tPOPUP.findPopupableParent(this).close();\n\t}\n\n\tonSelectBtn(this: Button) {\n\t\tconst me = DOMSH.findHost<SkinSelectorForSkinClassStl>(this);\n\t\tconst r = me.getSelectedSkin();\n\t\tif (r) POPUP.findPopupableParent(this).close(r);\n\t}\n\n\tvisitViews(visitor: (view: IView) => any, options?: OViewVisitOptions): any {\n\t\treturn visitor(this.skinGrid);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\treturn visitor(this.skinGrid);\n\t}\n\n\tredrawLine(row: GridDataRowJson<any>, line: HTMLElement): void {\n\t\tconst isOwnerRow = (row.rowDatas as OSkinSelectorOwner).isOwner;\n\t\tconst ownerVersion = (row.rowDatas as OSkinSelectorOwner).version;\n\t\tif (isOwnerRow && ownerVersion)\n\t\t\tline.title = ownerVersion\n\t\telse\n\t\t\tdelete line.title;\n\t\tDOM.setAttrBool(line, \"data-is-owner\", isOwnerRow);\n\t}\n}\n\nREG.reg.registerSkin('styler-skins-selector', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\theight: 50vh;\n\t\tmax-height: 30em;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\twidth: 20em;\n\t}\n\n\t#msg {\n\t\tflex: 1;\n\t\tmargin: 0 .5em;\n\t}\n`);\n\nREG.reg.registerSkin('styler-skins-selector/grid', 1, /* language=CSS */ `\n\t*[data-is-owner] {\n\t\tfont-weight: bold;\n\t}\n`);\n\ncustomElements.define(\"styler-skins-selector\", SkinSelectorForSkinClassStl);\n\n\n/** Cell builder de l'icône du skin */\n/*\nclass CellBuilderSkinImage implements ICellBuilder {\n\tgetColSortFn(): ((r1: IGridDataRow, r2: IGridDataRow) => number) | null {\n\t\treturn undefined;\n\t}\n\n\tredrawCell(row: IGridDataRow, root: HTMLElement): void {\n\t\tconst grid = DOMSH.findHost(root) as GridSmall;\n\t\tconst reg = REG.findReg(grid) as IReg<IWspEnv>;\n\t\tDOM.addClass(root, \"imgcell\")\n\t\tlet img = root.appendChild(<img src={WSP.skinSetsIconUrl(reg.env.wsp, row.getData(\"code\"))}/>);\n\t\timg.onerror = function (this: HTMLImageElement, ev: Event) {\n\t\t\tDOM.setHidden(this, true);\n\t\t};\n\t}\n}\n*/"]}