{"version":3,"sources":["/@back@/modeling/widgets/wed/richText/jsLib.tsx"],"names":["METAS","InlLinkModel","TxtElement","WEDLET","DOM","JML","XA","DocHolder","XmlStrMsg","SkRuleDoc","ITEM","SRC","ItemCreator","SearchItemSgnRegexp","IS_element","spanMgr","[object Object]","cell","setAttr","wedAttributes","rowSpan","colSpan","span","batch","add","init","append","wedAnchor","toString","c","exportWrap","widthColMgr","col","w","width","setStyle","parseInt","COL_BOUNDS","colMode","jml","min","openPanel","async","parent","newJml","postInject","wedlet","wedMgr","skParentRule","docHolder","getStruct","buildVirtualPath","skRule","contentRule","findRuleNodeFor","this","createContent","wsp","reg","env","house","wspServer","wspsLive","newLocalHouse","initialJml","schema","schemaDom","schemaDomConfig","rootRule","buildOptions","autoComplete","openMetaNew","panelModel","nodeLabel","getContent","removeLocalHouse","onCreateUrlLink","selMgr","txtRoot","type","anchorNode","Text","focusNode","txt","nodeValue","substring","range","startOffset","endOffset","test","parentRule","tagRule","metaRule","","metasName","urlProp","findRule","r","skFamily","propElt","createNode","sharedXmlDoc","textContent","metaElt","appendChild","push","dom2jml","call","restoreSel","url","doc","getDocument","elt","documentElement","firstElementChild","getSkNode","rule","findNext","createTextNode","selectItem","newObj","skTagRule","skLinkRule","findRuleAttrFor","willAddTitle","FastFindItem","import","sd","openFastFind","restrictions","itSgnPattern","source","itemCreator","getPref","setDefaultConfigFromReg","spaceUri","extractSpaceUri","longDesc","srcUri","itemTypesTree","itemTypeReducer","acc","cur","getSgn","undefined","subItemsFind","subItSgnPattern","subItemSgnPattern","wedEditor","onNextClose","srcRefSub","itTi","extractLeafFromUri","selectItemAndOpenPanel","jmlSet"],"mappings":"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","sourcesContent":["import {METAS} from \"back/edit/wed/features/metaBar\";\nimport {InlLinkModel, ITxtElement, ITxtOnCreateHook, TxtColModel, TxtModel} from \"back/edit/wed/wedlets/txt/txt\";\nimport {TxtCell, TxtCol, TxtElement} from \"back/edit/wed/wedlets/txt/txtTags\";\nimport {ITxtCellSpanMgr, ITxtColWidthMgr} from \"back/edit/wed/wedlets/txt/txtUtils\";\nimport {WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {FastFindItem} from \"back/wsp/dialogs/fastFindItem\";\nimport {IItemUiEnv} from \"back/wsp/views/itemMain\";\nimport {IPtrItemRule} from \"back/wsp/widgets/wed/schemaMetaWsp\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {IJmlNode, IJmlObj, IJmlSet, JML} from \"lib/commons/xml/jml\";\nimport {XA} from \"lib/commons/xml/xAddr\";\nimport {DocHolder, IDocBatch} from \"lib/edit/docHolder\";\nimport {XmlStrMsg} from \"lib/edit/ot/xmlHouse\";\nimport {SkRule, SkRuleDoc, SkRuleElt, SkRuleNode} from \"lib/edit/schema/schemaPatterns\";\nimport {ITEM} from \"lib/wsp/item\";\nimport {SRC} from \"lib/wsp/src\";\nimport {IWspEnv} from \"lib/wsp/wsp\";\nimport {ItemCreator} from \"back/wsp/dialogs/itemCreator\";\nimport {SearchItemSgnRegexp} from \"lib/wsp/search\";\nimport {ItemType} from \"lib/wsp/wspMetaUi\";\nimport IS_element = DOM.IS_element;\n\n\n/** [table] gestionnaire des rowSpan / colSpan des cellules. */\nexport const spanMgr: ITxtCellSpanMgr = {\n\n\trefreshSpan(this: void, cell: TxtCell): void {\n\t\tDOM.setAttr(cell, 'rowspan', cell.wedAttributes ? cell.wedAttributes.rowSpan : null);\n\t\tDOM.setAttr(cell, 'colspan', cell.wedAttributes ? cell.wedAttributes.colSpan : null);\n\t},\n\n\tisRowSpanAvailable(cell: TxtCell): boolean {return true},\n\n\tisColSpanAvailable(cell: TxtCell): boolean {return true},\n\n\tupdateRowSpan(cell: TxtCell, span: number, batch: IDocBatch): void {\n\t\tbatch.add(new XmlStrMsg().init(XA.append(cell.wedAnchor, 'rowSpan'), span > 1 ? span.toString(10) : null));\n\t},\n\n\tupdateColSpan(cell: TxtCell, span: number, batch: IDocBatch): void {\n\t\tbatch.add(new XmlStrMsg().init(XA.append(cell.wedAnchor, 'colSpan'), span > 1 ? span.toString(10) : null));\n\t},\n\n\tsplitCell(cell: TxtCell, rowSpan: number, colSpan: number): IJmlSet {\n\t\tconst c = cell.exportWrap(null);\n\t\tif (rowSpan > 1) (c[0] as IJmlObj)['rowSpan'] = rowSpan.toString();\n\t\tif (colSpan > 1) (c[0] as IJmlObj)['colSpan'] = colSpan.toString();\n\t\treturn c;\n\t}\n\n};\n\n/** [table] gestionnaire de la largeur des colonnes. */\nexport const widthColMgr: ITxtColWidthMgr = {\n\n\trefreshW(this: void, col: TxtCol) {\n\t\tconst w = col.wedAttributes && col.wedAttributes.width ? col.wedAttributes.width + 'ch' : '2ch';\n\t\tDOM.setStyle(col, 'width', w);\n\t},\n\n\tgetLogicW(this: void, col: TxtCol): number {\n\t\treturn parseInt(col.wedAttributes.width, 10) || 2;\n\t},\n\n\tgetLogicBounds(this: void, col: TxtCol): { min?: number, max?: number, step?: number } {\n\t\treturn COL_BOUNDS;\n\t},\n\n\tupdateLogicW(col: TxtCol, width: number, batch: IDocBatch): void {\n\t\tbatch.add(new XmlStrMsg().init(XA.append(col.wedAnchor, 'width'), width.toString(10)));\n\t},\n\n\tfillDefault(colMode: TxtColModel, jml: IJmlObj): void {\n\t\tjml.width = '10';\n\t}\n};\n\nconst COL_BOUNDS = {min: 2};\n\n/** Ouverture du panel de l'élément à sa création pour renseigner les metadonnées. */\nexport const openPanel: ITxtOnCreateHook = async function (this: TxtModel, parent: ITxtElement, newJml?: IJmlSet, postInject?: (docHolder: DocHolder) => void): Promise<IJmlSet> {\n\tconst wedlet = parent instanceof TxtElement ? parent : parent.wedlet;\n\tconst wedMgr = wedlet.wedMgr;\n\tconst skParentRule = wedMgr.docHolder.getStruct(parent.wedAnchor, WEDLET.buildVirtualPath(wedlet)) as SkRuleNode;\n\tlet skRule: SkRuleNode;\n\tif (!newJml) {\n\t\tskRule = skParentRule.contentRule.findRuleNodeFor(this.newJml());\n\t\tif (!skRule) return;\n\t\tnewJml = [];\n\t\tskRule.createContent(newJml); //skRule.createContent() ajoute les subStructs required contrairement à this.newJml().\n\t} else if (!skRule) {\n\t\tskRule = skParentRule.contentRule.findRuleNodeFor(newJml[0] as IJmlObj);\n\t\tif (!skRule) return;\n\t}\n\tconst wsp = (wedMgr.reg.env as IWspEnv).wsp;\n\tconst house = await wsp.wspServer.wspsLive.newLocalHouse({\n\t\tinitialJml: newJml,\n\t\tschema: wedMgr.docHolder.house.schemaDom.schema,\n\t\tschemaDomConfig: {rootRule: new SkRuleDoc().init(skRule)},\n\t\tbuildOptions: {autoComplete: true}\n\t}, wsp);\n\ttry {\n\t\tconst docHolder = new DocHolder(house);\n\t\tawait METAS.openMetaNew(wedMgr, docHolder, this.panelModel, `Insertion de : ${this.nodeLabel}`, parent.wedlet);\n\t\tif (postInject) {postInject(docHolder)}\n\t\treturn docHolder.getContent();\n\t} finally {\n\t\twsp.wspServer.wspsLive.removeLocalHouse(house);\n\t}\n\n};\n\n/**\n * Ouverture du panel de l'élément de type lien externe à sa création pour renseigner les metadonnées.\n * - Si du texte est sélectionné qui ressemble à une url recopie ce texte dans le 1er champs des métas typé \"property/url\".\n * - Si aucun texte n'est sélectionné, en sortie d'édition recopie le champ url dans le contenu de l'élément créé.\n */\nexport function onCreateUrlLink(this: TxtModel, parent: ITxtElement) {\n\tconst newJml = [this.newJml()] as IJmlSet;\n\tconst selMgr = parent.txtRoot.selMgr;\n\tif (selMgr.type === \"Range\" && selMgr.anchorNode instanceof Text && selMgr.anchorNode === selMgr.focusNode) {\n\t\t//On a un texte sélectionné : si ca ressemble à une url, on l'injecte.\n\t\tconst txt = selMgr.anchorNode.nodeValue.substring(selMgr.range.startOffset, selMgr.range.endOffset);\n\t\tif (!/\\s/.test(txt) && /\\./.test(txt)) {\n\t\t\t//ne contient pas d'espace et au moins un '.', pourrait être une url... XXX règle plus stricte ?\n\t\t\tconst parentRule = parent.wedlet.wedMgr.docHolder.getStruct(parent.wedAnchor) as SkRuleElt;\n\t\t\tif (parentRule) {\n\t\t\t\tconst tagRule = parentRule.contentRule.findRuleNodeFor(newJml[0] as IJmlNode) as SkRuleElt;\n\t\t\t\tif (tagRule) {\n\t\t\t\t\tconst metaRule = tagRule.contentRule.findRuleNodeFor({'': this.metasName}) as SkRuleElt;\n\t\t\t\t\tif (metaRule) {\n\t\t\t\t\t\tconst urlProp = metaRule.contentRule.findRule((r: SkRule) => r.skFamily === \"property/url\") as SkRuleElt;\n\t\t\t\t\t\tif (urlProp) {\n\t\t\t\t\t\t\tconst propElt = urlProp.createNode(DOM.sharedXmlDoc());\n\t\t\t\t\t\t\tpropElt.textContent = txt;\n\t\t\t\t\t\t\tconst metaElt = metaRule.createNode(propElt);\n\t\t\t\t\t\t\tmetaElt.appendChild(propElt);\n\t\t\t\t\t\t\tnewJml.push(JML.dom2jml(metaElt));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn openPanel.call(this, parent, newJml, (docHolder: DocHolder) => {\n\t\tselMgr.restoreSel();\n\t\tif (selMgr.type === \"Caret\") {\n\t\t\t//Insertion sur sel vide, on recopie l'URL dans le contenu inline.\n\t\t\t//On recherche l'URL\n\t\t\tlet url: string;\n\t\t\tconst schemaDom = docHolder.house.schemaDom;\n\t\t\tconst doc = docHolder.getDocument();\n\t\t\tlet elt = doc.documentElement.firstElementChild as Element;\n\t\t\twhile (elt) {\n\t\t\t\tif (schemaDom.getSkNode(elt).rule.skFamily === \"property/url\") {\n\t\t\t\t\turl = elt.textContent;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telt = DOM.findNext(elt, null, IS_element);\n\t\t\t}\n\t\t\tif (url) doc.documentElement.appendChild(doc.createTextNode(url));\n\t\t}\n\t});\n}\n\n/** Ouverture d'un écran de sélection/création d'un item pour renseigner le lien du tag. */\nexport const selectItem: ITxtOnCreateHook = async function (this: TxtModel, parent: ITxtElement): Promise<IJmlSet> {\n\tconst wedlet = parent instanceof TxtElement ? parent : parent.wedlet;\n\tconst wedMgr = wedlet.wedMgr;\n\tconst skParentRule = wedMgr.docHolder.getStruct(parent.wedAnchor, WEDLET.buildVirtualPath(wedlet)) as SkRuleNode;\n\tconst newObj = this.newJml() as any;\n\tconst skTagRule = skParentRule.contentRule.findRuleNodeFor(newObj);\n\tconst skLinkRule = skTagRule.contentRule.findRuleAttrFor(\"sc:refUri\") as IPtrItemRule;\n\tconst willAddTitle = this instanceof InlLinkModel && parent.txtRoot.selMgr.type === \"Caret\"; //avant affichage fenetre sinon parent.txtRoot.selMgr pas encore restaure\n\tconst {FastFindItem} = await import(\"back/wsp/dialogs/fastFindItem.js\");\n\tconst sd = await FastFindItem.openFastFind({\n\t\treg: wedMgr.reg,\n\t\trestrictions: skLinkRule.itSgnPattern ? new SearchItemSgnRegexp(skLinkRule.itSgnPattern.source) : null,\n\t\titemCreator: wedMgr.reg.getPref(\"wsp.createItem\", true) ? ItemCreator.setDefaultConfigFromReg(wedMgr.reg, {\n\t\t\tspaceUri: ITEM.extractSpaceUri((wedMgr.reg.env as IItemUiEnv).longDesc.srcUri),\n\t\t\titemTypesTree: {\n\t\t\t\titemTypeReducer: skLinkRule.itSgnPattern ? (acc: ItemType[], cur: ItemType) => {\n\t\t\t\t\tif (skLinkRule.itSgnPattern.test(cur.getSgn())) acc.push(cur);\n\t\t\t\t\treturn acc;\n\t\t\t\t} : null,\n\t\t\t}\n\t\t}) : undefined,\n\t\tsubItemsFind: skLinkRule.subItSgnPattern ? {subItemSgnPattern: skLinkRule.subItSgnPattern} : undefined\n\t}, wedMgr.wedEditor).onNextClose();\n\tif (!sd) return null;\n\tnewObj['sc:refUri'] = ITEM.srcRefSub(sd);\n\tif (willAddTitle) {\n\t\t//Si ULink sans selection à wrapper : on injecte le titre ou le code de l'item\n\t\treturn [newObj, [sd.itTi || SRC.extractLeafFromUri(sd.srcUri)]];\n\t}\n\treturn [newObj];\n};\n\n/** Ouverture d'un écran de sélection/création d'un item pour renseigner le lien du tag PUIS ouverture du panel des metas. */\nexport const selectItemAndOpenPanel: ITxtOnCreateHook = async function (this: TxtModel, parent: ITxtElement): Promise<IJmlSet> {\n\tconst jmlSet = await selectItem.call(this, parent);\n\tif (!jmlSet) return null;\n\treturn openPanel.call(this, parent, jmlSet);\n};\n\n\n"]}