{"version":3,"sources":["/@back@/core/dialogs/userPrefEditorConfig.tsx"],"names":["REG","JSX","Area","AREAS","CustomTagArea","IO","DOMSH","UserPrefPageConfig","[object Object]","reg","super","this","persistUserDatas","getPersistUserStates","areasList","ctx","Error","lastDatas","form","createElement","areas","getList","map","a","applyLayout","Promise","all","userPrefCtn","editorConfig","area","areaContext","onViewBeforeHide","_a","_b","findHost","onViewWaitForHide","resolve","LIST_userPrefPages","ENTRY_PAGE_front","LIST_userPrefsFrontPage","addToList","setAreasList","setLabel","CheckPrefArea","prefKey","isReloadAppNeeded","invertCheck","checkStateIfNone","requireLib","lib","tagName","st","SelectPrefArea","buildOptions","_buildOptions","selectElt","currentVal","asEndPoint"],"mappings":"OAAiCA,QAAI;OAC7BC,QAAI;OACJC,KAAMC,MAAOC,kBAAmC;OAIhDC,OAAG;OAGHC,UAAM;OASR,MAAOC,2BAA2BL,KAsBvCM,YAAYC,KACXC;AACAC,KAAKF,IAAMA,IAbZG,uBAA2C,OAAOD,KAAKF,IAAII,uBAgB3DL,aAAaM,WACZH,KAAKG,UAAYA;AACjB,OAAOH,KAGRH,UAAUO,KAA+B,OAAO,KAEhDP,UAAUO,KAAuC,MAAMC,MAAM,YAE7DR,eAAeO,IAAqBE,WACnC,MAAMC,KAAOjB,IAAAkB,cAAA,OAAA;AACb,MAAMC,OAA6ET,KAAKS,OAAST,KAAKF,IAAIY,QAAQV,KAAKG,YAAYQ,IAAKC,UAAaA,IAAM,WAAaA,IAAMA;MACxKpB,MAAMqB,YAAYN,WAAYO,QAAQC,IAAIN,OAAQ,CAACO,YAAaZ,IAAKa,aAAcjB,KAAMF,IAAKE,KAAKF;AACzGS,KAAKW,KAAOlB;AACZO,KAAKY,YAAcf;AACnBG,KAAKa,iBAAmB,WAAA,IAAAC,GAAAC;AAAgC,OAAOA,IAAAD,GAAA1B,MAAM4B,SAAyBvB,SAAK,MAAAqB,UAAA,OAAA,EAAAA,GAAED,sBAAkB,MAAAE,UAAA,EAAAA,GAAI;AAC3Hf,KAAKiB,kBAAoB,WAAA,IAAAH;AAAgC,QAAOA,GAAA1B,MAAM4B,SAAyBvB,SAAK,MAAAqB,UAAA,OAAA,EAAAA,GAAEG,sBAAuBV,QAAQW,QAAQ;AAC7I,OAAOlB,MAzCDX,mBAAA8B,mBAAqB;AAErB9B,mBAAA+B,iBAAmB;AAEnB/B,mBAAAgC,wBAA0B;AA0ClCvC,IAAIS,IAAI+B,UAAUjC,mBAAmB8B,mBAAoB9B,mBAAmB+B,iBAAkB,EAAG,IAAI/B,mBAAmBP,IAAIS,KAAKgC,aAAalC,mBAAmBgC,yBAAyBG,SAAS,aAAc;OAS3M,MAAOC,sBAAsBvC,cAQlCI,YAAYoC,SACXlC,MAAMkC;AAPPjC,KAAAkC,kBAAoB;AAEpBlC,KAAAmC,YAAc;AAEdnC,KAAAoC,iBAAmB;AAIlBpC,KAAKqC,WAAWC;AAChBtC,KAAKuC,QAAU,mBAGhB1C,qBACCG,KAAKkC,kBAAoB;AACzB,OAAOlC,KAGRH,iBACCG,KAAKmC,YAAc;AACnB,OAAOnC,KAGRH,oBAAoB2C,IACnBxC,KAAKoC,iBAAmBI;AACxB,OAAOxC,KAGRH,QAAQO,KACP,MAAO,CAACN,IAAKM,IAAIN,IAAKoB,KAAMlB,KAAMmB,YAAaf,aAU3C,MAAOqC,uBAAuBhD,cAMnCI,YAAYoC,SACXlC,MAAMkC;AALPjC,KAAAkC,kBAAoB;AAMnBlC,KAAKqC,WAAWC;AAChBtC,KAAKuC,QAAU,oBAGhB1C,gBAAgB6C,cACf1C,KAAK2C,cAAgBD;AACrB,OAAO1C,KAGRH,aAAa+C,UAA8BC,YAC1C7C,KAAK2C,cAAcC,UAAWC,YAG/BhD,qBACCG,KAAKkC,kBAAoB;AACzB,OAAOlC,KAGRH,QAAQO,KACP,MAAO,CAACN,IAAKM,IAAIN,IAAKoB,KAAMlB,KAAMmB,YAAaf,MAKjD,MAAMkC,IAAM5C,GAAGoD,WAAW","sourcesContent":["import {IPersistUserDatas, IReg, REG} from \"lib/commons/registry\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {Area, AREAS, CustomTagArea, IArea, IAreaPointer} from \"lib/commons/areas\";\nimport {IBasicUniversePointer} from \"lib/core/universe\";\nimport {JLastDatas} from \"lib/commons/lastDatas\";\nimport {OUserPrefCheckInit, OUserPrefSelectInit, UserPrefCheck, UserPrefEditor, UserPrefSelect} from \"back/core/dialogs/userPrefEditor\";\nimport {IO} from \"lib/commons/io/io\";\nimport {BaseElement} from \"back/commons/basis\";\nimport {IView} from \"lib/commons/views\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\n\n\n/**\n * Configuration d'une page d'édition de prefs utilisateurs.\n * A déclarer dans le registre du contexte gérant l'affichage du dialogue d'édition des prefs.\n *\n * REG.reg.addToList(UserPrefEditorConfig.LIST_userPrefPages, \"portletXyz\", 1, new UserPrefPageConfig(portletReg).setAreasList(\"user:prefs:portletXyz\").setLabel(\"...\"))\n */\nexport class UserPrefPageConfig extends Area<UserPrefEditor, HTMLFormElement> {\n\n\t/** Code liste par défaut des pages d'édition des prefs */\n\tstatic LIST_userPrefPages = \"user:prefs\";\n\t/** Code de la page d'édition des prefs communes au front */\n\tstatic ENTRY_PAGE_front = \"front\";\n\t/** Code liste des preférences de la page générale \"front\" */\n\tstatic LIST_userPrefsFrontPage = \"user:prefs:front\";\n\n\treg: IReg<IBasicUniversePointer>;\n\n\tget persistUserDatas(): IPersistUserDatas {return this.reg.getPersistUserStates()}\n\n\t/** Areas constituant les pref éditables. */\n\tareas?: Array<IArea<IUserPrefEditorCtx, BaseElement> | (() => Promise<IArea<IUserPrefEditorCtx, BaseElement>>)>\n\n\t/**\n\t * Liste des areas constituant les pref éditables (si areas null).\n\t * Type des entrées de la liste : IArea<IUserPrefEditorCtx, BaseElement> | (()=>Promise<IArea<IUserPrefEditorCtx, BaseElement>>)\n\t */\n\tareasList?: string;\n\n\tconstructor(reg: IReg<IBasicUniversePointer>) {\n\t\tsuper();\n\t\tthis.reg = reg;\n\t}\n\n\tsetAreasList(areasList: string): this {\n\t\tthis.areasList = areasList;\n\t\treturn this;\n\t}\n\n\tneedAsync(ctx: UserPrefEditor): boolean {return true}\n\n\tbuildBody(ctx: UserPrefEditor): HTMLFormElement {throw Error(\"not used\")}\n\n\tasync loadBody(ctx: UserPrefEditor, lastDatas?: JLastDatas): Promise<HTMLFormElement> {\n\t\tconst form = <form/> as HTMLFormElement & IView & IAreaPointer<UserPrefEditor, HTMLFormElement>;\n\t\tconst areas: (IArea<IUserPrefEditorCtx> | Promise<IArea<IUserPrefEditorCtx>>)[] = (this.areas || this.reg.getList(this.areasList)).map((a) => typeof a === \"function\" ? a() : a);\n\t\tawait AREAS.applyLayout(form, await Promise.all(areas), {userPrefCtn: ctx, editorConfig: this, reg: this.reg});\n\t\tform.area = this;\n\t\tform.areaContext = ctx;\n\t\tform.onViewBeforeHide = function(this:HTMLFormElement) {return DOMSH.findHost<UserPrefEditor>(this)?.onViewBeforeHide() ?? true}\n\t\tform.onViewWaitForHide = function(this:HTMLFormElement) {return DOMSH.findHost<UserPrefEditor>(this)?.onViewWaitForHide() || Promise.resolve(true)}\n\t\treturn form;\n\t}\n}\n\n/** Page par défaut*/\nREG.reg.addToList(UserPrefPageConfig.LIST_userPrefPages, UserPrefPageConfig.ENTRY_PAGE_front, 1, new UserPrefPageConfig(REG.reg).setAreasList(UserPrefPageConfig.LIST_userPrefsFrontPage).setLabel(\"Général\"), 1);\n\n\n/**\n * Area pour une pref de type checkBox.\n * A déclarer de préférence dans le registre du portlet stockant ces prefs.\n *\n * portletReg.addToList(\"user:prefs:portletXyz\", \"pref1\", 1, new CheckPrefArea(\"keyPref1\").setLabel(\"...\"))\n */\nexport class CheckPrefArea extends CustomTagArea<IUserPrefEditorCtx, UserPrefCheck, OUserPrefCheckInit> {\n\n\tisReloadAppNeeded = false;\n\n\tinvertCheck = false;\n\n\tcheckStateIfNone = false;\n\n\tconstructor(prefKey: string) {\n\t\tsuper(prefKey);\n\t\tthis.requireLib(lib);\n\t\tthis.tagName = \"c-userpref-check\";\n\t}\n\n\tsetReloadAppNeeded(): this {\n\t\tthis.isReloadAppNeeded = true;\n\t\treturn this;\n\t}\n\n\tsetInvertCheck(): this {\n\t\tthis.invertCheck = true;\n\t\treturn this;\n\t}\n\n\tsetCheckStateIfNone(st:boolean): this {\n\t\tthis.checkStateIfNone = st;\n\t\treturn this;\n\t}\n\n\tgetInit(ctx: IUserPrefEditorCtx): OUserPrefCheckInit {\n\t\treturn {reg: ctx.reg, area: this, areaContext: ctx};\n\t}\n}\n\n/**\n * Area pour une pref de type sélection dans une liste.\n * A déclarer de préférence dans le registre du portlet stockant ces prefs.\n *\n * portletReg.addToList(\"user:prefs:portletXyz\", \"pref1\", 1, new SelectPrefArea(\"keyPref1\").setLabel(\"...\"))\n */\nexport class SelectPrefArea extends CustomTagArea<IUserPrefEditorCtx, UserPrefSelect, OUserPrefSelectInit> {\n\n\tisReloadAppNeeded = false;\n\n\t_buildOptions: (selectElt: HTMLSelectElement, currentVal: string | null) => void;\n\n\tconstructor(prefKey: string) {\n\t\tsuper(prefKey);\n\t\tthis.requireLib(lib);\n\t\tthis.tagName = \"c-userpref-select\";\n\t}\n\n\tsetBuildOptions(buildOptions: (selectElt: HTMLSelectElement, currentVal: string | null) => void): this {\n\t\tthis._buildOptions = buildOptions;\n\t\treturn this;\n\t}\n\n\tbuildOptions(selectElt: HTMLSelectElement, currentVal: string | null): void {\n\t\tthis._buildOptions(selectElt, currentVal);\n\t}\n\n\tsetReloadAppNeeded(): this {\n\t\tthis.isReloadAppNeeded = true;\n\t\treturn this;\n\t}\n\n\tgetInit(ctx: IUserPrefEditorCtx): OUserPrefSelectInit {\n\t\treturn {reg: ctx.reg, area: this, areaContext: ctx};\n\t}\n}\n\n\nconst lib = IO.asEndPoint(\"/@back@/core/dialogs/userPrefEditor.js\");\n\n/** Contexte d'exécution d'une page d'édition des userPref. */\nexport interface IUserPrefEditorCtx {\n\t/** */\n\teditorConfig: UserPrefPageConfig\n\n\t/** Correspond à editorConfig.reg (recopié ici pour eval perms) */\n\treg: IReg<IBasicUniversePointer>\n\n\t/** Contexte graphique de l'éditeur. */\n\tuserPrefCtn: UserPrefEditor\n}\n"]}