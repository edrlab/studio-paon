{"version":3,"sources":["/@back@/modeling/views/gen/genParams.tsx"],"names":["SRC","ERROR","JSX","WSP","InputChoiceArea","MsgLabel","ModelingBlackListInputArea","[object Object]","id","genCode","agenPath","super","this","setDirection","ctx","elt","buildBody","getDescription","title","name","control","createElement","msg","appendChild","î","label","level","icon","toogleAllChecked","owner","currentInput","targetValue","checked","querySelectorAll","forEach","entry","agtPath","refUri2AgtPath","shortDesc","srcUri","dialogPath","fetchAskAgt","wsp","then","result","entries","getElementsByTagName","length","dataSet","i","key","getAttribute","setDataset","fieldset","_buildControl","addEventListener","ev","previousElementSibling","stopPropagation","preventDefault","_isLoaded","extractJson","_toExtractValue","setCustomMsg","e","report","Object","assign","fillJson","parent","root","skipList","push","join","_a","split","indexOf"],"mappings":"OACQA,QAAI;OACJC,UAAM;OACNC,QAAI;OACJC,QAAI;OACwCC,oBAAgB;OAE5DC,aAAwB;OAI1B,MAAOC,mCAAmCF,gBAC/CG,YAAYC,GAAsBC,QAA2BC,UAC5DC,MAAMH,GAAI;AADuBI,KAAAH,QAAAA;AAA2BG,KAAAF,SAAAA;AAE5DE,KAAKC,aAAa,YAGnBN,UAAUO,KACT,IAAIC,IAAMJ,MAAMK,UAAUF;AAC1B,GAAIF,KAAKK,eAAeH,KAAMC,IAAIG,MAAQN,KAAKK,eAAeH;AAC9D,OAAOC,IAGRR,cAAcO,IAAoCK,MACjD,MAAMC,QAAUlB,IAAAmB,cAAA,MAAA;AAChB,MAAMC,IAAMF,QAAQG,YAAYrB,IAAAmB,cAAChB,SAAQ,CAACG,GAAG,MAAKgB,IAAI,CACrDC,MAAO,2BACPC,MAAO,OAAQC,KAAM;AAGtB,MAAMC,iBAAmB,CAACC,MAAuBC,gBAChD,MAAMC,aAAeD,aAAaE;AAClCH,MAAMI,iBAAiB,SAASC,QAAQC,QACtCA,MAA2BH,QAAUD;AAIxC,IAAIK,QAAUpC,IAAIqC,eAAevB,IAAIwB,UAAUC;AAE/C,MAAMC,WAAa,IAAMJ,QAAU,IAAMA,QAAU,IAAMxB,KAAKF;AAC9D,IACCP,IAAIsC,YAAY3B,IAAI4B,IAAKtB,QAASR,KAAKH,QAAS+B,YAAYG,KAAKC,SAChE,IACC,MAAMC,QAAUD,SAAM,MAANA,cAAM,OAAA,EAANA,OAAQE,qBAAqB;AAC7C,GAAID,SAAWA,QAAQE,OAAQ,CAC9B,MAAMC,QAA0C;AAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,QAAQE,SAAUE,EAAG,CACxC,MAAMC,IAAML,QAAQI,GAAGE,aAAa;AACpC,MAAMhC,KAAO0B,QAAQI,GAAGE,aAAa;AACrCH,QAAQE,KAAO,CAACzB,MAAO,IAAIyB,QAAQ/B,QAEpCP,KAAKwC,WAAWJ;AAChB,MAAMK,SAAW1C,MAAM2C,cAAcxC,IAAKK;AAC1CC,QAAQG,YAAY8B;AACpBA,SAASpB,iBAAiB,SAASC,QAAQC;AAG3CkB,SAASpB,iBAAiB,SAASC,QAAQC,QAC1CA,MAAMoB,iBAAiB,WAAaC,KACnC5B,iBAAiByB,SAAUlB,MAAMsB;AACjCD,GAAGE;AACHF,GAAGG;AAIJvC,QAAgBwC,UAAY;AAC5BxC,QAAmCyC,YAAazC,QAAgB0C;AAChE1C,QAAgB0C,gBAAkB;AACnCxC,IAAIyC,aAAa,WAEjBzC,IAAIyC,aAAa,UAAW,QAC5B,MAAOC,GACR/D,MAAMgE,OAAOD;AACb1C,IAAIyC,aAAa,yBAA0B,YAG5C,MAAOC,GACR/D,MAAMgE,OAAOD;AACb1C,IAAIyC,aAAa,yBAA0B,SAG5CG,OAAOC,OAAO/C,QAAS,CACtBgD,SAAU,SAAgCC,OAAoBC,MAC7D,GAAK1D,KAAagD,UAAW,CAC5B,MAAMW,SAAqB;AAC3B3D,KAAKqB,iBAAiB,SAASC,QAAQC,QACtC,IAAKA,MAAMH,QAASuC,SAASC,KAAKrC,MAAMgB,aAAa;AAEtDkB,OAAOlD,MAAQoD,SAASE,KAAK,OAI/BZ,YAAa,SAAgCQ;AAC5C,GAAKzD,KAAagD,UAAW,CAC5B,MAAMW,UAAqBG,GAAAL,OAAOlD,SAAK,MAAAuD,UAAA,OAAA,EAAAA,GAAEC,MAAM;AAC/C/D,KAAKqB,iBAAiB,SAASC,QAAQC,QACrCA,MAA2BH,SAAWuC,UAAYA,SAASK,QAAQzC,MAAMgB,aAAa,YAAc,SAGrGvC,KAAakD,gBAAkBO;AAGnC,OAAOjD","sourcesContent":["import {IPubCtx} from \"lib/wsp/wspMetaUi\";\nimport {SRC} from \"lib/wsp/src\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {WSP} from \"lib/wsp/wsp\";\nimport {Dataset, DatasetEntry, IControlAreaContext, InputChoiceArea} from \"lib/commons/areas\";\nimport {IFormJsonisable} from \"lib/commons/forms\";\nimport {MsgLabel, OMsgLabelInit} from \"back/commons/basis\";\n\n\n/** Propose une liste d'éléments sélectionnable issues des agents */\nexport class ModelingBlackListInputArea extends InputChoiceArea<IPubCtx & IControlAreaContext> {\n\tconstructor(id: string, protected genCode: string, protected agenPath: string) {\n\t\tsuper(id, \"checkbox\");\n\t\tthis.setDirection(\"vertical\");\n\t}\n\n\tbuildBody(ctx: IPubCtx & IControlAreaContext): HTMLElement {\n\t\tlet elt = super.buildBody(ctx);\n\t\tif (this.getDescription(ctx)) elt.title = this.getDescription(ctx);\n\t\treturn elt;\n\t}\n\n\t_buildControl(ctx: IPubCtx & IControlAreaContext, name: string): HTMLDivElement {\n\t\tconst control = <div/> as HTMLDivElement;//;super._buildControl(ctx, name);\n\t\tconst msg = control.appendChild(<MsgLabel id=\"msg\" î={{\n\t\t\tlabel: \"Chargement en cours...\",\n\t\t\tlevel: \"info\", icon: \"/@skin@/modeling/views/pending.svg\"\n\t\t} as OMsgLabelInit}/>) as MsgLabel\n\n\t\tconst toogleAllChecked = (owner: HTMLDivElement, currentInput: HTMLInputElement) => {\n\t\t\tconst targetValue = !currentInput.checked;\n\t\t\towner.querySelectorAll(\"input\").forEach(entry => {\n\t\t\t\t(entry as HTMLInputElement).checked = targetValue;\n\t\t\t})\n\t\t}\n\n\t\tvar agtPath = SRC.refUri2AgtPath(ctx.shortDesc.srcUri);\n\t\t//agtPath est doublé pour créer le context racine \"@@\".\n\t\tconst dialogPath = \"/\" + agtPath + \"/\" + agtPath + \"/\" + this.agenPath;\n\t\ttry {\n\t\t\tWSP.fetchAskAgt(ctx.wsp, control, this.genCode, dialogPath).then(result => {\n\t\t\t\ttry {\n\t\t\t\t\tconst entries = result?.getElementsByTagName(\"entry\");\n\t\t\t\t\tif (entries && entries.length) {\n\t\t\t\t\t\tconst dataSet: Dataset<DatasetEntry<IPubCtx>> = {}\n\t\t\t\t\t\tfor (let i = 0; i < entries.length; ++i) {\n\t\t\t\t\t\t\tconst key = entries[i].getAttribute(\"key\");\n\t\t\t\t\t\t\tconst name = entries[i].getAttribute(\"name\");\n\t\t\t\t\t\t\tdataSet[key] = {label: `[${key}] ${name}`};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setDataset(dataSet);\n\t\t\t\t\t\tconst fieldset = super._buildControl(ctx, name);\n\t\t\t\t\t\tcontrol.appendChild(fieldset);\n\t\t\t\t\t\tfieldset.querySelectorAll(\"input\").forEach(entry => {\n\t\t\t\t\t\t\t//entry.addEventListener(\"dblclick\", (ev) => {toogleAllChecked(fieldset, entry); ev.stopPropagation()});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfieldset.querySelectorAll(\"label\").forEach(entry => {\n\t\t\t\t\t\t\tentry.addEventListener(\"dblclick\", (ev) => {\n\t\t\t\t\t\t\t\ttoogleAllChecked(fieldset, entry.previousElementSibling as HTMLInputElement);\n\t\t\t\t\t\t\t\tev.stopPropagation();\n\t\t\t\t\t\t\t\tev.preventDefault()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t(control as any)._isLoaded = true;\n\t\t\t\t\t\t(control as any as IFormJsonisable).extractJson((control as any)._toExtractValue);\n\t\t\t\t\t\t(control as any)._toExtractValue = null;\n\t\t\t\t\t\tmsg.setCustomMsg(null);\n\t\t\t\t\t} else\n\t\t\t\t\t\tmsg.setCustomMsg(\"Aucun\", \"info\");\n\t\t\t\t} catch (e) {\n\t\t\t\t\tERROR.report(e);\n\t\t\t\t\tmsg.setCustomMsg(\"Chargement en erreur\", \"error\");\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tERROR.report(e);\n\t\t\tmsg.setCustomMsg(\"Chargement en erreur\", \"error\");\n\t\t}\n\n\t\tObject.assign(control, {\n\t\t\tfillJson: function (this: HTMLDivElement, parent: Jsonisable, root: Jsonisable) {\n\t\t\t\tif ((this as any)._isLoaded) {\n\t\t\t\t\tconst skipList: string[] = [];\n\t\t\t\t\tthis.querySelectorAll(\"input\").forEach(entry => {\n\t\t\t\t\t\tif (!entry.checked) skipList.push(entry.getAttribute(\"value\"))\n\t\t\t\t\t});\n\t\t\t\t\tparent[name] = skipList.join(\" \");\n\t\t\t\t}\n\n\t\t\t},\n\t\t\textractJson: function (this: HTMLDivElement, parent: Dict<any>) {\n\t\t\t\tif ((this as any)._isLoaded) {\n\t\t\t\t\tconst skipList: string[] = parent[name]?.split(\" \");\n\t\t\t\t\tthis.querySelectorAll(\"input\").forEach(entry => {\n\t\t\t\t\t\t(entry as HTMLInputElement).checked = !skipList || skipList.indexOf(entry.getAttribute(\"value\")) == -1;\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\t(this as any)._toExtractValue = parent;\n\t\t\t}\n\t\t} as IFormJsonisable);\n\t\treturn control;\n\t}\n}\n\n"]}