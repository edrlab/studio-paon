{"version":3,"sources":["/@back@/wsp/widgets/wsp/wspsMonitoring.tsx"],"names":["BaseElement","DOMSH","DOM","JSX","REG","GridSmall","GridColDef","CellBuilderEnum","CellBuilderString","GridDataHolderJsonArray","WspsMonitoring","[object Object]","init","this","config","reg","findReg","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","grid","appendChild","dataHolder","connectToGrid","statusMap","Map","states","forEach","entry","set","key","label","initialize","lineDrawer","skinScroll","noResizableCol","selType","skinOver","hideHeaders","emptyBody","createElement","columnDefs","setLabel","setFlex","setMinWidth","setCellBuilder","override","row","rowDatas","wsp","wspTitle","setCellClass","redrawTree","wsps","defaultStateKey","datas","entryData","Object","create","infoWsp","infoWspError","monitoringState","push","setDatas","wspCode","stateKey","ensureVisible","getDatas","wspMonitoringEntry","find","code","offset","getOffset","invalidateRows","ensureRowVisible","line","stateEntry","setAttr","level","removeAttribute","customElements","define","registerSkin"],"mappings":"OAAQA,gBAA2B;OAE3BC,UAAM;OACNC,IAAKC,QAAI;OACHC,QAAI;OAEVC,cAAU;OACVC,eAA4B;OAC5BC,gBAAiBC,kBAAmBC,4BAAyC;OAa/E,MAAOC,uBAAuBV,YAUzBW,kBAAkBC,MAC3BC,KAAKC,OAASF;AACdC,KAAKE,IAAMF,KAAKG,QAAQJ;AACxB,MAAMK,GAAKJ,KAAKK,aAAajB,MAAMkB;AACnCN,KAAKO,oBAAoBP,KAAKQ,UAAWT;AAEzCC,KAAKS,KAAOL,GAAGM,YAAY,IAAIlB;AAC/BQ,KAAKW,WAAa,IAAIf;AACtBI,KAAKW,WAAWC,cAAcZ,KAAKS;AAEnC,IAAII,UAAY,IAAIC;AACpBd,KAAKC,OAAOc,OAAOC,QAASC,QAC3BJ,UAAUK,IAAID,MAAME,IAAKF,MAAMG;AAGhCpB,KAAKS,KAAKY,WAAW,CACpBC,WAAYtB,KACZuB,WAAY,eACZZ,WAAYX,KAAKW,WACjBa,eAAgB,KAChBC,QAAS,OACTC,SAAU,uBACVC,YAAa,KACbC,UAAW,IAAMtC,IAAAuC,cAAA,QAAA,KAAA,mCACjBC,WAAY,CACX,IAAIrC,WAAW,SAASsC,SAAS,WAC/BC,QAAQ,OAAQ,EAAG,GAAGC,YAAY,OAClCC,eAAe,IAAIvC,kBAAkB,SAASwC,SAAS,YAAcC,KAC9DA,IAAIC,SAASC,IAAIC,UAAY,kBAEtC,IAAI9C,WAAW,UAAUsC,SAAS,YAChCC,QAAQ,MAAO,EAAG,GAAGC,YAAY,OACjCC,eAAe,IAAIxC,gBAAgB,kBAAmBmB,WAAW2B,aAAa;AAIlF,OAAOxC,KAAKyC,aAMN3C,WAAW4C,KAAcC,iBAC/B,GAAID,KAAM1C,KAAKC,OAAOyC,KAAOA;AAC7B,GAAIC,gBAAiB3C,KAAKC,OAAO0C,gBAAkBA;AACnD,IAAIC,MAA+B;AACnC5C,KAAKC,OAAOyC,KAAK1B,QAASC,QACzB,IAAI4B,UAAiCC,OAAOC,OAAO9B,MAAM+B,SAAW/B,MAAMgC;AAC1E,GAAIjD,KAAKC,OAAO0C,gBAAiBE,UAAUK,gBAAkBlD,KAAKC,OAAO0C;AACzEC,MAAMO,KAAKN;AAEZ7C,KAAKW,WAAWyC,SAASR,OAOnB9C,gBAAgBuD,QAAiBC,SAAkBC,cAAyB,MAClF,IAAIX,MAAQ5C,KAAKW,WAAW6C;AAC5B,IAAIC,mBAAqBb,MAAMc,KAAMzC,OAAUA,MAAMqB,IAAIqB,OAASN;AAClE,GAAII,mBAAoB,CACvBA,mBAAmBP,gBAAkBI;AACrC,MAAMM,OAAS5D,KAAKW,WAAWkD,UAAUJ;AACzCzD,KAAKS,KAAKqD,eAAeF,OAAQ;AACjC,GAAIL,cACHvD,KAAKS,KAAKsD,iBAAiBH,SAU9B9D,WAAWsC,IAA2C4B,MACrD,MAAMV,SAAWlB,IAAIC,SAASa;AAC9B,MAAMe,WAAajE,KAAKC,OAAOc,OAAO2C,KAAMzC,OAAUA,MAAME,MAAQmC;AACpE,GAAIW,WACH5E,IAAI6E,QAAQF,KAAM,QAASC,WAAWE;KAEtCH,KAAKI,gBAAgB,UAKxBC,eAAeC,OAAO,kBAAmBzE;AAEzCN,IAAIW,IAAIqE,aAAa,kBAAmB,EAAsB;AAY9DhF,IAAIW,IAAIqE,aAAa,uBAAwB,EAAsB","sourcesContent":["import {BaseElement, OSkinableInit} from \"back/commons/basis\";\nimport {Wsp} from \"lib/wsp/wsp\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {IChainEnv} from \"lib/wsp/chain\";\nimport {GridSmall} from \"back/commons/widgets/grid-tags\";\nimport {GridColDef, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {CellBuilderEnum, CellBuilderString, GridDataHolderJsonArray, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\n\nexport interface OWspsMonitoringInit extends OSkinableInit {\n\twsps: Wsp[]\n\tstates: {\n\t\tkey: string,\n\t\tlabel: string,\n\t\tlevel?: \"disabled\" | \"pending\" | \"success\" | \"warning\" | \"error\"\n\t}[]\n\tdefaultStateKey: string\n}\n\n\nexport class WspsMonitoring extends BaseElement implements IGridLineDrawer {\n\n\tprotected config: OWspsMonitoringInit;\n\n\tprotected reg: IReg<IChainEnv>;\n\n\tprotected grid: GridSmall;\n\n\tprotected dataHolder: GridDataHolderJsonArray<WspsMonitoringEntry>;\n\n\tprotected async _initialize(init: OWspsMonitoringInit): Promise<any> {\n\t\tthis.config = init;\n\t\tthis.reg = this.findReg(init);\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tthis.grid = sr.appendChild(new GridSmall());\n\t\tthis.dataHolder = new GridDataHolderJsonArray<WspsMonitoringEntry>();\n\t\tthis.dataHolder.connectToGrid(this.grid);\n\n\t\tlet statusMap = new Map();\n\t\tthis.config.states.forEach((entry) => {\n\t\t\tstatusMap.set(entry.key, entry.label)\n\t\t});\n\n\t\tthis.grid.initialize({\n\t\t\tlineDrawer: this,\n\t\t\tskinScroll: 'scroll/small',\n\t\t\tdataHolder: this.dataHolder,\n\t\t\tnoResizableCol: true,\n\t\t\tselType: \"none\",\n\t\t\tskinOver: \"wspsmonitoringr-grid\",\n\t\t\thideHeaders: true,\n\t\t\temptyBody: () => <c-msg>Aucune information disponible</c-msg>,\n\t\t\tcolumnDefs: [\n\t\t\t\tnew GridColDef('title').setLabel(\"Titre\")\n\t\t\t\t\t.setFlex('25em', 1, 1).setMinWidth('8em')\n\t\t\t\t\t.setCellBuilder(new CellBuilderString(\"title\").override(\"_getValue\", (row: GridDataRowJson<WspsMonitoringEntry>): any => {\n\t\t\t\t\t\treturn row.rowDatas.wsp.wspTitle || \"[Non titré]\";\n\t\t\t\t\t})),//wsp.wspTitle\n\t\t\t\tnew GridColDef('status').setLabel(\"Statut\")\n\t\t\t\t\t.setFlex('6em', 1, 1).setMinWidth('4em')\n\t\t\t\t\t.setCellBuilder(new CellBuilderEnum('monitoringState', statusMap).setCellClass(\"center\")),\n\t\t\t]\n\t\t});\n\n\t\treturn this.redrawTree();\n\t}\n\n\t/**\n\t * Tree : réaffectation totale des données\n\t */\n\tpublic redrawTree(wsps?: Wsp[], defaultStateKey?: string): void {\n\t\tif (wsps) this.config.wsps = wsps;\n\t\tif (defaultStateKey) this.config.defaultStateKey = defaultStateKey;\n\t\tlet datas: WspsMonitoringEntry[] = [];\n\t\tthis.config.wsps.forEach((entry) => {\n\t\t\tlet entryData: WspsMonitoringEntry = Object.create(entry.infoWsp || entry.infoWspError);\n\t\t\tif (this.config.defaultStateKey) entryData.monitoringState = this.config.defaultStateKey;\n\t\t\tdatas.push(entryData);\n\t\t});\n\t\tthis.dataHolder.setDatas(datas);\n\t}\n\n\t/**\n\t * Refresh du statut d'un wsp\n\t * Remarque : pas d'erreur si la row n'est pas trouvée\n\t */\n\tpublic updateWspStatus(wspCode: string, stateKey: string, ensureVisible: boolean = true): void {\n\t\tlet datas = this.dataHolder.getDatas();\n\t\tlet wspMonitoringEntry = datas.find((entry) => entry.wsp.code === wspCode);\n\t\tif (wspMonitoringEntry) {\n\t\t\twspMonitoringEntry.monitoringState = stateKey;\n\t\t\tconst offset = this.dataHolder.getOffset(wspMonitoringEntry);\n\t\t\tthis.grid.invalidateRows(offset, 1);\n\t\t\tif (ensureVisible)\n\t\t\t\tthis.grid.ensureRowVisible(offset);\n\n\t\t}\n\t}\n\n\t/**\n\t * Tree : affichage explicite des lignes en erreur\n\t * @param row\n\t * @param line\n\t */\n\tredrawLine(row: GridDataRowJson<WspsMonitoringEntry>, line: HTMLElement): void {\n\t\tconst stateKey = row.rowDatas.monitoringState;\n\t\tconst stateEntry = this.config.states.find((entry) => entry.key === stateKey);\n\t\tif (stateEntry)\n\t\t\tDOM.setAttr(line, \"level\", stateEntry.level);\n\t\telse\n\t\t\tline.removeAttribute(\"level\");\n\t}\n\n}\n\ncustomElements.define('wsps-monitoring', WspsMonitoring);\n\nREG.reg.registerSkin('wsps-monitoring', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\toverflow: auto;\n\t}\n`);\n\nREG.reg.registerSkin('wspsmonitoringr-grid', 1, /* language=CSS */ `\n\t*[level=disabled] {\n\t\tcolor: var(--fade-color);\n\t\tfont-style: italic;\n\t}\n\n\t*[level=warning] {\n\t\tcolor: var(--warning-color);\n\t}\n\n\t*[level=error] {\n\t\tcolor: var(--error-color);\n\t}\n\n\t*[level=success] {\n\t\tcolor: var(--valid-color);\n\t}\n\n\t*[level=pending] {\n\t\tfont-weight: bold;\n\t}\n\n`);\n\n\ninterface WspsMonitoringEntry {\n\tmonitoringState: string\n\twsp:Wsp\n}"]}