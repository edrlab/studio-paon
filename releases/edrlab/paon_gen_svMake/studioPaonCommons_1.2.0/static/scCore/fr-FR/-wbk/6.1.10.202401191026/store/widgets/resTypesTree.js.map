{"version":3,"sources":["/@back@/store/widgets/resTypesTree.tsx"],"names":["BaseElement","CellBuilderIconLabel","GridSmall","EFolderState","GridColTreeDef","GridDataHolderJsonTree","REG","JSX","DOMSH","isDirResType","LANG","ResTypesTree","[object Object]","this","forbidHideSelRow","row","dataHolder","getRow","grid","getSelectedRow","rowDatas","getSelectedDatas","filter","pData","i","c","countRows","setSelectedRows","getFolderState","closed","openFolder","rowKey","findAndSel","ch","entry","found","children","selectByResTypes","getDatas","prcs","selectedRows","resType","indexOf","prc","push","resTypes","threshold","count","init","reg","findReg","datas","env","getResTypesTree","resTypeFilter","setDefaultOpenState","e","setDatas","colDefs","setFlex","setMinWidth","setCellBuilder","CellBuilderResType","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","textFilter","countResTypesUntil","forbidHideSelectedRow","collator","Intl","Collator","usage","sensitivity","search","appendChild","createElement","type","spellcheck","oninput","onSearchInput","onkeydown","onKeyPress","initialize","Object","assign","columnDefs","hideHeaders","filterText","value","dispatchEvent","CustomEvent","ev","tree","findHost","key","undefined","focus","val","selectedItemsTypes","getSelectedResTypes","buildFilteredDatas","list","r","length","newE","create","matchTitle","prcLabel","selectFirst","title","RegExp","escape4RegexpFuzzy","registerSkin","customElements","define","super","root","redrawCell","span","firstElementChild","style","display","fontWeight","label","prcIcon"],"mappings":"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","sourcesContent":["import {BaseElement, OSkinableInit} from \"back/commons/basis\";\nimport {CellBuilderIconLabel} from \"back/commons/widgets/grid-libs\";\nimport {GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {EFolderState, GridColTreeDef, GridDataHolderJsonTree, GridDataRowJsonTree} from \"back/commons/widgets/tree\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IDirResType, IResType, isDirResType} from \"lib/store/res\";\nimport {IDepotResUiEnv} from \"lib/store/depot\";\nimport {LANG} from \"lib/commons/lang\";\n\n/**\n *\n */\nexport interface ResTypesTree extends BaseElement {\n\tinitialize(init?: OResTypesTreeInit): this\n}\n\nexport interface OResTypesTreeInit extends OSkinableInit {\n\treg?: IReg<IDepotResUiEnv>\n\n\tresTypes?: (IDirResType | IResType)[]\n\n\tresTypeFilter?: (resType: IResType) => boolean\n\n\t/** Si null ou undefined, pas de champs de filtrage de l'arbre affiché, \"\" pour afficher le champs vide. */\n\ttextFilter?: undefined | string\n\n\t/** Préserve l'affichage de la ou les lignes sélectionnées même si le filtre ne matche pas. */\n\tforbidHideSelectedRow?: boolean;\n\n\tgrid?: OGridSmallInit\n}\n\nexport class ResTypesTree extends BaseElement {\n\n\treg: IReg<IDepotResUiEnv>;\n\n\tdataHolder: GridDataHolderJsonTree<IDirResType | IResType>;\n\n\tgrid: GridSmall;\n\tsearch: HTMLInputElement;\n\tcollator: Intl.Collator;\n\n\tprotected datas: (IDirResType | IResType)[];\n\n\tprotected forbidHideSelRow = false;\n\n\tgetSelectedResType(): IResType | null {\n\t\tconst row = this.dataHolder.getRow(this.grid.getSelectedRow());\n\t\tif (!row) return null;\n\t\treturn isDirResType(row.rowDatas) ? null : row.rowDatas;\n\t}\n\n\tgetSelectedResTypes(): IResType[] {\n\t\treturn this.dataHolder.getSelectedDatas().filter(pData => !isDirResType(pData)) as IResType[];\n\t}\n\n\tselectFirst(): boolean {\n\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\tconst row = this.dataHolder.getRow(i);\n\t\t\tif (!isDirResType(row.rowDatas)) {\n\t\t\t\tthis.grid.setSelectedRows(i);\n\t\t\t\treturn true;\n\t\t\t} else if (row.getFolderState() === EFolderState.closed) {\n\t\t\t\t//dir fermé, on ouvre\n\t\t\t\tthis.dataHolder.openFolder(row.rowKey);\n\t\t\t\tc = this.dataHolder.countRows();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tfindAndSelect(filter: (resType: IResType) => boolean): IResType | null {\n\t\tconst findAndSel = (ch: (IDirResType | IResType)[]): IResType | null => {\n\t\t\tif (!ch) return null;\n\t\t\tfor (let entry of ch) {\n\t\t\t\tif (isDirResType(entry)) {\n\t\t\t\t\tconst found = findAndSel(entry.children);\n\t\t\t\t\tif (found) return found;\n\t\t\t\t} else if (filter(entry)) {\n\t\t\t\t\tthis.selectByResTypes(entry);\n\t\t\t\t\treturn entry;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn findAndSel(this.dataHolder.getDatas());\n\t}\n\n\t/**\n\t * Sélection des entrées de l'arbre via une liste de processing\n\t * @param prcs\n\t */\n\tselectByProcessing(...prcs: string[]): void {\n\t\tif (prcs != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst resType = this.dataHolder.getRow(i).rowDatas;\n\t\t\t\tif (!isDirResType(resType) && prcs.indexOf(resType.prc) > -1) selectedRows.push(i);\n\t\t\t}\n\t\t\tthis.grid.setSelectedRows(selectedRows);\n\t\t}\n\t}\n\n\tselectByResTypes(...resTypes: IResType[]): void {\n\t\tif (resTypes != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst resType = this.dataHolder.getRow(i).rowDatas;\n\t\t\t\tif (!isDirResType(resType) && resTypes.indexOf(resType) > -1) selectedRows.push(i);\n\t\t\t}\n\t\t\tthis.grid.setSelectedRows(selectedRows);\n\t\t}\n\t}\n\n\n\t/** Retourne le nb d'IResType dans a liste, jusqu'à atteindre threshold.\n\t * @param threshold compte max\n\t * @param filter retourne true pour garder l'élément\n\t */\n\tcountResTypesUntil(threshold: number, filter?: (itemType: IResType) => boolean): number {\n\t\tlet count = 0;\n\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\tif (!isDirResType(this.dataHolder.getRow(i).rowDatas) && (!filter || filter(this.dataHolder.getRow(i).rowDatas as IResType))) {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= threshold) return count;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tprotected _initialize(init: OResTypesTreeInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.datas = init.resTypes || this.reg.env.resTypes.getResTypesTree(init.resTypeFilter);\n\t\tthis.dataHolder = new GridDataHolderJsonTree<IDirResType | IResType>('children')\n\t\t\t.setDefaultOpenState(function (e: IDirResType | IResType) {return (e as IDirResType).closed !== true})\n\t\t\t.setDatas(this.datas);\n\n\t\tconst colDefs = [new GridColTreeDef('tree')\n\t\t\t.setFlex('1rem', 1, 1).setMinWidth('55px')\n\t\t\t.setCellBuilder(new CellBuilderResType())];\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tif (init.textFilter != null && this.countResTypesUntil(5) == 5) {\n\t\t\t//On ajoute le filtre\n\t\t\tif (init.forbidHideSelectedRow) this.forbidHideSelRow = true;\n\t\t\tthis.collator = new Intl.Collator('fr', {usage: 'search', sensitivity: 'base'});\n\t\t\tthis.search = sr.appendChild(<input type=\"search\" spellcheck=\"false\" oninput={this.onSearchInput} onkeydown={this.onKeyPress}/>) as HTMLInputElement;\n\t\t}\n\t\tthis.grid = sr.appendChild(new GridSmall().initialize(Object.assign({\n\t\t\tcolumnDefs: colDefs,\n\t\t\tdataHolder: this.dataHolder,\n\t\t\thideHeaders: true\n\t\t}, init.grid)));\n\n\t\tif (init.textFilter) {\n\t\t\tthis.filterText(this.search.value = init.textFilter);\n\t\t\tif (this.countResTypesUntil(1) === 0) {\n\t\t\t\t//Avec ce filtre, aucun itemType, on supprime le filtre.\n\t\t\t\tthis.filterText(\"\");\n\t\t\t}\n\t\t}\n\t}\n\n\tclearSearch(): void {\n\t\tif (this.search && this.search.value != \"\") {\n\t\t\tthis.search.value = \"\";\n\t\t\tthis.search.dispatchEvent(new CustomEvent('input'));\n\t\t}\n\t}\n\n\tprotected onSearchInput(this: HTMLInputElement, ev: InputEvent) {\n\t\tconst tree = DOMSH.findHost(this) as ResTypesTree;\n\t\ttree.filterText(this.value);\n\t}\n\n\tprotected onKeyPress(this: HTMLInputElement, ev: KeyboardEvent) {\n\t\tif (ev.key === 'ArrowDown') {\n\t\t\tconst tree = DOMSH.findHost(this) as ResTypesTree;\n\t\t\tif (tree.grid.getSelectedRow() !== undefined) tree.grid.focus();\n\t\t}\n\t}\n\n\tprotected filterText(val: string) {\n\t\tconst selectedItemsTypes: IResType[] = this.getSelectedResTypes();\n\t\tif (val) {\n\t\t\tconst buildFilteredDatas = (list: (IDirResType | IResType)[]): (IDirResType | IResType)[] => {\n\t\t\t\tconst r = [] as (IDirResType | IResType)[];\n\t\t\t\tfor (const e of list) {\n\t\t\t\t\tif (isDirResType(e)) {\n\t\t\t\t\t\tconst ch = buildFilteredDatas(e.children);\n\t\t\t\t\t\tif (ch.length > 0) {\n\t\t\t\t\t\t\tconst newE = Object.create(e) as IDirResType;\n\t\t\t\t\t\t\tnewE.children = ch;\n\t\t\t\t\t\t\tnewE.closed = false;\n\t\t\t\t\t\t\tr.push(newE)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this.forbidHideSelRow && selectedItemsTypes && selectedItemsTypes.indexOf(e) > -1) {\n\t\t\t\t\t\tr.push(Object.create(e));\n\t\t\t\t\t} else if (this.matchTitle(e.prcLabel, val)) {\n\t\t\t\t\t\tr.push(Object.create(e));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t};\n\t\t\tthis.dataHolder.setDatas(buildFilteredDatas(this.datas));\n\t\t} else {\n\t\t\tthis.dataHolder.setDatas(this.datas);\n\t\t}\n\t\tthis.selectByResTypes(...selectedItemsTypes);\n\t\tif (this.grid.getSelectedRow() === undefined) {\n\t\t\t//Si la sel a disparu, on reselectionne le 1er itemType.\n\t\t\tthis.selectFirst();\n\t\t}\n\t}\n\n\tmatchTitle(title: string, val: string): boolean {\n\t\treturn title.search(new RegExp(LANG.escape4RegexpFuzzy(val), \"i\")) >= 0;\n\t}\n}\n\nREG.reg.registerSkin('store-restypes-tree', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\tinput {\n\t\tborder: none;\n\t\tcolor: var(--form-color);\n\t\tborder-bottom: 1px solid var(--border-color);\n\t\tbackground: .1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg) var(--form-search-bgcolor);\n\t\tpadding-block: 2px;\n\t\tpadding-inline: 1.2em 2px;\n\t}\n\n\tinput:focus {\n\t\toutline: var(--focus-outline);\n\t}\n\n\tc-grid-small {\n\t\tflex: 1;\n\t\tborder: none;\n\t\tbackground-color: var(--row-bgcolor);\n\t}\n`);\n\ncustomElements.define(\"store-restypes-tree\", ResTypesTree);\n\n\nexport class CellBuilderResType extends CellBuilderIconLabel {\n\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tredrawCell(row: GridDataRowJsonTree<IDirResType | IResType>, root: HTMLElement): void {\n\t\tsuper.redrawCell(row, root);\n\t\tconst span = root.firstElementChild as HTMLElement;\n\t\tif (isDirResType(row.rowDatas)) {\n\t\t\tspan.style.display = 'none';\n\t\t\troot.style.fontWeight = 'bold';\n\t\t} else {\n\t\t\tspan.style.display = '';\n\t\t\troot.style.fontWeight = 'normal';\n\t\t\t//DOM.setAttr(root, \"title\", row.rowDatas.prcDesc);\n\t\t}\n\t}\n\n\t_getValue(row: GridDataRowJsonTree<IDirResType | IResType>) {\n\t\treturn isDirResType(row.rowDatas) ? row.rowDatas.label : row.rowDatas.prcLabel;\n\t}\n\n\t_getIcon(row: GridDataRowJsonTree<IDirResType | IResType>) {\n\t\treturn isDirResType(row.rowDatas) ? null : row.rowDatas.prcIcon;\n\t}\n}\n"]}