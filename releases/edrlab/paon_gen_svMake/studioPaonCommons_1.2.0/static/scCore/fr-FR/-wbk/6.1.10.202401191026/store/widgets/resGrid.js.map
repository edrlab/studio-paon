{"version":3,"sources":["/@back@/store/widgets/resGrid.tsx"],"names":["REG","ACTION","Grid","GridDataHolderJsonArray","GridColDef","BASIS","ActionBtn","GridArrayToTree","URLTREE","InfoCurrentRes","CellBuilderResIconName","redrawResLine","ResGrid","[object Object]","this","resList","categorizer","_treeView","target","setProvider","resGridDatas","setCategorizer","dataHolder","resPath","_selectRowKey","findRowKeyByResPath","rowKey","id","getId","getTargetEntryById","offset","getOffset","setSelectedRows","init","config","reg","findReg","ResGridDatas","setDatas","selType","columnDefs","getDefaultColumnDefs","defaultActionCtx","infoBroker","resHandling","resHandlingReact","lineDrawer","super","_initialize","addEventListener","ev","getSelectedDatas","matches","dispatchEvent","CustomEvent","detail","bubbles","composed","actions","injectSepByGroup","getPref","accelKeyMgr","handleKeyboardEvent","draggable","console","log","setDefaultSort","setFlex","setMinWidth","setSortable","setCellBuilder","buildInitFromAtts","hasAttribute","mergeLists","extractAttr","split","connectedCallback","addConsumer","listenChanges","env","depotEvents","on","_resChange","m","trace","_connOpened","removeConsumer","removeListener","ensureRowVisible","_currentResPath","invalidateRows","row","line","focusActionables","_focusActionables","buildButtons","ctxMenuActions","actionContext","rect","getSelRect","info","setCurrentResPath","me","emitter","registerSkin","customElements","define","d","_datas","permaPath","anyLeafVersion","extractUnversionedLeafPath","i","length","isDescendantPathOrEqual","updateDatas","nodeProps","Object","assign","create","idx","findInsertPoint","newProps"],"mappings":"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","sourcesContent":["import {IReg, REG} from \"lib/commons/registry\";\nimport {AccelKeyMgr, ACTION, IAction} from \"lib/commons/actions\";\nimport {IActionable, IContextMenuActionsPointer, IFocusActionables} from \"back/commons/actionables\";\nimport {Grid, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridDataHolderBase, GridDataHolderJsonArray, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {GridColDef, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {BASIS} from \"back/commons/basis\";\nimport {ActionBtn} from \"back/commons/widgets/buttons\";\nimport {IInfo, IInfoBroker, IInfoConsumer} from \"lib/commons/infos\";\nimport {GridArrayToTree, GridDataHolderJsonTree, IGridCategorizer} from \"back/commons/widgets/tree\";\nimport {IDepotUiEnv, JStoreChange} from \"lib/store/depot\";\nimport {JNodeShortProps, URLTREE} from \"lib/store/urlTree\";\nimport {IDepotCtx, InfoCurrentRes, resPath} from \"lib/store/res\";\nimport {CellBuilderResIconName, redrawResLine} from \"back/store/widgets/resGridColumns\";\n\n\n/**\n * store-res-grid : Widget des listes de ressources d'un dépot.\n */\nexport interface ResGrid extends Grid {\n\tinitialize(init: OResGridInit): this\n}\n\nexport interface OResGridInit extends OGridSmallInit {\n\treg?: IReg<IDepotUiEnv>\n\n\n\t/** InfoBroker destiné à dispatcher les events pour les actions de ce ResGrid. */\n\tinfoBroker?: IInfoBroker\n\n\t/** Réagira aux infos issues de ce broker (res courante...) */\n\tresHandlingReact?: IInfoBroker\n\n\t/** Actions associées aux items sélectionnés (menu contextuel et IFocusActionables). */\n\tactions?: IAction<IResGridCtx>[]\n\n\t/** Action excutée au double-click ou sur les frappes entrée ou espace. */\n\tdefaultAction?: IAction<IResGridCtx>\n\n\t/** Racourcis claviers à capter sur la sel courante. */\n\taccelKeyMgr?: AccelKeyMgr<IResGridCtx>\n\n\t/** TODO item draggables. */\n\tdraggable?: boolean\n\n\t/** Restreint l'affichage aux noeuds respectant ce filtre. */\n\t//srcFilter?: (data: JUrlTreeNodeShortProps) => boolean  NON inmplémenté!\n\n\tdataHolder?: IResGridDatas\n\n\t/**\n\t * Si true le widget s'abonnera au connectedCallback aux events de modif et se désabonnera au disconnectedCallback.\n\t * Sinon le widget ne s'abonnera pas (affichages éphémères ou en masse, gestion du refresh géré par l'appelant).\n\t * **!! NON Codé !!**\n\t */\n\tlistenChanges?: boolean\n\n\t/** Supprime le lineDrawer par défaut (avec null) ou customise le lineDrawer. */\n\tlineDrawer?: null | IGridLineDrawer\n}\n\nexport class ResGrid extends Grid implements IResGridCtx, IFocusActionables<IResGridCtx>, IContextMenuActionsPointer<IResGridCtx>, IGridLineDrawer, IInfoConsumer {\n\n\treg: IReg<IDepotUiEnv>;\n\n\tconfig: OResGridInit;\n\taccelKeyMgr: AccelKeyMgr<IResGridCtx>;\n\n\t/** Mémoire des actions pour le menuContextuel. */\n\tactions?: IAction<IResGridCtx>[];\n\n\t/** Fournisseur des donnée courant (resGridDatas ou celui issu du categorizer). */\n\t\t// @ts-ignore\n\tdataHolder: GridDataHolderBase<JNodeShortProps>;\n\n\t/**\n\t * Datas à plat, provider pour un Categorizer ou dataHolder direct pour ce grid.\n\t * A utiliser pour les mises à jour des donnnées (et pas dataHolder).\n\t */\n\tresGridDatas: IResGridDatas;\n\n\t/** API IResGridCtx */\n\tresList: JNodeShortProps[] = [];\n\n\t/** API IResGridCtx pour les actions */\n\tinfoBroker: IInfoBroker;\n\n\n\tresHandling?: IInfoBroker\n\n\tprotected _treeView: GridArrayToTree<JNodeShortProps, JNodeShortProps>;\n\n\tget categorizer(): IGridCategorizer<JNodeShortProps, JNodeShortProps> {\n\t\treturn this._treeView ? this._treeView.categorizer : null;\n\t}\n\n\tsetCategorizer(categorizer: IGridCategorizer<JNodeShortProps, JNodeShortProps>, target?: GridDataHolderJsonTree<JNodeShortProps>) {\n\t\tif (categorizer) {\n\t\t\tif (!this._treeView) this._treeView = new GridArrayToTree(target).setProvider(this.resGridDatas);\n\t\t\tthis._treeView.setCategorizer(categorizer);\n\t\t\tthis.dataHolder = this._treeView.target;\n\t\t} else if (this._treeView) {\n\t\t\t//On supprime le categorizer\n\t\t\tthis._treeView.setProvider(null);\n\t\t\tthis._treeView = null;\n\t\t\tthis.dataHolder = this.resGridDatas;\n\t\t}\n\t}\n\n\tselectResPath(resPath: resPath): boolean {\n\t\treturn this._selectRowKey(this.resGridDatas.findRowKeyByResPath(resPath));\n\t}\n\n\t_selectRowKey(rowKey: JNodeShortProps): boolean {\n\t\tif (!rowKey) return false;\n\t\tif (this._treeView && this._treeView.categorizer) {\n\t\t\tconst id = this._treeView.categorizer.getId(rowKey);\n\t\t\trowKey = this._treeView.getTargetEntryById(id);\n\t\t}\n\t\tconst offset = this.dataHolder.getOffset(rowKey);\n\t\tif (offset < 0) return false;\n\t\tthis.setSelectedRows(offset);\n\t\treturn true;\n\t}\n\n\n\tprotected _initialize(init: OResGridInit) {\n\t\tthis.config = init || {};\n\t\tthis.reg = this.findReg(init);\n\t\tif (!init.dataHolder) init.dataHolder = new ResGridDatas(/*this.reg, init.srcFilter*/).setDatas([]);\n\t\tif (!init.selType) init.selType = 'multi';\n\t\tif (!init.columnDefs) init.columnDefs = this.getDefaultColumnDefs();\n\t\tif (!init.defaultActionCtx) init.defaultActionCtx = this;\n\t\tthis.infoBroker = init.infoBroker;\n\t\tthis.resHandling = init.resHandlingReact;\n\t\tif (!('lineDrawer' in init)) init.lineDrawer = this;\n\t\tthis.resGridDatas = init.dataHolder;\n\n\t\tsuper._initialize(init);\n\n\t\tthis.addEventListener('grid-select', function (this: ResGrid, ev: Event) {\n\t\t\tthis.resList = this.dataHolder.getSelectedDatas();\n\t\t\t//console.log(\"spaceTree.shortDescs::::\", spaceTree.shortDescs);\n\t\t\tif (this.matches(':focus')) this.dispatchEvent(new CustomEvent<IFocusActionables<IResGridCtx>>('c-focus-actions', {detail: this, bubbles: true, composed: true}));\n\t\t});\n\n\t\tif (init.actions) this.actions = ACTION.injectSepByGroup(init.actions, this.reg.getPref(\"groupOrder.store.res\", \"\"), this);\n\t\tif (init.accelKeyMgr) {\n\t\t\tthis.accelKeyMgr = init.accelKeyMgr;\n\t\t\tthis.addEventListener('keydown', (ev: KeyboardEvent) => {\n\t\t\t\tthis.accelKeyMgr.handleKeyboardEvent(ev, this);\n\t\t\t});\n\t\t}\n\n\t\tif (init.draggable) {\n\t\t\tconsole.log(\"TODO:::OResGridInit.draggable\");\n\t\t\t//this.linesNode.setAttribute(\"draggable\", \"true\");\n\t\t\t// this.linesNode.addEventListener('dragstart', function (ev: DragEvent) {\n\t\t\t// \t//console.log(ev);\n\t\t\t// \tITEM.setShortDescTransferToDragSession(DOMSH.findHost<ResGrid>(this), ev, 'build');\n\t\t\t// });\n\t\t\t// this.linesNode.addEventListener('dragend', ITEM.resetShortDescTransferToDragSession);\n\t\t}\n\t}\n\n\tgetDefaultColumnDefs() {\n\t\treturn [new GridColDef('resName')\n\t\t\t.setDefaultSort(1, 'ascendant')\n\t\t\t.setFlex('1rem', 1, 1).setMinWidth('8em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderResIconName(this.reg, false))\n\t\t];\n\t}\n\n\tbuildInitFromAtts(init?: any): any {\n\t\tinit = super.buildInitFromAtts(init);\n\t\tif (this.hasAttribute(\"actions\")) init.actions = this.reg.mergeLists(...BASIS.extractAttr(this, 'actions').split(' '));\n\t\treturn init;\n\t}\n\n\tconnectedCallback() {\n\t\tsuper.connectedCallback();\n\t\tif (this.resHandling) this.resHandling.addConsumer(this);\n\t\tif (this.config.listenChanges && this.reg.env.depotEvents) {\n\t\t\tthis.reg.env.depotEvents.on(\"resChange\", (this._resChange = (m: JStoreChange) => {\n\t\t\t\tconsole.trace(\"TODO:::\");\n\t\t\t}));\n\t\t\tthis.reg.env.depotEvents.on(\"connOpened\", (this._connOpened = () => {\n\t\t\t\tconsole.trace(\"TODO:::\");\n\t\t\t}));\n\t\t}\n\t}\n\n\tprotected _resChange: (m: JStoreChange) => void;\n\tprotected _connOpened: () => void;\n\n\tdisconnectedCallback() {\n\t\tif (this.resHandling) this.resHandling.removeConsumer(this);\n\t\tif (this.config.listenChanges && this.reg.env.depotEvents) {\n\t\t\tthis.reg.env.depotEvents.removeListener(\"resChange\", this._resChange);\n\t\t\tthis._resChange = null;\n\t\t\tthis.reg.env.depotEvents.removeListener(\"connOpened\", this._connOpened);\n\t\t\tthis._connOpened = null;\n\t\t}\n\t}\n\n\tprotected _currentResPath: resPath;\n\n\tensureRowVisibleByResPath(resPath: resPath): boolean {\n\t\tconst rowKey = this.resGridDatas.findRowKeyByResPath(resPath);\n\t\tif (rowKey) this.ensureRowVisible(this.dataHolder.getOffset(rowKey));\n\t\treturn rowKey != null;\n\t}\n\n\tsetCurrentResPath(resPath: resPath | null) {\n\t\tif (this._currentResPath === resPath) return;\n\t\tthis._currentResPath = resPath;\n\t\tthis.invalidateRows();\n\t\t//if (this._currentResPath) this.ensureRowVisibleByResPath(this._currentResPath); //Ergonomiquement douteux : à rendre configuarble ?\n\t}\n\n\tredrawLine(row: GridDataRowJson<JNodeShortProps>, line: HTMLElement): void {\n\t\tredrawResLine(this.reg, row, line, this._currentResPath);\n\t}\n\n\t/** boutons à afficher dans la focusToolbar. */\n\tprotected _focusActionables: IActionable<IResGridCtx>[];\n\tget focusActionables(): IActionable<IResGridCtx>[] {\n\t\tif (!this._focusActionables && this.actions) this._focusActionables = ActionBtn.buildButtons<IResGridCtx>(this.actions, this, 'bar');\n\t\treturn this._focusActionables;\n\t};\n\n\tget ctxMenuActions() {return {actions: this.actions, actionContext: this, rect: this.getSelRect()}}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoCurrentRes) {\n\t\t\tthis.setCurrentResPath(info.resPath);\n\t\t}\n\t}\n\n\t//*** API IResGridCtx ***\n\n\tget me() {return this}\n\n\tget emitter() {return this}\n}\n\nREG.reg.registerSkin('store-res-grid', 1, /* language=CSS */ `\n\t.current {\n\t\tbackground-position: right;\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-image: var(--row-current-img-end);\n\t\tbackground-color: var(--row-current-bgcolor);\n\t}\n\n\t.unlisted > .cell {\n\t\tbackground-position: bottom .2em right .2em;\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-size: .7em;\n\t\tbackground-image: url(/@skin@/store/states/limited.svg);\n\t}\n\n\t.trashed > .cell {\n\t\tbackground-position: bottom .2em right .2em;\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-size: .7em;\n\t\tbackground-image: url(/@skin@/store/states/invisible.svg);\n\t}\n`);\n\ncustomElements.define('store-res-grid', ResGrid);\n\n\n/**\n * Contexte pour les actions du ResGrid.\n * Abstraction de ResGrid pour être utilisé en contexte d'actions wrappées/surchagées.\n */\nexport interface IResGridCtx extends IDepotCtx {\n\tme: ResGrid\n}\n\n/** Api de la source de données pou un ResGrid. */\nexport interface IResGridDatas extends GridDataHolderJsonArray<JNodeShortProps> {\n\tfindRowKeyByResPath(resPath: resPath): JNodeShortProps\n\n\tremoveByResPath(resPath: resPath, anyLeafVersion:boolean): void\n\n\trefreshOrInsertNode(nodeProps: JNodeShortProps, anyLeafVersion:boolean): void\n\n\trefreshFields(rowKey: JNodeShortProps, newProps: JNodeShortProps): void\n}\n\n\nexport class ResGridDatas extends GridDataHolderJsonArray<JNodeShortProps> implements IResGridDatas {\n\n\tconstructor(/*reg: IReg<IDepotUiEnv>, srcFilter?: (data: JUrlTreeNodeShortProps) => boolean*/) {\n\t\tsuper();\n\t}\n\n\tfindRowKeyByResPath(resPath: resPath): JNodeShortProps {\n\t\tfor (const d of this._datas) if (d.permaPath === resPath) return d;\n\t\treturn null;\n\t}\n\n\tremoveByResPath(resPath: resPath, anyLeafVersion:boolean) {\n\t\tif(anyLeafVersion) resPath = URLTREE.extractUnversionedLeafPath(resPath);\n\t\tfor (let i = this._datas.length - 1; i >= 0; i--) {\n\t\t\tif (URLTREE.isDescendantPathOrEqual(resPath, this._datas[i].permaPath, anyLeafVersion)) {\n\t\t\t\tthis.updateDatas(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\trefreshOrInsertNode(nodeProps: JNodeShortProps, anyLeafVersion:boolean) {\n\t\tconst resPath = anyLeafVersion ? URLTREE.extractUnversionedLeafPath(nodeProps.permaPath) : nodeProps.permaPath;\n\t\tfor (let i = 0; i < this._datas.length; i++) {\n\t\t\tif (URLTREE.isDescendantPathOrEqual(resPath, this._datas[i].permaPath, anyLeafVersion)) {\n\t\t\t\tthis.updateDatas(i, 1, Object.assign(Object.create(null), nodeProps));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t//Pas trouvé on insert.\n\t\tconst idx = this.findInsertPoint(this._datas, nodeProps);\n\t\tif (idx >= 0) this.updateDatas(idx, 0, Object.assign(Object.create(null), nodeProps));\n\t}\n\n\trefreshFields(rowKey: JNodeShortProps, newProps: JNodeShortProps) {\n\t\tconst idx = this.getOffset(rowKey);\n\t\tif (idx >= 0) this.updateDatas(idx, 1, Object.assign(Object.create(null), newProps));\n\t}\n}\n"]}