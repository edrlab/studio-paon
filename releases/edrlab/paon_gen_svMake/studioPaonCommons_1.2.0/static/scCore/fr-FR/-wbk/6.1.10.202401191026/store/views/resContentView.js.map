{"version":3,"sources":["/@back@/store/views/resContentView.tsx"],"names":["VIEWS","REG","DOMSH","DOM","JSX","ResBodyView","URLTREE","GridColDef","CellBuilderResTile","MsgLabel","RES","FocusLiveRes","Button","ResChildrenArea","ResFrameView","[object Object]","init","this","reg","_a","areaContext","config","super","_initialize","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","subPath","treeSrv","env","universe","urlTree","initBarActions","shadowRoot","append","createElement","src","urlFromPath","appendToPath","nodeInfos","permaPath","allowfullscreen","registerSkin","customElements","define","ResImgView","checkboard","addClass","ResAudioView","controls","ResVideoView","ResChildrenView","max","nodeFilter","filter","encodeURIComponent","urlTreeSrv","adminUrlTree","initGrid","skinOver","infoBroker","columnDefs","setFlex","setCellBuilder","selType","skinScroll","hideHeaders","emptyBody","initialize","level","label","grid","Object","assign","î","resGridDatas","setNaturalOrder","a","b","naturalSortPathFn","setTilesAuto","parseFloat","getComputedStyle","fontSize","addEventListener","ev","node","dataHolder","getDataByOffset","getSelectedRow","executeIfAvailable","listChildren","path","NODEPROPS_short","then","parent","ch","setDatas","parentPath","appendLeafToPath","moreCh","showSeeAllBtn","nodeInfosChange","on","async","child","props","matchFilter","removeByResPath","isHead","countRows","refreshOrInsertNode","rowKey","findRowKeyByResPath","refreshFields","appendChild","_seeAll","area","count","uiContext","onclick","tag","asResTreeArea","loadBody","replaceWith","onViewHidden"],"mappings":"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","sourcesContent":["import {VIEWS} from \"lib/commons/views\";\nimport {IDepotResEnv, IDepotResUiEnv, IDepotShortResUiEnv, JStoreChangeProps} from \"lib/store/depot\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {OResBodyViewInit, ResBodyView} from \"back/store/views/resViewer\";\nimport {JNodeInfos, JNodeShortProps, URLTREE, UrlTreeSrv} from \"lib/store/urlTree\";\nimport {OResGridInit, ResGrid} from \"back/store/widgets/resGrid\";\nimport {GridColDef} from \"back/commons/widgets/grid-core\";\nimport {CellBuilderResTile} from \"back/store/widgets/resGridColumns\";\nimport {MsgLabel} from \"back/commons/basis\";\nimport {RES} from \"lib/store/res\";\nimport {FocusLiveRes} from \"back/store/actions/depotActions\";\nimport {Button} from \"back/commons/widgets/buttons\";\nimport {ResChildrenArea, ResTreeArea} from \"back/store/areas/resViewAreas\";\n\n/** Init commun à tous les widget affichante un view d'une res. */\nexport interface OResContentViewInit extends OResBodyViewInit {\n\n\tsubPath?: string\n\n\ttreeSrv?: UrlTreeSrv;\n}\n\n/**\n * Content iframe\n */\nexport interface ResFrameView extends ResBodyView {\n\tinitialize(init: OResFrameViewInit): this\n}\n\nexport interface OResFrameViewInit extends OResContentViewInit {\n}\n\nexport class ResFrameView extends ResBodyView {\n\n\tconfig: OResContentViewInit;\n\n\ttreeSrv: UrlTreeSrv;\n\n\tsubPath: string;\n\n\tprotected _initialize(init: OResFrameViewInit) {\n\t\tthis.reg = init.reg || init.areaContext?.reg;\n\t\tthis.config = init;\n\t\tsuper._initialize(init); //init this.area, this.areaContext\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tthis.subPath = init.subPath;\n\t\tthis.treeSrv = init.treeSrv || this.reg.env.universe.urlTree;\n\t}\n\n\tprotected draw() {\n\t\tthis.initBarActions(this.config, this.shadowRoot);\n\t\tthis.shadowRoot.append(<iframe src={this.treeSrv.urlFromPath(URLTREE.appendToPath(this.reg.env.nodeInfos.permaPath, this.subPath), 'evenIfTrashed')} allowfullscreen/>);\n\t}\n\n}\n\nREG.reg.registerSkin('store-res-frame', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\tiframe {\n\t\tflex: 1;\n\t\tbackground-color: #fff;\n\t\tborder: none;\n\t\tborder: 1px solid var(--border-color);\n\t\tmargin-bottom: .5em;\n\t}\n`);\n\ncustomElements.define('store-res-frame', ResFrameView);\n\n/**\n * Content img\n */\nexport interface ResImgView extends ResFrameView {\n\tinitialize(init: OResImgViewInit): this\n}\n\nexport interface OResImgViewInit extends OResContentViewInit {\n\tcheckboard?: boolean\n}\n\nexport class ResImgView extends ResFrameView {\n\n\tprotected _initialize(init: any) {\n\t\tsuper._initialize(init);\n\t\tif (init.checkboard) DOM.addClass(this, \"checkboard\");\n\t}\n\n\tprotected draw() {\n\t\tthis.initBarActions(this.config, this.shadowRoot);\n\t\tthis.shadowRoot.append(<img src={this.treeSrv.urlFromPath(URLTREE.appendToPath(this.reg.env.nodeInfos.permaPath, this.subPath), 'evenIfTrashed')} allowfullscreen/>);\n\t}\n}\n\nREG.reg.registerSkin('store-res-img', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\tpadding: 1px;\n\t}\n\n\t#bodyActions {\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\timg {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tmax-width: max-content;\n\t\tmax-height: max-content;\n\t\tobject-fit: contain;\n\t\talign-self: center;\n\t\t/*background: white;*/\n\t}\n\n\t:host(.checkboard) > img {\n\t\tbackground: /*white*/ repeating-conic-gradient(#88888850 0% 25%, transparent 0% 50%) 50%/10px 10px;\n\t}\n`);\n\ncustomElements.define('store-res-img', ResImgView);\n\n/**\n * Content audio\n */\nexport interface ResAudioView extends ResFrameView {\n\tinitialize(init: OResAudioViewInit): this\n}\n\nexport interface OResAudioViewInit extends OResContentViewInit {\n\n}\n\nexport class ResAudioView extends ResFrameView {\n\n\tprotected draw() {\n\t\tthis.initBarActions(this.config, this.shadowRoot);\n\t\tthis.shadowRoot.append(<audio src={this.treeSrv.urlFromPath(URLTREE.appendToPath(this.reg.env.nodeInfos.permaPath, this.subPath), 'evenIfTrashed')} controls/>);\n\t}\n}\n\nREG.reg.registerSkin('store-res-audio', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tpadding: 1px;\n\t\tmargin-top: 1em;\n\t}\n\n\t#bodyActions {\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n`);\n\ncustomElements.define('store-res-audio', ResAudioView);\n\n\n/**\n * Content video\n */\nexport interface ResVideoView extends ResFrameView {\n\tinitialize(init: OResVideoViewInit): this\n}\n\nexport interface OResVideoViewInit extends OResContentViewInit {\n\n}\n\nexport class ResVideoView extends ResFrameView {\n\n\tprotected draw() {\n\t\tthis.initBarActions(this.config, this.shadowRoot);\n\t\tthis.shadowRoot.append(<video src={this.treeSrv.urlFromPath(URLTREE.appendToPath(this.reg.env.nodeInfos.permaPath, this.subPath), 'evenIfTrashed')} controls/>);\n\t}\n}\n\nREG.reg.registerSkin('store-res-video', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\tpadding: 1px;\n\t\tmargin-top: 1em;\n\t}\n\n\t#bodyActions {\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\tvideo {\n\t\tflex: 1;\n\t\talign-self: center;\n\t\toverflow: hidden;\n\t\tmax-width: 100%;\n\t}\n\n`);\n\ncustomElements.define('store-res-video', ResVideoView);\n\n\n/**\n * Affichage des fils en tuiles.\n */\nexport interface ResChildrenView extends ResBodyView {\n\tinitialize(init: OResChildrenViewInit): this\n}\n\nexport interface OResChildrenViewInit extends OResContentViewInit {\n\tgrid?: OResGridInit\n\tmax?: number\n\t/**\n\t * Filre pour lister les fils et la recherche.\n\t * Exemples :\n\t * - \"isFolder\"\n\t * - \"isFolder & !inTrash & !unlisted &!moved\"\n\t * - \"usable\" ( = !inTrash & !unlisted &!moved)\n\t * - \"regexpPrc(img.*) & !inTrash\"\n\t * - \"prc(image,audio,video) & !inTrash\"\n\t * - null : pas de filtre\n\t *\n\t * Note : filtre toujours ajouté à celui-ci (même si null) : isResRoot&!isQuery\n\t *\n\t * @see eu.scenari.urltree.util.UrlTreeNodePredicates\n\t */\n\tfilter?: string\n}\n\nexport class ResChildrenView extends ResBodyView {\n\n\tconfig: OResChildrenViewInit;\n\n\treg: IReg<IDepotResUiEnv | IDepotShortResUiEnv>;\n\n\tnodeFilter?: string\n\n\tprotected _initialize(init: OResChildrenViewInit) {\n\t\tthis.reg = init.reg || init.areaContext?.reg;\n\t\tsuper._initialize(init); //init this.area, this.areaContext\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tif (!init.max) init.max = 1000;\n\t\tthis.config = init;\n\t\tthis.nodeFilter = init.filter ? `${encodeURIComponent(init.filter)}%26isResRoot%26!isQuery` : `isResRoot%26!isQuery`;\n\t}\n\n\tprotected draw() {\n\t\tconst urlTreeSrv = this.reg.env.universe.adminUrlTree;\n\t\tconst initGrid: OResGridInit = {\n\t\t\treg: this.reg,\n\t\t\tskinOver: 'store-res-tile',\n\t\t\tinfoBroker: this.reg.env.infoBroker,\n\t\t\tcolumnDefs: [new GridColDef(\"tile\").setFlex(\"auto\", 1, 1).setCellBuilder(new CellBuilderResTile(this.reg))],\n\t\t\tselType: \"monoClick\",\n\t\t\tskinScroll: \"scroll/large\",\n\t\t\thideHeaders: true,\n\t\t\temptyBody: () => new MsgLabel().initialize({reg: this.reg, level: \"info\", label: \"Dossier vide\"})\n\t\t};\n\t\tif (this.config.grid) Object.assign(initGrid, this.config.grid);\n\t\tconst grid = <store-res-grid î={initGrid}/> as ResGrid;\n\t\tgrid.resGridDatas.setNaturalOrder((a: JNodeShortProps, b: JNodeShortProps): number => urlTreeSrv.naturalSortPathFn(a.permaPath, b.permaPath));\n\t\tgrid.setTilesAuto(12 * parseFloat(getComputedStyle(this).fontSize), this.reg); //12 em de large par tuile.\n\t\tgrid.addEventListener('grid-select', (ev: Event) => {\n\t\t\tconst node = grid.dataHolder.getDataByOffset(grid.getSelectedRow());\n\t\t\tif (node) new FocusLiveRes().executeIfAvailable(grid, ev);\n\t\t});\n\n\t\turlTreeSrv.listChildren(this.reg.env.path, `&excludeAll&props=permaPath&childrenProps=${RES.NODEPROPS_short}&childrenFilter=${this.nodeFilter}&maxChildren=${this.config.max}`).then((parent) => {\n\t\t\tif (!parent || !parent.ch) {\n\t\t\t\tgrid.resGridDatas.setDatas([]);\n\t\t\t} else {\n\t\t\t\tconst parentPath = parent.permaPath;\n\t\t\t\tfor (let ch of parent.ch as JNodeInfos[]) {\n\t\t\t\t\tch.permaPath = URLTREE.appendLeafToPath(parentPath, ch);\n\t\t\t\t}\n\t\t\t\t// const copy = parent.ch.concat();\n\t\t\t\t// for (let i = 0; i < 8; i++) {\n\t\t\t\t// \tfor (let c of copy) {\n\t\t\t\t// \t\tparent.ch.push(Object.assign({}, c));\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t\tgrid.resGridDatas.setDatas(parent.ch as JNodeInfos[]);\n\t\t\t\tif (parent.moreCh) this.showSeeAllBtn();\n\t\t\t}\n\t\t});\n\t\tconst nodeInfosChange = (this.reg.env as IDepotResEnv).nodeInfosChange;\n\t\tif (nodeInfosChange) {\n\t\t\tnodeInfosChange.on(\"childChange\", async (child: JStoreChangeProps) => {\n\t\t\t\tconst props = await urlTreeSrv.nodeInfos(child.path, `&excludeAll&props=isHead*${RES.NODEPROPS_short}&matchFilter=${this.nodeFilter}`);\n\t\t\t\tif (!props || props.matchFilter === false) {\n\t\t\t\t\tgrid.resGridDatas.removeByResPath(child.path, props?.isHead || false);\n\t\t\t\t} else if (props.isHead) {\n\t\t\t\t\tif (grid.resGridDatas.countRows() < this.config.max) {\n\t\t\t\t\t\tgrid.resGridDatas.refreshOrInsertNode(props, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst rowKey = grid.resGridDatas.findRowKeyByResPath(props.permaPath);\n\t\t\t\t\t\tif (rowKey) grid.resGridDatas.refreshFields(rowKey, props);\n\t\t\t\t\t\tthis.showSeeAllBtn();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.initBarActions(this.config, this.shadowRoot);\n\t\tthis.shadowRoot.appendChild(grid);\n\t}\n\n\tshowSeeAllBtn() {\n\t\tif (!this._seeAll && this.config.area instanceof ResChildrenArea) {\n\t\t\tconst count = this.config.max;\n\t\t\tthis._seeAll = new Button().initialize({\n\t\t\t\treg: this.reg,\n\t\t\t\tuiContext: \"dialog\",\n\t\t\t\tlabel: `Plus de ${count} éléments, tout afficher en liste...`\n\t\t\t});\n\t\t\tthis._seeAll.onclick = async () => {\n\t\t\t\tconst tag = await ((this.config.area as ResTreeArea).asResTreeArea().loadBody(this));\n\t\t\t\tthis.replaceWith(tag);\n\t\t\t\tVIEWS.onViewHidden(tag);\n\t\t\t}\n\t\t\tthis.shadowRoot.appendChild(this._seeAll);\n\t\t}\n\t}\n\n\t_seeAll: Button;\n}\n\nREG.reg.registerSkin('store-res-children', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t}\n\n\tstore-res-grid {\n\t\tflex: 1;\n\t\tborder: none;\n\t}\n\n\tc-bar-actions + store-res-grid {\n\t\tborder-top: 1px solid var(--border-color);\n\t}\n`);\n\ncustomElements.define('store-res-children', ResChildrenView);"]}