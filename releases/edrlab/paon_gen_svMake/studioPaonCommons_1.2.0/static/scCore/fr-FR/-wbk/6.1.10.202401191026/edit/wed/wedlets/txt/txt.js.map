{"version":3,"sources":["/@back@/edit/wed/wedlets/txt/txt.ts"],"names":["BarActions","POPUP","AgEltBoxSelection","AgWedletBoxSelectionSingleElt","TxtSelMgr","TxtSelMgrFrozen","isWedChildrenElt","NoneModel","WED","WedModel","AgEltBoxInputAnnotable","removeAnnots","copyAsXml","createTxtAction","pasteAsString","pasteAsText","spellcheckMenu","InlEmpty","InlImg","InlLeaf","InlLink","InlNote","InlObject","InlPhrase","InlStyle","TxtCaption","TxtCell","TxtCol","TxtDiv","TxtElement","TxtEmpty","TxtLI","TxtMember","TxtObject","TxtOL","TxtPara","TxtParaLike","TxtRow","TxtSL","TxtStr","TxtTable","TxtTitle","TxtUL","adjustVirtualsPara","adjustVirtualsStr","beforeInputHandler","deleteFromSel","doInput","findTxtEltFirstChild","findTxtEltOrRootParent","findTxtParaLikeFrom","findTxtStrFirstChild","findTxtStrLastChild","findTxtStrNext","findTxtStrParent","findTxtStrPrevious","IS_TxtElement","IS_TxtStr","keyDownHandler","keyPressHandler","EWedletEditMode","EWedletEditModeLabel","WEDLET","WedletActionCtx","isWedletSingleElt","AccelKeyMgr","ACTION","Action","ActionSeparator","REG","DOM","ENodeType","DOMSH","JML","AgEltBoxInsertDrawerTxt","BoxModel","LANG","Desk","TXT_NS","TxtModel","modes","DEFAULT_MODES","val","isInline","roleAttName","ATTNAME_role","hasRefresh","this","refreshSvc","refreshLib","[object Object]","elt","refresh","findReg","getSvc","lib","wedMgr","wedModel","jsLibs","refreshMeth","call","console","log","hasOnCreateHook","onCreateSvc","onCreateLib","parent","hook","wedlet","onCreateMeth","Promise","resolve","txtWedModels","tagName","role","txtModel","nodeName","paraModel","txtRootModel","strModel","cnf","config","getAttributeNS","nodeLabel","getAttribute","closest","tag","firstElementChild","nextElementSibling","namespaceURI","nm","localName","metasName","panelModel","newWedletModel","nodeType","perms","parsePerms","initModel","renderingModel","initDiff","displayContext","newWedlet","initWedlet","wContainer","insertBefore","Error","jml","","insertCtx","txtRoot","model","wedSelector","node","ctx","element","jmlNode2nodeType","SELECTOR_PERFECT_MATCH","SELECTOR_REJECT","TxtContainerModel","super","preferedBlockTxtModels","InlineContentModel","preferedInlineTxtModels","TxtParaModel","xml:space","registerWedletModel","TxtULModel","ch","itemModel","buildBind","titleModel","debug","childrenModels","TxtOLModel","TxtSLModel","memberModel","TxtDivModel","TxtTableModel","colModels","rowModels","push","captionModel","TxtLIModel","TxtMemberModel","TxtTitleModel","TxtCaptionModel","TxtColModel","widthMgr","offs","indexOf","widthMgrLib","substring","widthMgrKey","ser","refreshW","callRefresh","TxtRowModel","cellModels","TxtCellModel","spanMgrLib","spanMgrKey","spanMgr","refreshSpan","TxtObjectModel","diffSvc","annot","diffCustom","addDiff","removeDiff","TxtEmptyModel","InlPhraseModel","splitPriority","InlStyleModel","InlLinkModel","InlLeafModel","InlImgModel","InlObjectModel","InlEmptyModel","InlNoteModel","TxtStrModel","keepSpaces","isOnTypingFactory","ot","findOnTyping","def","reg","svcCode","OnTypingFromSvc","OnTypingFromLib","identifier","buildOnTyping","TxtRoot","HTMLElement","_RefreshCycle","addEventListener","onFocusin","onBlur","onKeyDown","onKeyPress","onCompositionStart","onCompositionUpdate","onCompositionEnd","onBeforeinput","onCopy","onCut","onPaste","onDragstart","onDrop","onClick","style","whiteSpace","wedAnchor","focusedElt","isTextContainer","isMonoPara","selMgr","_selMgrFrozen","selMgrAsIs","fixupSel","_a","wedParent","st","flex","n","getFlatParentElt","root","wedEditor","rootNode","display","flexDirection","padding","border","wedConfig","wedChildrenElt","wedPreferedModels","before","childrenElt","para","createWedlet","wedDefaultDisplay","configWedletElt","wedSlotName","setAttribute","hasAttribute","evalPlaceHolder","fromChildrenElt","bindAsVirtual","trace","focusNode","isConnected","tpl","contentEditable","isWritableWedlet","setDelegatedHost","_indexModel","descendants","findFirstChild","bind","findModelForVirtual","text","inlineMarks","getUserData","getPref","inlineMarkers","txtRootProps","props","getDatasForModel","onTypings","undefined","focusBarActions","tableBarsActions","subReg","createSubReg","accelKeyMgr","addAccelKey","conf","list","split","defKey","addToList","LEVELAUTH_MODEL","initFromMapActions","mergeListsAsMap","actions","btn","id","action","mergeLists","length","injectSepByGroup","otElt","getList","registerSkin","textContent","i","focusBar","initialize","actionContext","WedTxtRootCtx","k","tableBars","inlineMarkStyle","SKIN_PREFIX","isVirtual","mode","write","setAttr","findOrCreateTxtStr","styleDef","getSkinIfExist","findDocumentOrShadowRoot","disabled","shRoot","installSkin","showTxtStackBar","hideTxtStackBar","persist","getPersistUserStates","setUserDatas","wedTxtInlineMarkers","bar","ctxMenuActions","electron","ev","selectAll","KeyboardEvent","key","d","DataTransfer","setData","doPaste","onFocus","type","textNode","txtStr","ime","start","focusOffset","len","pendingIme","data","webUpdateDone","inputType","cancelable","preventDefault","ctrlKey","metaKey","handleKeyboardEvent","defaultPrevented","detail","trim","from","selectAround","stopImmediatePropagation","tableLayout","writeRangeToClipboard","getXaRange","clipboardData","targetHint","dataTransfer","txtElt","commonAncestor","txStamp","impCtx","buildImportContext","imports","tryPaste","showNotifInfo","doImport","async","importer","needAsyncBuild","buildContentToImport","batch","docHolder","newBatch","freezeFocus","doBatch","str","setCaretAtEnd","sel","setSelBefore","map","imp","setLabel","getLabel","setExecute","locked","showPopupActions","restoreFocus","tblEditNode","focusCell","virtualPath","buildVirtualPath","childNodes","lastChild","setCaretIn","what","oldFocus","oldOffset","range","anchorNode","child","anchorOffset","startContainer","findNextUncle","findNext","IS_text","setSelAnchor","startBoundary","findPreviousIn","endBoundary","setSelFocus","backward","alter","granularity","Text","moveCaretFrom","moveCaretOut","paraSib","p","selType","rCaret","_sel","getRangeAt","getBoundingClientRect","rgP","Range","selectNodeContents","pCaret","top","bottom","findParentOrSelf","nextP","findPrevious","selMode","window","customElements","define","onRefreshCycle","TxtRootInline","onFocusout","findHost","removeAttribute","StrModel","isBoxFamily","_modes","TxtStrAlone","_element","attribute","getVirtualXaPart","xaOffest","children","refreshEditMode","bindWithNode","nameAttr","value","xaPart","refreshBindValue","slotName","caller","document","importNode","subEltWedlets","strRoot","TxtRootStr","shadowRoot","querySelector","appendChild","xaTarget","diffLib","isDiffAnnot","diffSession","getDiffSession","in","createElement","initDiffValue","initDiffAnnot","parentElement","defaultInject","onAddedSkAnnot","_b","wedAnnotDiff","skAnnot","removeDiffWidget","_c","onRemovedSkAnnot","oldD","getData","newD","transformInsertData","otherValue","eltFrom","eltTarget","placeholderupAtt","axePos","axe","minLevel","maxLevel","bounds","parseInt","lastFindPlaceholder","up","Box2TxtModel","txtTagsDefined"],"mappings":"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","sourcesContent":["import {IContextMenuActions, IContextMenuActionsPointer} from \"back/commons/actionables\";\nimport {BarActions} from \"back/commons/widgets/bars\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {AgEltBoxSelection, AgWedletBoxSelectionSingleElt, IEltBoxSelection} from \"back/edit/wed/features/boxSel\";\nimport {IWedFocusBarPointer} from \"back/edit/wed/features/commonBar\";\nimport {IWedEditorTxtSel, TxtSelMgr, TxtSelMgrFrozen} from \"back/edit/wed/features/txtSel\";\nimport {isWedChildrenElt, IWedChildrenElt, IWedDisplayElt, IWedletModel, IWedSelector, NoneModel, WED, WedModel} from \"back/edit/wed/wedCore\";\nimport {WedMgr} from \"back/edit/wed/wedEditor\";\nimport {AgEltBoxInputAnnotable, IBoxElement, IBoxInputDiffMaker, removeAnnots} from \"back/edit/wed/wedlets/box/boxTags\";\nimport {copyAsXml, createTxtAction, ITxtAction, pasteAsString, pasteAsText, spellcheckMenu} from \"back/edit/wed/wedlets/txt/txtActions\";\n//Actions des tables.\nimport {TXTTABLE} from \"back/edit/wed/wedlets/txt/txtTable\";\nimport {\n\tInlEmpty,\n\tInlImg,\n\tInlLeaf,\n\tInlLink,\n\tInlNote,\n\tInlObject,\n\tInlPhrase,\n\tInlStyle,\n\tTxtCaption,\n\tTxtCell,\n\tTxtCol,\n\tTxtDiv,\n\tTxtElement,\n\tTxtEmpty,\n\tTxtLI,\n\tTxtMember,\n\tTxtObject,\n\tTxtOL,\n\tTxtPara,\n\tTxtParaLike,\n\tTxtRow,\n\tTxtSL,\n\tTxtStr,\n\tTxtTable,\n\tTxtTitle,\n\tTxtUL\n} from \"back/edit/wed/wedlets/txt/txtTags\";\nimport {\n\tadjustVirtualsPara,\n\tadjustVirtualsStr,\n\tbeforeInputHandler,\n\tdeleteFromSel,\n\tdoInput,\n\tfindTxtEltFirstChild,\n\tfindTxtEltOrRootParent,\n\tfindTxtParaLikeFrom,\n\tfindTxtStrFirstChild,\n\tfindTxtStrLastChild,\n\tfindTxtStrNext,\n\tfindTxtStrParent,\n\tfindTxtStrPrevious,\n\tIFixCaret,\n\tIFixSelection,\n\tIS_TxtElement,\n\tIS_TxtStr,\n\tITxtColWidthMgr,\n\tkeyDownHandler,\n\tkeyPressHandler\n} from \"back/edit/wed/wedlets/txt/txtUtils\";\nimport {EWedletEditMode, EWedletEditModeLabel, IEditableWedlet, IElementWedlet, IParentWedlet, IRootWedlet, IWedAnnotPointer, IWedlet, IWedletActionCtx, WEDLET, WedletActionCtx} from \"back/edit/wed/wedlets/wedlet\";\nimport {isWedletSingleElt, IWedletSingleElt} from \"back/edit/wed/wedlets/wedletSingleElt\";\nimport {AccelKeyMgr, ACTION, Action, ActionSeparator, IAccelKeyMgrPointer, IAction, ISpellcheckContextPointer} from \"lib/commons/actions\";\nimport {IReg, REG} from 'lib/commons/registry';\nimport {IRefreshHook} from \"lib/commons/utils/signboard\";\nimport {DOM, ENodeType, INodeFilter} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IJmlNode, IJmlObj, IJmlSet, IJmlSubSet, JML} from \"lib/commons/xml/jml\";\nimport {IXAddr} from \"lib/commons/xml/xAddr\";\nimport {ISkImporter, OSkPasteContext} from \"lib/edit/schema/schemaMeta\";\n// Force la déclaration des SkMeta de texte riche.\nimport \"lib/edit/schema/schemaMetaTxt\";\nimport {AgEltBoxInsertDrawerTxt} from \"back/edit/wed/features/insMgrTxt\";\nimport {IDiffAnnotValue, ISkDiffAnnot} from \"lib/edit/schema/diff\";\nimport {ISkAnnot} from \"lib/edit/schema/schemaAnnots\";\nimport {WedDiffMark, WedDiffValue} from \"back/edit/wed/wedlets/diff/diffTags\";\nimport {BoxModel} from \"back/edit/wed/wedlets/box/box\";\nimport {ITxtStrTextNode} from \"back/edit/wed/wedlets/txt/txtStr\";\nimport {LANG} from \"lib/commons/lang\";\nimport {Desk} from \"lib/commons/desk\";\n\nexport const TXT_NS = \"scenari.eu:wed:txt\";\n\n/**\n * Modèle pour les balises block et inline du texte.\n * <txt-root>\n *   <wed:children defaultDisplay=\"sc:para\">\n *     <wed:bind eltName=\"sc:para\" label=\"Paragraphe\" wedlet=\"TxtPara\" txt:style=\"display:block;\"/>\n *   </wed:children>\n *   <txt:descendants>\n *   </txt:descendants>\n *   <txt:uiconfig>\n *   </txt:uiconfig>\n * </txt-root>\n */\nexport abstract class TxtModel implements IWedletModel {\n\n\t/** Nom de l'attribut 'role' dans les flux xml. TODO à configurer dans le TxtModel. */\n\tstatic ATTNAME_role = 'role';\n\n\t/**\n\t *\n\t */\n\tstatic wedSelector: IWedSelector = function (wedModel: IWedletModel, node: IJmlNode | string, ctx: WedMgr | IWedlet): number {\n\t\tif (wedModel instanceof TxtModel) {\n\t\t\t//score en fonction du matching du role.\n\t\t\tif (wedModel.nodeType === ENodeType.element && (node == null || JML.jmlNode2nodeType(node) === ENodeType.element)) {\n\t\t\t\tif (wedModel.role === null) {\n\t\t\t\t\t//role non spécifié dans le modèle, config par défaut.\n\t\t\t\t\treturn 10;\n\t\t\t\t} else if (wedModel.role === ((node && (node as IJmlObj)[TxtModel.ATTNAME_role]) || \"\")) {\n\t\t\t\t\treturn WedModel.SELECTOR_PERFECT_MATCH;\n\t\t\t\t}\n\t\t\t\treturn WedModel.SELECTOR_REJECT;\n\t\t\t}\n\t\t\t//match text, comment\n\t\t\treturn WedModel.SELECTOR_PERFECT_MATCH;\n\t\t} else if (wedModel instanceof NoneModel) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn WedModel.SELECTOR_REJECT;\n\t};\n\n\tnodeType: ENodeType;\n\tnodeName: string;\n\n\t//Notion de modes pas utilisés dans Txt. à voir, exigerait une balise dans la\n\t// config en plus de la notion d'exclude  : <include eltName=\"\" callModes=\"\"/> ?\n\tget modes(): string[] {return WED.DEFAULT_MODES};\n\n\tset modes(val: string[]) {}//setter obligatoire pour les modèles fils directs de txt-root (initialisés via les mécanismes génériques).\n\t//callModes: string[];\n\n\tnodeLabel?: string;\n\n\tconfig: Element;\n\n\tget isInline() {return false}\n\n\t/**\n\t * Role de la balise Txt valide pour ce wedlet.\n\t * Si null, configuration par défaut pour les roles non déclarés explicitement dans le modèle\n\t * (ne signifie pas nécessairement inconnu du point de vue du schéma).\n\t *\n\t */\n\trole: string;\n\n\t/**\n\t * Pour les TxtModel qui définissent un schéma connu et déclarés dans la descendance d'un <txt-root/> définit dans le fichier WED.\n\t * null si ce model est spécifié dans le registre central des WED pour constituer les implémentations par défaut\n\t * des structures inconnues.\n\t */\n\ttxtRootModel: ITxtRootModel;\n\n\t/** WedletModel pour l'affichage du panel d'édition de ce tag (wedlet Box bindé sur le tag incluant attributs, metas, contenu). */\n\tpanelModel: IWedletModel;\n\n\t/** WedletModel pour l'affichage de la preview de ce tag (wedlet Box bindé sur le tag incluant attributs, metas, contenu). */\n\trenderingModel: IWedletModel;\n\n\t/** Nom de l'attr role. */\n\tget roleAttName(): string {return TxtModel.ATTNAME_role}\n\n\t/** Nom de la balise metas. */\n\tmetasName: string;\n\n\t/** Fonction de redessinement du wedlet suite à création/modification/suppression des metas. */\n\trefreshLib: string;\n\trefreshMeth: string;\n\trefreshSvc: string;\n\n\tget hasRefresh(): boolean {return this.refreshSvc != null || this.refreshLib != null}\n\n\tcallRefresh(elt: TxtElement) {\n\t\tlet refresh: ITxtRefresh;\n\t\tif (this.refreshSvc) refresh = REG.findReg(elt).getSvc(this.refreshSvc) as ITxtRefresh;\n\t\tif (!refresh) {\n\t\t\tconst lib = elt.wedMgr.wedModel.jsLibs[this.refreshLib];\n\t\t\tif (lib) refresh = lib[this.refreshMeth];\n\t\t}\n\t\tif (refresh) refresh.call(elt);\n\t\telse console.log(\"ITxtRefresh function not found. svc=\" + this.refreshSvc + \" lib=\" + this.refreshLib + \".\" + this.refreshMeth);\n\t}\n\n\tprotected onCreateLib: string;\n\tprotected onCreateMeth: string;\n\tprotected onCreateSvc: string;\n\n\tget hasOnCreateHook(): boolean {return this.onCreateSvc != null || this.onCreateLib != null}\n\n\tcallOnCreateHook(parent: ITxtElement): Promise<IJmlSet> {\n\t\tlet hook: ITxtOnCreateHook;\n\t\tif (this.onCreateSvc) hook = REG.findReg(parent).getSvc(this.onCreateSvc) as ITxtOnCreateHook;\n\t\tif (!hook) {\n\t\t\tconst lib = (parent instanceof TxtElement ? parent : parent.wedlet).wedMgr.wedModel.jsLibs[this.onCreateLib];\n\t\t\tif (lib) {\n\t\t\t\thook = lib[this.onCreateMeth];\n\t\t\t}\n\t\t}\n\t\tif (hook) return hook.call(this, parent);\n\t\tconsole.log(\"ITxtOnCreateHook function not found. svc=\" + this.onCreateSvc + \" lib=\" + this.onCreateLib + \".\" + this.onCreateMeth);\n\t\treturn Promise.resolve(null);\n\t}\n\n\t/**\n\t * Modèles fils connus du schéma.\n\t */\n\tget txtWedModels(): TxtModel[] {return null}\n\n\tgetTxtWedModel(tagName: string, role?: string): TxtModel {\n\t\tif (this.txtWedModels) for (const txtModel of this.txtWedModels) if (txtModel.nodeName === tagName && (role == null || txtModel.role === role)) return txtModel;\n\t\treturn null;\n\t}\n\n\t/** Model de paragraphe déclaré dans le schéma.*/\n\tget paraModel(): TxtParaModel {return this.txtRootModel ? this.txtRootModel.paraModel : null}\n\n\t/** Model de noeud texte déclaré dans le schéma. */\n\tget strModel(): TxtStrModel {return this.txtRootModel ? this.txtRootModel.strModel : null}\n\n\tinitModel(cnf: Element) {\n\t\tthis.config = cnf;\n\t\tthis.role = cnf.getAttributeNS(TXT_NS, 'role');// || \"\" NON sinon bloque les TxtModel génériques (non reconnus).\n\t\t//this.callModes = WED.parseModes(cnf.getAttributeNS(TXT_NS, \"callModes\") || cnf.getAttributeNS(TXT_NS, \"modes\"));\n\t\tthis.nodeLabel = cnf.getAttribute('label');\n\t\tthis.txtRootModel = cnf.closest('txt-root,txt-root-inline') as any as ITxtRootModel;\n\t\tfor (let tag = cnf.firstElementChild; tag; tag = tag.nextElementSibling) {\n\t\t\tif (tag.namespaceURI === TXT_NS) {\n\t\t\t\tconst nm = tag.localName;\n\t\t\t\tif (nm === 'metas') {\n\t\t\t\t\tthis.metasName = tag.getAttribute('eltName');\n\t\t\t\t} else if (nm === 'refresh') {\n\t\t\t\t\tthis.refreshSvc = tag.getAttribute('svc');\n\t\t\t\t\tconst lib = tag.getAttribute('lib');\n\t\t\t\t\tif (lib) {\n\t\t\t\t\t\tthis.refreshLib = lib;\n\t\t\t\t\t\tthis.refreshMeth = tag.getAttribute('method');\n\t\t\t\t\t}\n\t\t\t\t} else if (nm === 'onCreate') {\n\t\t\t\t\tthis.onCreateSvc = tag.getAttribute('svc');\n\t\t\t\t\tconst lib = tag.getAttribute('lib');\n\t\t\t\t\tif (lib) {\n\t\t\t\t\t\tthis.onCreateLib = lib;\n\t\t\t\t\t\tthis.onCreateMeth = tag.getAttribute('method');\n\t\t\t\t\t}\n\t\t\t\t} else if (nm === 'panel') {\n\t\t\t\t\tthis.panelModel = WED.newWedletModel(tag.getAttribute('wedlet') || 'Box');\n\t\t\t\t\tthis.panelModel.nodeType = this.nodeType;\n\t\t\t\t\tthis.panelModel.nodeName = this.nodeName;\n\t\t\t\t\tthis.panelModel.perms = WED.parsePerms(tag);\n\t\t\t\t\tthis.panelModel.initModel(tag);\n\t\t\t\t} else if (nm === 'rendering') {\n\t\t\t\t\tthis.renderingModel = WED.newWedletModel(tag.getAttribute('wedlet') || 'Box');\n\t\t\t\t\tthis.renderingModel.nodeType = this.nodeType;\n\t\t\t\t\tthis.renderingModel.nodeName = this.nodeName;\n\t\t\t\t\tthis.renderingModel.perms = WED.parsePerms(tag);\n\t\t\t\t\tthis.renderingModel.initModel(tag);\n\t\t\t\t} else if (nm === 'diff') {\n\t\t\t\t\tthis.initDiff(tag);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** tag = {scenari.eu:wed:txt}:diff */\n\tprotected initDiff(tag: Element) {}\n\n\tcreateWedlet(parent: IParentWedlet, displayContext?: IWedDisplayElt): TxtElement {\n\t\treturn this.newWedlet().initWedlet(this, parent, displayContext);\n\t}\n\n\tprotected abstract newWedlet(): TxtElement;\n\n\tcreateRootWedlet(wContainer: Element, insertBefore: Node, wedMgr: WedMgr): IRootWedlet {\n\t\tthrow Error(\"Txt wedlets not allowed as root wedlet.\");\n\t}\n\n\tnewJml(): IJmlNode {\n\t\tconst jml = {'': this.nodeName} as IJmlObj;\n\t\tif (this.role) jml[TxtModel.ATTNAME_role] = this.role;\n\t\treturn jml;\n\t}\n\n\tbuildModelForFragment(insertCtx: IWedlet & ITxtElement): IWedletModel {\n\t\treturn insertCtx.txtRoot.wedlet.model;\n\t}\n}\n\n/** Api free pour customiser la rendition d'un TxtElement. */\nexport type ITxtRefresh = (this: TxtElement) => void;\n\n/** Api free pour customiser la création d'un TxtElement. */\nexport type ITxtOnCreateHook = (this: TxtModel, parent: ITxtElement) => Promise<IJmlSet>;\n\n/** Api free pour customiser l'affichage d'une diff. Utilisable uniquement sur TxtObjectModel et TxtEmptyModel */\nexport interface ITxtAnnotDiff {\n\n\t/**\n\t * Ajoute une diff. TxtElement.wedAnnotDiff devrait être renseigné à l'ajout de la 1ère annotation.\n\t * @return true si la gestion de cette annot a été prise en charge\n\t */\n\taddDiff(elt: TxtObject, annot: ISkDiffAnnot): boolean\n\n\t/** Supprime une diff. TxtElement.wedAnnotDiff devrait être nullifié à la suppression de la dernière annotation. */\n\tremoveDiff(elt: TxtObject, annot: ISkDiffAnnot): void\n}\n\n\nexport interface IInlWrapModel extends TxtModel {\n\tsplitPriority: number;\n}\n\nexport abstract class TxtContainerModel extends TxtModel {\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t}\n\n\t//TODO mécanismes d'excludes des balises filles.\n\tget txtWedModels(): TxtModel[] {return this.txtRootModel ? this.txtRootModel.preferedBlockTxtModels : null}\n}\n\nexport abstract class InlineContentModel extends TxtModel {\n\n\t//TODO mécanismes d'excludes des balises filles.\n\tget txtWedModels(): TxtModel[] {return this.txtRootModel ? this.txtRootModel.preferedInlineTxtModels : null}\n}\n\n// ***** blocks *****\n\nexport class TxtParaModel extends InlineContentModel {\n\tprotected newWedlet(): TxtElement {return new TxtPara()}\n\n\tnewJml(): IJmlObj {\n\t\tconst jml = {'': this.nodeName, 'xml:space': 'preserve'} as IJmlObj;\n\t\tif (this.role) jml[TxtModel.ATTNAME_role] = this.role;\n\t\treturn jml;\n\t}\n}\n\nWED.registerWedletModel(\"TxtPara\", TxtParaModel);\n\n/** sc:itemizedList */\nexport class TxtULModel extends TxtModel {\n\titemModel: TxtLIModel;\n\ttitleModel: TxtCaptionModel;\n\tchildrenModels: TxtModel[];\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t\tfor (let ch = cnf.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif (ch.localName === 'item' && ch.namespaceURI === TXT_NS) {\n\t\t\t\tthis.itemModel = WED.buildBind(ch, 'TxtLI') as TxtLIModel;\n\t\t\t} else if (ch.localName === 'title' && ch.namespaceURI === TXT_NS) {\n\t\t\t\tthis.titleModel = WED.buildBind(ch, 'TxtTitle') as TxtCaptionModel;\n\t\t\t}\n\t\t}\n\t\tif (!this.itemModel) throw Error(\"No txt:item tag declared in wed: \" + DOM.debug(cnf));\n\t\tthis.childrenModels = this.titleModel ? [this.titleModel, this.itemModel] : [this.itemModel];\n\t}\n\n\tget txtWedModels(): TxtModel[] {return this.childrenModels}\n\n\tprotected newWedlet(): TxtElement {return new TxtUL()}\n}\n\nWED.registerWedletModel(\"TxtUL\", TxtULModel);\n\n/** sc:orderedList */\nexport class TxtOLModel extends TxtULModel {\n\tprotected newWedlet(): TxtElement {return new TxtOL()}\n}\n\nWED.registerWedletModel(\"TxtOL\", TxtOLModel);\n\n/** sc:simpleList */\nexport class TxtSLModel extends TxtModel {\n\tmemberModel: TxtMemberModel;\n\ttitleModel: TxtCaptionModel;\n\tchildrenModels: TxtModel[];\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t\tfor (let ch = cnf.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif (ch.localName === 'member' && ch.namespaceURI === TXT_NS) {\n\t\t\t\tthis.memberModel = WED.buildBind(ch, 'TxtMember') as TxtMemberModel;\n\t\t\t} else if (ch.localName === 'title' && ch.namespaceURI === TXT_NS) {\n\t\t\t\tthis.titleModel = WED.buildBind(ch, 'TxtTitle') as TxtCaptionModel;\n\t\t\t}\n\t\t}\n\t\tif (!this.memberModel) throw Error(\"No txt:member tag declared in wed: \" + DOM.debug(cnf));\n\t\tthis.childrenModels = this.titleModel ? [this.titleModel, this.memberModel] : [this.memberModel];\n\t}\n\n\tget paraModel(): TxtMemberModel {return this.memberModel}\n\n\tget txtWedModels(): TxtModel[] {return this.childrenModels}\n\n\tprotected newWedlet(): TxtElement {return new TxtSL()}\n}\n\nWED.registerWedletModel(\"TxtSL\", TxtSLModel);\n\n\n/** sc:div */\nexport class TxtDivModel extends TxtContainerModel {\n\tprotected newWedlet(): TxtDiv {return new TxtDiv()}\n}\n\nWED.registerWedletModel(\"TxtDiv\", TxtDivModel);\n\n/** sc:table */\nexport class TxtTableModel extends TxtModel {\n\tcaptionModel: TxtCaptionModel;\n\tcolModels: TxtColModel[] = [];\n\trowModels: TxtRowModel[] = [];\n\tchildrenModels: TxtModel[] = [];\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t\tfor (let ch = cnf.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif (ch.namespaceURI === TXT_NS) {\n\t\t\t\tlet model: any;\n\t\t\t\tif (ch.localName === 'column') {\n\t\t\t\t\tmodel = WED.buildBind(ch, 'TxtCol') as TxtColModel;\n\t\t\t\t\tif (model) this.colModels.push(model);\n\t\t\t\t} else if (ch.localName === 'row') {\n\t\t\t\t\tmodel = WED.buildBind(ch, 'TxtRow') as TxtRowModel;\n\t\t\t\t\tif (model) this.rowModels.push(model);\n\t\t\t\t} else if (ch.localName === 'caption') {\n\t\t\t\t\tmodel = this.captionModel = WED.buildBind(ch, 'TxtTitle') as TxtCaptionModel;\n\t\t\t\t}\n\t\t\t\tif (model) this.childrenModels.push(model);\n\t\t\t}\n\t\t}\n\t\t// non pour tags génériques inconnus voir wed dédié readonly .\n\t\t// if (this.colModels.length === 0) throw Error(\"No txt:column tag declared in wed: \" + DOM.debug(cnf));\n\t\t// if (this.rowModels.length === 0) throw Error(\"No txt:row tag declared in wed \" + DOM.debug(cnf));\n\t}\n\n\tget txtWedModels(): TxtModel[] {return this.childrenModels}\n\n\tprotected newWedlet(): TxtElement {return new TxtTable()}\n}\n\nWED.registerWedletModel(\"TxtTable\", TxtTableModel);\n\n// ***** block slaves *****\n\n/** sc:listItem */\nexport class TxtLIModel extends TxtContainerModel {\n\tprotected newWedlet(): TxtElement {return new TxtLI()}\n}\n\nWED.registerWedletModel(\"TxtLI\", TxtLIModel);\n\n/** sc:member */\nexport class TxtMemberModel extends TxtParaModel {\n\tprotected newWedlet(): TxtElement {return new TxtMember()}\n}\n\nWED.registerWedletModel(\"TxtMember\", TxtMemberModel);\n\nexport class TxtTitleModel extends TxtParaModel {\n\tprotected newWedlet(): TxtElement {return new TxtTitle()}\n}\n\nWED.registerWedletModel(\"TxtTitle\", TxtTitleModel);\n\nexport class TxtCaptionModel extends TxtParaModel {\n\tprotected newWedlet(): TxtElement {return new TxtCaption()}\n}\n\nWED.registerWedletModel(\"TxtCaption\", TxtCaptionModel);\n\n\n/** sc:col */\nexport class TxtColModel extends TxtModel {\n\n\twidthMgrLib: string;\n\twidthMgrKey: string;\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t\tconst widthMgr = cnf.getAttributeNS(TXT_NS, \"widthMgr\");\n\t\tif (widthMgr) {\n\t\t\tconst offs = widthMgr.indexOf('.');\n\t\t\tif (offs > 0) {\n\t\t\t\tthis.widthMgrLib = widthMgr.substring(0, offs);\n\t\t\t\tthis.widthMgrKey = widthMgr.substring(offs + 1);\n\t\t\t}\n\t\t}\n\t\tif (!this.widthMgrLib) console.log(\"WidthMgr is required on table column definition: \" + DOM.ser(cnf));\n\t}\n\n\twidthMgr(wedMgr: WedMgr): ITxtColWidthMgr {return wedMgr.wedModel.jsLibs[this.widthMgrLib][this.widthMgrKey]}\n\n\tget hasRefresh(): boolean {return this.widthMgrLib != null || this.refreshSvc != null || this.refreshLib != null}\n\n\tcallRefresh(elt: TxtCol) {\n\t\tthis.widthMgr(elt.wedMgr).refreshW(elt);\n\t\tif (this.refreshSvc || this.refreshLib) super.callRefresh(elt);\n\t}\n\n\tprotected newWedlet(): TxtElement {return new TxtCol()}\n}\n\nWED.registerWedletModel(\"TxtCol\", TxtColModel);\n\n/** sc:row */\nexport class TxtRowModel extends TxtModel {\n\tcellModels: TxtCellModel[] = [];\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t\tfor (let ch = cnf.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif (ch.localName === 'cell' && ch.namespaceURI === TXT_NS) {\n\t\t\t\tconst model = WED.buildBind(ch, 'TxtCell') as TxtCellModel;\n\t\t\t\tif (model) this.cellModels.push(model);\n\t\t\t}\n\t\t}\n\t}\n\n\tget txtWedModels(): TxtModel[] {return this.cellModels}\n\n\tprotected newWedlet(): TxtElement {return new TxtRow()}\n}\n\nWED.registerWedletModel(\"TxtRow\", TxtRowModel);\n\n/** sc:cell */\nexport class TxtCellModel extends TxtContainerModel {\n\n\tspanMgrLib: string;\n\tspanMgrKey: string;\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t\tconst widthMgr = cnf.getAttributeNS(TXT_NS, \"spanMgr\");\n\t\tif (widthMgr) {\n\t\t\tconst offs = widthMgr.indexOf('.');\n\t\t\tif (offs > 0) {\n\t\t\t\tthis.spanMgrLib = widthMgr.substring(0, offs);\n\t\t\t\tthis.spanMgrKey = widthMgr.substring(offs + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tget hasRefresh(): boolean {return this.spanMgrLib != null || this.refreshSvc != null || this.refreshLib != null}\n\n\tcallRefresh(elt: TxtElement & TxtCell) {\n\t\tif (this.spanMgrLib) elt.spanMgr.refreshSpan(elt);\n\t\tif (this.refreshSvc || this.refreshLib) super.callRefresh(elt);\n\t}\n\n\tprotected newWedlet(): TxtElement {return new TxtCell() as any as TxtElement}\n}\n\nWED.registerWedletModel(\"TxtCell\", TxtCellModel);\n\n/** sc:extBlock */\nexport class TxtObjectModel extends TxtModel {\n\n\t/** Affichage custom des diffs internes à cet objet (metas). */\n\tdiffSvc: string;\n\n\tprotected initDiff(tag: Element) {\n\t\tthis.diffSvc = tag.getAttribute(\"svc\");\n\t}\n\n\tprotected newWedlet(): TxtElement {return new TxtObject()}\n\n\taddDiffCustom(elt: TxtObject, annot: ISkDiffAnnot): boolean {\n\t\tif (!this.diffSvc) return false;\n\t\tconst diffCustom = REG.findReg(elt).getSvc(this.diffSvc) as ITxtAnnotDiff;\n\t\tif (diffCustom) {\n\t\t\tdiffCustom.addDiff(elt, annot);\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"ITxtAnnotDiff function not found. svc=\" + this.diffSvc);\n\t\treturn false;\n\t}\n\n\tremoveDiffCustom(elt: TxtObject, annot: ISkDiffAnnot): boolean {\n\t\tif (!this.diffSvc) return false;\n\t\tconst diffCustom = REG.findReg(elt).getSvc(this.diffSvc) as ITxtAnnotDiff;\n\t\tif (diffCustom) {\n\t\t\tdiffCustom.removeDiff(elt, annot);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nWED.registerWedletModel(\"TxtObject\", TxtObjectModel);\n\n/** sc:emptyBlock */\nexport class TxtEmptyModel extends TxtObjectModel {\n\tprotected newWedlet(): TxtElement {return new TxtEmpty()}\n}\n\nWED.registerWedletModel(\"TxtEmpty\", TxtEmptyModel);\n\n\n// ***** inlines *****\nexport class InlPhraseModel extends InlineContentModel implements IInlWrapModel {\n\tget isInline() {return true}\n\n\tget splitPriority(): number {return 20};\n\n\tprotected newWedlet(): TxtElement {return new InlPhrase()}\n}\n\nWED.registerWedletModel(\"InlPhrase\", InlPhraseModel);\n\nexport class InlStyleModel extends InlineContentModel implements IInlWrapModel {\n\tget isInline() {return true}\n\n\tget splitPriority(): number {return 10};\n\n\tprotected newWedlet(): TxtElement {return new InlStyle()}\n}\n\nWED.registerWedletModel(\"InlStyle\", InlStyleModel);\n\nexport class InlLinkModel extends InlineContentModel implements IInlWrapModel {\n\tget isInline() {return true}\n\n\tget splitPriority(): number {return 30};\n\n\tprotected newWedlet(): TxtElement {return new InlLink()}\n}\n\nWED.registerWedletModel(\"InlLink\", InlLinkModel);\n\nexport class InlLeafModel extends TxtModel implements IInlWrapModel {\n\tget isInline() {return true}\n\n\tget splitPriority(): number {return 0};\n\n\tprotected newWedlet(): TxtElement {return new InlLeaf()}\n\n\tget txtWedModels(): TxtModel[] {return this.txtRootModel ? [this.txtRootModel.strModel] : null}\n}\n\nWED.registerWedletModel(\"InlLeaf\", InlLeafModel);\n\nexport class InlImgModel extends TxtModel {\n\tget isInline() {return true}\n\n\tprotected newWedlet(): TxtElement {return new InlImg()}\n}\n\nWED.registerWedletModel(\"InlImg\", InlImgModel);\n\nexport class InlObjectModel extends TxtModel {\n\tget isInline() {return true}\n\n\tprotected newWedlet(): TxtElement {return new InlObject()}\n}\n\nWED.registerWedletModel(\"InlObject\", InlObjectModel);\n\nexport class InlEmptyModel extends TxtModel {\n\tget isInline() {return true}\n\n\tprotected newWedlet(): TxtElement {return new InlEmpty()}\n}\n\nWED.registerWedletModel(\"InlEmpty\", InlEmptyModel);\n\nexport class InlNoteModel extends TxtContainerModel {\n\tprotected newWedlet(): TxtElement {return new InlNote()}\n}\n\nWED.registerWedletModel(\"InlNote\", InlNoteModel);\n\nexport class TxtStrModel extends TxtModel {\n\n\t/** Si true, réserve les espaces normaux en début et fin de noeud texte et la succession de plusieurs espaces. */\n\tkeepSpaces = false;\n\n\tinitModel(cnf: Element) {\n\t\tthis.config = cnf;\n\t\tthis.nodeLabel = cnf.getAttribute(\"label\");\n\t\t//this.keepSpaces = cnf.getAttribute(\"keep-spaces\") === \"all\"; utile ?\n\t}\n\n\tnewJml(): IJmlNode {return \"\"}\n\n\tprotected newWedlet(): TxtElement {return new TxtStr()}\n}\n\nWED.registerWedletModel(\"TxtStr\", TxtStrModel);\n\n\n/**\n * Modèle du txt-root : Propriétés ancrées sur l'élément txt-root du fichier WED\n * (donc mutualisées pour toutes les instances TxtRoot).\n */\ninterface ITxtRootModel {\n\t/** Balise <wed:children/> obligatoire dans le <txt-root/>. */\n\twedChildrenElt: IWedChildrenElt\n\n\t/** Tous les modèles préférés de type block. */\n\tpreferedBlockTxtModels: TxtModel[]\n\n\t/** Tous les modèles préférés de type inline. */\n\tpreferedInlineTxtModels: TxtModel[]\n\n\t/** Modèle de paragraphe par défaut. */\n\tparaModel: TxtParaModel\n\n\t/** Modèle de noeud texte par défaut. */\n\tstrModel: TxtStrModel\n}\n\n/**\n * Propriétés construites pour chaque IWedEditor (et son registre contextuel) et pour chaque modèle\n * de TxtRoot différents.\n * Objet enregistré auprès de WedMgr.getDatasForModel().\n */\ninterface ITxtRootProps extends IWedFocusBarPointer {\n\n\t/** Racourcis claviers de cet éditeur de texte. */\n\taccelKeyMgr: AccelKeyMgr<ITxtRootContext>\n\n\t/** Barre de menus de cet éditeur de texte. */\n\tfocusBar: BarActions<ITxtRootContext>\n\n\t/** Barres de menus pour les tables de cet éditeur de texte (key = role de la table). */\n\ttableBars: Dict<BarActions<ITxtTableContext>>\n\n\t/** Traitements spéciaux lors de la saisie d'un texte à la volée. */\n\tonTypings: IOnTyping[]\n\n\tinlineMarkStyle: REG.SkinHolder\n}\n\n/** ActionContext pour les actions du wedlet de texte riche. */\nexport interface ITxtRootContext extends IAccelKeyMgrPointer<ITxtRootContext>, IRefreshHook, IWedletActionCtx, ISpellcheckContextPointer {\n\n\t/** Ref au wedlet de texte. */\n\ttxtRoot: TxtRoot\n}\n\n/** ActionContext pour les actions des tables du texte riche. */\nexport interface ITxtTableContext extends ITxtRootContext {\n\ttxTable: TxtTable\n\t/** layout calculé une seule fois. */\n\tlogicTable: TXTTABLE.LogicTable\n}\n\n/** Api pour ajouter des corrections automatiques, propositions de remplacement, etc.  pendant la saisie. */\nexport interface IOnTyping {\n\n\t/** Libellé de ce onTyping pour ihm d'activation / désactivation par le user. */\n\tlabel: string\n\n\t/**\n\t * Fonction d'exécution de l'auto-correction.\n\t * Il est fortement conseillé de n'utiliser que les params suivants :\n\t * - ev.data : texte inséré.\n\t * - beforeXmlText : texte avant l'insertion.\n\t * - xmlOffset : offset de l'insertion de ev.data dans text.\n\t * - fullXmlText : noeud texte déjà modifié avec ev.data inséré.\n\t * - lang : langue courante issu du contexte du noeud.\n\t * Retourne true si une auto-correction a eu lieu, les 'onTypings' suivants sont abandonnés.\n\t */\n\tonTyping(ev: InputEvent, root: TxtRoot, txtStr: TxtStr, lang: string, beforeXmlText: string, xmlOffset: number, fullXmlText: string): boolean\n\n}\n\n/**\n * Factory d'un IOnTyping permettant d'être personnalisé par configuration XML (issu du fichier wed)\n * et par le contexte de l'editeur dans lequel il est exploité.\n */\nexport interface IOnTypingFactory {\n\n\tbuildOnTyping(wedMgr: WedMgr, config?: Element): IOnTyping\n}\n\nfunction isOnTypingFactory(ot: any): ot is IOnTypingFactory {return ot && ('buildOnTyping' in ot)}\n\nfunction findOnTyping(def: Element, reg: IReg<any>): IOnTyping | IOnTypingFactory {\n\tconst svcCode = def.getAttribute('svc');\n\tif (svcCode) {\n\t\tconst ot = reg.getSvc(svcCode) as IOnTyping | IOnTypingFactory;//FIXME !!!!\n\t\tif (isOnTypingFactory(ot)) return new OnTypingFromSvc(ot, def);\n\t\treturn ot;\n\t}\n\tconst lib = def.getAttribute('lib');\n\treturn lib ? new OnTypingFromLib(lib, def.getAttribute('identifier'), def) : null;\n}\n\n/**\n * Recherche du IOnTyping dans les libs du wedModel et le contruit si c'est une factory.\n */\nclass OnTypingFromLib implements IOnTypingFactory {\n\tconstructor(public lib: string, public identifier: string, public config: Element) {}\n\n\tbuildOnTyping(wedMgr: WedMgr, config?: Element): IOnTyping {\n\t\tconst lib = wedMgr.wedModel.jsLibs[this.lib];\n\t\tif (!lib || !(this.identifier in lib)) return null;\n\t\tconst ot = lib[this.identifier];\n\t\treturn isOnTypingFactory(ot) ? ot.buildOnTyping(wedMgr, this.config) : ot;\n\t}\n}\n\n/** Configure un OnTyping et le construit en fonction du contexte son IEditor. */\nclass OnTypingFromSvc implements IOnTypingFactory {\n\tconstructor(public ot: IOnTypingFactory, public config: Element) {}\n\n\tbuildOnTyping(wedMgr: WedMgr, config?: Element): IOnTyping {\n\t\treturn this.ot.buildOnTyping(wedMgr, this.config);\n\t}\n}\n\n/**\n * Interface commune à TxtRoot et TxtElement.\n */\nexport interface ITxtElement extends IElementWedlet {\n\n\t/** Racine de l'éditeur de texte. */\n\ttxtRoot: TxtRoot;\n\n\twedAnchor: IXAddr;\n\n\t/** Liste des modèles fils préférés à ce niveau. */\n\ttxtWedModels: TxtModel[];\n\n\t/**\n\t * Retourne le modèle de wedlet préféré pour ce tag fis. A utiliser par les actions pour interroger la structure des wedlets.\n\t * Ne retourne pas les modèles issus du registre central pour les structures inconnues.\n\t * Les Wedlets Txt imposent de déclarer explicitement toutes les structures du schéma manipulables par les actions.\n\t */\n\tgetTxtWedModel(tagName: string, role: string): TxtModel;\n\n\t/** Modèle de paragraphe par défaut. */\n\tparaModel: TxtParaModel;\n\n\t/** Modèle de noeud texte par défaut. */\n\tstrModel: TxtStrModel;\n\n\tisTextContainer: boolean;\n\n\t/** Abstrait la différence d'impl nécessaire entre les fils du root et les autres. */\n\tinsertVirtualPara(before: Node): TxtPara;\n\n\t/** Abstrait la différence d'impl nécessaire entre les fils du root et les autres. */\n\tinsertVirtualStr(before: Node): void;\n}\n\n/**\n * Element racine d'une édition de texte riche.\n * Cet élement peut-être associé à n'importe quel IWedlet (de type Box par exemple).\n * Le wedlet associé doit binder l'élément racine de la textPrim, les noeuds fils étant\n * des noeuds de type block (para, table, list, emptyBlock...).\n *\n * Attention, le txtRoot doit déclarer explicitement tous les éléments blocks et inline connus du schéma.\n * L'utilisation du registre central est limité aux balises inconnues.\n *\n * Attributs :\n * - stretch=\"vertical\" Mode particulier où le texte est le seul élément de l'éditeur et doit s'étendre sur toute la hauteur disponible.\n * - placeholder : Texte affiché par défaut.\n * - placeholderup=\"1\" : Recherche l'attribut placeholder dans l'élément racine du wedlet parent, ou grand-parent (placeholderup=\"2\"), etc.\n *   autres valeurs :\n *      down:4    premier placeholder non vide en partant de la position 4, et en redescendant jusqu'à la position courant\n *      down:4:2  premier placeholder non vide en partant de la position 4, et en redescendant jusqu'à la position 2\n *      up:2:4    premier placeholder non vide en partant de laposition 2, et en remontant jusqu'à la position 4\n * - mono-para=\"\" Indique qu'on est mode mono-para pour une gestion correcte du placeholder même si le para est obligatoire dans le schéma.\n *\n * Stylage du placeholder :\n * :not(:focus) > txt-para[placeholder].virtual:only-of-type::before,\n * [mono-para]:not(:focus) > txt-para > txt-str[placeholder].virtual:only-of-type::before {\n * \t...\n * }\n */\nexport class TxtRoot extends HTMLElement implements ITxtElement, IFixCaret, IFixSelection, IWedFocusBarPointer, IContextMenuActionsPointer<ITxtRootContext>, ITxtRootContext, IEltBoxSelection, CustomElement {\n\n\t/**\n\t * Permet d'imposer le selector de type Txt pour <wed:children/> inclut dans la balise <txtRoot/> qui restreint\n\t * aux modèles de wedlet de type TxtModel et qui matchent le même role.\n\t *\n\t * @see {IWedSelectorFactory}\n\t */\n\tstatic buildWedSelector(elt: Element): IWedSelector {\n\t\treturn TxtModel.wedSelector;\n\t}\n\n\twedlet: IParentWedlet & IWedletSingleElt;\n\n\twedMgr: WedMgr;\n\n\tget wedAnchor(): IXAddr {return this.wedlet.wedAnchor}\n\n\t/** Méthode commune avec TxtElement pour retrouver la racine (et servir son propre contexte ITxtRootContext). */\n\tget txtRoot(): TxtRoot {return this}\n\n\t/** this est vu comme son propre ITxtRootContext au keypress (accelKeyMgr) */\n\tget focusedElt(): HTMLElement {return this}\n\n\tget isTextContainer() {return false}\n\n\tget isMonoPara() {return false}\n\n\t/**\n\t * Gestionnaire de sélection dans le texte.\n\t * Cet accesseur doit etre utilisé par défaut car il fixe les erreurs de positionenement de sélection\n\t * et retourne une version figée lors d'un cycle de refresh des actions (voir IRefreshHook.onRefreshCycle().\n\t */\n\tget selMgr(): TxtSelMgr {\n\t\tif (this._selMgrFrozen) return this._selMgrFrozen;\n\t\tthis.selMgrAsIs.fixupSel();\n\t\treturn this.selMgrAsIs;\n\t}\n\n\tprotected _selMgrFrozen: TxtSelMgrFrozen;\n\n\t/**\n\t * Gestionnaire de sélection dans le texte sans correction préalable.\n\t */\n\tselMgrAsIs: TxtSelMgr;\n\n\tbeforeInputHandler: Dict<(this: void, ev: InputEvent, root: TxtRoot) => void>;\n\tkeyPressHandler: Dict<(this: void, ev: KeyboardEvent, root: TxtRoot) => void>;\n\tkeyDownHandler: Dict<(this: void, ev: KeyboardEvent, root: TxtRoot) => void>;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.addEventListener(\"focusin\", this.onFocusin);\n\t\tthis.addEventListener(\"blur\", this.onBlur);\n\t\tthis.addEventListener(\"keydown\", this.onKeyDown);\n\t\tthis.addEventListener(\"keypress\", this.onKeyPress);\n\t\tthis.addEventListener(\"compositionstart\", this.onCompositionStart);\n\t\tthis.addEventListener(\"compositionupdate\", this.onCompositionUpdate);\n\t\tthis.addEventListener(\"compositionend\", this.onCompositionEnd);\n\t\tthis.addEventListener(\"beforeinput\", this.onBeforeinput);\n\t\tthis.addEventListener(\"copy\", this.onCopy);\n\t\tthis.addEventListener(\"cut\", this.onCut);\n\t\tthis.addEventListener(\"paste\", this.onPaste);\n\t\tthis.addEventListener(\"dragstart\", this.onDragstart);\n\t\tthis.addEventListener(\"drop\", this.onDrop);\n\t\tthis.addEventListener(\"click\", this.onClick);\n\n\t\t//Obligatoire sinon le navigateur trafique les espaces (32) et les espaces inséccables (160).\n\t\t//exemple de bug :\n\t\t//Noeud texte: \"aa bb cc\", sel de [bb], frappe de 'x' : coté XML on a \"aa x cc\", mais coté web on a \"aa xcc\"\n\t\t//car à la suppr de [bb], un état intermédiaire est \"aa  cc\" et ce double espace est parfois supprimé,\n\t\t//mais pas toujours, si on passe en debug par ex il ne l'est plus, probablement lié à la perte du focus...\n\t\tthis.style.whiteSpace = \"pre-wrap\";\n\n\t\tthis.beforeInputHandler = beforeInputHandler;\n\t\tthis.keyPressHandler = keyPressHandler;\n\t\tthis.keyDownHandler = keyDownHandler;\n\t}\n\n\tconnectedCallback() {\n\t\tif (this.wedlet.wedParent?.model.nodeType !== ENodeType.element || this.getAttribute(\"stretch\") === 'vertical') {\n\t\t\t//Mode particulier où le texte est le seul élément de l'éditeur, fils direct du bind document / documentFragment racine de l'éditeur.\n\t\t\t// et doit s'étendre sur toute la hauteur disponible\n\t\t\t//hack le display / flex jusqu'au wedEditor.rootNode inclus.\n\t\t\tconst st = this.style;\n\t\t\tst.flex = \"1\";\n\t\t\tlet n = DOMSH.getFlatParentElt(this) as HTMLElement;\n\t\t\tconst root = this.wedMgr.wedEditor.rootNode;\n\t\t\twhile (n) {\n\t\t\t\tconst st = n.style;\n\t\t\t\tst.flex = \"1\";\n\t\t\t\tst.display = \"flex\";\n\t\t\t\tst.flexDirection = \"column\";\n\t\t\t\tst.padding = \"0\";\n\t\t\t\tif (n === root) break;\n\t\t\t\tst.border = \"none\"; //pb avec le scroll\n\t\t\t\tn = DOMSH.getFlatParentElt(n) as HTMLElement;\n\t\t\t}\n\t\t}\n\t}\n\n\twedConfig: Element & ITxtRootModel;\n\n\t/**\n\t * Modèles explicitement préférés pour cet éditeur.\n\t */\n\tget txtWedModels(): TxtModel[] {return this.wedConfig.wedChildrenElt.wedPreferedModels as TxtModel[]}\n\n\tget paraModel(): TxtParaModel {return this.wedConfig.paraModel}\n\n\tget strModel(): TxtStrModel {return this.wedConfig.strModel}\n\n\tgetTxtWedModel(tagName: string, role: string): TxtModel {\n\t\tif (role == null) role = \"\";\n\t\tfor (const txtModel of this.txtWedModels) if (txtModel.nodeName === tagName && txtModel.role === role) return txtModel;\n\t\treturn null;\n\t}\n\n\tinsertVirtualPara(before: Node): TxtPara {\n\t\tconst paraModel = this.paraModel;\n\t\tif (!paraModel) return null;\n\t\tconst childrenElt = this.wedConfig.wedChildrenElt;\n\t\tconst para = paraModel.createWedlet(this.wedlet, childrenElt.wedDefaultDisplay) as TxtPara;\n\t\tpara.configWedletElt(paraModel.config, para);\n\t\tif (childrenElt.wedSlotName) {\n\t\t\t//para à la racine du TxtRoot.\n\t\t\tpara.setAttribute(\"slot\", childrenElt.wedSlotName);\n\t\t\tif (!this.hasAttribute(\"mono-para\")) evalPlaceHolder(this, para);\n\t\t}\n\t\t(para as IElementWedlet).fromChildrenElt = childrenElt;\n\t\tthis.insertBefore(para, before) as TxtElement;\n\t\treturn para.bindAsVirtual();\n\t}\n\n\n\tinsertVirtualStr(before: Node) {\n\t\tconsole.trace(\"Should not be called!!\");\n\t}\n\n\tonRefreshCycle(before: boolean): 'stop' | void {\n\t\t//console.error(\"onRefreshCycle\", before);\n\t\tif (before) {\n\t\t\tif (!(this.selMgrAsIs.focusNode || this).isConnected) return 'stop';\n\t\t\tif (0 === this._RefreshCycle++) this._selMgrFrozen = new TxtSelMgrFrozen(this.selMgrAsIs/*selMgrAsIs sinon casse la sel par drag&drop. */);\n\t\t} else if (this._RefreshCycle > 0) {\n\t\t\tif (--this._RefreshCycle === 0) this._selMgrFrozen = null;\n\t\t}\n\t}\n\n\tunfreezeSel() {\n\t\tthis._RefreshCycle = 0;\n\t\tthis._selMgrFrozen = null;\n\t}\n\n\tprotected _RefreshCycle = 0;\n\n\tconfigWedletElt(tpl: Element, wedlet: IWedlet) {\n\t\tthis.wedlet = wedlet as IParentWedlet & IWedletSingleElt;\n\t\tthis.wedMgr = wedlet.wedMgr;\n\t\tthis.selMgrAsIs = new (this.wedMgr.reg.getSvc<typeof TxtSelMgr>(\"wedTxtSelMgrClass\") || TxtSelMgr)(this);\n\t\tthis.contentEditable = WEDLET.isWritableWedlet(this.wedlet) ? 'true' : 'false';\n\t\tthis.wedConfig = tpl as Element & ITxtRootModel;\n\t\t//txt-root est obligatoirement le host des balises txt filles, sinon le mécanime de sélection inter-blocks\n\t\t//du navigateur ne fonctionne pas.\n\t\tthis.wedlet.element.setDelegatedHost(this);\n\t\tif (!this.wedConfig.wedChildrenElt) {\n\t\t\t//modèle jamais initialisé.\n\t\t\tfor (let ch = this.wedConfig.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\t\tif (isWedChildrenElt(ch)) {\n\t\t\t\t\tif (this.wedConfig.wedChildrenElt) throw Error(\"'wed:children' found twice in txt-root wed: \" + DOM.debug(this.wedConfig));\n\t\t\t\t\tthis.wedConfig.wedChildrenElt = ch;\n\t\t\t\t\tthis.wedConfig.preferedBlockTxtModels = [];\n\t\t\t\t\tthis.wedConfig.preferedInlineTxtModels = [];\n\t\t\t\t\tconst childrenModels = this.wedConfig.wedChildrenElt.wedPreferedModels;\n\t\t\t\t\tif (childrenModels) for (const model of childrenModels) this._indexModel(model as TxtModel);\n\t\t\t\t\tconst descendants = DOM.findFirstChild(this.wedConfig, (n => n.localName === 'descendants') as INodeFilter<Element>);\n\t\t\t\t\tif (descendants) for (let bind = descendants.firstElementChild; bind; bind = bind.nextElementSibling) {\n\t\t\t\t\t\tthis._indexModel(WED.buildBind(bind) as TxtModel);\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.wedConfig.strModel) this.wedConfig.strModel = this.wedMgr.wedModel.findModelForVirtual(ENodeType.text, null, null, null, this.wedlet, TxtModel.wedSelector, null) as TxtStrModel;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.wedConfig.wedChildrenElt) throw Error(\"No 'wed:children' tag found in txt-root wed: \" + DOM.debug(this.wedConfig));\n\t\t}\n\t\tconst inlineMarks = this.wedMgr.reg.getUserData(\"wedTxtInlineMarkers\", this.wedMgr.reg.getPref('userdata.default.wedTxtInlineMarkers', false));\n\t\tif (inlineMarks) this.inlineMarkers = true;\n\t}\n\n\tget txtRootProps(): ITxtRootProps {\n\t\tconst props = this.wedMgr.getDatasForModel(this.wedConfig) as ITxtRootProps;\n\t\tif (props.onTypings !== undefined) return props;\n\t\t//jamais initialisé pour ce modèle de textRoot dans le contexte de cet éditor.\n\t\tlet onTypings: (IOnTyping | IOnTypingFactory)[];\n\t\tlet focusBarActions: ITxtAction<ITxtRootContext>[];\n\t\tconst tableBarsActions: Dict<ITxtAction<ITxtTableContext>[]> = {};\n\t\tconst subReg = REG.createSubReg(REG.findReg(this));\n\t\tprops.accelKeyMgr = new AccelKeyMgr<ITxtRootContext>();\n\t\tprops.accelKeyMgr.addAccelKey(\"c\", \"accel,shift\", copyAsXml);\n\t\tprops.accelKeyMgr.addAccelKey(\"v\", \"accel,shift\", pasteAsText);\n\t\tprops.accelKeyMgr.addAccelKey(\"v\", \"accel,shift,alt\", pasteAsString);\n\t\tfor (let ch = this.wedConfig.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif (ch.localName === 'uiconfig') {\n\t\t\t\tfor (let conf = ch.firstElementChild; conf; conf = conf.nextElementSibling) {\n\t\t\t\t\tif (conf.namespaceURI !== TXT_NS) continue;\n\t\t\t\t\tif (conf.localName === 'accelKeys') {\n\t\t\t\t\t\tconst list = split(conf.getAttribute(\"lists\"));\n\t\t\t\t\t\tif (list) {\n\t\t\t\t\t\t\tfor (let defKey = conf.firstElementChild; defKey; defKey = defKey.nextElementSibling) {\n\t\t\t\t\t\t\t\tif (defKey.localName === 'accelKey') subReg.addToList(\n\t\t\t\t\t\t\t\t\tlist[0],\n\t\t\t\t\t\t\t\t\tdefKey.getAttribute('key') + '-' + (defKey.getAttribute('modifiers') || \"accel\"),\n\t\t\t\t\t\t\t\t\tREG.LEVELAUTH_MODEL,\n\t\t\t\t\t\t\t\t\tcreateTxtAction(defKey.firstElementChild, defKey.getAttribute('actionId'), subReg, false)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprops.accelKeyMgr.initFromMapActions(subReg.mergeListsAsMap(...list));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (let bind = conf.firstElementChild; bind; bind = bind.nextElementSibling) {\n\t\t\t\t\t\t\t\tif (bind.localName === 'accelKey') {\n\t\t\t\t\t\t\t\t\tprops.accelKeyMgr.addAccelKey(bind.getAttribute('key'), bind.getAttribute('modifiers') || \"accel\", createTxtAction(bind.firstElementChild, bind.getAttribute('actionId'), subReg, false));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (conf.localName === 'toolbar') {\n\t\t\t\t\t\tconst list = split(conf.getAttribute(\"lists\"));\n\t\t\t\t\t\tlet actions: IAction<ITxtRootContext>[] = list ? null : [];\n\t\t\t\t\t\tfor (let btn = conf.firstElementChild; btn; btn = btn.nextElementSibling) {\n\t\t\t\t\t\t\tif (btn.localName === 'button') {\n\t\t\t\t\t\t\t\tconst id = btn.getAttribute('actionId');\n\t\t\t\t\t\t\t\tconst action = createTxtAction<ITxtRootContext>(btn.firstElementChild, id, subReg, true, list);\n\t\t\t\t\t\t\t\tif (actions && action) actions.push(action);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (list) actions = subReg.mergeLists(...list);\n\t\t\t\t\t\t// actions.push(TxtEraseDiffSel.SINGLETON);\n\t\t\t\t\t\t// focusBarActions = ACTION.injectSepByGroup(actions, \"\", this) as ITxtAction<ITxtRootContext>[];\n\t\t\t\t\t\tfocusBarActions = actions.length > 0 ? ACTION.injectSepByGroup(actions, \"\", this) as ITxtAction<ITxtRootContext>[] : null;\n\t\t\t\t\t} else if (conf.localName === 'tableToolbar') {\n\t\t\t\t\t\tconst list = split(conf.getAttribute(\"lists\"));\n\t\t\t\t\t\tlet actions: ITxtAction<ITxtTableContext>[] = list ? null : [];\n\t\t\t\t\t\tfor (let btn = conf.firstElementChild; btn; btn = btn.nextElementSibling) {\n\t\t\t\t\t\t\tif (btn.localName === 'button') {\n\t\t\t\t\t\t\t\tconst id = btn.getAttribute('actionId');\n\t\t\t\t\t\t\t\tconst action = createTxtAction<ITxtTableContext>(btn.firstElementChild, id, subReg, true, list);\n\t\t\t\t\t\t\t\tif (actions && action) actions.push(action);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (list) actions = subReg.mergeLists(...list);\n\t\t\t\t\t\ttableBarsActions[conf.getAttribute(\"role\") || \"\"] = actions.length > 0 ? actions : null;\n\t\t\t\t\t} else if (conf.localName === 'onTypings') {\n\t\t\t\t\t\tconst list = split(conf.getAttribute(\"lists\"));\n\t\t\t\t\t\tif (list) {\n\t\t\t\t\t\t\t//config avec surcharge de la 1ère liste configurée\n\t\t\t\t\t\t\tfor (let otElt = conf.firstElementChild; otElt; otElt = otElt.nextElementSibling) {\n\t\t\t\t\t\t\t\tif (otElt.localName === 'onTyping') subReg.addToList(list[0], otElt.getAttribute('otId'), REG.LEVELAUTH_MODEL, findOnTyping(otElt, subReg));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonTypings = subReg.mergeLists(...list);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//config simple : liste de base (non surchargeable/annulable) + ajout d'autres onTyping.\n\t\t\t\t\t\t\tonTypings = subReg.getList(\"wed:text:onTyping\");\n\t\t\t\t\t\t\tfor (let otElt = conf.firstElementChild; otElt; otElt = otElt.nextElementSibling) {\n\t\t\t\t\t\t\t\tif (otElt.localName === 'onTyping') {\n\t\t\t\t\t\t\t\t\tconst ot = findOnTyping(otElt, subReg);\n\t\t\t\t\t\t\t\t\tif (ot) onTypings.push(ot);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (conf.localName === 'inlineMarkerStyle') {\n\t\t\t\t\t\tsubReg.registerSkin(\"txt-root/InlineMarker\", REG.LEVELAUTH_MODEL, conf.textContent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//config par défaut.\n\t\tif (!onTypings) onTypings = REG.findReg(this).getList(\"wed:text:onTyping\");\n\t\t//construction des objets finaux.\n\t\tif (!onTypings) {\n\t\t\tprops.onTypings = null;\n\t\t} else {\n\t\t\t//TODO config personnelle de restriction des onTypings activés (via userDataStore).\n\t\t\tprops.onTypings = [];\n\t\t\tfor (let i = 0; i < onTypings.length; i++) {\n\t\t\t\tlet ot = onTypings[i];\n\t\t\t\tif (isOnTypingFactory(ot)) ot = ot.buildOnTyping(this.wedMgr);\n\t\t\t\tif (ot) props.onTypings.push(ot);\n\t\t\t}\n\t\t}\n\t\t//On impose toujours une focusBar, même vide pour éviter d'avoir une barre du contexte Box inappropriée.\n\t\tprops.focusBar = new BarActions<ITxtRootContext>().initialize({\n\t\t\tactions: focusBarActions || [],\n\t\t\tactionContext: new WedTxtRootCtx()\n\t\t});\n\t\tfor (const k in tableBarsActions) {\n\t\t\tif (!props.tableBars) props.tableBars = {};\n\t\t\tprops.tableBars[k] = new BarActions<ITxtTableContext>().initialize({\n\t\t\t\tactions: tableBarsActions[k],\n\t\t\t\tactionContext: new WedTxtRootCtx()\n\t\t\t});\n\t\t}\n\t\tprops.inlineMarkStyle = subReg.getSvc(REG.SKIN_PREFIX + \"txt-root/InlineMarker\");\n\t\treturn props;\n\t}\n\n\tprotected _indexModel(model: TxtModel) {\n\t\tif (model instanceof TxtStrModel) {\n\t\t\tthis.wedConfig.preferedInlineTxtModels.push(model);\n\t\t\tif (!model.role) this.wedConfig.strModel = model;\n\t\t} else if (model.isInline) {\n\t\t\tthis.wedConfig.preferedInlineTxtModels.push(model);\n\t\t} else {\n\t\t\tthis.wedConfig.preferedBlockTxtModels.push(model);\n\t\t\tif (model instanceof TxtParaModel && !model.role) this.wedConfig.paraModel = model;\n\t\t}\n\t}\n\n\trefreshBindValue(val: IJmlNode | string) {\n\t\t//this.wedlet.isVirtual() ? this.classList.add(\"virtual\") : this.classList.remove(\"virtual\");\n\t\tif (this.wedlet.isVirtual()) removeAnnots(this);\n\t}\n\n\tsetEditMode(mode: EWedletEditMode) {\n\t\tthis.contentEditable = mode === EWedletEditMode.write ? 'true' : 'false';\n\t\tDOM.setAttr(this, \"edit-mode\", EWedletEditModeLabel[mode]);\n\t}\n\n\tonChildWedletsChange() {\n\t\tadjustVirtualsPara(this);\n\t\tif (this.hasAttribute(\"mono-para\")) {\n\t\t\tconst para = findTxtEltFirstChild(this);\n\t\t\tif (para) evalPlaceHolder(this, para.findOrCreateTxtStr(false));\n\t\t}\n\t}\n\n\t/** api IAccelKeyMgrPointer */\n\tget accelKeyMgr(): AccelKeyMgr<ITxtRootContext> {return this.txtRootProps.accelKeyMgr};\n\n\tget onTypings(): IOnTyping[] {return this.txtRootProps.onTypings}\n\n\tget inlineMarkers(): boolean {\n\t\tconst styleDef = this.txtRootProps.inlineMarkStyle;\n\t\tif (!styleDef) return false;\n\t\tconst style = styleDef.getSkinIfExist(DOMSH.findDocumentOrShadowRoot(this));\n\t\treturn style ? !style.disabled : false;\n\t}\n\n\tset inlineMarkers(val: boolean) {\n\t\tconst styleDef = this.txtRootProps.inlineMarkStyle;\n\t\tif (!styleDef) return;\n\t\tif (!('showTxtStackBar' in this.wedMgr.wedEditor)) return;\n\t\tconst shRoot = DOMSH.findDocumentOrShadowRoot(this);\n\t\tconst style = styleDef.getSkinIfExist(shRoot);\n\t\tif (style) {\n\t\t\tstyle.disabled = !val;\n\t\t} else {\n\t\t\tif (val) styleDef.installSkin(shRoot);\n\t\t}\n\t\tif (val) (this.wedMgr.wedEditor as IWedEditorTxtSel).showTxtStackBar();\n\t\telse (this.wedMgr.wedEditor as IWedEditorTxtSel).hideTxtStackBar();\n\t}\n\n\tstoreInlineMarkers() {\n\t\tconst persist = this.wedMgr.reg.getPersistUserStates();\n\t\tif (persist) persist.setUserDatas({\"wedTxtInlineMarkers\": this.inlineMarkers});\n\t}\n\n\tget focusBar(): BarActions<ITxtRootContext> {\n\t\tconst bar = this.txtRootProps.focusBar;\n\t\tif (bar) bar.actionContext.focusedElt = this;\n\t\treturn bar;\n\t}\n\n\tget ctxMenuActions(): IContextMenuActions<ITxtRootContext> {\n\t\tconst bar = this.focusBar;\n\t\tlet actions: IAction<ITxtRootContext>[] = Desk.electron && this.contentEditable === \"true\" ? [spellcheckMenu/*, ...copyPasteMenus*/] : [/*...copyPasteMenus*/];\n\t\tlet actionContext: ITxtRootContext;\n\t\tif (bar) {\n\t\t\tactions.push(new ActionSeparator(), ...bar.actions);\n\t\t\tactionContext = bar.actionContext;\n\t\t} else {\n\t\t\tactionContext = new WedTxtRootCtx();\n\t\t}\n\t\tactionContext.focusedElt = this;\n\t\treturn {actionContext, actions};\n\t}\n\n\thandleEventFromContainer(ev: KeyboardEvent | MouseEvent) {\n\t\tthis.selMgr.selectAll();\n\t\tif (ev instanceof KeyboardEvent && ev.key.length === 1 && this.contentEditable) {\n\t\t\tconst d = new DataTransfer();\n\t\t\td.setData(\"text/plain\", ev.key);\n\t\t\tthis.doPaste(\"string\", d);\n\t\t}\n\t}\n\n\tonFocusin(ev: FocusEvent) {\n\t\tthis.selMgrAsIs.onFocus(ev);\n\t}\n\n\tonBlur(ev: FocusEvent) {\n\t\tthis.selMgrAsIs.onBlur(ev);\n\t}\n\n\t/** Noeud texte sur lequel une composition IME est en cours. */\n\tpendingIme?: ITxtStrTextNode;\n\n\t/**\n\t * Indique pendant une transaction que la modification HTML a déjà eu lieu.\n\t * Obligatoire pour édition IME ou beforeinput event non cancelable.\n\t * L'html n'est alors pas modifié et la selection n'est pas gérée par le txtSelMgr.\n\t */\n\twebUpdateDone?: boolean;\n\n\tonCompositionStart(ev: CompositionEvent) {\n\t\t//console.log(\":onCompositionStart::\", ev, ev.composedPath()[0], ev.cancelable);\n\t\tconst selMgr = this.selMgr;\n\t\tif (selMgr.type !== \"Caret\") deleteFromSel(this, false, \"character\");\n\t\tconst textNode = selMgr.focusNode as ITxtStrTextNode;\n\t\tconst txtStr = findTxtStrParent(selMgr.focusNode);\n\t\ttextNode.ime = {start: selMgr.focusOffset, len: 0};\n\t\tthis.pendingIme = textNode;\n\t}\n\n\tonCompositionUpdate(ev: CompositionEvent) {\n\t\t//console.log(\":onCompositionUpdate::\", ev.data);\n\t\tthis.pendingIme.ime.len = ev.data.length;\n\t}\n\n\tonCompositionEnd(ev: CompositionEvent) {\n\t\t//console.log(\":onCompositionEnd::\", ev, ev.cancelable);\n\t\tif (ev.data) {\n\t\t\tthis.webUpdateDone = true;\n\t\t\tdoInput(ev.data, ev, this);\n\t\t\tthis.webUpdateDone = false;\n\t\t}\n\t\tthis.pendingIme.ime = null;\n\t\tthis.pendingIme = null;\n\t}\n\n\tonBeforeinput(ev: InputEvent) {\n\t\tconst type = ev.inputType;\n\t\tif (type in this.beforeInputHandler) this.beforeInputHandler[type](ev, this);\n\t\telse if (ev.cancelable) ev.preventDefault(); // notamment pour historyUndo, historyRedo\n\t\t//console.log(\"beforeinput::::\", ev, ev.cancelable, ev.defaultPrevented);\n\t}\n\n\tonKeyPress(ev: KeyboardEvent) {\n\t\t//console.log(\"keypress txt-root::::\", ev);\n\t\tconst key = ev.key;\n\t\tif (key in this.keyPressHandler) this.keyPressHandler[key](ev, this);\n\t}\n\n\tonKeyDown(ev: KeyboardEvent) {\n\t\t//console.log(\"keydown txt-root::::\", ev);\n\t\t//force un fixupSel pour une insertion correcte.\n\t\tif (this.accelKeyMgr && (ev.ctrlKey || ev.metaKey)) {\n\t\t\tif (this.accelKeyMgr.handleKeyboardEvent(ev, this) === 2) return;\n\t\t}\n\t\tconst key = ev.key;\n\t\tif (key in this.keyDownHandler) this.keyDownHandler[key](ev, this);\n\t}\n\n\tonClick(ev: MouseEvent) {\n\t\tif (ev.defaultPrevented) return; //Si un sous-noeud a déjà géré la sel, on sort.\n\t\tif (ev.detail === 2) {\n\t\t\t//Double-click = sel du mot : on contre le comportement de Chrome au \"select word\" par double-click qui sélectionne l'espace après le mot.\n\t\t\t//ev.preventDefault(); //dans chrome la sel du mot au triple click se fait avant, preventDefault() n'a aucun effet.\n\t\t\tthis.selMgr.trim();\n\t\t} else if (ev.detail === 3) {\n\t\t\t//Triple-click = sel du paragraphe : on contre le comportement de Chrome, pas satisfaisant.\n\t\t\t//ev.preventDefault(); //dans chrome la sel du para au triple click se fait avant, preventDefault() n'a aucun effet.\n\t\t\tconst selMgr = this.selMgr;\n\t\t\tconst from = findTxtParaLikeFrom(selMgr.focusNode);\n\t\t\tif (from) selMgr.selectAround(from);\n\t\t}\n\t}\n\n\tonCopy(ev: ClipboardEvent) {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tconst selMgr = this.selMgr;\n\t\tif (selMgr.tableLayout) selMgr.tableLayout.onCopy(ev);\n\t\telse this.wedMgr.writeRangeToClipboard(selMgr.getXaRange(), ev.clipboardData);\n\t}\n\n\tasync onCut(ev: ClipboardEvent): Promise<void> {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tif (!WEDLET.isWritableWedlet(this.wedlet)) return;\n\t\tconst selMgr = this.selMgr;\n\t\tif (selMgr.tableLayout) selMgr.tableLayout.onCut(ev);\n\t\telse {\n\t\t\tawait this.wedMgr.writeRangeToClipboard(selMgr.getXaRange(), ev.clipboardData);\n\t\t\tdeleteFromSel(this, false, 'character');\n\t\t}\n\t}\n\n\tasync onPaste(ev: ClipboardEvent) {\n\t\t//console.log(\"paste txt-root::::\", ev, ev.clipboardData.types);\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tthis.doPaste(undefined, ev.clipboardData);\n\t}\n\n\tasync doPaste(targetHint?: \"string\" | \"text\" | \"markdown\" | undefined, dataTransfer?: DataTransfer) {\n\t\tif (!WEDLET.isWritableWedlet(this.wedlet)) return;\n\t\tlet selMgr = this.selMgr;\n\t\tconst txtElt = findTxtEltOrRootParent(selMgr.commonAncestor, true);\n\t\tif (!txtElt) return;\n\t\t//if (txtElt instanceof TxtStr && txtElt.isVirtual()) txtElt = findTxtEltOrRootParent(txtElt); // pour être en phase avec selMgr.getXaRange()\n\t\tconst wedMgr = this.wedMgr;\n\t\tconst txStamp = wedMgr.txStamp;\n\t\tlet impCtx = this.buildImportContext(txtElt, selMgr, targetHint);\n\t\tif (!impCtx) return;\n\t\tconst imports = await wedMgr.tryPaste(impCtx, {}, dataTransfer);\n\t\tif (!imports || imports.length === 0) {\n\t\t\tPOPUP.showNotifInfo(\"Aucun contenu du presse-papier n'a pu être importé.\", this);\n\t\t} else {\n\t\t\tconst doImport = async (importer: ISkImporter) => {\n\t\t\t\tif (importer.needAsyncBuild && await importer.buildContentToImport(this) === 'stop') return;\n\t\t\t\tif (txtElt.isConnected) {\n\t\t\t\t\t//on est toujours connecté\n\t\t\t\t\tif (txStamp !== wedMgr.txStamp) {\n\t\t\t\t\t\t//des modif concurentes ont eu lieu (pendant l'async de tryPaste() et buildContentToImport())\n\t\t\t\t\t\t// => on reset le contexte pour forcer le recalcul.\n\t\t\t\t\t\tselMgr = this.selMgr;\n\t\t\t\t\t\timpCtx = this.buildImportContext(txtElt, selMgr, targetHint);\n\t\t\t\t\t\tif (!impCtx) return;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.wedlet.isVirtual()) {\n\t\t\t\t\t\tconst batch = wedMgr.docHolder.newBatch();\n\t\t\t\t\t\timporter.doImport(impCtx, batch);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\twedMgr.freezeFocus = true;\n\t\t\t\t\t\t\tbatch.doBatch();\n\t\t\t\t\t\t\tif (txtElt.isConnected) {\n\t\t\t\t\t\t\t\tconst str = findTxtStrLastChild(this);\n\t\t\t\t\t\t\t\tthis.selMgr.setCaretAtEnd(str);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\twedMgr.freezeFocus = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst sel = selMgr.getXaRange();\n\t\t\t\t\t\tconst batch = wedMgr.docHolder.newBatch(sel);\n\t\t\t\t\t\tif (selMgr.type === \"Object\") {\n\t\t\t\t\t\t\tbatch.setSelBefore(sel.start); //améliore la sel sur undo : l'obj est alors focusé, car sel autour d'un object n'est pas visible actuellement.\n\t\t\t\t\t\t}\n\t\t\t\t\t\timporter.doImport(impCtx, batch);\n\t\t\t\t\t\tbatch.doBatch();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (imports.length === 1) {\n\t\t\t\tdoImport(imports[0]);\n\t\t\t} else {\n\t\t\t\tconst actions = imports.map((imp) => new Action().setLabel(imp.getLabel()).setExecute(() => {doImport(imp)}));\n\t\t\t\tif (selMgr.tableLayout) {\n\t\t\t\t\tselMgr.tableLayout.locked = true;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tPOPUP.showPopupActions({actions, restoreFocus: selMgr.tableLayout.tblEditNode}, selMgr.tableLayout.focusCell, this);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tselMgr.tableLayout.locked = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tPOPUP.showPopupActions({actions}, txtElt, this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected buildImportContext(txtElt: TxtElement | TxtRoot, selMgr: TxtSelMgr, targetHint?: \"string\" | \"text\" | \"markdown\" | undefined): OSkPasteContext {\n\t\tif (selMgr.tableLayout) return selMgr.tableLayout.buildImportContext();\n\t\treturn {sel: selMgr.getXaRange(true), virtualPath: WEDLET.buildVirtualPath(txtElt.wedlet), targetHint};\n\t}\n\n\tonDragstart(ev: DragEvent) {\n\t\t// console.log(\"drastart::::\", ev);\n\t\t// ev.dataTransfer.setData('text/scenari', 'Scenarischema!');\n\t\t// ev.dataTransfer.setData('text/plain', 'Scenarischema! en textPlain');\n\t\t// ev.dataTransfer.setData('text/html', '<span>coucou</span>');\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t}\n\n\tonDrop(ev: DragEvent) {\n\t\t//console.log(\"drop::::\", ev, ev.dataTransfer.getData('text/scenari'));\n\t\tev.preventDefault();\n\t}\n\n\t/**\n\t * Si le caret est en dehors d'un TxtStr -sinon cette méthode n'est pas appelée car\n\t * le TxtStr aura pris le fixupCaret()-, on cherche à le repositionner dans un TxtStr.\n\t */\n\tfixupCaret(selMgr: TxtSelMgr): boolean {\n\t\tlet node = selMgr.focusNode as Node;\n\t\tnode = node.childNodes[selMgr.focusOffset] || node.lastChild || node;\n\t\t// console.log(\"fixupCaret:::\", node);\n\t\t// if(node instanceof HTMLElement && node.tabIndex >= 0) return;\n\t\tlet txtStr = findTxtStrPrevious(node);\n\t\tif (txtStr) {\n\t\t\ttxtStr.setCaretIn(selMgr, false);\n\t\t\treturn true;\n\t\t}\n\t\ttxtStr = findTxtStrNext(node);\n\t\tif (txtStr) {\n\t\t\ttxtStr.setCaretIn(selMgr, true);\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"TxtRoot.fixupCaret(sel) fail to find a TxtStr.\");\n\t\treturn false;\n\t}\n\n\t/**\n\t * Si le focusNode ou le anchorNode est en dehors d'un TxtStr -sinon cette méthode n'est pas appelée car\n\t * le TxtStr aura pris le fixupSelection()-, on cherche à le repositionner dans un TxtStr.\n\t * On privillégie la réduction de la sélection.\n\t */\n\tfixupSelection(selMgr: TxtSelMgr, what: number, oldFocus: Node, oldOffset: number): boolean {\n\t\tconst range = selMgr.range;\n\t\tif (what & 1) {\n\t\t\tconst anchorNode = selMgr.anchorNode;\n\t\t\tconst child = anchorNode.childNodes[selMgr.anchorOffset];\n\t\t\tif (range.startContainer === anchorNode) {\n\t\t\t\t//anchorNode est avant le focus => on cherche un text après de préférence\n\t\t\t\tlet txtStr = findTxtStrNext(child || DOM.findNextUncle(anchorNode, this));\n\t\t\t\tif (txtStr) {\n\t\t\t\t\tconst node = DOM.findNext(txtStr, txtStr, DOM.IS_text) as ITxtStrTextNode; // : DOM.findPreviousIn(txtStr, DOM.IS_text);\n\t\t\t\t\tselMgr.setSelAnchor(node, node.startBoundary ? 1 : 0);\n\t\t\t\t} else {\n\t\t\t\t\ttxtStr = findTxtStrPrevious(child || anchorNode.lastChild || anchorNode);\n\t\t\t\t\tif (txtStr) {\n\t\t\t\t\t\tconst node = DOM.findPreviousIn(txtStr, DOM.IS_text) as ITxtStrTextNode;\n\t\t\t\t\t\tselMgr.setSelAnchor(node, node.endBoundary ? node.length - 1 : node.length);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"fixupSelection : no txtStr Found (1)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//anchorNode est après le focus => on cherche un text avant de préférence\n\t\t\t\tlet txtStr = child ? findTxtStrPrevious(child) : findTxtStrLastChild(anchorNode) || findTxtStrPrevious(anchorNode);\n\t\t\t\tif (txtStr) {\n\t\t\t\t\tconst node = DOM.findPreviousIn(txtStr, DOM.IS_text) as ITxtStrTextNode;\n\t\t\t\t\tselMgr.setSelAnchor(node, node.endBoundary ? node.length - 1 : node.length);\n\t\t\t\t} else {\n\t\t\t\t\ttxtStr = findTxtStrNext(child || DOM.findNextUncle(anchorNode, this));\n\t\t\t\t\tif (txtStr) {\n\t\t\t\t\t\tconst node = DOM.findNext(txtStr, txtStr, DOM.IS_text) as ITxtStrTextNode; // : DOM.findPreviousIn(txtStr, DOM.IS_text);\n\t\t\t\t\t\tselMgr.setSelAnchor(node, node.startBoundary ? 1 : 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"fixupSelection : no txtStr Found (2)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (what & 2) {\n\t\t\tconst focusNode = selMgr.focusNode;\n\t\t\tconst child = focusNode.childNodes[selMgr.focusOffset];\n\t\t\tif (range.startContainer === focusNode) {\n\t\t\t\t//focusNode est avant l'anchor => on cherche un text après de préférence\n\t\t\t\tlet txtStr = findTxtStrNext(child || DOM.findNextUncle(focusNode, this));\n\t\t\t\tif (txtStr) {\n\t\t\t\t\tconst node = DOM.findNext(txtStr, txtStr, DOM.IS_text) as ITxtStrTextNode; // : DOM.findPreviousIn(txtStr, DOM.IS_text);\n\t\t\t\t\tselMgr.setSelFocus(node, node.startBoundary ? 1 : 0);\n\t\t\t\t} else {\n\t\t\t\t\ttxtStr = findTxtStrPrevious(child || focusNode.lastChild || focusNode);\n\t\t\t\t\tif (txtStr) {\n\t\t\t\t\t\tconst node = DOM.findPreviousIn(txtStr, DOM.IS_text) as ITxtStrTextNode;\n\t\t\t\t\t\tselMgr.setSelFocus(node, node.endBoundary ? node.length - 1 : node.length);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"fixupSelection : no txtStr Found (3)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//focusNode est après l'anchor => on cherche un text avant de préférence\n\t\t\t\tlet txtStr = child ? findTxtStrPrevious(child) : findTxtStrLastChild(focusNode) || findTxtStrPrevious(focusNode);\n\t\t\t\tif (txtStr) {\n\t\t\t\t\tconst node = DOM.findPreviousIn(txtStr, DOM.IS_text) as ITxtStrTextNode;\n\t\t\t\t\tselMgr.setSelFocus(node, node.endBoundary ? node.length - 1 : node.length);\n\t\t\t\t} else {\n\t\t\t\t\ttxtStr = findTxtStrNext(child || DOM.findNextUncle(focusNode, this));\n\t\t\t\t\tif (txtStr) {\n\t\t\t\t\t\tconst node = DOM.findNext(txtStr, txtStr, DOM.IS_text) as ITxtStrTextNode; // : DOM.findPreviousIn(txtStr, DOM.IS_text);\n\t\t\t\t\t\tselMgr.setSelFocus(node, node.startBoundary ? 1 : 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"fixupSelection : no txtStr Found (4)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false; //return si updaté pas codé, plus utilisé\n\t}\n\n\tmoveCaret(backward: boolean, alter: \"extend\" | \"move\" = \"move\", granularity: \"word\" | \"character\" = \"character\") {\n\t\tconst selMgr = this.selMgr;\n\t\tconst focusNode = selMgr.focusNode;\n\t\tif (focusNode instanceof Text) {\n\t\t\tfindTxtStrParent(focusNode).moveCaretFrom(selMgr, backward, alter, granularity);\n\t\t} else if (IS_TxtElement(focusNode)) {\n\t\t\t//un objet est sélectionné dans l'éditeur\n\t\t\t//FIXME affecter un selection.anchorPoint en cas de \"extend\", mais impossible avec chrome si extBlock en début ou fin !\n\t\t\tfocusNode.moveCaretOut(selMgr, backward, \"move\");\n\t\t} else {\n\t\t\t(findTxtStrFirstChild(this) || findTxtEltFirstChild(this)).setCaretIn(selMgr, true);\n\t\t}\n\t}\n\n\t/**\n\t * Déplacement vertical du caret (ArrowUp, ArrowDown).\n\t * @return true si le déplacement a été géré, false si on laisse l'algo par défaut gérer.\n\t */\n\tmoveCaretV(backward: boolean, alter: \"extend\" | \"move\" = \"move\"): boolean {\n\t\tconst selMgr = this.selMgrAsIs;\n\t\tconst focusNode = selMgr.focusNode;\n\t\tlet paraSib: TxtParaLike | TxtObject = null;\n\t\tif (focusNode) {\n\t\t\tconst p = findTxtParaLikeFrom(focusNode);\n\t\t\tif (p) {\n\t\t\t\tconst selType = selMgr.type;\n\t\t\t\tif (selType === 'Caret' || selType === 'Range') {\n\t\t\t\t\tconst rCaret = selMgr._sel.getRangeAt(0).getBoundingClientRect();\n\t\t\t\t\t//on compare au rect du content du p, pour éliminer le padding du P.\n\t\t\t\t\tconst rgP = new Range();\n\t\t\t\t\trgP.selectNodeContents(p);\n\t\t\t\t\tconst pCaret = rgP.getBoundingClientRect();\n\t\t\t\t\tif (backward) {\n\t\t\t\t\t\t//Si on n'est pas sur la 1ère ligne, on laisse l'algo par défaut.\n\t\t\t\t\t\tif (rCaret.top > pCaret.top) return false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//Si on n'est pas sur la dernière ligne, on laisse l'algo par défaut.\n\t\t\t\t\t\tif (rCaret.bottom < pCaret.bottom) return false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparaSib = p;\n\t\t\t} else {\n\t\t\t\tparaSib = DOM.findParentOrSelf(focusNode, this, (n: Node): n is TxtObject => n instanceof TxtObject);\n\t\t\t\tif (!paraSib && this.isMonoPara) {\n\t\t\t\t\t//On est en mono-para, on n'a pas trouvé \"p\", mais le TxtRoot fait l'objet de \"p\".\n\t\t\t\t\treturn false; //Comportement natif inter-lignes.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (paraSib) {\n\t\t\tlet nextP: TxtParaLike | TxtObject;\n\t\t\tif (backward) {\n\t\t\t\tnextP = DOM.findPrevious(paraSib, this, (n: Node): n is TxtParaLike | TxtObject => n instanceof TxtParaLike || n instanceof TxtObject);\n\t\t\t} else {\n\t\t\t\tnextP = DOM.findNext(paraSib, this, (n: Node): n is TxtParaLike | TxtObject => n instanceof TxtParaLike || n instanceof TxtObject);\n\t\t\t}\n\t\t\tif (nextP) {\n\t\t\t\tif (paraSib instanceof TxtParaLike && nextP instanceof TxtParaLike) {\n\t\t\t\t\t//if (paraSib.parentNode === nextP.parentNode) return false; NON bug si marque d'erreur dans un span. //saut entre 2 para consécutif, on laisse l'algo par défaut.\n\t\t\t\t\t//TODO search caret position avec x similaire\n\t\t\t\t\t//TODO Attente impl chromium caretPositionFromPoint()  https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n\t\t\t\t}\n\t\t\t\tnextP.setCaretIn(selMgr, !backward, alter);\n\t\t\t} else {\n\t\t\t\tparaSib.setCaretIn(selMgr, backward, alter);\n\t\t\t}\n\t\t} else {\n\t\t\t(findTxtStrFirstChild(this) || findTxtEltFirstChild(this)).setCaretIn(selMgr, backward);\n\t\t}\n\t\treturn true;\n\t}\n}\n\nAgEltBoxInsertDrawerTxt(AgEltBoxSelection(AgEltBoxInputAnnotable(TxtRoot), {selMode: 'caret'}));\n\nwindow.customElements.define(\"txt-root\", TxtRoot);\n\n\nclass WedTxtRootCtx extends WedletActionCtx implements ITxtRootContext, ITxtTableContext {\n\tfocusedElt: TxtRoot;\n\ttxTable: TxtTable;\n\tlogicTable: TXTTABLE.LogicTable;\n\n\tget wedlet(): IWedlet {return this.focusedElt.wedlet}\n\n\tget reg(): IReg<any> {return this.focusedElt.wedMgr.reg}\n\n\tget wedMgr(): WedMgr {return this.focusedElt.wedMgr}\n\n\tget txtRoot(): TxtRoot {return this.focusedElt}\n\n\tget accelKeyMgr(): AccelKeyMgr<ITxtRootContext> {return this.focusedElt.accelKeyMgr}\n\n\tonRefreshCycle(before: boolean): 'stop' | void {return this.focusedElt.onRefreshCycle(before)}\n}\n\n/**\n * Root ne contenant qu'un et un seul paragraphe, pouvant contenir du balisage inline.\n * Pas utilisé actuellement.\n * Usage\n * <wed:bind eltName=\"para\" wedlet=\"Box\" label=\"Para\">\n *  <box-ctn skin=\"box/head-body\" class=\"h\">\n *   <txt-root-inline  adjust-virtuals=\"no\">\n *    <wed:children defaultDisplay=\"#\"/>\n *    <txt:descendants>...</txt:descendants>\n *    <txt:uiconfig>...</txt:uiconfig>\n *   </txt-root-inline>\n *  </box-ctn>\n * <wed:bind/>\n */\nclass TxtRootInline extends TxtRoot {\n\n\tget isMonoPara() {return true}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.addEventListener('focusout', this.onFocusout);\n\t}\n\n\tonChildWedletsChange() {\n\t\tadjustVirtualsStr(this);\n\t}\n\n\tinsertVirtualStr(before: Node): void {\n\t\tconst strModel = this.strModel;\n\t\tconst childrenElt = this.wedConfig.wedChildrenElt;\n\t\tconst str = strModel.createWedlet(this.wedlet, childrenElt.wedDefaultDisplay) as TxtStr;\n\t\tstr.configWedletElt(strModel.config, str);\n\t\tif (childrenElt.wedSlotName) str.setAttribute(\"slot\", childrenElt.wedSlotName);\n\t\t(str as IElementWedlet).fromChildrenElt = childrenElt;\n\t\tthis.insertBefore(str, before);\n\t\tstr.bindAsVirtual();\n\t}\n\n\tonFocusin(ev: FocusEvent) {\n\t\tsuper.onFocusin(ev);\n\t\tDOMSH.findHost(this).setAttribute(\"selectin\", \"\");\n\t}\n\n\tonFocusout(ev: FocusEvent) {\n\t\tDOMSH.findHost(this).removeAttribute(\"selectin\");\n\t}\n}\n\nwindow.customElements.define(\"txt-root-inline\", TxtRootInline);\n\n\n/**\n * Bind \"Str\" pour binder directement un noeud texte txt-str, avec gestion espaces inséccables, OnTyping, etc.\n *\n * Config pour inclure des styles :\n * <wed:bind nodeType=\"text\" wedlet=\"Str\">\n *  <box-static skin=\"...\">\n *    <txt-root-str/>\n *  <box-static>\n * </wed:bind>\n *\n * Config pour stylage externe :\n * <wed:bind nodeType=\"text\" wedlet=\"Str\">\n *  <txt-root-str/>\n * </wed:bind>\n *\n * Techniquement, le wedlet est le TxtStrAlone qui étend TxtStr,\n * et TxtStrAlone.element est un TxtRootStr qui étend TxtRoot.\n */\nexport class StrModel extends TxtStrModel {\n\n\tget isBoxFamily(): boolean {return true}\n\n\tprotected _modes: string[]\n\n\tget modes(): string[] {return this._modes || WED.DEFAULT_MODES};\n\n\tset modes(val: string[]) {\n\t\tthis._modes = val;\n\t}\n\n\n\tcreateWedlet(parent: IParentWedlet, displayContext?: IWedDisplayElt): TxtStrAlone | null {\n\t\treturn new TxtStrAlone().initWedlet(this, parent, displayContext);\n\t}\n\n\tprotected newWedlet(): TxtElement {throw \"notUsed\"}\n\n}\n\nWED.registerWedletModel(\"Str\", StrModel);\n\n/**\n * TxtStr utilisé seul via le IWedletModel StrModel.\n * @see StrModel pour utilisation.\n */\nexport class TxtStrAlone extends TxtStr implements IWedletSingleElt, IEditableWedlet {\n\n\txaPart: /*string pour bindWithAttr*/ | number | null;\n\n\tprotected _element: IElementWedlet;\n\n\tget element(): IElementWedlet {return this._element}\n\n\tgetVirtualXaPart(): any /*number | string*/ {\n\t\tif (this.model.nodeType === ENodeType.attribute) return this.model.nodeName; //cas TxtStrAlone en attribut.\n\t\treturn super.getVirtualXaPart();\n\t}\n\n\tbindWithNode(xaOffest: number, node: IJmlObj | string, children: IJmlSubSet): void | Promise<void> {\n\t\tthis.refreshEditMode();\n\t\treturn super.bindWithNode(xaOffest, node, children);\n\t}\n\n\tbindAsVirtual(): this {\n\t\tthis.refreshEditMode();\n\t\treturn super.bindAsVirtual();\n\t}\n\n\tbindWithAttr(nameAttr: string, value: string): void | Promise<void> {\n\t\tthis.refreshEditMode();\n\t\tthis.xaPart = nameAttr as any;\n\t\tthis.element.refreshBindValue(value);\n\t}\n\n\trefreshEditMode() {\n\t\tthis.txtRoot.contentEditable = WEDLET.isWritableWedlet(this.wedlet.wedParent) ? 'true' : 'false';\n\t}\n\n\trefreshBindValue(val: IJmlNode) {\n\t\tsuper.refreshBindValue(val);\n\t}\n\n\t/** On cree le container TxtRootStr intermédiaire et on l'insère. */\n\tinsertElement(parent: Element, insertBefore?: Node, slotName?: string, caller?: IWedChildrenElt) {\n\t\tconst tpl = this.model.config;\n\t\tconst root = this._element = document.importNode(tpl.firstElementChild, false) as IElementWedlet;\n\t\tif (slotName) root.setAttribute(\"slot\", slotName);\n\t\troot.configWedletElt(tpl.firstElementChild, this);\n\t\tif (caller) (root as IElementWedlet).fromChildrenElt = caller;\n\t\t(root as IBoxElement).subEltWedlets?.push(this);\n\t\tconst strRoot = root instanceof TxtRootStr ? root : root.shadowRoot.querySelector('txt-root-str') as TxtRootStr;\n\t\tstrRoot.appendChild(this);\n\t\tevalPlaceHolder(strRoot, this);\n\t\t//strRoot.configWedletElt(this.model.config, this); appelé dans root.\n\t\tparent.insertBefore(root, insertBefore);\n\t}\n\n\tonAddedSkAnnot(annot: ISkAnnot, xaTarget: IXAddr): void {\n\t\tif (WEDLET.diffLib?.isDiffAnnot(annot) && annot.diffSession === this.wedMgr.docHolder.getDiffSession() && LANG.in(annot.type, \"diffValue\", \"diffMark\")) {\n\t\t\tif (annot.type === \"diffValue\") {\n\t\t\t\t(document.createElement(\"wed-diff-value\") as WedDiffValue).initDiffValue(annot as IDiffAnnotValue, this.element, this.wedMgr);\n\t\t\t} else {\n\t\t\t\t(document.createElement(\"wed-diff-mark\") as WedDiffMark).initDiffAnnot(this.parentElement, annot, this).defaultInject();\n\t\t\t}\n\t\t} else {\n\t\t\tsuper.onAddedSkAnnot(annot, xaTarget);\n\t\t}\n\t}\n\n\tonRemovedSkAnnot(annot: ISkAnnot, xaTarget: IXAddr): void {\n\t\tif (WEDLET.diffLib?.isDiffAnnot(annot) && annot.diffSession === this.wedMgr.docHolder.getDiffSession() && LANG.in(annot.type, \"diffValue\", \"diffMark\")) {\n\t\t\tif (annot.type === \"diffValue\") {\n\t\t\t\tconst parent = this.element as IElementWedlet & IWedAnnotPointer;\n\t\t\t\tif (parent.wedAnnotDiff?.skAnnot === annot) parent.wedAnnotDiff.removeDiffWidget();\n\t\t\t} else {\n\t\t\t\tconst parent = this.parentElement as IElementWedlet & IWedAnnotPointer;\n\t\t\t\tif (parent.wedAnnotDiff?.skAnnot === annot) parent.wedAnnotDiff.removeDiffWidget();\n\t\t\t}\n\t\t} else {\n\t\t\tsuper.onRemovedSkAnnot(annot, xaTarget);\n\t\t}\n\t}\n}\n\nAgWedletBoxSelectionSingleElt(TxtStrAlone);\nwindow.customElements.define(\"txt-str-alone\", TxtStrAlone);\n\n/**\n * Root utilisé par TxtStrAlone et noeud à déclarer dans le body du wedlet.\n * @see StrModel pour utilisation.\n */\nexport class TxtRootStr extends TxtRoot implements IBoxInputDiffMaker {\n\n\tget isMonoPara() {return true}\n\n\tconfigWedletElt(tpl: Element, wedlet: IWedlet) {\n\t\tthis.wedlet = wedlet as IParentWedlet & IWedletSingleElt;\n\t\tthis.wedMgr = wedlet.wedMgr;\n\t\tthis.selMgrAsIs = new (this.wedMgr.reg.getSvc<typeof TxtSelMgr>(\"wedTxtSelMgrClass\") || TxtSelMgr)(this);\n\t\tthis.contentEditable = WEDLET.isWritableWedlet(wedlet.wedParent) ? 'true' : 'false';\n\t\tthis.wedConfig = tpl as Element & ITxtRootModel;\n\t}\n\n\tasync doPaste(targetHint?: \"string\" | \"text\" | \"markdown\" | undefined, dataTransfer?: DataTransfer): Promise<void> {\n\t\tif (dataTransfer) {\n\t\t\tconst oldD = dataTransfer.getData(\"text/plain\");\n\t\t\tconst newD = DOM.findFirstChild(this, IS_TxtStr)?.transformInsertData(oldD);\n\t\t\tif (!newD) return;\n\t\t\tif (oldD !== newD) {\n\t\t\t\tdataTransfer = new DataTransfer();\n\t\t\t\tdataTransfer.setData(\"text/plain\", newD);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.trace(\"TODO:::TxtRootStr.doPaste with async clipboard API for calling TxtStr.transformInsertData()\");\n\t\t}\n\t\tsuper.doPaste(targetHint || \"text\", dataTransfer);\n\t}\n\n\tmakeInputForDiff(annot: IDiffAnnotValue): HTMLElement {\n\t\tconsole.log(\":::makeInputForDiff\", annot.otherValue);\n\t\treturn null;\n\t}\n}\n\nwindow.customElements.define(\"txt-root-str\", TxtRootStr);\n\n//*****************\n\n\nREG.reg.registerSkin(\"txt-root/InlineMarker\", 1, /*language=CSS*/ `\n\tinl-style::before,\n\tinl-phrase::before,\n\tinl-leaf::before,\n\tinl-link::before {\n\t\tcontent: '<';\n\t\tcolor: var(--edit-tagmark-color, rgba(194, 194, 194, .64));\n\t}\n\n\tinl-style::after,\n\tinl-phrase::after,\n\tinl-leaf::after,\n\tinl-link::after {\n\t\tcontent: '>';\n\t\tcolor: var(--edit-tagmark-color, rgba(194, 194, 194, .64));\n\t}\n\n\ttxt-ul,\n\ttxt-ol,\n\ttxt-sl {\n\t\tborder-inline-start: 2px solid var(--edit-tagmark-color, rgba(194, 194, 194, .64));\n\t\tpadding-inline-start: 2px;\n\t}\n`);\n\nfunction split(str: string): string[] {return str ? str.trim().split(/ +/) : null}\n\n/** **/\nfunction evalPlaceHolder(eltFrom: TxtRoot, eltTarget: TxtElement) {\n\tif (eltFrom.hasAttribute(\"placeholder\")) eltTarget.setAttribute(\"placeholder\", eltFrom.getAttribute(\"placeholder\"));\n\telse if (eltFrom.hasAttribute(\"placeholderup\")) {\n\t\tconst placeholderupAtt = eltFrom.getAttribute(\"placeholderup\");\n\t\tconst axePos = placeholderupAtt.indexOf(\":\");\n\t\tif (axePos != -1) {\n\t\t\tconst axe = placeholderupAtt.substring(0, axePos);\n\t\t\tlet wedlet: IWedlet;\n\t\t\tlet minLevel;\n\t\t\tlet maxLevel;\n\t\t\tconst bounds = placeholderupAtt.substring(axePos + 1);\n\t\t\tif (bounds.indexOf(\":\") > -1) {\n\t\t\t\tminLevel = parseInt(bounds.substring(0, bounds.indexOf(\":\")), 10);\n\t\t\t\tmaxLevel = parseInt(bounds.substring(bounds.indexOf(\":\") + 1), 10);\n\t\t\t} else {\n\t\t\t\tminLevel = 0;\n\t\t\t\tmaxLevel = parseInt(bounds, 10);\n\t\t\t}\n\t\t\tswitch (axe) {\n\t\t\tcase \"down\" :\n\t\t\t\twedlet = eltFrom.wedlet;\n\t\t\t\tfor (let i = 0; wedlet && i < minLevel; i++) wedlet = wedlet.wedParent;\n\t\t\t\tlet lastFindPlaceholder = \"\";\n\t\t\t\tfor (let i = minLevel; wedlet && i < maxLevel; i++) {\n\t\t\t\t\twedlet = wedlet.wedParent;\n\t\t\t\t\tif (wedlet && isWedletSingleElt(wedlet) && wedlet.element.getAttribute(\"placeholder\"))\n\t\t\t\t\t\tlastFindPlaceholder = wedlet.element.getAttribute(\"placeholder\");\n\t\t\t\t}\n\t\t\t\tif (lastFindPlaceholder) eltTarget.setAttribute(\"placeholder\", lastFindPlaceholder);\n\t\t\t\tbreak;\n\t\t\tcase \"up\" :\n\t\t\t\twedlet = eltFrom.wedlet;\n\t\t\t\tfor (let i = 0; wedlet && i < minLevel; i++) wedlet = wedlet.wedParent;\n\t\t\t\tfor (let i = minLevel; wedlet && i < maxLevel; i++) {\n\t\t\t\t\tif (wedlet && isWedletSingleElt(wedlet) && wedlet.element.getAttribute(\"placeholder\")) {\n\t\t\t\t\t\teltTarget.setAttribute(\"placeholder\", wedlet.element.getAttribute(\"placeholder\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\twedlet = wedlet.wedParent;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tthrow \"axe unknown in : \" + placeholderupAtt;\n\t\t\t}\n\t\t} else {\n\t\t\tconst up = parseInt(placeholderupAtt, 10);\n\t\t\tlet wedlet: IWedlet = eltFrom.wedlet;\n\t\t\tfor (let i = 0; wedlet && i < up; i++) wedlet = wedlet.wedParent;\n\t\t\tif (wedlet && isWedletSingleElt(wedlet) && wedlet.element.getAttribute(\"placeholder\")) eltTarget.setAttribute(\"placeholder\", wedlet.element.getAttribute(\"placeholder\"));\n\t\t}\n\t}\n}\n\n\nexport class Box2TxtModel extends BoxModel {\n\n\tbuildModelForFragment(insertCtx: IWedlet): IWedletModel {\n\t\treturn this;\n\t}\n}\n\nWED.registerWedletModel(\"Box2Txt\", Box2TxtModel);\n\n\nexport const txtTagsDefined = Promise.resolve();\n"]}