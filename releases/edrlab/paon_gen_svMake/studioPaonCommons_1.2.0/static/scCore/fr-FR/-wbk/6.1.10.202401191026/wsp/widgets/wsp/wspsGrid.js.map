{"version":3,"sources":["/@back@/wsp/widgets/wsp/wspsGrid.tsx"],"names":["BaseElementAsync","CellBuilderString","GridDataHolderJsonArray","Grid","REG","DOM","JSX","DOMSH","LANG","GridColDef","WSP","WspsGrid","[object Object]","init","this","reg","findReg","params","Object","assign","filterHidden","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","headElt","appendChild","createElement","id","filterElt","type","spellcheck","placeholder","hidden","oninput","onFilterInput","onkeydown","onFilterKeydown","dataHolder","grid","initialize","autoSelOnFocus","hideSortBtns","columnDefs","WSP_COL_TITLE","hideHeaders","selType","defaultAction","defaultActionCtx","emptyBody","label","level","gridInit","addEventListener","_onGridSelect","defaultActionOnClick","uiEvents","on","row","ev","execute","refresh","refreshFreeze","super","_refresh","selectedWsps","getSelectedWsps","value","wsps","listWsps","env","universe","wspServer","fields","withWspSrcSpecifiedRoles","wspMatchFilter","filter","entry","sort","w1","w2","title","wspCd","localeCompare","setDatas","selectByJWspInfoInList","setSelectedRows","setHidden","Number","isInteger","length","focus","e","getRow","getSelectedRow","rowDatas","countRows","getSelectedDatas","selectedRows","i","c","wspRow","find","wsp","push","clearSel","me","findHost","text","pattern","RegExp","escape4RegexpFuzzy","_filterdDatas","fullArr","_datas","getDatas","arr","s","v","test","_grid","key","preventDefault","stopImmediatePropagation","onSelChange","registerSkin","customElements","define","setLabel","setDefaultSort","setFlex","setMinWidth","setSortable","setCellBuilder","override"],"mappings":"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","sourcesContent":["import {BaseElementAsync, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {CellBuilderString, GridDataHolderJsonArray, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {Grid, GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IAction} from \"lib/commons/actions\";\nimport {LANG} from \"lib/commons/lang\";\nimport {GridColDef} from \"back/commons/widgets/grid-core\";\nimport {IChainEnv} from \"lib/wsp/chain\";\nimport {JWspInfoInList, WSP} from \"lib/wsp/wsp\";\nimport {WspList} from \"back/wsp/views/wspList\";\n\n/**\n * Widget d'affichage d'une liste de wsps avec filtre.\n */\nexport interface WspsGrid extends BaseElementAsync {\n\tinitialize(init?: OWspsGridInit): this\n}\n\nexport interface OWspsGridInit extends OSkinableInit {\n\treg?: IReg<IChainEnv>\n\n\t/** Filtre libre appliqué sur les entrées affichées\n\t * \t\tfonction : retourne true si l'entrée est préservée */\n\twspMatchFilter?: (entry: JWspInfoInList) => boolean,\n\n\t/** Filtre masqué (number masqué si le nb d'entrées est inférieur) */\n\tfilterHidden?: boolean | number\n\n\tonSelChange?: (sel: JWspInfoInList[]) => void\n\n\t/** Action exécutée au double-click ou sur les frappes entrée ou espace. */\n\tdefaultAction?: IAction<WspsGrid>\n\n\t/** false par défaut. Remarque : n'a de sens QUE si le grid est en sélection simple */\n\tdefaultActionOnClick?: boolean\n\n\tgridInit?: OGridSmallInit\n}\n\n/**\n *\n */\n\nexport class WspsGrid extends BaseElementAsync {\n\n\tparams: OWspsGridInit;\n\n\treg: IReg<IChainEnv>;\n\n\tdataHolder: GridDataHolderJsonArray<JWspInfoInList>;\n\n\tgrid: GridSmall\n\n\tfilterElt: HTMLInputElement;\n\n\tmsgElt: MsgLabel;\n\n\n\tprotected async _initialize(init: OWspsGridInit): Promise<void> {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.params = Object.assign({filterHidden: 5}, init);\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, this.params);\n\n\t\t// Filtre\n\t\tlet headElt = sr.appendChild(<div id=\"head\"/>) as HTMLDivElement;\n\t\tthis.filterElt = headElt.appendChild(<input type=\"search\" spellcheck=\"false\" placeholder=\"Filtrer...\" hidden=\"\" oninput={this.onFilterInput} onkeydown={this.onFilterKeydown}/>) as HTMLInputElement\n\n\t\tthis.dataHolder = new GridDataHolderJsonArray();\n\n\t\tthis.grid = sr.appendChild(new Grid().initialize(Object.assign({\n\t\t\tautoSelOnFocus: \"first\",\n\t\t\thideSortBtns: true,\n\t\t\tcolumnDefs: [WSP_COL_TITLE],\n\t\t\tdataHolder: this.dataHolder,\n\t\t\thideHeaders: true,\n\t\t\tselType: \"mono\",\n\t\t\tdefaultAction: init.defaultAction,\n\t\t\tdefaultActionCtx: this,\n\n\t\t\temptyBody: (): Node => <c-msg label=\"Aucun atelier\" level=\"info\"/>\n\t\t}, init.gridInit)));\n\t\tthis.grid.addEventListener(\"grid-select\", this._onGridSelect);\n\t\tif (init.defaultActionOnClick === true) {\n\t\t\tthis.grid.uiEvents.on('rowClick', (row: GridDataRowJson<JWspInfoInList> | null, ev: MouseEvent) => {\n\t\t\t\tif (row) this.grid.defaultAction.execute(this.grid.defaultActionCtx);\n\t\t\t});\n\t\t}\n\t\treturn this.refresh();\n\t}\n\n\tasync _refresh() {\n\t\tthis.refreshFreeze(1);\n\t\ttry {\n\t\t\tsuper._refresh();\n\t\t\tconst selectedWsps: JWspInfoInList[] = this.getSelectedWsps();\n\t\t\tthis.filterElt.value = \"\";\n\t\t\tlet wsps = (await WSP.listWsps(this.reg.env.universe.wspServer, {fields: [\"srcRoles\", \"srcRi\"], withWspSrcSpecifiedRoles: true})).wsps;\n\t\t\tif (this.params.wspMatchFilter) wsps = wsps.filter((entry) => this.params.wspMatchFilter(entry))\n\t\t\twsps.sort((w1, w2) => (w1.title || w1.wspCd).localeCompare(w2.title || w2.wspCd));\n\n\t\t\tthis.dataHolder.setDatas(wsps);\n\t\t\tif (selectedWsps)\n\t\t\t\tthis.selectByJWspInfoInList(selectedWsps);\n\t\t\telse\n\t\t\t\tthis.grid.setSelectedRows(0);\n\n\t\t\tDOM.setHidden(this.filterElt, this.params.filterHidden === true || (Number.isInteger(this.params.filterHidden as number) && wsps.length < this.params.filterHidden));\n\t\t\tif (!this.filterElt.hidden)\n\t\t\t\tthis.filterElt.focus();\n\t\t\telse this.grid.focus();\n\t\t} catch (e) {\n\t\t\tthis.dataHolder.setDatas([]);\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tthis.refreshFreeze(-1);\n\t\t}\n\t}\n\n\tgetSelectedWsp(): JWspInfoInList | null {\n\t\tif (this.dataHolder) {\n\t\t\tconst row = this.dataHolder.getRow(this.grid.getSelectedRow());\n\t\t\tif (!row) return null;\n\t\t\treturn row.rowDatas;\n\t\t}\n\t}\n\n\tgetSelectedWsps(): JWspInfoInList[] {\n\t\treturn (this.dataHolder && this.dataHolder.countRows() > 0) ? this.dataHolder.getSelectedDatas() as JWspInfoInList[] : [];\n\t}\n\n\t/**\n\t * Sélection des entrées de l'arbre via une liste de JWspInfoInList sur un tree **chargé**\n\t * Si un JWspInfoInList demandé n'est pas présent dans le tree, aucune erreur n'est remontée\n\t * @param JWspInfoInList[]\n\t */\n\tselectByJWspInfoInList(wsps: JWspInfoInList[]): void {\n\t\tif (wsps != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst wspRow = this.dataHolder.getRow(i).rowDatas as JWspInfoInList;\n\t\t\t\tif (wspRow && wsps.find(wsp => {\n\t\t\t\t\tif (wsp && wsp.wspCd == wspRow.wspCd)\n\t\t\t\t\t\treturn true;\n\t\t\t\t})) {\n\t\t\t\t\tselectedRows.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedRows.length > 0)\n\t\t\t\tthis.grid.setSelectedRows(selectedRows);\n\t\t\telse\n\t\t\t\tthis.grid.clearSel();\n\t\t}\n\t}\n\n\tprotected onFilterInput(this: HTMLInputElement, ev: Event) {\n\t\tconst me = DOMSH.findHost<WspList>(this);\n\t\tconst text = this.value;\n\t\tif (text) {\n\t\t\tconst pattern = new RegExp(LANG.escape4RegexpFuzzy(text), 'i');\n\t\t\tif (!me._filterdDatas) me._filterdDatas = new GridDataHolderJsonArray();\n\t\t\tconst fullArr = me._datas.getDatas();\n\t\t\tconst arr = [] as JWspInfoInList[];\n\t\t\tfor (let i = 0, s = fullArr.length; i < s; i++) {\n\t\t\t\tconst v = fullArr[i];\n\t\t\t\tif (pattern.test(v.title || v.wspCd)) arr.push(v);\n\t\t\t}\n\t\t\tme._filterdDatas.setDatas(arr);\n\t\t\tif (me._grid.dataHolder !== me._filterdDatas) me._grid.dataHolder = me._filterdDatas;\n\t\t} else {\n\t\t\tme._grid.dataHolder = me._datas;\n\t\t}\n\t}\n\n\tprotected onFilterKeydown(this: HTMLInputElement, ev: KeyboardEvent) {\n\t\tif (ev.key === \"ArrowDown\") {\n\t\t\tconst me = DOMSH.findHost<WspList>(this);\n\t\t\tif ((me._filterdDatas || me._datas).countRows() > 0) {\n\t\t\t\tme._grid.setSelectedRows(0);\n\t\t\t\tme._grid.focus();\n\t\t\t\tev.preventDefault();\n\t\t\t\tev.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _onGridSelect(this: Grid) {\n\t\tconst me = DOMSH.findHost<WspsGrid>(this);\n\t\tif (me.params.onSelChange) me.params.onSelChange(me.getSelectedWsps());\n\t}\n\n}\n\nREG.reg.registerSkin('wsps-grid', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n  :focus-visible {\n\t\toutline: var(--focus-outline);\n\t}\n\n\t#head {\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\t#filter {\n\t\tbackground: .1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg);\n\t\tpadding-block: 2px;\n\t\tpadding-inline: 1.2em 2px;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\talign-items: center;\n\t\toverflow: hidden;\n\t\tflex-wrap: wrap;\n\t}\n\n\t#filter > * {\n\t\tmargin-block: 0;\n\t\tmargin-inline: .3rem 0;\n\t}\n\n\t#filter > select {\n\t\tborder: none;\n\t}\n\n\t#filter > input {\n\t\tmin-width: 10em;\n\t\tflex: 1;\n\t  background-color: var(--form-search-bgcolor);\n\t  color: var(--form-color);\n\t\tborder: 1px solid var(--border-color);\n\t  font-size: inherit;\n\t}\n\n\tinput {\n\t\tbackground-color: var(--form-bgcolor);\n\t\tcolor: var(--form-color);\n\t}\n\n\tinput:disabled {\n\t\tbackground-color: transparent;\n\t}\n\n\tc-grid {\n\t\tflex: 1;\n\t\tborder: none;\n\t\tbackground-color: var(--row-bgcolor);\n\t}\n`);\n\ncustomElements.define(\"wsps-grid\", WspsGrid);\n\nconst WSP_COL_TITLE = new GridColDef('title').setLabel(\"Titre\")\n\t.setDefaultSort(1, 'ascendant')\n\t.setFlex('25em', 1, 1).setMinWidth('8em').setSortable(true)\n\t.setCellBuilder(new CellBuilderString(\"title\").override(\"_getValue\", (row: GridDataRowJson<JWspInfoInList>): any => {\n\t\treturn row.rowDatas.title || row.rowDatas.wspCd;\n\t}))\n"]}