{"version":3,"sources":["/@back@/wsp/dialogs/searchExportCsv.tsx"],"names":["BaseElementAsync","MsgLabel","REG","DOM","JSX","ShadowJsx","DOMSH","ESearchExportColumnStatus","SearchRequest","ActionBtn","Button","AppHeader","POPUP","ERROR","ACTION","Action","ActionMenu","IO","InputOrderedSet","SearchExportCsv","[object Object]","this","privateUri","bibConfsLists","appHeaderMainActionsLists","APPBAR_MAIN_ACTIONS","_lastSavedConfs_srcDt","wsp","reg","env","init","createSubReg","findReg","columns","buildWhereXmlFct","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","CsvBiblioActionMenu_actionLists","id","_csvBiblioMenuAction","CsvBiblioActionMenu","setActionLists","addToList","UpdateCsvConf","SINGLETON","SaveCsvConfAs","dataSet","map","col","isAvailable","getId","label","getLabel","description","getDescription","icon","getIcon","notAvailable","getExportStatus","_headerElt","appendChild","initialize","actionContext","mainActions","getList","mainBar","actions","mergeLists","groupOrder","_titleElt","createElement","Ã®","skinOver","initInput","Object","assign","selectionLabel","availableLabel","emptySelectionMsg","previewMode","inputEltInit","_listColumnsInpt","addEventListener","ev","_refreshUi","currentDisplayedColsWritable","razSpecificColsConf","_exportBtn","class","ui-context","onclick","onExportBtn","onCancelBtn","razForm","refresh","selectedValues","exported","push","value","setCustomMsg","currentDisplayedColsConf","conf","title","writable","super","makeActionsList","then","disabled","_a","length","self","findHost","vals","name","getValidFileName","wspTitle","selectedColumns","Map","Promise","all","async","entry","colDef","find","fillSearchColumn","where","url","universe","config","wsps","searchUrl","resolve","qs","code","req","setWhereXml","saveRespAs","uiRoot","set","serializer","serializeToString","toDom","findPopupableParent","close","show","e","log","confs","srcDt","_lastSavedConfs","_savedSearchesCsvFetch","searchesCsv","waitForAvailable","resp","wspServer","privateFolderUrl","fetch","status","_udateLastSavedConfs","asJson","JSON","parse","headers","get","silent","_saveBibConf","search","remove","savedSearch","savedSearchesCsv","filter","findCurrentSearch","confirm","okLbl","cancelLbl","params","fields","fetchJson","method","body","stringify","Content-Type","wsFrames","ws","postMsg","svc","type","LIAISE_MSG_SAVED","uri","showNotifError","_onLiaiseMsg","onLiaiseMsg","bind","msgListeners","on","_onConnRenewed","onConnRenewed","place","eventsMgr","closed","removeListener","m","registerSkin","customElements","define","ResetForm","_label","_icon","_group","ctx","_description","input","pattern","showConfirm","control","titleBar","barLabel","result","saveCurrentBibConf","_b","isVisible","csvBiblioAction","listsActsTpls","acts","actionLists","_actionLists","getReg","split","elts","forEach","CsvBiblioEntryAction_tpl","savedConfs","CsvBiblioEntryAction_saved","setActions","injectSepByGroup","colSetDef","displayBibConf","_skinOver","buttonNode","initButtonNode","buildButton","setIcon","setLabel","setExecute","removeSavedBibConf","setHidden","stopImmediatePropagation","preventDefault"],"mappings":"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","sourcesContent":["import {BaseElementAsync, MsgLabel, OSkinableInit, PickInit} from \"back/commons/basis\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {IView} from \"lib/commons/views\";\nimport {DOM, JSX, ShadowJsx} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IWspUiEnv, Wsp} from \"lib/wsp/wsp\";\nimport {ESearchExportColumnStatus, IExportColsPersist, ISearchFunc, ISearchStore, SearchExportColumn, SearchRequest} from \"lib/wsp/search\";\nimport {ActionBtn, Button} from \"back/commons/widgets/buttons\";\nimport {AppHeader, OAppHeaderInit} from \"back/core/widgets/appHeader\";\nimport {JSrcFields, srcUri} from \"lib/wsp/src\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {ACTION, Action, ActionMenu, IAction} from \"lib/commons/actions\";\nimport {IO} from \"lib/commons/io/io\";\nimport \"back/wsp/dialogs/dialogs_Perms\";\nimport {InputOrderedSet, IOrderedSetEntry, OOrderedSetInit} from \"back/commons/widgets/inputs\";\n\nexport interface OSearchExportCsvInit extends OSkinableInit,\n\tPickInit<SearchExportCsv, 'columns' | 'buildWhereXmlFct' | 'privateUri' | 'bibConfsLists' | 'appHeaderMainActionsLists'> {\n\treg?: IReg<IWspUiEnv>\n\n\t/** Init custom de l'input de choix des colonnes */\n\tinputEltInit?: OOrderedSetInit\n}\n\nexport interface SearchExportCsv extends BaseElementAsync, IView, ISearchStore {\n\tinitialize(init: OSearchExportCsvInit): this\n}\n\n/**\n * Dialogue d'export de rÃ©sultat de recherche sous forme de CSV\n *\n * <br> DÃ©claration de 'configurations de colonnes' dans la blibliothÃ¨que via des objets\n *  de type {@link IExportColsPersist} sur la liste `confcsv:searchExportCsv:bib`\n * Exemple :\n * <pre>\n * REG.reg.addToList(\"confcsv:searchExportCsv:bib\", \"test1\", 1, {\n *\t\ttitle : \"Liste prÃ©dÃ©finie 1\",\n *\t\tcolumns: ['dt', 'srcCode']\n *\t} as IExportColsPersist);\n * </pre>\n *\n */\nexport class SearchExportCsv extends BaseElementAsync implements IView, ISearchStore {\n\n\treg: IReg<IWspUiEnv>;\n\n\t/** Colonnes disponibles */\n\tcolumns: SearchExportColumn<IRegPointer<IWspUiEnv>>[];\n\n\t/** fonction retournant le rÃ©sultat de recherche */\n\tbuildWhereXmlFct: (ctx: IRegPointer<IWspUiEnv>) => Element;\n\n\t/** srcUri du privateFolder dans lequel enregistrer les listes de cols */\n\tprivateUri: srcUri = '/itemSearchesColsCsv.json';\n\n\t/** Listes des structures de donnÃ©es {@see IExportColsPersist} dÃ©finissant des configs de colonnes proposÃ©es dans la bibliothÃ¨que */\n\tbibConfsLists: string[] = [\"confcsv:searchExportCsv:bib\"];\n\n\t/** Init de la liste d'actions du appHeader */\n\tappHeaderMainActionsLists?: string[] = [SearchExportCsv.APPBAR_MAIN_ACTIONS];\n\n\tget wsp(): Wsp {return this.reg.env.wsp};\n\n\t/** ElÃ©ments UI */\n\tprotected _listColumnsInpt: InputOrderedSet;\n\n\tprotected _exportBtn: Button;\n\n\tprotected _headerElt: AppHeader<this>;\n\n\tprotected _titleElt: MsgLabel;\n\n\tprotected _csvBiblioMenuAction: CsvBiblioActionMenu<SearchExportCsv>;\n\n\tpublic static APPBAR_MAIN_ACTIONS = \"actions:searchExportCsv:bar\";\n\n\tprivate static LIAISE_MSG_SAVED = \"searches.csv.saved\";\n\n\tprotected async _initialize(init: OSearchExportCsvInit): Promise<void> {\n\t\t// Reg dÃ©diÃ© car enrichi d'actions contextuelles\n\t\tthis.reg = this.reg = REG.createSubReg(this.findReg(init));\n\t\tthis.columns = init.columns;\n\t\tthis.buildWhereXmlFct = init.buildWhereXmlFct;\n\t\tif (init.privateUri) this.privateUri = init.privateUri;\n\t\tif (init.bibConfsLists) this.bibConfsLists = init.bibConfsLists;\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin(\"webzone:panel\", sr);\n\t\tthis.reg.installSkin(\"standard-dialog\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\t/* Exemple : DÃ©claration de 'ExportCsvCols' prÃ©dÃ©finies dans la bibliothÃ¨que */\n\t\t/*\n\t\tREG.reg.addToList(\"confcsv:searchExportCsv:bib:item\", \"test1\", 1, {\n\t\t\ttitle: \"Liste prÃ©dÃ©finie 1\",\n\t\t\tcolumns: ['dt', 'srcCode']\n\t\t} as IExportColsPersist);\n\t\tREG.reg.addToList(\"confcsv:searchExportCsv:bib:item\", \"test2\", 1, {\n\t\t\ttitle: \"Liste prÃ©dÃ©finie 2\",\n\t\t\tcolumns: ['space']\n\t\t} as IExportColsPersist);\n\t\tREG.reg.addToList(\"confcsv:searchExportCsv:bib:task\", \"testTask1\", 1, {\n\t\t\ttitle: \"Liste prÃ©dÃ©finie de task 1\",\n\t\t\tcolumns: ['space']\n\t\t} as IExportColsPersist);\n\t\t */\n\n\t\t// Init REG\n\t\tconst CsvBiblioActionMenu_actionLists = \"actions:searchExportCsv:bib:\" + this.id;\n\t\tthis._csvBiblioMenuAction = new CsvBiblioActionMenu().setActionLists(CsvBiblioActionMenu_actionLists);\n\t\tthis.reg.addToList(SearchExportCsv.APPBAR_MAIN_ACTIONS, \"csvBiblioMenuAction\", 1, this._csvBiblioMenuAction, 10);\n\t\tthis.reg.addToList(CsvBiblioActionMenu_actionLists, 'updateCsvConf', 1, UpdateCsvConf.SINGLETON, 10);\n\t\tthis.reg.addToList(CsvBiblioActionMenu_actionLists, 'saveCsvConf', 1, SaveCsvConfAs.SINGLETON, 20);\n\n\t\t// Construction de la liste des colonnes proposÃ©es\n\t\tlet dataSet: Dict<IOrderedSetEntry> = {};\n\t\tthis.columns.map((col) => {\n\t\t\tif (col.isAvailable(this)) {\n\t\t\t\tdataSet[col.getId()] = {\n\t\t\t\t\tlabel: col.getLabel(this),\n\t\t\t\t\tdescription: col.getDescription(this),\n\t\t\t\t\ticon: col.getIcon(this),\n\t\t\t\t\tnotAvailable: col.getExportStatus(this) === ESearchExportColumnStatus.notAvailable,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tthis._headerElt = sr.appendChild(new AppHeader().initialize({\n\t\t\treg: this.reg,\n\t\t\tactionContext: this,\n\t\t\tmainActions: this.reg.getList(SearchExportCsv.APPBAR_MAIN_ACTIONS),\n\t\t\tmainBar: {\n\t\t\t\tactions: this.reg.mergeLists(...init.appHeaderMainActionsLists),\n\t\t\t\tgroupOrder: 'burger crits io *',\n\t\t\t},\n\t\t} as OAppHeaderInit<SearchExportCsv>)) as AppHeader<this>;\n\n\t\tthis._titleElt = sr.appendChild(<MsgLabel Ã®={{label: '', skinOver: 'wsp-search-export-csv/msgTitle'}}/>) as MsgLabel;\n\n\t\tconst initInput: OOrderedSetInit = Object.assign({\n\t\t\tdataSet,\n\t\t\tselectionLabel: \"Colonnes sÃ©lectionnÃ©es\",\n\t\t\tavailableLabel: \"Colonnes disponibles\",\n\t\t\temptySelectionMsg: \"Aucune\",\n\t\t\tpreviewMode: \"asLines\",\n\t\t} as OOrderedSetInit, init.inputEltInit);\n\t\tthis._listColumnsInpt = sr.appendChild(new InputOrderedSet().initialize(initInput));\n\t\tthis._listColumnsInpt.addEventListener(\"change\", (ev) => {\n\t\t\tthis._refreshUi();\n\t\t\tif (!this.currentDisplayedColsWritable)\n\t\t\t\tthis.razSpecificColsConf();\n\t\t});\n\n\t\tthis._exportBtn = <Button label=\"Exporter...\" class=\"default\" ui-context=\"dialog\" onclick={this.onExportBtn}/> as Button;\n\t\tsr.appendChild(\n\t\t\t<footer id=\"footer\">\n\t\t\t\t{this._exportBtn}\n\t\t\t\t<Button label=\"Annuler\" ui-context=\"dialog\" onclick={this.onCancelBtn}/>\n\t\t\t</footer>\n\t\t);\n\n\t\tthis.razForm();\n\t\tthis.refresh();\n\t}\n\n\t/**\n\t * RÃ©initialisation totale de l'env aux valeurs initiales\n\t */\n\trazForm() {\n\t\tlet selectedValues: string[] = [];\n\t\tthis.columns.map((col) => {\n\t\t\tif (col.isAvailable(this))\n\t\t\t\tif (col.getExportStatus(this) === ESearchExportColumnStatus.exported) selectedValues.push(col.getId());\n\t\t});\n\t\tthis._listColumnsInpt.value = selectedValues;\n\t\tthis.razSpecificColsConf();\n\t}\n\n\tprivate razSpecificColsConf() {\n\t\tthis._titleElt.setCustomMsg(null);\n\t\tthis.currentDisplayedColsConf = null;\n\t\tthis.currentDisplayedColsWritable = null;\n\t}\n\n\tpublic currentDisplayedColsConf: IExportColsPersist;\n\tpublic currentDisplayedColsWritable: boolean;\n\n\t/**\n\t * Affiche une colsConf donnÃ©e (issue de la bibliothÃ¨que)\n\t * @param conf\n\t * @param title\n\t * @param writable\n\t */\n\tdisplayBibConf(conf: IExportColsPersist, title?: string, writable = false) {\n\t\tif (conf) {\n\t\t\tthis.currentDisplayedColsConf = conf;\n\t\t\tthis.currentDisplayedColsWritable = writable;\n\t\t\tthis._listColumnsInpt.value = conf.columns;\n\t\t\tthis._titleElt.setCustomMsg(title || conf.title, \"valid\");\n\t\t\tif (conf.description) this._titleElt.title = conf.description;\n\t\t\telse delete this._titleElt.title;\n\t\t} else {\n\t\t\tthis.razForm();\n\t\t}\n\t}\n\n\trefresh() {\n\t\tsuper.refresh();\n\t\tCsvBiblioActionMenu.makeActionsList(this._csvBiblioMenuAction, this.bibConfsLists, this).then(() => {\n\t\t\tif (this._headerElt) this._headerElt.refresh();\n\t\t\tthis._refreshUi();\n\t\t});\n\t}\n\n\tprivate async _refreshUi() {\n\t\tthis._exportBtn.disabled = (!this._listColumnsInpt || !this._listColumnsInpt.value?.length) ? true : false;\n\t}\n\n\t/**\n\t * Export du CSV\n\t */\n\tasync onExportBtn(this: Button): Promise<void> {\n\t\tconst self = DOMSH.findHost<SearchExportCsv>(this);\n\t\tconst vals: string[] = self._listColumnsInpt.value;\n\t\tif (vals && vals.length) {\n\t\t\tconst wsp = self.reg.env.wsp;\n\t\t\tconst name = IO.getValidFileName(wsp.wspTitle, \".csv\", 'date');\n\t\t\tconst selectedColumns: Map<string, null | string | ISearchFunc> = new Map();\n\t\t\tawait Promise.all(vals.map(async (entry) => {\n\t\t\t\tconst colDef = self.columns.find(col => col.getId() === entry);\n\t\t\t\tawait colDef?.fillSearchColumn(self, selectedColumns);\n\t\t\t}));\n\t\t\tconst where = self.buildWhereXmlFct(self);\n\t\t\ttry {\n\t\t\t\tif (where) {\n\t\t\t\t\tconst url = self.reg.env.universe.config.wsps.searchUrl.resolve(IO.qs(\"cdaction\", \"Search\", \"param\", wsp.code, \"format\", 'csv', \"downloadFileName\", name, \"addColumnNames\", true));\n\t\t\t\t\tconst req = new SearchRequest(selectedColumns).setWhereXml(where)\n\t\t\t\t\tawait IO.saveRespAs(url, self.reg.env.uiRoot, new Map().set(\"request\", DOM.serializer().serializeToString(req.toDom())), \"text/csv\", \"POST\");\n\t\t\t\t\tPOPUP.findPopupableParent(this).close();\n\t\t\t\t} else\n\t\t\t\t\treturn ERROR.show(\"RequÃªte invalide\");\n\t\t\t} catch (e) {\n\t\t\t\treturn ERROR.log(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tonCancelBtn(this: Button) {\n\t\tPOPUP.findPopupableParent(this).close();\n\t}\n\n\t/** Gestion des confs personnelles */\n\tprivate _udateLastSavedConfs(confs: Promise<JSearchesExportCsvDatas>, srcDt?: number) {\n\t\tsrcDt = (confs && srcDt) ? srcDt : -1;\n\t\tif (srcDt == this._lastSavedConfs_srcDt) return;\n\t\tthis._lastSavedConfs = confs;\n\t\tthis._lastSavedConfs_srcDt = srcDt;\n\t\tthis.refresh();\n\t}\n\n\tprivate _lastSavedConfs: Promise<JSearchesExportCsvDatas>;\n\tprivate _lastSavedConfs_srcDt = -1;\n\n\t/** Retourne la liste des confs personnelles (avec gestion de cache) */\n\tasync savedSearchesCsv(): Promise<JSearchExportCsvDatas[] | null> {\n\t\tif (!this._lastSavedConfs) await this._savedSearchesCsvFetch();\n\t\tif (this._lastSavedConfs) {\n\t\t\tconst conf = await this._lastSavedConfs;\n\t\t\treturn conf.searchesCsv;\n\t\t}\n\t}\n\n\tprivate async _savedSearchesCsvFetch(): Promise<JSearchesExportCsvDatas | null> {\n\t\ttry {\n\t\t\tif (!this.wsp.isAvailable) await this.wsp.waitForAvailable(this);\n\t\t\tconst resp = await this.wsp.wspServer.config.privateFolderUrl.fetch(IO.qs(\"cdaction\", \"GetSrc\", \"format\", \"stream\", \"fields\", \"srcDt\", \"param\", this.wsp.code, \"refUri\", \"\", \"privateUri\", this.privateUri), 'json');\n\t\t\tif (resp.status === 200) {\n\t\t\t\tthis._udateLastSavedConfs(resp.asJson as Promise<JSearchesExportCsvDatas>, (JSON.parse(resp.headers.get(\"X-SCFIELDS\")) as JSrcFields).srcDt);\n\t\t\t} else {\n\t\t\t\tthis._udateLastSavedConfs(null);\n\t\t\t}\n\t\t\treturn this._lastSavedConfs;\n\t\t} catch (e) {\n\t\t\tthis._udateLastSavedConfs(null);\n\t\t\tERROR.log(\"fetchSearches failed\", e);\n\t\t}\n\t}\n\n\t/** Enregistrement */\n\tasync saveCurrentBibConf(id: string, title: string, silent = false): Promise<true | false | null> {\n\t\tif (this._listColumnsInpt.value?.length) {\n\t\t\treturn this._saveBibConf({\n\t\t\t\tid,\n\t\t\t\ttitle,\n\t\t\t\tcolumns: this._listColumnsInpt.value\n\t\t\t}, silent);\n\t\t} else\n\t\t\treturn false;\n\t}\n\n\tasync removeSavedBibConf(id: string) {\n\t\tif (this.currentDisplayedColsConf?.id === id)\n\t\t\tthis.razForm();\n\t\treturn this._saveBibConf({id} as IExportColsPersist, true, true);\n\t}\n\n\tasync persistSearch(search: IExportColsPersist): Promise<any> {\n\t\tawait this._saveBibConf(search, false);\n\t}\n\n\t/** Ajoute {@param search} Ã  la liste des enregistrements\n\t * @return true : l'enregistrement a bien eu lieu\n\t * @return false : l'enregistrement n'a pas eu lieu de faÃ§on volontaire\n\t * @return null : l'enregistrement n'a pas eu lieu de faÃ§on involontaire (erreur, ...)\n\t */\n\tprivate async _saveBibConf(search: IExportColsPersist, silent = false, remove = false): Promise<true | false | null> {\n\t\ttry {\n\t\t\tif (!this.wsp.isAvailable) await this.wsp.waitForAvailable(this);\n\t\t\tif (!search.id) throw \"search must have ID to be saved\";\n\n\t\t\tlet savedSearch = {} as JSearchesExportCsvDatas;\n\n\t\t\t// - RÃ©cupÃ©ration de la liste actuelle pour update\n\t\t\tsavedSearch.searchesCsv = await this.savedSearchesCsv() || [];\n\n\t\t\t// - Ajout / maj de la liste Ã  enregistrer\n\n\t\t\tif (remove) {\n\t\t\t\tsavedSearch.searchesCsv = savedSearch.searchesCsv.filter(entry => entry.id === search.id ? false : true);\n\t\t\t} else {\n\t\t\t\tconst findCurrentSearch = savedSearch.searchesCsv.find(entry => entry.id === search.id);\n\t\t\t\tconst title = search.title;\n\t\t\t\tif (findCurrentSearch) {\n\t\t\t\t\tif (silent || await POPUP.confirm(`Voulez-vous vraiment remplacer l'entrÃ©e '${title}' existante ?`, null, {okLbl: \"Remplacer\", cancelLbl: \"Annuler\"})) {\n\t\t\t\t\t\tfindCurrentSearch.title = search.title;\n\t\t\t\t\t\tfindCurrentSearch.columns = search.columns;\n\t\t\t\t\t\tfindCurrentSearch.description = search.description;\n\t\t\t\t\t\tfindCurrentSearch.params = search.params;\n\t\t\t\t\t} else\n\t\t\t\t\t\treturn false;\n\t\t\t\t} else\n\t\t\t\t\tsavedSearch.searchesCsv.push(search as JSearchExportCsvDatas);\n\t\t\t}\n\n\t\t\t// - Enregistrement\n\t\t\tconst fields = await this.wsp.wspServer.config.privateFolderUrl.fetchJson<JSrcFields>(IO.qs(\"cdaction\", \"PutSrc\", \"format\", \"JSON\", \"fields\", \"srcDt\", \"param\", this.wsp.code, \"refUri\", \"\", \"privateUri\", this.privateUri), {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify(savedSearch),\n\t\t\t\theaders: {\"Content-Type\": \"appplication/json\"}\n\t\t\t});\n\t\t\tthis._udateLastSavedConfs(Promise.resolve(savedSearch), fields.srcDt);\n\t\t\tthis.reg.env.universe.wsFrames.ws.postMsg({svc: 'liaise', type: SearchExportCsv.LIAISE_MSG_SAVED, uri: this.privateUri});\n\t\t\treturn true;\n\n\t\t} catch (e) {\n\t\t\tERROR.log(`Save searches csv to '${this.privateUri}' failed`, e);\n\t\t\tPOPUP.showNotifError(\"L'enregistrement de la configuration des colonnes a Ã©chouÃ©.\", this);\n\t\t}\n\t}\n\n\tonViewShown() {\n\t\tif (!this._onLiaiseMsg) {\n\t\t\tthis._onLiaiseMsg = this.onLiaiseMsg.bind(this);\n\t\t\tthis.reg.env.universe.wsFrames.ws.msgListeners.on('liaise', this._onLiaiseMsg);\n\t\t}\n\t\tif (!this._onConnRenewed) {\n\t\t\tthis._onConnRenewed = this.onConnRenewed.bind(this);\n\t\t\tthis.reg.env.place.eventsMgr.on(\"onConnectionRenewed\", this._onConnRenewed);\n\t\t}\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\tif (closed) {\n\t\t\tthis.reg.env.universe.wsFrames.ws.msgListeners.removeListener('liaise', this._onLiaiseMsg);\n\t\t\tthis.reg.env.place.eventsMgr.removeListener(\"onConnectionRenewed\", this._onConnRenewed);\n\t\t}\n\t}\n\n\t/** DÃ©tection d'une Ã©criture concurente via le service de liaise. */\n\tprotected _onLiaiseMsg: (m: Jsonisable) => void;\n\n\tprotected onLiaiseMsg(m: Jsonisable) {\n\t\tif (m.type === SearchExportCsv.LIAISE_MSG_SAVED && m.uri === this.privateUri) this._udateLastSavedConfs(null);\n\t}\n\n\tprotected _onConnRenewed: () => void;\n\n\tprotected async onConnRenewed() {\n\t\tconst resp = await this.wsp.wspServer.config.privateFolderUrl.fetch(IO.qs(\"cdaction\", \"GetSrc\", \"format\", \"JSON\", \"fields\", \"srcDt\", \"param\", this.wsp.code, \"refUri\", \"\", \"privateUri\", this.privateUri), 'json');\n\t\tif (resp.status === 200 ? this._lastSavedConfs_srcDt !== resp.asJson.srcDt : resp.status === 404 && this._lastSavedConfs_srcDt !== -1) this._udateLastSavedConfs(null);\n\t}\n}\n\nREG.reg.registerSkin('wsp-search-export-csv', 1, /* language=CSS */ `\n\tc-appheader {\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\tc-msg {\n\t\tflex: 0;\n\t\tdisplay: contents;\n\t\ttext-align: center;\n\t}\n\n\tc-msg[hidden] {\n\t\tdisplay: none;\n\t}\n\n\tc-input-ordered-set {\n\t\tflex: 1;\n\t\tmargin: 5px;\n\t}\n`);\n\nREG.reg.registerSkin('wsp-search-export-csv/msgTitle', 1, /* language=CSS */ `\n\t.label {\n\t\tcolor: var(--alt1-color);\n\t}\n`);\n\n\ncustomElements.define(\"wsp-search-export-csv\", SearchExportCsv);\n\n\n/** SchÃ©ma json d'enregistrement des confs de des cols */\ninterface JSearchesExportCsvDatas {\n\tsearchesCsv: JSearchExportCsvDatas[]\n}\n\ninterface JSearchExportCsvDatas extends IExportColsPersist {\n\tid: string\n}\n\n\n// Actions\n\n/** RÃ©initialisation du formulaire dans son Ã©tat initial lors de l'ouverture de la fenÃªtre */\nclass ResetForm extends Action<SearchExportCsv> {\n\tstatic SINGLETON = new ResetForm();\n\n\tconstructor() {\n\t\tsuper(\"resetForm\");\n\t\tthis._label = \"RÃ©initialiser le choix des colonnes\";\n\t\tthis._icon = \"/@skin@/commons/icons/reset.svg\";\n\t\tthis._group = 'cols';\n\t}\n\n\tasync execute(ctx: SearchExportCsv, ev?: Event) {\n\t\treturn ctx.razForm();\n\t}\n\n}\n\nREG.reg.addToList(SearchExportCsv.APPBAR_MAIN_ACTIONS, \"resetForm\", 1, ResetForm.SINGLETON);\n\n/** Enregistremet d'une conf */\nclass SaveCsvConfAs extends Action<SearchExportCsv> {\n\tstatic SINGLETON = new SaveCsvConfAs();\n\n\tconstructor() {\n\t\tsuper(\"saveCsvConf\");\n\t\tthis._label = \"Enregistrer la configuration sous...\";\n\t\tthis._description = \"Enregistrer la configuration des colonnes courante\";\n\t\t//this._icon = \"/@skin@/core/dialogs/save.svg\";\n\t\tthis._group = 'io';\n\t}\n\n\tasync execute(ctx: SearchExportCsv, ev?: Event) {\n\t\tlet input = <input type=\"text\" pattern=\".+\" id=\"idIpt\"/>;\n\n\t\tasync function showConfirm() {\n\t\t\tif (await POPUP.confirm(<div>\n\t\t\t\t<ShadowJsx skinOver=\"form-control-areas\">\n\t\t\t\t\t<div class=\"ctrlLbl\">\n\t\t\t\t\t\t<label class=\"lbl\" control=\"idIpt\">LibellÃ© :</label>\n\t\t\t\t\t\t{input}\n\t\t\t\t\t</div>\n\t\t\t\t</ShadowJsx>\n\t\t\t</div>, null, {okLbl: \"Enregistrer\", cancelLbl: \"Annuler\", titleBar: {barLabel: {label: \"Enregistrement de la configuration de l'export CSV\"}}})) {\n\t\t\t\tif (input.value) {\n\t\t\t\t\tconst result = await ctx.saveCurrentBibConf(input.value, input.value, false);\n\t\t\t\t\tif (result === false) await showConfirm();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait showConfirm();\n\t}\n\n}\n\n/** Update d'une conf */\nclass UpdateCsvConf extends Action<SearchExportCsv> {\n\tstatic SINGLETON = new UpdateCsvConf();\n\n\tconstructor() {\n\t\tsuper(\"updateCsvConf\");\n\t\tthis._label = (ctx) => {\n\t\t\tconst label = ctx.currentDisplayedColsConf?.title || ctx.currentDisplayedColsConf?.id;\n\t\t\treturn `Remplacer la configuration '${label}'`;\n\t\t};\n\t\tthis._description = \"Actualiser la configuration actuelle\";\n\t\t//this._icon = \"/@skin@/core/dialogs/save.svg\";\n\t\tthis._group = 'io';\n\t}\n\n\tisVisible(ctx: SearchExportCsv): boolean {\n\t\tif (!ctx.currentDisplayedColsConf || !ctx.currentDisplayedColsWritable) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: SearchExportCsv, ev?: Event) {\n\t\tconst result = await ctx.saveCurrentBibConf(ctx.currentDisplayedColsConf.id, ctx.currentDisplayedColsConf.title, true);\n\t}\n\n}\n\n/**\n *\n */\nclass CsvBiblioActionMenu<C extends SearchExportCsv> extends ActionMenu<C> {\n\n\t/** (re)Construit la liste des actions\n\t * ATTENTION : nÃ©cessite un refresh de la barre d'action container\n\t */\n\tstatic async makeActionsList(csvBiblioAction: CsvBiblioActionMenu<SearchExportCsv>, listsActsTpls: string[], ctx: SearchExportCsv): Promise<void> {\n\n\t\tlet acts: IAction<SearchExportCsv>[];\n\t\t// - actions issues de la listes d'actions\n\t\tconst actionLists = (typeof csvBiblioAction._actionLists === 'function') ? csvBiblioAction._actionLists(ctx, csvBiblioAction) : csvBiblioAction._actionLists;\n\t\tacts = actionLists ? REG.getReg(ctx).mergeLists<Action<SearchExportCsv>>(...actionLists.split(' ')) : [];\n\n\t\t// - actions 'tpl'\n\t\tif (listsActsTpls) {\n\t\t\tconst elts = ctx.reg.mergeLists(...listsActsTpls) as IExportColsPersist[];\n\t\t\telts.forEach(entry => acts.push(new CsvBiblioEntryAction_tpl(entry)));\n\t\t}\n\n\t\t// - actions personnelles enregistrÃ©es\n\t\tconst savedConfs = await ctx.savedSearchesCsv();\n\t\tif (savedConfs) {\n\t\t\tsavedConfs.forEach(entry => acts.push(new CsvBiblioEntryAction_saved(entry)));\n\t\t}\n\t\tcsvBiblioAction.setActions(ACTION.injectSepByGroup(acts, '* act-saved act-tpls', ctx));\n\t}\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis._label = \"BibliothÃ¨que\";\n\t\tthis._group = \"lists\";\n\t\tthis._icon = \"/@skin@/wsp/dialogs/searchExportCsv/bibCols.svg\";\n\t}\n\n}\n\n\nclass CsvBiblioEntryAction_tpl<C extends SearchExportCsv> extends Action<C> {\n\tprivate _searchId: string;\n\n\tconstructor(protected colSetDef: IExportColsPersist) {\n\t\tsuper(colSetDef.id);\n\t\tthis._label = colSetDef.title;\n\t\tthis._description = colSetDef.description;\n\t\tthis._group = \"act-tpls\";\n\t}\n\n\texecute(ctx: C, ev?: Event): any | 'noPreventDefault' {\n\t\tconst title = this.colSetDef.title;\n\t\tctx.displayBibConf(this.colSetDef, title ? `BibliothÃ¨que : ${title}` : null, false);\n\t}\n}\n\nclass CsvBiblioEntryAction_saved<C extends SearchExportCsv> extends Action<C> {\n\tprivate _searchId: string;\n\n\tconstructor(protected colSetDef: IExportColsPersist) {\n\t\tsuper(colSetDef.id);\n\t\tthis._label = colSetDef.title;\n\t\tthis._description = colSetDef.description;\n\t\tthis._skinOver = \"search-export-csv/saved/entry\";\n\t\tthis._group = \"act-saved\";\n\t}\n\n\texecute(ctx: C, ev?: Event): any | 'noPreventDefault' {\n\t\tconst title = this.colSetDef.title;\n\t\tctx.displayBibConf(this.colSetDef, title ? `Personnelle : ${title}` : null, true);\n\t}\n\n\tinitButtonNode(buttonNode: Element, ctx: C) {\n\t\tsuper.initButtonNode(buttonNode, ctx);\n\t\tconst title = this.colSetDef.title;\n\t\tbuttonNode.appendChild(ActionBtn.buildButton(new Action()\n\t\t\t.setIcon(\"/@skin@/commons/icons/delete.svg\")\n\t\t\t.setLabel(`Supprimer la configuration : ${title}`)\n\t\t\t.setExecute((ctx: C, ev) => {\n\t\t\t\tctx.removeSavedBibConf(this.getId());\n\t\t\t\tDOM.setHidden(buttonNode, true);\n\t\t\t\tif (ev) {\n\t\t\t\t\tev.stopImmediatePropagation();\n\t\t\t\t\tev.preventDefault();\n\t\t\t\t}\n\t\t\t}), ctx, 'bar'));\n\t}\n}\n\nREG.reg.registerSkin(\"search-export-csv/saved/entry\", 1, /* language=CSS */ `\n\tslot {\n\t\tposition: absolute;\n\t\tright: 0;\n\t\tdisplay: block;\n\t}\n\n\n\t/*:host{\n\t\tdisplay: flex;\n\t\tflex-direction: row-reverse;\n\t}\n\n  span{\n\t\tflex:1;\n\t}\n\t\n\tslot {\n\t\tborder : 5px solid yellow;\n\t}*/\n\n`);\n"]}