{"version":3,"sources":["/@back@/store/views/resVersionsView.tsx"],"names":["REG","DOM","URLTREE","ButtonActions","Action","InfoFocusRes","LOCALE","ResVersionsView","[object Object]","init","this","reg","findReg","super","_initialize","installSkin","localName","shadowRoot","showDate","onlyChangedContent","_a","env","nodeInfosChange","on","_histLstn","refresh","nodeInfos","_label","buildVersionName","actions","ni","succ","push","GotoNode","reverse","ThisNode","hist","node","filteredActions","reduce","contentId","currentValue","resId","startsWith","substring","length","nodeInfosPending","then","bind","disabled","_actions","notHead","_b","classList","toggle","setAttr","_refresh","closed","removeListener","version","v","m","date","formatDateDigitsToSec","format","ctx","resTypes","getResTypeFor","resIcon","ev","infoBroker","dispatchInfo","switchLeafVersionPath","permaPath","idx","api","registerSkin","customElements","define"],"mappings":"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","sourcesContent":["import {IDepotResUiEnv, IDepotUiEnv} from \"lib/store/depot\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {JNodeInfos, URLTREE} from \"lib/store/urlTree\";\nimport {ButtonActions, OButtonActionsInit} from \"back/commons/widgets/buttons\";\nimport {Action, IAction, IActionToggle} from \"lib/commons/actions\";\nimport {InfoFocusRes} from \"lib/store/res\";\nimport {LOCALE} from \"lib/commons/lang\";\n\n\n/**\n * Affiche un popup de sélection d'une version issu de l'historique des nodeInfos.\n */\nexport interface ResVersionsView extends ButtonActions<ResVersionsView> {\n\tinitialize(init: OResVersionsViewInit): this\n}\n\nexport interface OResVersionsViewInit extends OButtonActionsInit<ResVersionsView> {\n\tshowDate?: boolean\n\t/** Restreint la liste des versions aux changements de content (contentId du resId !=). */\n\tonlyChangedContent?: boolean\n\t//listenHistChanges?: boolean\n}\n\nexport class ResVersionsView extends ButtonActions<ResVersionsView> {\n\treg: IReg<IDepotResUiEnv & IDepotUiEnv>;\n\tshowDate?: boolean\n\tonlyChangedContent?: boolean\n\n\tprotected _initialize(init: OResVersionsViewInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tsuper._initialize(init);\n\t\tthis.reg.installSkin(this.localName, this.shadowRoot);\n\t\tthis.showDate = init.showDate;\n\t\tthis.onlyChangedContent = init.onlyChangedContent;\n\t\t//if (init.listenHistChanges)\n\t\tthis.reg.env.nodeInfosChange?.on(\"histChange\", (this._histLstn = () => {this.refresh()}));\n\t}\n\n\tprotected _histLstn: (niNew: JNodeInfos) => void;\n\n\tprotected _refresh() {\n\t\tconst env = this.reg.env;\n\t\tif (env.nodeInfos) {\n\t\t\t//console.log(\"ResVersionsView.nodeInfos:::\", env.nodeInfos);\n\t\t\tthis._label = this.buildVersionName(env.nodeInfos);\n\t\t\tconst actions = [];\n\t\t\tlet ni = env.nodeInfos;\n\t\t\twhile (ni.succ && ni.succ[0]) {\n\t\t\t\tni = ni.succ[0];\n\t\t\t\tactions.push(new GotoNode(ni));\n\t\t\t}\n\t\t\tactions.reverse();\n\t\t\tactions.push(new ThisNode(env.nodeInfos));\n\t\t\tif (env.nodeInfos.hist) for (let node of env.nodeInfos.hist) {\n\t\t\t\tactions.push(new GotoNode(node));\n\t\t\t}\n\n\t\t\tif (this.onlyChangedContent) {\n\t\t\t\tlet filteredActions: IAction<ResVersionsView>[] = [];\n\t\t\t\tactions.reduce<string>((contentId: string, currentValue: GotoNode) => {\n\t\t\t\t\tconst resId = currentValue.ni.resId;\n\t\t\t\t\tif (!resId.startsWith(contentId)) {\n\t\t\t\t\t\t//nouveau contentId trouvé\n\t\t\t\t\t\tcontentId = resId.substring(0, ni.resId.length - 3); //contentId.\n\t\t\t\t\t\tfilteredActions.push(currentValue);\n\t\t\t\t\t} else if (currentValue instanceof ThisNode) {\n\t\t\t\t\t\t//Pas nouveau contentId, mais noeud this, on garde.\n\t\t\t\t\t\tfilteredActions.push(currentValue);\n\t\t\t\t\t}\n\t\t\t\t\treturn contentId;\n\t\t\t\t}, \"-\");\n\t\t\t\tthis.actions = filteredActions;\n\t\t\t} else {\n\t\t\t\tthis.actions = actions;\n\t\t\t}\n\t\t} else if (env.nodeInfosPending) {\n\t\t\tenv.nodeInfosPending.then(this.refresh.bind(this));\n\t\t\treturn;\n\t\t} else {\n\t\t\t//Pas de nodeInfos, ni de chargement en cours => erreur\n\t\t\tthis._label = \"?\";\n\t\t\tthis.actions = [];\n\t\t}\n\t\tthis.disabled = this._actions.length < 1;\n\t\tconst notHead = env.nodeInfos?.succ?.length > 0;\n\t\tthis.classList.toggle(\"notHead\", notHead);\n\t\tDOM.setAttr(this, \"title\", notHead ? \"Attention, cette version n'est pas la dernière\" : null);\n\t\tsuper._refresh();\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\tif (closed && this._histLstn) {\n\t\t\tthis.reg.env.nodeInfosChange?.removeListener(\"histChange\", this._histLstn);\n\t\t}\n\t}\n\n\tbuildVersionName(ni: JNodeInfos) {\n\t\tconst version = ni.v || \"\";\n\t\tif (this.showDate && ni.m) {\n\t\t\tconst date = LOCALE.formatDateDigitsToSec.format(ni.m);\n\t\t\treturn `Version ${version} du ${date}`;\n\t\t}\n\t\treturn ni.v || \"\\u00A0\";\n\t}\n}\n\nclass GotoNode extends Action<ResVersionsView> {\n\n\tconstructor(public ni: JNodeInfos) {super();}\n\n\tgetIcon(ctx: ResVersionsView): string {\n\t\treturn ctx.reg.env.resTypes.getResTypeFor(this.ni).resIcon(this.ni);\n\t}\n\n\tgetLabel(ctx: ResVersionsView): string {\n\t\treturn ctx.buildVersionName(this.ni);\n\t}\n\n\texecute(ctx: ResVersionsView, ev?: Event): any {\n\t\tctx.reg.env.infoBroker.dispatchInfo(new InfoFocusRes(URLTREE.switchLeafVersionPath(ctx.reg.env.nodeInfos.permaPath, this.ni.v || this.ni.idx)), ctx);\n\t}\n}\n\nclass ThisNode extends GotoNode {\n\tisToggle(ctx: ResVersionsView): this is IActionToggle<ResVersionsView> {return true}\n\n\tgetDatas(api: \"menu\" | \"toggle\" | string, ctx: ResVersionsView): any {return api === \"toggle\" ? true : null}\n\n\tisEnabled(ctx: ResVersionsView): boolean {return false}\n}\n\nREG.reg.registerSkin('store-res-versions', 1, /* language=CSS */ `\n\t:host(.notHead) > span {\n\t\tpadding-inline-start: 1.5em;\n\t\tbackground: url(/@skin@/store/views/resViews/notHead.svg) no-repeat left / contain;\n\t}\n`);\n\ncustomElements.define('store-res-versions', ResVersionsView);"]}