{"version":3,"sources":["/@back@/wsp/apps/taskApp.tsx"],"names":["BaseElementAsync","MsgLabel","REG","VIEWS","DOM","JSX","AppHeader","DOMSH","ItemViewerSingle","ERROR","registerWspProtocolsActions","WSPPACK","Action","InfoReqCurrentItem","InfoBrokerBasic","InfoReqTaskContentItems","InfoTaskCurrentItemsChange","TaskApp","[object Object]","init","sr","this","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","infoBroker","addConsumer","msgElt","appendChild","fromReg","findReg","appDef","place","env","universe","wspServer","wspsLive","newPlace","wsp","getWsp","w","chain","auth","currentUser","setStandardMsg","waitForAvailable","e","console","log","appErrorStatus","setCustomMsg","isDeleted","reg","createSubReg","eventsMgr","on","onWspLiveStateChange","bind","uiRoot","initRegExtPoints","hasPerm","rootElt","createElement","id","_taskViewer","disableAutoChangeCurrentItem","initViewer","lastDatas","task","appHeader","initialize","mainActions","getList","moreActions","actionContext","focusListening","insertBefore","h","img","src","wspMetaUi","getIcon","title","buildWspDefTitle","infoWsp","wspType","_wspLabel","_refreshTitle","lstns","lstn","result","Promise","setMsg","srcLabel","wspLabel","_a","wspTitle","setTextContent","setAttr","_lastSrcLabel","_lastWspLabel","dispatchViewChange","app","addMainBarAction","action","accel","addToList","getId","OpenWspApp","addMoreBarAction","OpenContentItemOnWspApp","msg","level","isFatal","setHidden","refresh","isAvailable","onViewShown","closed","onViewHidden","closePlace","def","info","initialized","initializedAsync","then","onInfo","registerSkin","customElements","define","super","_label","_icon","requireVisiblePerm","ctx","ev","curr","dispatchInfo","desk","findAndOpenApp","u","code","srcRef","setVisible","findCurentContentItems","checkObjectRootVisiblePerm","isVisible","entries","srcUri","shortDesc"],"mappings":"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","sourcesContent":["import {BaseElementAsync, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {AppFrameDeskFeat, IApp, IAppCtx} from \"back/core/appFrame\";\nimport {IReg, IRegPointer, IUiEnv, REG} from 'lib/commons/registry';\nimport {IView, VIEWS} from \"lib/commons/views\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {IChainEnv} from \"lib/wsp/chain\";\nimport {AppHeader} from \"back/core/widgets/appHeader\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {JTaskAppDef} from \"back/wsp/plugins/tasksPlg\";\nimport {ItemViewerSingle} from \"back/wsp/views/itemViewerSingle\";\nimport {IWspEnv, IWspUiEnv, Wsp} from \"lib/wsp/wsp\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {registerWspProtocolsActions} from \"back/wsp/actions/scProtocolActions\";\nimport {WSPPACK} from \"lib/wsp/pack\";\nimport \"back/wsp/apps/apps_Perms\";\nimport \"back/wsp/plugins/plugins_Perms\";\nimport {Action} from \"lib/commons/actions\";\nimport {JWspAppDef} from \"back/wsp/plugins/wspsPlg\";\nimport {InfoReqCurrentItem} from \"lib/wsp/item\";\nimport {srcRef, srcUri} from \"lib/wsp/src\";\nimport {IInfo, IInfoBroker, IInfoConsumer, InfoBrokerBasic} from \"lib/commons/infos\";\nimport {InfoReqTaskContentItems, InfoTaskCurrentItemsChange} from \"back/wsp/views/task/taskContent\";\n\n/** App affichant une tâche. */\nexport interface TaskApp extends BaseElementAsync {\n\tinitialize(init: IAppCtx<IChainEnv & IUiEnv> & OSkinableInit): this;\n}\n\nexport class TaskApp extends BaseElementAsync implements IView, IApp<IWspUiEnv>, IInfoConsumer {\n\n\tappErrorStatus?: 'accessDenied' | 'wspNotAvailable'\n\n\tappDef: JTaskAppDef;\n\n\t/** A ce niveau, on a spécifié le reg pour le wsp, cf taskViewer pour la spécif au niveau item/task */\n\treg: IReg<IWspUiEnv>;\n\n\tmsgElt: MsgLabel;\n\n\trootElt: HTMLDivElement;\n\n\tappHeader: AppHeader<TaskApp>;\n\n\twsp: Wsp;\n\n\tinfoBroker: IInfoBroker;\n\n\t_currentMainContentItem?: srcRef;\n\n\tprotected _taskViewer: ItemViewerSingle | null;\n\n\tprotected _wspLabel: HTMLElement | null;\n\n\t/** mémoire des derniers labels utilisés pour le label de la view. */\n\tprotected _lastSrcLabel: string;\n\n\tprotected _lastWspLabel: string;\n\n\tprotected async _initialize(init: IAppCtx<IChainEnv & IUiEnv>) {\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tthis.infoBroker = new InfoBrokerBasic();\n\t\tthis.infoBroker.addConsumer(this);\n\n\t\tthis.msgElt = sr.appendChild(new MsgLabel());\n\n\t\ttry {\n\t\t\tconst fromReg = this.findReg(init) as IReg<IChainEnv & IUiEnv>;\n\t\t\tthis.appDef = init.appDef as JTaskAppDef;\n\t\t\tconst place = fromReg.env.universe.wspServer.wspsLive.newPlace();\n\t\t\tthis.wsp = place.getWsp(this.appDef.w);\n\n\t\t\tif (!this.wsp.wspServer.chain.auth.currentUser) {\n\t\t\t\tthis.msgElt.setStandardMsg('needAuth');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.wsp.waitForAvailable(this);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tthis.appErrorStatus = 'wspNotAvailable';\n\t\t\t\tthis.msgElt.setCustomMsg(\"Échec à l'affichage de cette tâche : l'atelier n'est pas accessible.\", \"error\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.wsp.isDeleted) {\n\t\t\t\tthis.msgElt.setCustomMsg(\"Échec à l'affichage de cette tâche : l'atelier n'est pas accessible.\", \"error\");\n\t\t\t\tthis.appErrorStatus = 'wspNotAvailable';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.reg = REG.createSubReg(fromReg, this.wsp);\n\t\t\tthis.reg.env.place = place;\n\t\t\tthis.reg.env.place.eventsMgr.on(\"wspLiveStateChange\", this.onWspLiveStateChange.bind(this));\n\t\t\tthis.reg.env.uiRoot = this;\n\t\t\tthis.reg.env.infoBroker = this.infoBroker;\n\n\t\t\tawait this.initRegExtPoints();\n\n\t\t\t//check perm pour cette ihm.\n\t\t\tif (!this.reg.hasPerm(\"ui.taskApp\")) {\n\t\t\t\tthis.msgElt.setStandardMsg('accessDenied');\n\t\t\t\tthis.appErrorStatus = 'accessDenied';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.rootElt = sr.appendChild(<div id=\"root\"/>) as HTMLDivElement;\n\t\t\tthis._taskViewer = new ItemViewerSingle({disableAutoChangeCurrentItem: true});\n\t\t\tawait this._taskViewer.initViewer(this.reg, this.rootElt, init.lastDatas, this.appDef.task);\n\n\t\t\t//AppHeader (après les autres éléments pour déclarer les focusListening)\n\t\t\tthis.appHeader = new AppHeader<TaskApp>().initialize({\n\t\t\t\treg: this.reg,\n\t\t\t\tmainActions: this.reg.getList(\"actions:taskApp:bar:main\"),\n\t\t\t\tmoreActions: this.reg.getList(\"actions:taskApp:bar:more\"),\n\t\t\t\tactionContext: this,\n\t\t\t\tfocusListening: this.rootElt\n\t\t\t});\n\t\t\tsr.insertBefore(this.appHeader, this.rootElt);\n\t\t\tconst h = this.appHeader.appendChild(<header/>);\n\t\t\tconst img = h.appendChild(<img src={this.wsp.wspMetaUi.getIcon() || \"/@skin@/wsp/objects/wsp/wsp.svg\"}/>);\n\t\t\timg.title = WSPPACK.buildWspDefTitle(this.wsp.infoWsp.wspType);\n\t\t\tthis._wspLabel = h.appendChild(<h1/>);\n\t\t\tthis._refreshTitle();\n\n\t\t\ttry {\n\t\t\t\tconst lstns = this.reg.getList<(app: IApp<IWspEnv>) => void | Promise<void>>(\"taskApp:load\");\n\t\t\t\tif (lstns) for (const lstn of lstns) {\n\t\t\t\t\tconst result = lstn(this);\n\t\t\t\t\tif (result instanceof Promise) await result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tawait ERROR.log(\"taskApp:load listener failed\", e);\n\t\t\t}\n\n\t\t} catch (e) {\n\t\t\tthis.setMsg(\"Échec à l'affichage de cette tâche.\", \"error\", true);\n\t\t}\n\t}\n\n\tprotected _refreshTitle(srcLabel?: string) {\n\t\tconst wspLabel = this.wsp?.wspTitle || \"[Atelier non disponible]\";\n\t\tif (this._wspLabel) DOM.setTextContent(this._wspLabel, wspLabel);\n\t\tDOM.setAttr(this, \"label\", srcLabel ? srcLabel + \" - \" + wspLabel : wspLabel);\n\t\tif (this._lastSrcLabel !== srcLabel || this._lastWspLabel !== wspLabel)\n\t\t\tVIEWS.dispatchViewChange(this);\n\t\tthis._lastSrcLabel = srcLabel;\n\t\tthis._lastWspLabel = wspLabel;\n\t}\n\n\t/** Init des extPoints du registre de l'app. */\n\tprotected async initRegExtPoints() {\n\t\tconst app = this;\n\t\tconst reg = this.reg;\n\t\tconst wsp = reg.env.wsp;\n\n\t\t//#### ScProtocol\n\t\tregisterWspProtocolsActions(reg);\n\n\t\t//#### MainBar actions\n\t\tfunction addMainBarAction(action: Action<IRegPointer<IWspUiEnv>>, accel?: string) {\n\t\t\treg.addToList(\"actions:taskApp:bar:main\", action.getId(), 1, action);\n\t\t\tif (accel)\n\t\t\t\treg.addToList(\"accelkeys:taskApp:global\", accel, 1, action);\n\t\t}\n\n\t\taddMainBarAction(new OpenWspApp(), \"F8\");\n\t\t//addMainBarAction(new OpenWspDocApp(), ); TODO peu de chance que l'item à ouvrir soit un doc\n\n\t\t//#### MainBar actions\n\t\tfunction addMoreBarAction(action: Action<IRegPointer<IWspUiEnv>>, accel?: string) {\n\t\t\treg.addToList(\"actions:taskApp:bar:more\", action.getId(), 1, action);\n\t\t\tif (accel)\n\t\t\t\treg.addToList(\"accelkeys:taskApp:global\", accel, 1, action);\n\t\t}\n\n\t\taddMoreBarAction(new OpenContentItemOnWspApp());\n\n\t}\n\n\tsetMsg(msg: string, level?: 'info' | 'error' | 'warning' | null, isFatal: boolean = false) {\n\t\tthis.msgElt.setCustomMsg(msg, level);\n\t\tif (this.rootElt) DOM.setHidden(this.rootElt, isFatal);\n\t}\n\n\tprotected async onWspLiveStateChange(wsp: Wsp) {\n\t\tif (wsp !== this.wsp) return;\n\t\tthis._refreshTitle(null);\n\t\tif (this.appHeader) await this.appHeader.refresh();\n\t\tif (!wsp.isAvailable || wsp.isDeleted) {\n\t\t\tthis.appErrorStatus = 'wspNotAvailable';\n\t\t\tthis.setMsg(\"Échec à l'affichage de cette tâche : l'atelier n'est pas accessible.\", \"error\", true);\n\t\t}\n\t}\n\n\tonViewShown(): void {\n\t\tif (this._taskViewer) this._taskViewer.onViewShown();\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\ttry {\n\t\t\tif (this._taskViewer) this._taskViewer.onViewHidden(closed);\n\t\t} finally {\n\t\t\tif (closed) this.reg.env.place.closePlace();\n\t\t}\n\t}\n\n\tupdateAppDef(def: JTaskAppDef): boolean {\n\t\treturn false;\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (this.initialized) {\n\t\t\tif (info instanceof InfoTaskCurrentItemsChange) {\n\t\t\t\tthis.appHeader.refresh();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.initializedAsync.then(() => this.onInfo(info));\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('wsp-task-app', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\tc-msg {\n\t  flex: unset;\n\t}\n\n\t#root {\n\t\tdisplay: contents;\n\t}\n\n\twsp-taskmain {\n\t\tbackground-color: var(--bgcolor);\n\t}\n\n\tc-appheader {\n\t\tmin-height: 2rem;\n\t\tz-index: 1;\n\t\tmargin: 0 4px;\n\t}\n\n\theader {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tmax-height: 5em;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tuser-select: none;\n\t}\n\n\timg {\n\t\theight: 1.3em;\n\t}\n\n\th1 {\n\t\tmargin: .1em .5em;\n\t\tfont-size: 1em;\n\t\tletter-spacing: 0.1em;\n\t\ttext-align: center;\n\t}\n\n\t/*\n  hr {\n\t  display: none;\n  }\n\n  main {\n\t  flex: 1;\n\t  display: flex;\n\t  min-width: 0;\n\t  min-height: 0;\n\t  flex-direction: column;\n\t  border-inline-start: 3px solid transparent;\n\t  border-inline-end: 3px solid transparent;\n  }\n\t*/\n`);\n\ncustomElements.define('wsp-task-app', TaskApp);\n\nclass OpenWspApp extends Action<TaskApp> {\n\tconstructor() {\n\t\tsuper('openWsp');\n\t\tthis._label = \"Afficher la tâche dans l'atelier en mode explorateur\";\n\t\tthis._icon = \"/@skin@/wsp/views/spaceTree/tree.svg\";\n\t\tthis.requireVisiblePerm(\"ui.wspApp\");\n\t}\n\n\texecute(ctx: TaskApp, ev?: Event): any | \"noPreventDefault\" {\n\t\tconst curr = new InfoReqCurrentItem();\n\t\tctx.infoBroker.dispatchInfo(curr, ctx);\n\t\t(desk as AppFrameDeskFeat).findAndOpenApp({u: ctx.reg.env.universe.getId(), wsp: ctx.wsp.code, srcRef: ctx.appDef.task} as JWspAppDef, ev);\n\t}\n}\n\n/**\n * Ouverture (si existant) du contentItem courant dans l'app wspApp\n */\nclass OpenContentItemOnWspApp extends Action<TaskApp> {\n\tconstructor() {\n\t\tsuper('openWsp');\n\t\tthis._label = \"Ouvrir l'item dans l'atelier en mode explorateur\";\n\t\tthis._icon = \"/@skin@/wsp/apps/taskApp/ctItemTree.svg\";\n\t\tthis.setVisible((ctx) => this.findCurentContentItems(ctx) ? true : false);\n\t}\n\n\tisVisible(ctx: TaskApp): boolean {\n\t\tif (!this.checkObjectRootVisiblePerm(ctx, [\"ui.wspApp\", \"ui.app.task.open.ctItem.inWspApp\"], true)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\texecute(ctx: TaskApp, ev?: Event): any | \"noPreventDefault\" {\n\t\tconst curr = new InfoReqCurrentItem();\n\t\tctx.infoBroker.dispatchInfo(curr, ctx);\n\t\t(desk as AppFrameDeskFeat).findAndOpenApp({u: ctx.reg.env.universe.getId(), wsp: ctx.wsp.code, srcRef: this.findCurentContentItems(ctx)} as JWspAppDef, ev);\n\t}\n\n\t/** Sélection de l'item content à afficher\n\t * FIXME : regle de priorité par rapport à la signature ? Tous les proposer si plusieurs dans un menu bouton ? */\n\tprivate findCurentContentItems(ctx: TaskApp): srcUri | null {\n\t\tconst curr = new InfoReqTaskContentItems();\n\t\tctx.infoBroker.dispatchInfo(curr, ctx);\n\t\tif (curr.entries)\n\t\t\treturn curr.entries[0].srcUri || curr.entries[0].shortDesc.srcUri;\n\t\treturn null;\n\t}\n}"]}