{"version":3,"sources":["/@back@/edit/wed/wedlets/offscreen/offscreen.ts"],"names":["WED","WedletModelBase","WEDLET","XA","JML","JmlSubSetIterator","applyXmlMsgOnElt","ENodeType","FetchJml","LANG","OffscreenModel","[object Object]","cnf","this","config","childrenElts","extractChildrenNodes","sort","SORT_ChildrenElts","parent","displayContext","nodeType","element","OffscreenEltWedlet","OffscreenStrWedlet","registerWedletModel","model","wedParent","atts","children","wedAnchor","append","xaPart","wedMgr","xaOffset","node","Error","k","v","length","_setAtt","it","promises","next","currentNode","xa","currentIdx","docHolder","ct","getContent","currentChildren","push","fetchContent","then","jml","_setChild","last","result","p","Promise","all","name","val","childrenElt","findChildrenEltForAttr","wedModel","findModelForAttr","wedModesAtts","wedVariants","wedSelector","wedPreferedModels","wedParams","w","createWedlet","bindWithAttr","idx","findChildrenEltForNodeStrict","findModelForNode","wedModesNodes","bindWithNode","nameAttr","onDelete","undefined","xaOffest","count","i","m","splice","options","value","curr","Object","values","from","len","visitor","Math","max","s","min","OffscreenEltLeafWedlet","doAfterBatch","setContent","findDomLast","getDocument","isWhole","jmlToElt","msg","getWedletDepth","content","jmlFetch","docHolderAsync","txt","text","setText","stringDelete","chars","stringInsert"],"mappings":"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","sourcesContent":["import {IWedChildrenElt, IWedDisplayElt, IWedletModel, WED, WedletModelBase} from \"back/edit/wed/wedCore\";\nimport {ICharsWedlet, IChildWedlet, IParentWedlet, IVirtualisableWedlet, OFindWedletOptions, OVisitWedletOptions, WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {IXAddr, XA} from \"lib/commons/xml/xAddr\";\nimport {IJmlNode, IJmlObj, IJmlSet, IJmlSubSet, JML, JmlSubSetIterator} from \"lib/commons/xml/jml\";\nimport {WedMgr} from \"back/edit/wed/wedEditor\";\nimport {applyXmlMsgOnElt, IXmlMsg} from \"lib/edit/ot/xmlHouse\";\nimport {ENodeType} from \"lib/commons/xml/dom\";\nimport {FetchJml} from \"lib/edit/docHolder\";\nimport {LANG} from \"lib/commons/lang\";\n\n/**\n * Wedlet auto-porté indépendant du dom HTML (!= wedletSingleElt).\n * L'implémentation de base ne fait que maintenir une structure de wedlets en phase avec\n * la source xml.\n * Aucun usage fonctionnel direct, utilisé par d'autres types de wedlets : spte...\n *\n * La configuration du wedlet peut contenir 0 à n <wed:children/> pour définir les wedlets descendants.\n * Le matching est strict : si un noeud ou att ne matche aucun <wed:children/>, aucun wedlet fils n'est inséré.\n */\nexport class OffscreenModel extends WedletModelBase {\n\n\t/** Liste des childrenElt triés selon l'ordre de priorité de matching. */\n\tchildrenElts: IWedChildrenElt[];\n\n\tinitModel(cnf: Element): void {\n\t\tthis.config = cnf;\n\t\tthis.childrenElts = WEDLET.extractChildrenNodes(cnf);\n\t\tthis.childrenElts.sort(WED.SORT_ChildrenElts);\n\t}\n\n\tcreateWedlet(parent: IParentWedlet, displayContext?: IWedDisplayElt): IChildWedlet | null {\n\t\tif (this.nodeType === ENodeType.element) return new OffscreenEltWedlet(this, parent);\n\t\treturn new OffscreenStrWedlet(this, parent);\n\t}\n}\n\nWED.registerWedletModel(\"Offscreen\", OffscreenModel);\n\n\nexport class OffscreenEltWedlet implements IParentWedlet, IChildWedlet {\n\tmodel: OffscreenModel;\n\twedParent: IParentWedlet;\n\n\txaPart: number | string;\n\n\tget wedAnchor(): IXAddr {return XA.append(this.wedParent.wedAnchor, this.xaPart)}\n\n\tget wedMgr(): WedMgr {return this.wedParent.wedMgr};\n\n\tatts: Dict<ICharsWedlet>;\n\n\tchildren: IChildWedlet[];\n\n\tconstructor(model: OffscreenModel, wedParent: IParentWedlet) {\n\t\tthis.model = model;\n\t\tthis.wedParent = wedParent;\n\t\tthis.atts = {};\n\t\tthis.children = [];\n\t}\n\n\tbindWithNode(xaOffset: number, node: IJmlNode, children: IJmlSubSet): void | Promise<void> {\n\t\tthis.xaPart = xaOffset;\n\t\tif (typeof node === 'string') throw Error(\"StandaloneEltWedlet not bindable on text node.\");\n\t\tconst wedMgr = this.wedMgr;\n\t\tfor (const k in node) {\n\t\t\tconst v = node[k];\n\t\t\tif (v.length > 0) this._setAtt(wedMgr, k, v);\n\t\t}\n\t\tconst it = new JmlSubSetIterator(children);\n\t\tlet promises: Promise<any>[];\n\t\twhile (it.next()) {\n\t\t\tif (typeof it.currentNode === 'number') {\n\t\t\t\tconst xa = XA.append(this.wedAnchor, it.currentIdx);\n\t\t\t\tif (wedMgr.docHolder) {\n\t\t\t\t\tconst ct = wedMgr.getContent(xa);\n\t\t\t\t\tit.currentNode = ct[0] as IJmlNode;\n\t\t\t\t\tit.currentChildren = ct[1] as IJmlSubSet;\n\t\t\t\t} else {\n\t\t\t\t\tif (!promises) promises = [];\n\t\t\t\t\tpromises.push(wedMgr.fetchContent(xa).then((jml: FetchJml) => {\n\t\t\t\t\t\treturn this._setChild(wedMgr, XA.last(jml.xa) as number, jml.result[0] as IJmlNode, jml.result[1] as IJmlSubSet);\n\t\t\t\t\t}));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst p = this._setChild(wedMgr, it.currentIdx, it.currentNode, it.currentChildren);\n\t\t\tif (p) {\n\t\t\t\tif (!promises) promises = [];\n\t\t\t\telse promises.push(p);\n\t\t\t}\n\t\t}\n\t\tif (promises) return Promise.all(promises) as any as Promise<void>;\n\t}\n\n\tprotected _setAtt(wedMgr: WedMgr, name: string, val: string) {\n\t\tconst childrenElt = WEDLET.findChildrenEltForAttr(this.model.childrenElts, name);\n\t\tif (childrenElt) {\n\t\t\tconst model = wedMgr.wedModel.findModelForAttr(name, val, childrenElt.wedModesAtts, childrenElt.wedVariants, this, childrenElt.wedSelector, childrenElt.wedPreferedModels, childrenElt.wedParams);\n\t\t\tif (model) {\n\t\t\t\tconst w = this.atts[name] = model.createWedlet(this) as ICharsWedlet;\n\t\t\t\tif (w) w.bindWithAttr(name, val);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _setChild(wedMgr: WedMgr, idx: number, node: IJmlNode, children: IJmlSubSet): void | Promise<void> {\n\t\tconst childrenElt = WEDLET.findChildrenEltForNodeStrict(this.model.childrenElts, node);\n\t\tif (childrenElt) {\n\t\t\t//(it.currentIdx, it.currentNode, it.currentChildren);\n\t\t\tconst model = wedMgr.wedModel.findModelForNode(node, childrenElt.wedModesNodes, childrenElt.wedVariants, this, childrenElt.wedSelector, childrenElt.wedPreferedModels, childrenElt.wedParams);\n\t\t\tif (model) {\n\t\t\t\tconst w = this.children[idx] = model.createWedlet(this) as IChildWedlet;\n\t\t\t\tif (w) return w.bindWithNode(idx, node, children);\n\t\t\t}\n\t\t}\n\t}\n\n\tdeleteAttrNode(nameAttr: string): void {\n\t\tif (this.atts[nameAttr]) {\n\t\t\tconst w = this.atts[nameAttr];\n\t\t\tif (w && ('onDelete' in w)) w.onDelete();\n\t\t\tthis.atts[nameAttr] = undefined;\n\t\t}\n\t}\n\n\tdeleteChildNodes(xaOffest: number, count: number): void {\n\t\tfor (let i = xaOffest, m = i + count; i < m; i++) {\n\t\t\tconst w = this.children[i];\n\t\t\tif (w && ('onDelete' in w)) w.onDelete();\n\t\t}\n\t\tthis.children.splice(xaOffest, count);\n\t\tfor (let i = xaOffest; i < this.children.length; i++) {\n\t\t\tconst w = this.children[i];\n\t\t\tif (w) w.xaPart = (w.xaPart as number) - count;\n\t\t}\n\t}\n\n\tfindWedletChild(xaPart: number | string, options?: OFindWedletOptions): IChildWedlet | IChildWedlet[] {\n\t\tif (typeof xaPart === 'number') {\n\t\t\treturn this.children[xaPart];\n\t\t} else {\n\t\t\treturn this.atts[xaPart];\n\t\t}\n\t\treturn null;\n\t}\n\n\tinsertAttrNode(nameAttr: string, value: string): void | Promise<void> {\n\t\tthis._setAtt(this.wedMgr, nameAttr, value);\n\t}\n\n\tinsertChildNode(xaOffest: number, node: IJmlNode, children: IJmlSubSet): void | Promise<void> {\n\t\tthis.children.splice(xaOffest, 0, null);\n\t\tfor (let i = xaOffest + 1; i < this.children.length; i++) {\n\t\t\tconst w = this.children[i];\n\t\t\tif (w) w.xaPart = (w.xaPart as number) + 1;\n\t\t}\n\t\treturn this._setChild(this.wedMgr, xaOffest, node, children);\n\t}\n\n\treplaceChildBind(xaOffest: number, node: IJmlNode, children: IJmlSubSet): void | Promise<void> {\n\t\tconst curr = this.children[xaOffest];\n\t\tif (curr && ('onDelete' in curr)) curr.onDelete();\n\t\treturn this._setChild(this.wedMgr, xaOffest, node, children);\n\t}\n\n\tisEmpty(): boolean {return false}\n\n\tisVirtual(): this is IVirtualisableWedlet {return false}\n\n\tonChildNodesInserted(): void {}\n\n\tonDelete(): void {\n\t\tfor (const w of Object.values(this.atts)) if (w && ('onDelete' in w)) w.onDelete();\n\t\tfor (const w of this.children) if (w && ('onDelete' in w)) w.onDelete();\n\t}\n\n\tvisitWedletChildren(from: number, len: number, visitor: (this: void, wedlet: IChildWedlet) => (\"stop\" | void), options?: OVisitWedletOptions): \"stop\" | void {\n\t\tif (from === -1) for (const w of Object.values(this.atts)) if (w && visitor(w) === 'stop') return 'stop';\n\t\tfor (let i = Math.max(0, from), s = Math.min(from + len, this.children.length); i < s; i++) {\n\t\t\tconst w = this.children[i];\n\t\t\tif (w && visitor(w) === 'stop') return 'stop';\n\t\t}\n\t}\n\n}\n\n/**\n * Wedlet offscreen terminal pour un element mettant à dispo un DOM de cet élément.\n * Note : destiné à être surachargé, donc ce wedlet n'a pas de WedletModel déclaré.\n */\nexport class OffscreenEltLeafWedlet implements IChildWedlet {\n\tmodel: IWedletModel;\n\twedParent: IParentWedlet;\n\twedMgr: WedMgr;\n\n\txaPart: number;\n\n\tget wedAnchor(): IXAddr {return XA.append(this.wedParent.wedAnchor, this.xaPart)}\n\n\t/** Contenu XML sous forme DOM. */\n\tcontent: Element;\n\n\tconstructor(model: IWedletModel, wedParent: IParentWedlet) {\n\t\tthis.model = model;\n\t\tthis.wedParent = wedParent;\n\t\tthis.wedMgr = wedParent.wedMgr;\n\t}\n\n\tbindWithNode(xaOffset: number, node: IJmlNode, children: IJmlSubSet): void | Promise<void> {\n\t\tthis.xaPart = xaOffset;\n\t\tthis.wedMgr.doAfterBatch(() => {\n\t\t\tif (this.wedMgr.docHolder) {\n\t\t\t\tthis.setContent(XA.findDomLast(this.wedAnchor, this.wedMgr.docHolder.getDocument()) as Element);\n\t\t\t} else if (JML.isWhole(children)) {\n\t\t\t\tthis.setContent(JML.jmlToElt(node as IJmlObj, children));\n\t\t\t} else {\n\t\t\t\t//XXX doAfterBatch avec Promise ?\n\t\t\t\tthis.fetchContent();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateInDescendants(msg: IXmlMsg): void {\n\t\tif (!this.wedMgr.docHolder) applyXmlMsgOnElt(msg, WEDLET.getWedletDepth(this) + 1, this.content);\n\t\tthis.setContent(this.content); //notif un chgt.\n\t}\n\n\tisEmpty(): boolean {return this.content != null}\n\n\tisVirtual(): this is IVirtualisableWedlet {return false}\n\n\tonDelete(): void {\n\t\tthis.setContent(null);\n\t}\n\n\t/** A appeler à chaque changement, destiné à être surchargé. */\n\tprotected setContent(content: Element) {\n\t\tthis.content = content;\n\t}\n\n\tprotected async fetchContent() {\n\t\tconst [jmlFetch] = await this.wedMgr.docHolderAsync.fetchContent([new FetchJml(XA.append(this.wedAnchor, 0))]);\n\t\tthis.setContent(JML.jmlToElt(jmlFetch.result[0] as IJmlObj, jmlFetch.result[1] as IJmlSet));\n\t}\n}\n\n\n/** Wedlet offscreen pour att, text, comment */\nexport class OffscreenStrWedlet implements ICharsWedlet {\n\tmodel: IWedletModel;\n\twedAnchor: IXAddr;\n\twedParent: IParentWedlet;\n\txaPart: number | string;\n\n\ttext: string;\n\n\tget wedMgr(): WedMgr {return this.wedParent.wedMgr};\n\n\tconstructor(model: IWedletModel, wedParent: IParentWedlet) {\n\t\tthis.model = model;\n\t\tthis.wedParent = wedParent;\n\t}\n\n\tprotected setText(txt: string) {\n\t\tthis.text = txt;\n\t}\n\n\tbindWithAttr(nameAttr: string, value: string): void | Promise<void> {\n\t\tthis.xaPart = nameAttr;\n\t\tthis.setText(value);\n\t}\n\n\tbindWithNode(xaOffset: number, node: IJmlNode, children: IJmlSubSet): void | Promise<void> {\n\t\tthis.xaPart = xaOffset;\n\t\tthis.setText(node as string);\n\t}\n\n\tdeleteChars(from: number, len: number, msg: IXmlMsg): void {\n\t\tthis.setText(LANG.stringDelete(this.text, from, len));\n\t}\n\n\tinsertChars(from: number, chars: string, msg: IXmlMsg): void {\n\t\tthis.setText(LANG.stringInsert(this.text, from, chars));\n\t}\n\n\tisEmpty(): boolean {return false}\n\n\tisVirtual(): this is IVirtualisableWedlet {return false}\n\n\treplaceChars(chars: string, msg: IXmlMsg): void {\n\t\tthis.setText(chars);\n\t}\n\n\tonDelete(): void {\n\t\tthis.setText(null);\n\t}\n}"]}