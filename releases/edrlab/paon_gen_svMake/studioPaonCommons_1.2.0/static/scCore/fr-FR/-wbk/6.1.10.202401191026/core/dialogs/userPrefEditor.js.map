{"version":3,"sources":["/@back@/core/dialogs/userPrefEditor.tsx"],"names":["REG","BaseElementAsync","DOM","JSX","Button","POPUP","FORMS","BaseAreaView","DOMSH","Tabs","ERROR","AppFrameDeskFeat","UserPrefEditor","currentForm","_a","_b","this","_singleForm","_multiForms","selectedTab","view","currentEditorConfig","_singleEditorConfig","area","[object Object]","init","reg","findReg","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","_saveBtn","initialize","uiContext","label","disabled","closeBtn","edPromises","prefEditors","getList","prefEditorsList","map","ed","editors","Promise","all","filter","isVisible","length","appendChild","createElement","loadBody","î","areas","areasContext","initializedAsync","id","checkValidity","_close","onclick","close","bind","env","universe","auth","listeners","on","checkDirtyState","isPrefsDirty","addEventListener","findHost","save","form","findFirstChild","n","isDirtyState","isReloadAppNeeded","btn","reportValidity","datas","formToJson","persistUserDatas","setUserDatas","isIn","desk","isRelaodAppNeeded","reloadMainApp","e","report","reload","newForm","replaceWith","rebuildView","findPopupableParent","closed","removeListener","confirm","okLbl","cancelLbl","registerSkin","customElements","define","UserPrefCheck","keyPref","getId","defaultState","areaContext","getPref","checkStateIfNone","currentState","editorConfig","getUserData","checked","invertCheck","_input","st","super","_initialize","type","_attach","for","class","getLabel","getDescription","shadowRoot","parent","root","UserPrefSelect","buildOptions","v","value","undefined"],"mappings":"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","sourcesContent":["import {IReg, REG} from \"lib/commons/registry\";\nimport {BaseElementAsync, OSkinableInit} from \"back/commons/basis\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {Button} from \"back/commons/widgets/buttons\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {FORMS, IFormJsonisable} from \"lib/commons/forms\";\nimport {BaseAreaView, IView, OBaseAreaViewInit} from \"lib/commons/views\";\nimport {IBasicUniversePointer} from \"lib/core/universe\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {OTabsInit, Tabs} from \"back/commons/widgets/tabs\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {CheckPrefArea, IUserPrefEditorCtx, SelectPrefArea, UserPrefPageConfig} from \"back/core/dialogs/userPrefEditorConfig\";\nimport {AppFrameDeskFeat} from \"back/core/appFrame\";\n\n/**\n * Écran de modifification des préférences d'un utilisateur.\n */\nexport interface UserPrefEditor extends BaseElementAsync, IView {\n\tinitialize(init: OUserPrefEditorInit): this\n}\n\nexport interface OUserPrefEditorInit extends OSkinableInit {\n\t/** Reg de l'environnement graphique de ce UserPrefEditor. */\n\treg?: IReg<IBasicUniversePointer>\n\n\t/** Liste des éditors (via fonction pour lazyLoading). */\n\tprefEditors?: Array<UserPrefPageConfig | (() => Promise<UserPrefPageConfig>)>\n\n\t/**\n\t * Liste des fournisseurs d'éditors par une liste du reg (si prefEditors null).\n\t * Type des entrées : (UserPrefEditorConfig | (() => Promise<UserPrefEditorConfig>))[]\n\t */\n\tprefEditorsList?: string\n}\n\n/**\n *\n */\nexport class UserPrefEditor extends BaseElementAsync implements IView {\n\treg: IReg<IBasicUniversePointer>\n\n\t//config: OUserPrefEditorInit;\n\n\t//protected _revertBtn: Button;\n\tprotected _saveBtn: Button;\n\tprotected _singleForm?: HTMLFormElement;\n\tprotected _singleEditorConfig?: UserPrefPageConfig;\n\tprotected _multiForms?: Tabs<UserPrefEditor>;\n\n\tget currentForm(): HTMLFormElement | null {return this._singleForm || this._multiForms?.selectedTab?.view as HTMLFormElement}\n\n\tget currentEditorConfig(): UserPrefPageConfig | null {return this._singleEditorConfig || this._multiForms.selectedTab?.area as UserPrefPageConfig}\n\n\tprotected async _initialize(init: OUserPrefEditorInit) {\n\t\tconst reg = this.reg = this.findReg(init);\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\treg.installSkin(\"webzone:panel\", sr);\n\t\treg.installSkin(\"standard-dialog\", sr);\n\t\treg.installSkin(\"scroll/small\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\t//this._revertBtn = new Button().initialize({uiContext: \"dialog\", label: \"Rétablir\", disabled: true});\n\t\tthis._saveBtn = new Button().initialize({uiContext: \"dialog\", label: \"Enregistrer\", disabled: true});\n\t\tconst closeBtn = new Button().initialize({uiContext: \"dialog\", label: \"Fermer\"});\n\n\t\tconst edPromises = (init.prefEditors || reg.getList(init.prefEditorsList))?.map((ed) => typeof ed === \"function\" ? ed() : ed);\n\t\tconst editors: UserPrefPageConfig[] = edPromises ? (await Promise.all(edPromises)).filter((ed) => ed.isVisible(this)) : [];\n\n\t\tswitch (editors.length) {\n\t\tcase 0:\n\t\t\tsr.appendChild(<c-msg label=\"Aucune préférence disponible\"/>);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tthis._singleEditorConfig = editors[0];\n\t\t\tthis._singleForm = sr.appendChild(await editors[0].loadBody(this));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthis._multiForms = sr.appendChild(<Tabs î={{\n\t\t\t\treg,\n\t\t\t\tareas: editors,\n\t\t\t\tareasContext: this\n\t\t\t} as OTabsInit<UserPrefEditor>}/>) as Tabs<UserPrefEditor>;\n\t\t\tawait this._multiForms.initializedAsync;\n\t\t}\n\n\t\tsr.appendChild(<div id=\"footer\">{this._saveBtn}{closeBtn}</div>);\n\n\t\tthis.currentForm?.checkValidity();\n\n\t\tthis._close = closeBtn.onclick = this.close.bind(this);\n\t\treg.env.universe.auth.listeners.on('loggedUserChanged', this._close); //close, pas reload : liste des editors pourrait varier en fct des perms.\n\n\t\tconst checkDirtyState = () => {this._saveBtn.disabled = !this.isPrefsDirty()};\n\t\tthis.addEventListener('input', checkDirtyState);\n\t\tthis.addEventListener('change', checkDirtyState);\n\n\t\tthis._saveBtn.onclick = function (this: Button) {\n\t\t\tDOMSH.findHost<UserPrefEditor>(this)?.save(true);\n\t\t}\n\t}\n\n\tisPrefsDirty(): boolean {\n\t\tconst form = this.currentForm;\n\t\tif (!form) return false;\n\t\treturn DOM.findFirstChild(form, function (n: Node): n is IUserPrefElement {return ('isDirtyState' in n) && (n as IUserPrefElement).isDirtyState()}) != null;\n\t}\n\n\n\tisRelaodAppNeeded(): boolean {\n\t\tconst form = this.currentForm;\n\t\tif (!form) return false;\n\t\treturn DOM.findFirstChild(form, function (n: Node): n is IUserPrefElement {return ('isReloadAppNeeded' in n) && (n as IUserPrefElement).isReloadAppNeeded()}) != null;\n\t}\n\n\tasync save(close?:boolean): Promise<boolean> {\n\t\tconst btn = this._saveBtn;\n\t\tif (btn.disabled) return true;\n\t\tbtn.disabled = true;\n\t\ttry {\n\t\t\tconst form = this.currentForm;\n\t\t\tif (form?.reportValidity()) {\n\t\t\t\tconst datas = FORMS.formToJson(form);\n\t\t\t\tawait this.currentEditorConfig.persistUserDatas.setUserDatas(datas);\n\t\t\t}\n\t\t\tif(close) this.close();\n\t\t\tif (AppFrameDeskFeat.isIn(desk) && this.isRelaodAppNeeded) await desk.reloadMainApp();\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tawait ERROR.report(\"Impossible d'enregistrer ces préférences\", e);\n\t\t\tawait this.reload();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tbtn.disabled = false;\n\t\t}\n\t}\n\n\tasync reload() {\n\t\tif (this._singleForm) {\n\t\t\tconst newForm = await this._singleEditorConfig.loadBody(this);\n\t\t\tthis._singleForm.replaceWith(newForm);\n\t\t\tthis._singleForm = newForm;\n\t\t} else {\n\t\t\treturn this._multiForms.selectedTab?.rebuildView();\n\t\t}\n\t}\n\n\tclose() {\n\t\tPOPUP.findPopupableParent(this)?.close();\n\t}\n\n\tprotected _close: (this: void) => void\n\n\tonViewHidden(closed?: boolean): void {\n\t\tif (closed && this._close) {\n\t\t\tthis.reg.env.universe.auth.listeners.removeListener('loggedUserChanged', this._close);\n\t\t}\n\t}\n\n\t//Appelé aussi par le form dans chaque tab, cf UserPrefPageConfig.loadBody()\n\tonViewBeforeHide(close?: boolean): boolean {return !this.isPrefsDirty()}\n\n\t//Appelé aussi par le form dans chaque tab, cf UserPrefPageConfig.loadBody()\n\tasync onViewWaitForHide(close?: boolean): Promise<boolean> {\n\t\tif (this.isPrefsDirty()) {\n\t\t\tif(await POPUP.confirm(\"Des préférences ont été modifiées.\", this, {okLbl: \"Enregistrer\", cancelLbl: \"Abandonner les modifications\"})) {\n\t\t\t\treturn this.save();\n\t\t\t} else if(!close) {\n\t\t\t\tawait this.reload();\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nREG.reg.registerSkin('c-userpref-editor', 1, /* language=CSS */ `\n\tform {\n\t\tflex: 1;\n\t\toverflow-y: auto;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\tpadding: 1em;\n\t}\n\n\t[hidden] {\n\t\tdisplay: none;\n\t}\n\n\tc-tabs {\n\t\tflex: 1 1 50vh;\n\t}\n\n\tc-msg {\n\t\tmargin: .5em;\n\t}\n`);\n\ncustomElements.define('c-userpref-editor', UserPrefEditor);\n\n\n/**\n * Widget constituant une préférence utilisateur (ou un regroupement de prefs).\n */\nexport interface IUserPrefElement extends HTMLElement, IFormJsonisable {\n\t/** Ce field est-il différent de son dernier état d'enregistrement. */\n\tisDirtyState(): boolean\n\n\t/** Si ce champ est modifié, exige-t-il que la app courrante soit rechargée. */\n\tisReloadAppNeeded(): boolean\n\n\t/** Retour à l'état par défaut du système. */\n\tresetSystem(): void\n\n\t//Recherche dans les prefs. A envisager si le nombre augmente...\n\t//Autre approche : Api sur l'area des widgets s'ils n'étaient pas tous instanciés (dans les pages non construites...).\n\t//highlight(re:RegExp|null): boolean\n\n\t//Pb typage TS incompatible entre HTMLElement et IFormElement qui extends Element\n\taddEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n\n\tremoveEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n\n/** Option de type checkBox. */\nexport interface UserPrefCheck {\n\tinitialize(init?: OUserPrefCheckInit): this\n}\n\nexport interface OUserPrefCheckInit extends OBaseAreaViewInit<IUserPrefEditorCtx> {\n}\n\nexport class UserPrefCheck extends BaseAreaView<IUserPrefEditorCtx> implements IUserPrefElement {\n\n\tarea: CheckPrefArea\n\n\tprotected _input: HTMLInputElement;\n\n\tget keyPref() {return this.area.getId()}\n\n\tget defaultState(): boolean {return this.areaContext.reg.getPref(this.keyPref) ?? this.area.checkStateIfNone}\n\n\tget currentState(): boolean {return this.areaContext.editorConfig.persistUserDatas.getUserData(this.keyPref) ?? this.defaultState}\n\n\tget checked() {return this.area.invertCheck ? !this._input.checked : this._input.checked}\n\n\tset checked(st: boolean) {\n\t\tthis._input.checked = this.area.invertCheck ? !st : st;\n\t}\n\n\tprotected _initialize(init: OUserPrefCheckInit) {\n\t\tsuper._initialize(init);\n\t\tthis._input = <input id=\"check\" type=\"checkbox\"/> as HTMLInputElement;\n\t\tthis._attach(this.localName, init,\n\t\t\t<label for=\"check\">\n\t\t\t\t<div class=\"title\">{this.area.getLabel(init.areaContext)}</div>\n\t\t\t\t<div class=\"details\">{this.area.getDescription(init.areaContext)}</div>\n\t\t\t</label>,\n\t\t\tthis._input\n\t\t);\n\t\tthis.reg.installSkin(\"form-control-areas\", this.shadowRoot);\n\t\tthis.reg.installSkin(\"c-userpref-common\", this.shadowRoot);\n\t\tthis.checked = this.currentState;\n\t}\n\n\tfillJson(parent: Jsonisable, root: Jsonisable) {\n\t\t//if(this.defaultState !== this.checked) Utilisation indeterminate state ?\n\t\tparent[this.keyPref] = this.checked;\n\t}\n\n\t//not used\n\textractJson(parent: Dict<any>): boolean {return false}\n\n\tisDirtyState(): boolean {\n\t\treturn this.checked != this.currentState;\n\t}\n\n\tisReloadAppNeeded(): boolean {\n\t\treturn this.area.isReloadAppNeeded;\n\t}\n\n\tresetSystem(): void {\n\t\tthis.checked = this.defaultState;\n\t}\n}\n\nREG.reg.registerSkin('c-userpref-check', 1, /* language=CSS */ ``);\ncustomElements.define('c-userpref-check', UserPrefCheck);\n\n\n/** Option de type checkBox. */\nexport interface UserPrefSelect {\n\tinitialize(init?: OUserPrefSelectInit): this\n}\n\nexport interface OUserPrefSelectInit extends OBaseAreaViewInit<IUserPrefEditorCtx> {\n}\n\nexport class UserPrefSelect extends BaseAreaView<IUserPrefEditorCtx> implements IUserPrefElement {\n\n\tarea: SelectPrefArea\n\n\tprotected _input: HTMLSelectElement;\n\n\tget keyPref() {return this.area.getId()}\n\n\tget defaultState(): string {return this.areaContext.reg.getPref(this.keyPref) ?? \"\"}\n\n\tprotected _initialize(init: OUserPrefSelectInit) {\n\t\tsuper._initialize(init);\n\t\tthis._input = <select id=\"select\"/> as HTMLSelectElement;\n\t\tthis.area.buildOptions(this._input, this.areaContext.editorConfig.persistUserDatas.getUserData(this.keyPref) ?? this.defaultState);\n\t\tthis._attach(this.localName, init,\n\t\t\t<label for=\"select\">\n\t\t\t\t<div class=\"title\">{this.area.getLabel(init.areaContext)}</div>\n\t\t\t\t<div class=\"details\">{this.area.getDescription(init.areaContext)}</div>\n\t\t\t</label>,\n\t\t\tthis._input\n\t\t);\n\t\tthis.reg.installSkin(\"form-control-areas\", this.shadowRoot);\n\t\tthis.reg.installSkin(\"c-userpref-common\", this.shadowRoot);\n\t}\n\n\tfillJson(parent: Jsonisable, root: Jsonisable) {\n\t\tconst v = this._input.value;\n\t\t//suppr de la pref si \"\"\n\t\tparent[this.keyPref] = v == \"\" ? undefined : v;\n\t}\n\n\t//not used\n\textractJson(parent: Dict<any>): boolean {return false}\n\n\tisDirtyState(): boolean {\n\t\treturn this._input.value != (this.areaContext.editorConfig.persistUserDatas.getUserData(this.keyPref) ?? \"\");\n\t}\n\n\tisReloadAppNeeded(): boolean {\n\t\treturn this.area.isReloadAppNeeded;\n\t}\n\n\tresetSystem(): void {\n\t\tthis._input.value = this.defaultState;\n\t}\n}\n\nREG.reg.registerSkin('c-userpref-select', 1, /* language=CSS */ ``);\ncustomElements.define('c-userpref-select', UserPrefSelect);\n\n\nREG.reg.registerSkin('c-userpref-common', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t}\n\n\t:focus {\n\t\toutline: var(--focus-outline);\n\t}\n\n\tlabel {\n\t\tflex: 1;\n\t\tmax-width: 50vw;\n\t\tmargin-block: .7em;\n\t\tmargin-inline: 0 1em;\n\t}\n\n\t.title {\n\t\tfont-weight: bold;\n\t}\n\n\t.details {\n\t\tcolor: var(--fade-color);\n\t}\n\n\tinput, select {\n\t\tflex: 0 0 auto;\n\t\talign-self: center;\n\t}\n`);"]}