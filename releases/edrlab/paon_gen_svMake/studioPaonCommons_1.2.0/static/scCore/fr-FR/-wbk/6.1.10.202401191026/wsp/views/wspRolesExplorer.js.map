{"version":3,"sources":["/@back@/wsp/views/wspRolesExplorer.tsx"],"names":["REG","DOM","JSX","ActionWrapperRefresRolesExplorer","RolesExplorerTabBase","Wsp","WSP","WSPMETA","InputUserPanel","EUserAspects","UserRef","ROLES","SetPermsSpace","BarActions","OpenPermsWspAction","OpenGroupsMgr","OpenUsersMgr","MsgLabel","WspRolesExplorerTab","[object Object]","super","this","wspMap","Map","id","init","filterTxtPlaceholder","_initialize","uiHandlers","Promise","all","reg","mergeLists","UI_ROLES_LIST","Array","from","values","map","async","wsp","list","forEach","uiHandler","declaredUiHandler","find","test","roleCode","whiteListLevelsUid","push","code","assignedRoles","fetchExportAssignedRoles","env","universe","wspServer","fields","filterWspLine","wspLine","_a","nodes","roles","_b","ch","root","injectRoles","target","fullUri","title","rolesArray","Object","entries","structRolesLevel","length","EXTENDED_ROLES_GAP","structLevel","uid","account","value","entryFullUri","accountEntry","allowed","denied","userUnknown","injectChildren","entry","name","repoLevel","wsps","wspMetasCache","WspMetasCache","wspCode","fetchWspMetaUi","atomWspTypeInst","infoWsp","waitForAll","wspMetaUi","getWspMetaUi","set","row","inElt","createElement","wspTitle","srcUri","parentStructLevel","dataHolder","parent","get","accountWidget","initialize","emptySelectionMsg","required","userCard","hideRemButton","usersGridInit","usersSrv","filterType","filterTypeInputVisibility","initializedAsync","addClass","filterAccounts","detailsBarActions","appendChild","label","level","node","fetchShortDescTree","actions","setOverridenSvc","actionContext","rolesExplorer","emitter","shortDescs","preSelectAccounts","uiContext","disableFullOverlay","class","SINGLETON","preSelectAccount","computedRolesBox","addEventListener","evt","showComputedRolesFor","innerHTML","rolesElt","detailsUl","resultRoles","rolesForAccounts","srcGetRolesForAccounts","roleUiCtx","grantedRoles","allowedRoles","refusedRoles","deniedRoles","inheritedRoles","resolveUserRoles","resolveRolesList","adminUsers","getUserMap","rolesUiHandlers","role","pos","roleName","hasAspect","groupable","users","flattenedGroups","reverse","shift","li","grp","Ã®","nickOrAccount","withIcon","customElements","define","registerSkin"],"mappings":"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","sourcesContent":["import {IReg, IRegPointer, IUiEnv, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport \"back/core/dialogs/dialogs_Perms\";\nimport {ActionWrapperRefresRolesExplorer, IUsersRolesActionCtx, JRoleExpEntrySetAccount, JRoleExpEntryStructLevel, ORolesExplorerTabInit, RolesExplorerTabBase, RoleUiHandlerContextUsed} from \"back/core/dialogs/rolesExplorer\";\nimport {IChainEnv} from \"lib/wsp/chain\";\nimport {JInfoWsp, JNodeRolesSet, JWspProviderRolesSet, JWspRolesSet, Wsp, WSP, WSPMETA} from \"lib/wsp/wsp\";\nimport {srcUri} from \"lib/wsp/src\";\nimport {InputUserPanel, OInputUserInit} from \"back/core/widgets/inputs\";\nimport {EUserAspects} from \"lib/core/user\";\nimport {OUserRefInit, UserRef} from \"back/core/widgets/userRef\";\nimport {IRoleEditUiHandlerContext, RoleEditUiHandler, ROLES} from \"lib/commons/roles\";\nimport {ISetPermsSpaceCtx, SetPermsSpace} from \"back/wsp/actions/srcActions\";\nimport {BarActions} from \"back/commons/widgets/bars\";\nimport {IShortDescCtx} from \"lib/wsp/item\";\nimport {IOpenPermsWspActionCtx, IWspActionCtx, OpenPermsWspAction} from \"back/wsp/actions/wspActions\";\nimport {ICoreUniverseEnv} from \"lib/core/universe\";\nimport {IOpenUsersMgrCtx, OpenGroupsMgr, OpenUsersMgr} from \"back/core/plugins/usersPlg\";\nimport {MsgLabel} from \"back/commons/basis\";\n\n\ninterface JRoleExpEntryStructLevelRepo<R extends JRoleExpEntryStructLevelRepo<R> | JRoleExpEntrySetAccount> extends JRoleExpEntryStructLevel<R> {\n\tstructLevel: 'roles' | 'repo' | 'wsp' | 'space'\n\t/* reposUri : wsp/srcUri(@account) */\n\tuid: string\n\twspCode?: string\n\tch?: R[]\n}\n\nexport interface OWspRolesExplorerTabInit extends ORolesExplorerTabInit {\n\treg: IReg<IChainEnv & IUiEnv>\n}\n\n\nexport class WspRolesExplorerTab<E extends IRegPointer<IChainEnv & IUiEnv>, R extends (JRoleExpEntryStructLevelRepo<R> | JRoleExpEntrySetAccount), CTX extends IUsersRolesActionCtx<E, R, CTX>> extends RolesExplorerTabBase<E, R, CTX> {\n\treg: IReg<IChainEnv & IUiEnv>;\n\n\twspMap: Map<string, Wsp> = new Map();\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.id = \"wsp\";\n\t}\n\n\tprotected async _initialize(init: OWspRolesExplorerTabInit): Promise<void> {\n\t\tif (!(\"filterTxtPlaceholder\" in init)) init.filterTxtPlaceholder = \"Ateliers/espaces...\";\n\t\tawait super._initialize(init);\n\t}\n\n\n\t/** Build les rolesUiHandler d'aprÃ©s les wsps issus du **dernier** doFetchDatas */\n\tprotected async rolesUiHandlers(): Promise<(RoleEditUiHandler<IRoleEditUiHandlerContext> & RoleUiHandlerContextUsed)[]> {\n\t\tlet uiHandlers = await Promise.all(this.reg.mergeLists(ROLES.UI_ROLES_LIST)) as (RoleEditUiHandler<IRoleEditUiHandlerContext> & RoleUiHandlerContextUsed)[];\n\t\t// Recherche des UiHandlers des wsps\n\t\tawait Promise.all(Array.from(this.wspMap.values()).map(async (wsp) => {\n\t\t\tconst list = await Promise.all(wsp.reg.mergeLists(ROLES.UI_ROLES_LIST)) as (RoleEditUiHandler<IRoleEditUiHandlerContext>)[];\n\t\t\tlist.forEach(uiHandler => {\n\t\t\t\tconst declaredUiHandler = uiHandlers.find(test => test.roleCode === uiHandler.roleCode);\n\t\t\t\tif (declaredUiHandler) {\n\t\t\t\t\tif ((declaredUiHandler as RoleUiHandlerContextUsed).whiteListLevelsUid)\n\t\t\t\t\t\t(declaredUiHandler as RoleUiHandlerContextUsed).whiteListLevelsUid.push(wsp.code);\n\t\t\t\t} else {\n\t\t\t\t\t(uiHandler as RoleUiHandlerContextUsed).whiteListLevelsUid = [wsp.code];\n\t\t\t\t\tuiHandlers.push(uiHandler);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t\treturn uiHandlers;\n\t}\n\n\t/** Seuil Ã  partir duquel la liste des roles affectÃ©s Ã  un niveau devient repliable */\n\tstatic EXTENDED_ROLES_GAP = 10;\n\n\tasync doFetchDatas(): Promise<R[]> {\n\t\tconst assignedRoles = await WSP.fetchExportAssignedRoles(this.reg.env.universe.wspServer, {fields: [\"srcRoles\", \"srcRi\"]});\n\n\t\tfunction filterWspLine(wspLine: JWspRolesSet): boolean {\n\t\t\treturn (wspLine.nodes?.roles || wspLine.nodes?.ch) ? true : false;\n\t\t}\n\n\t\t// - CrÃ©ation de la structure de donnÃ©e grid\n\t\tconst root: R[] = [];\n\n\t\tfunction injectRoles(target: R[], from: JWspProviderRolesSet | JNodeRolesSet, fullUri: string, title = \"RÃ´les affectÃ©s\") {\n\t\t\tif (from.roles) {\n\t\t\t\tconst rolesArray = Object.entries(from.roles);\n\t\t\t\tconst structRolesLevel: JRoleExpEntryStructLevelRepo<R> = rolesArray.length >= WspRolesExplorerTab.EXTENDED_ROLES_GAP ? {structLevel: \"roles\", title: title, ch: [], uid: `${fullUri}@`} : null;\n\t\t\t\tfor (const [account, value] of rolesArray) {\n\t\t\t\t\tconst entryFullUri = `${fullUri}@${account}`;\n\t\t\t\t\tconst accountEntry: JRoleExpEntrySetAccount = {account, uid: entryFullUri};\n\t\t\t\t\tif (value.allowed)\n\t\t\t\t\t\taccountEntry.allowed = value.allowed;\n\t\t\t\t\tif (value.denied)\n\t\t\t\t\t\taccountEntry.denied = value.denied;\n\t\t\t\t\tif (value.userUnknown) accountEntry.userUnknown = true;\n\n\t\t\t\t\tif (structRolesLevel)\n\t\t\t\t\t\tstructRolesLevel.ch.push(accountEntry as R);\n\t\t\t\t\telse\n\t\t\t\t\t\ttarget.push(accountEntry as R);\n\t\t\t\t}\n\t\t\t\tif (structRolesLevel) target.push(structRolesLevel as R);\n\t\t\t}\n\t\t}\n\n\t\tfunction injectChildren(target: JRoleExpEntryStructLevelRepo<R>[], from: JNodeRolesSet[], fullUri: string) {\n\t\t\tif (from) {\n\t\t\t\tfor (const entry of from) {\n\t\t\t\t\tconst entryFullUri = `${fullUri}/${entry.name}`\n\t\t\t\t\tconst structLevel: JRoleExpEntryStructLevelRepo<R> = {structLevel: \"space\", title: entry.name, uid: entryFullUri, ch: []};\n\t\t\t\t\tinjectRoles(structLevel.ch, entry, entryFullUri);\n\t\t\t\t\tinjectChildren(structLevel.ch as JRoleExpEntryStructLevelRepo<R>[], entry.ch, entryFullUri);\n\t\t\t\t\ttarget.push(structLevel);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst repoLevel: JRoleExpEntryStructLevelRepo<R> = {structLevel: \"repo\", title: \"EntrepÃ´t\", ch: [], uid: \"\"};\n\t\troot.push(repoLevel as R);\n\t\tinjectRoles(repoLevel.ch, assignedRoles, \"\", \"RÃ´les affectÃ©s sur l'entrepÃ´t\");\n\t\tif (assignedRoles.wsps) {\n\t\t\tconst wspMetasCache = new WSPMETA.WspMetasCache(this.reg.env.universe.wspServer);\n\t\t\tfor (const [wspCode, value] of Object.entries(assignedRoles.wsps)) {\n\t\t\t\tif (filterWspLine(value))\n\t\t\t\t\twspMetasCache.fetchWspMetaUi(wspMetasCache.atomWspTypeInst(value.infoWsp));\n\t\t\t}\n\t\t\tawait wspMetasCache.waitForAll();\n\t\t\tfor (const [wspCode, value] of Object.entries(assignedRoles.wsps)) {\n\t\t\t\tif (filterWspLine(value)) {\n\t\t\t\t\tconst wspMetaUi = wspMetasCache.getWspMetaUi(value.infoWsp);\n\t\t\t\t\tthis.wspMap.set(wspCode, new Wsp(this.reg.env.universe.wspServer, wspCode, value.infoWsp as JInfoWsp, wspMetaUi));\n\t\t\t\t\tconst structLevel: JRoleExpEntryStructLevelRepo<R> = {structLevel: \"wsp\", title: value.title || wspCode, uid: wspCode, wspCode: wspCode, ch: []};\n\t\t\t\t\tinjectRoles(structLevel.ch, value.nodes, wspCode);\n\t\t\t\t\tinjectChildren(structLevel.ch as JRoleExpEntryStructLevelRepo<R>[], value.nodes.ch, wspCode);\n\t\t\t\t\trepoLevel.ch.push(structLevel as R);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn root;\n\t}\n\n\n\tasync buildRowDetails(row: R): Promise<HTMLElement> {\n\t\tif (row) {\n\t\t\tconst inElt = <div/>;\n\t\t\tconst account = (row as JRoleExpEntrySetAccount).account;\n\t\t\tlet wspCode: string;\n\t\t\tlet wspTitle: string;\n\t\t\tlet srcUri: srcUri;\n\t\t\tlet parentStructLevel: JRoleExpEntryStructLevelRepo<R> = (\"account\" in (row as JRoleExpEntrySetAccount) ? this.dataHolder.parent(row) : row) as JRoleExpEntryStructLevelRepo<R>;\n\t\t\twhile (parentStructLevel) {\n\t\t\t\tif (parentStructLevel.structLevel === \"space\") {\n\t\t\t\t\tsrcUri = parentStructLevel.title + (srcUri ? `/${srcUri}` : '');\n\t\t\t\t\tparentStructLevel = this.dataHolder.parent(parentStructLevel as R) as JRoleExpEntryStructLevelRepo<R>;\n\t\t\t\t} else {\n\t\t\t\t\tif (parentStructLevel.structLevel === \"wsp\") {\n\t\t\t\t\t\twspCode = parentStructLevel.wspCode;\n\t\t\t\t\t\twspTitle = parentStructLevel.title;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (srcUri) srcUri = `/${srcUri}`;\n\t\t\tlet wsp: Wsp = this.wspMap.get(wspCode);\n\n\t\t\tconst accountWidget = new InputUserPanel().initialize({\n\t\t\t\tname: \"filterAccounts\",\n\t\t\t\treg: this.reg,\n\t\t\t\temptySelectionMsg: \"SÃ©lectionner un utilisateur/groupe...\",\n\t\t\t\trequired: true,\n\t\t\t\tuserCard: \"single\",\n\t\t\t\thideRemButton: true,\n\t\t\t\tusersGridInit: {\n\t\t\t\t\tusersSrv: this.usersSrv,\n\t\t\t\t\tfilterType: null,\n\t\t\t\t\tfilterTypeInputVisibility: true,\n\t\t\t\t},\n\t\t\t} as OInputUserInit<E>) as InputUserPanel<E>;\n\t\t\tawait accountWidget.initializedAsync;\n\t\t\tDOM.addClass(accountWidget, \"formElt\");\n\t\t\tif (account) accountWidget.value = [account];\n\t\t\telse if (this.filterAccounts.value)\n\t\t\t\taccountWidget.value = this.filterAccounts.value;\n\n\t\t\tlet detailsBarActions;\n\n\t\t\tif(wspCode && !wsp){\n\t\t\t\tconst wspTitle = wspCode;\n\t\t\t\tinElt.appendChild(new MsgLabel().initialize({reg: this.reg, label: `Atelier '${wspTitle}' non disponible`, level:\"error\"}));\n\t\t\t\treturn inElt;\n\t\t\t}\n\n\t\t\tif (srcUri) {\n\t\t\t\t// - srcUri\n\t\t\t\tconst node = await WSP.fetchShortDescTree(wsp, this, srcUri);\n\t\t\t\tdetailsBarActions = inElt.appendChild(new BarActions<IShortDescCtx & ISetPermsSpaceCtx & IUsersRolesActionCtx<E, R, CTX>>().initialize({\n\t\t\t\t\treg: wsp.reg,\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tnew ActionWrapperRefresRolesExplorer().setOverridenSvc(new SetPermsSpace())\n\t\t\t\t\t],\n\t\t\t\t\tactionContext: {\n\t\t\t\t\t\trolesExplorer: this,\n\t\t\t\t\t\treg: wsp.reg,\n\t\t\t\t\t\temitter: this,\n\t\t\t\t\t\tshortDescs: [node],\n\t\t\t\t\t\tpreSelectAccounts: (account ? [account] : null),\n\t\t\t\t\t},\n\t\t\t\t\tuiContext: \"bar\",\n\t\t\t\t\tdisableFullOverlay: true,\n\t\t\t\t})) as BarActions<IShortDescCtx & ISetPermsSpaceCtx & IUsersRolesActionCtx<E, R, CTX>>;\n\n\t\t\t\tinElt.appendChild(<div class=\"header\">RÃ´les rÃ©solus de {accountWidget} sur l'espace <span class=\"refUri\">'{srcUri}'</span> de l'atelier <span class=\"refWsp\">'{wsp.wspTitle}'</span> :</div>);\n\t\t\t} else if (wsp) {\n\t\t\t\tdetailsBarActions = inElt.appendChild(new BarActions<IWspActionCtx & IOpenPermsWspActionCtx & IUsersRolesActionCtx<E, R, CTX>>().initialize({\n\t\t\t\t\treg: wsp.reg,\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tnew ActionWrapperRefresRolesExplorer().setOverridenSvc(OpenPermsWspAction.SINGLETON)\n\t\t\t\t\t],\n\t\t\t\t\tactionContext: {\n\t\t\t\t\t\trolesExplorer: this,\n\t\t\t\t\t\treg: wsp.reg,\n\t\t\t\t\t\tpreSelectAccounts: (account ? [account] : null),\n\t\t\t\t\t},\n\t\t\t\t\tuiContext: \"bar\",\n\t\t\t\t\tdisableFullOverlay: true,\n\t\t\t\t})) as BarActions<IWspActionCtx & IOpenPermsWspActionCtx & IUsersRolesActionCtx<E, R, CTX>>;\n\t\t\t\t// - Wsp\n\t\t\t\tinElt.appendChild(<div class=\"header\">RÃ´les rÃ©solus de {accountWidget} sur l'atelier <span class=\"refWsp\">'{wsp.wspTitle}'</span> :</div>);\n\t\t\t} else {\n\t\t\t\tdetailsBarActions = inElt.appendChild(new BarActions<IOpenUsersMgrCtx | IUsersRolesActionCtx<E, R, CTX>>().initialize({\n\t\t\t\t\treg: this.reg,\n\t\t\t\t\tactions: [\n\t\t\t\t\t\tnew ActionWrapperRefresRolesExplorer().setOverridenSvc(new OpenUsersMgr()),\n\t\t\t\t\t\tnew ActionWrapperRefresRolesExplorer().setOverridenSvc(new OpenGroupsMgr()),\n\t\t\t\t\t],\n\t\t\t\t\tactionContext: {\n\t\t\t\t\t\trolesExplorer: this,\n\t\t\t\t\t\treg: this.reg as IReg<ICoreUniverseEnv>,\n\t\t\t\t\t\tpreSelectAccount: account,\n\t\t\t\t\t},\n\t\t\t\t\tuiContext: \"bar\",\n\t\t\t\t\tdisableFullOverlay: true,\n\t\t\t\t})) as BarActions<IOpenUsersMgrCtx & IUsersRolesActionCtx<E, R, CTX>>;\n\n\t\t\t\t// - EntrepÃ´t\n\t\t\t\tinElt.appendChild(<div class=\"header\">RÃ´les rÃ©solus de {accountWidget} sur l'entrepÃ´t :</div>);\n\t\t\t}\n\n\t\t\tconst computedRolesBox = inElt.appendChild(<div class=\"computedRoles\"/>) as HTMLDivElement;\n\n\t\t\taccountWidget.addEventListener(\"change\", async (evt) => {\n\t\t\t\tif (accountWidget.value) this.showComputedRolesFor(accountWidget.value[0], computedRolesBox, wsp, srcUri);\n\t\t\t});\n\t\t\tif (accountWidget.value) await this.showComputedRolesFor(accountWidget.value[0], computedRolesBox, wsp, srcUri);\n\n\t\t\treturn inElt;\n\t\t}\n\t}\n\n\tprivate async showComputedRolesFor(account: string, inElt: HTMLDivElement, wsp?: Wsp, srcUri?: srcUri) {\n\t\tinElt.innerHTML = \"\";\n\t\tif (!account) return;\n\n\t\tlet rolesElt: HTMLDivElement;\n\t\tconst detailsUl = <ul/>;\n\n\t\t// - RÃ´les rÃ©solus\n\t\tlet resultRoles: { role: string, name: string, level: \"set\" | \"inherited\" | \"unknown\" }[];\n\t\tif (wsp) {\n\t\t\t// # wsp / space\n\t\t\tif (inElt.innerHTML !== \"\") return;//race condition\n\t\t\tconst rolesForAccounts = await WSP.srcGetRolesForAccounts(wsp, this, srcUri || \"\", [account]);\n\t\t\tif (inElt.innerHTML !== \"\") return;//race condition\n\t\t\tlet roleUiCtx: IRoleEditUiHandlerContext = {\n\t\t\t\treg: this.reg,\n\t\t\t\tgrantedRoles: rolesForAccounts[account].allowedRoles,\n\t\t\t\trefusedRoles: rolesForAccounts[account].deniedRoles,\n\t\t\t\tinheritedRoles: rolesForAccounts[account].inheritedRoles\n\t\t\t}\n\t\t\tlet roles = ROLES.resolveUserRoles(roleUiCtx);\n\n\t\t\tresultRoles = await ROLES.resolveRolesList(roles, roleUiCtx, await Promise.all(wsp.reg.mergeLists(ROLES.UI_ROLES_LIST)) as RoleEditUiHandler<IRoleEditUiHandlerContext>[]);\n\t\t\t/*resultRoles.sort((l1, l2) => {\n\t\t\t\treturn l2.sortAlgo - l1.sortAlgo;\n\t\t\t});*/\n\t\t\tif (inElt.innerHTML !== \"\") return;//race condition\n\t\t} else {\n\t\t\t// # repo\n\t\t\tconst rolesForAccounts = await this.reg.env.universe.adminUsers.getUserMap([account]);\n\t\t\tlet roleUiCtx: IRoleEditUiHandlerContext = {\n\t\t\t\treg: this.reg,\n\t\t\t\tgrantedRoles: rolesForAccounts[account].grantedRoles,\n\t\t\t\trefusedRoles: rolesForAccounts[account].refusedRoles,\n\t\t\t\tinheritedRoles: rolesForAccounts[account].inheritedRoles\n\t\t\t}\n\t\t\tlet roles = ROLES.resolveUserRoles(roleUiCtx);\n\t\t\tresultRoles = await ROLES.resolveRolesList(roles, roleUiCtx, await this.rolesUiHandlers());\n\t\t\tif (inElt.innerHTML !== \"\") return;//race condition\n\t\t}\n\n\t\tif (resultRoles?.length) {\n\t\t\trolesElt = <div class=\"resolvedRoles\" title=\"La rÃ©solution des rÃ´les tient compte de la hiÃ©rarchie et des groupes d'appartenance\"></div> as HTMLDivElement;\n\t\t\tresultRoles.forEach((role, pos) => {\n\t\t\t\tif (pos > 0) rolesElt.appendChild(<span class=\"spacer\">, </span>);\n\t\t\t\tconst entry = rolesElt.appendChild(<span class={`roleName role-${role.level}`}>{role.name}</span>);\n\t\t\t\t// - Title\n\t\t\t\tlet roleName = role.name;\n\t\t\t\tswitch (role.level) {\n\t\t\t\tcase \"inherited\":\n\t\t\t\t\tentry.title = \"affectation issue d'un autre niveau ou d'un groupe\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"unknown\":\n\t\t\t\t\tentry.title = \"rÃ´le inconnu\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\n\t\t// - Groupes d'appartenance\n\t\tif (this.usersSrv.hasAspect(EUserAspects.groupable)) {\n\t\t\tconst users = await this.usersSrv.getUserMap([account], [\"flattenedGroups\"]);\n\t\t\tif (inElt.innerHTML !== \"\") return;//race condition\n\t\t\tconst flattenedGroups = (users[account]?.flattenedGroups as string[])?.reverse();\n\t\t\t//if (users[account]?.userType === EUserType.user) flattenedGroups?.shift();// On retire l'account courant\n\t\t\tflattenedGroups?.shift();// On retire l'account courant\n\t\t\tif (flattenedGroups?.length) {\n\t\t\t\tlet li = detailsUl.appendChild(<li><span class=\"title\">Groupes d'appartenance : </span></li>);\n\t\t\t\tflattenedGroups.forEach((grp, pos) => {\n\t\t\t\t\tif (pos > 0) li.appendChild(<span class=\"spacer\"> &gt; </span>);\n\t\t\t\t\tli.appendChild(<UserRef Ã®={{reg: this.reg, nickOrAccount: grp, withIcon: true} as OUserRefInit}/>)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tinElt.appendChild(rolesElt);\n\t\tinElt.appendChild(detailsUl);\n\t}\n\n}\n\n\ncustomElements.define(\"c-rolesexplorer-wsp\", WspRolesExplorerTab);\n\nREG.reg.registerSkin('c-rolesexplorer-wsp', 1, /* language=CSS */ `\n\t#details .spacer {\n\t\tcolor: var(--alt2-color);\n\t\tfont-weight: bold;\n\t\tfont-size: larger;\n\t}\n\n\n\t#details .refUri:before, #details .refWsp:before,\n\t#details .refUri:after, #details .refWsp:after {\n\t\tcontent: \"'\";\n\t}\n`);\n\nREG.reg.registerSkin('c-rolesexplorer-wsp-tree', 1, /* language=CSS */ `\n\t:host {\n\t\t--roles-struct-level-wsp: url('/@skin@/wsp/views/wspRolesExplorer/wsp.svg');\n\t\t--roles-struct-level-space: url('/@skin@/wsp/views/wspRolesExplorer/space.svg');\n\t}\n\n\tdiv[data-struct-level='repo'],\n\tdiv[data-struct-level='wsp'] {\n\t\tfont-variant: small-caps;\n\t\tbackground-color: var(--inv-bgcolor);\n\t\tcolor: var(--inv-color);\n\t}\n\n\tdiv[data-struct-level='repo'].inSel,\n\tdiv[data-struct-level='wsp'].inSel {\n\t\tcolor: var(--color)\n\t}\n\n\tdiv[data-struct-level='repo'] {\n\t\tfont-size: 1.3rem;\n\t}\n\n\tdiv[data-struct-level='repo'] > .cell:first-child .icon {\n\t\tpadding-inline-start: unset !important;\n\t}\n\n\tdiv[data-struct-level='wsp'] {\n\t\tmargin-block-start: 1rem;\n\t\tfont-size: 1.2rem;\n\t}\n\n`);\n\nREG.reg.registerSkin('c-rolesexplorer-wsp-tree-details', 1, /* language=CSS */ `\n\n\n`);"]}