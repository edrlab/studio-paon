{"version":3,"sources":["/@back@/edit/wed/features/insMgr.tsx"],"names":["POPUP","isWedletBoxSelection","isWedDefaultDisplay","EWedletEditMode","findWedEditor","IS_EltWedlet","WEDLET","isWedletSingleElt","ACTION","Action","REG","DOM","ENodeType","JSX","ShadowJsx","DOMSH","JML","XA","SkRuleNode","ActionBtn","IS_ActionableEnabled","GFX","BoxHost","LANG","AgInsSelEditor","cls","visitOptions","proto","prototype","superInit","initialize","config","call","this","rootNode","addEventListener","ev","elt","composedPath","host","delegatedHost","addDragMgrOnWedletHost","_dragEnter","target","datas","wedMgr","extractDatasFromDragSession","dataTransfer","startInsertSession","endInsertSession","insAction","ListInsBoxStruct","reg","addToList","accelKeyMgr","addAccelKey","_insMgrVisitOptions","root","onDragStart","eltWedlet","findParentOrSelf","wedlet","boxSelMgr","wedEditor","isVirtual","activeWedlet","preventDefault","doc","docHolder","getDocument","frag","createElementNS","SCCORE_NS","cloneFragment","range","hasChildNodes","node","findDomLast","wedAnchor","nodeType","attribute","appendChild","cloneNode","effectAllowed","editMode","write","setDragImage","Image","originalDom","onDragEnd","isInsMgrWedlet","w","markInserts","AgWedletInsMgr","eraseInsertMarks","getDropEffect","mark","allowed","result","checkFrom","wdlBefore","wdlAfter","isAncestorOrEqual","from","visitSelectedWedlets","isCopyOverMove","finalizeInsertion","batch","action","needAdjustForNextAdds","setSelBefore","start","end","deleteContentSelection","setSelBeforeSeq","deleteSequence","doBatch","newBatch","byDrag","ctrl","_insSession","InsSession","insSess","erase","[object Object]","editor","widgets","Set","onPointerdownInsSession","capture","scrollCtn","scrollContainer","onScroll","passive","redraw","findWedletInArea","wedletArea","isWritableWedlet","currentInsDatas","add","rootWedlet","getBoundingClientRect","removeEventListener","clear","findHost","async","eltPath","find","IS_MarkImportInsert","execute","isEltInsertDrawer","elementHost","wedParent","impCtx","xaParent","virtualPath","buildVirtualPath","_a","house","schemaDom","tryImport","then","importers","length","drawInsertMarks","emptyStruct","p","isConnected","removeInsertMarks","AgEltBoxInsertDrawerBox","drawInsertMarks_Box","_insMarks","replaceFull","replaceCh","insertCh","replaceVirtuals","orientHoriz","imp","importPos","addImporter","push","MarkImportReplace","placeOn","replaceChildren","Map","repl","chPath","get","ch","findWedletChild","VISITOPTIONS_mainBranch","matchModel","similarTo","model","widget","previousElementSibling","comment","MarkImportReplaceCtn","element","set","insertOffsetMin","undefined","previousCh","eachOffset","i","insertOffsetMax","lastElementChild","sameModel","displayCtx","getContainerOrient","_b","assignedSlot","MarkImportInsert","insertAtts","remove","HTMLElement","super","ondragenter","onDragEnter","ondragleave","onDragLeave","ondragover","onDragOver","ondrop","onDrop","onkeydown","onKeyDown","onblur","onBlur","onclick","onClick","tabIndex","classList","importer","parentRef","offset","before","after","findReg","installSkin","attachShadow","SHADOWDOM_INIT","injectForeignChild","Array","isArray","stopImmediatePropagation","setDropEffect","addClass","insCtrl","dropEffect","removeClass","key","shiftKey","findPreviousMark","findNextMark","_freezeBlur","actions","completeDatasAtDrop","setLabel","getLabel","setExecute","executeImporter","showNotifInfo","showPopupActions","posFrom","fromY","targetY","needAsyncBuild","buildContentToImport","doImport","buildImportContext","sel","append","registerSkin","customElements","define","n","prev","findFlatPrevious","focus","scrollBy","top","clientHeight","behavior","next","findFlatNext","findVisibleMark","scrollTop","offsetTop","offsetHeight","ref","localName","style","setProperty","shadowRoot","xa","isAttribute","newRangeAround","parentNode","insertBefore","createElement","_label","_icon","ctx","disableBoxSelection","isVisible","readOnly","isEnabled","clearSel","structs","virtualParents","wParent","isCollapsed","xaPart","has","struct","getStruct","subStructs","contentRule","findRules","r","structType","cleanupStructList","findVirtualWedletsAfter","findVirtualWedletsBefore","s","structsBefore","getInsertableStructs","getVirtualXaPart","hasAttribute","forEach","structsAfter","structsReplace","childrenElt","fromChildrenElt","appendStructs","structList","wedMatchStrict","wedMatcher","matchStruct","getInsertableStructsAll","findAllChildrenVirtualWedlets","VISITOPTIONS_includeVirtuals","size","rootList","id","structsAdded","list","other","isSameRoot","buildButton","InsertableStruct","rootFilter","type","oninput","onSearchChange","onchange","onSearchKeydown","onfocus","skin","skinOver","popup","showFloating","listInsPopupPos","relatedTarget","isAncestor","close","startSession","actionContext","findNextSibling","findPreviousSibling","findNext","IS_focusable","closeOnBlur","value","trim","IS_actionBtn","btn","findFirstChild","findDocumentOrShadowRoot","getElementById","regexp","RegExp","escape4RegexpFuzzy","hidden","test","label","fromX","targetX","marginX","toleranceX","toleranceY","notAvailableSpace","structName","structLabel","isDrag","DragEvent","findDeepActiveElement","blur","findPopupableParent","setTimeout","ct","newDomDoc","SCFRAGMENT_TAG","createContent","jmlToDom"],"mappings":"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","sourcesContent":["import {IPopupable, ORelativePosition} from \"back/commons/widgets/popupable\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {isWedletBoxSelection, IWedEditorBoxSel} from \"back/edit/wed/features/boxSel\";\nimport {isWedDefaultDisplay} from \"back/edit/wed/wedCore\";\nimport {IWedEditor} from \"back/edit/wed/wedEditor\";\nimport {OWedEditorBoxConfig} from \"back/edit/wed/wedEditorBox\";\nimport {EWedletEditMode, findWedEditor, IEditableWedlet, IElementWedlet, IParentWedlet, IS_EltWedlet, IWedlet, IWedletArea, OVisitWedletOptions, WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {isWedletSingleElt, IWedletSingleElt} from \"back/edit/wed/wedlets/wedletSingleElt\";\nimport {ACTION, Action} from \"lib/commons/actions\";\nimport {REG} from \"lib/commons/registry\";\nimport {DOM, ENodeType, JSX, ShadowJsx} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IJmlSet, JML} from \"lib/commons/xml/jml\";\nimport {ISkStructDef} from \"lib/edit/schema/schemaAnnots\";\nimport {ISkImporter, OSkImportDatas, OSkPasteContext, OSkPasteSearchContext} from \"lib/edit/schema/schemaMeta\";\nimport {XA} from \"lib/commons/xml/xAddr\";\nimport {SkRuleElt, SkRuleNode} from \"lib/edit/schema/schemaPatterns\";\nimport {ActionBtn} from \"back/commons/widgets/buttons\";\nimport {IS_ActionableEnabled} from \"back/commons/actionables\";\nimport {XmlBatch} from \"lib/edit/ot/xmlHouse\";\nimport {IDocBatch} from \"lib/edit/docHolder\";\nimport {GFX} from \"lib/commons/utils/gfx\";\nimport {BoxHost} from \"back/edit/wed/wedlets/box/boxTags\";\nimport {LANG} from \"lib/commons/lang\";\n\n/**\n * Gestion générique de l'insertion/remplacement d'élément :\n * - met à dispo un API pour activer les points d'insertion dans l'éditeur\n * - gère les listeners dragOver pour activation auto au drag.\n */\nexport interface IWedEditorInsMgr extends IWedEditor {\n\n\t/** Démarre une session d'insertion d'un contenu. */\n\tstartInsertSession?(datas: OSkImportDatas, byDrag: boolean, ctrl?: IInsSessionCtrl): void\n\n\t/** Stop la session en cours d'insertion d'un contenu et élimine tous les widgets d'insertion. */\n\tendInsertSession?(): void\n\n\t/** Interne. options pour visiter les wedlets dans une InsSession. */\n\t_insMgrVisitOptions?: OVisitWedletOptions\n\t/** Interne. Session en cours. */\n\t_insSession?: InsSession\n\t/** Interne. origine du 1er dragenter créateur de la session pour filtrer le target au dragleave pour éliminer la session. */\n\t_dragEnter?: EventTarget\n\n\t//WAIT impl Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n\t///** Interne. Caret d'insertion dans le texte. */\n\t//_insCaret?: MarkImportCaret\n\n}\n\n\nexport function AgInsSelEditor(cls: any, visitOptions?: OVisitWedletOptions): any {\n\tconst proto = cls.prototype as IWedEditorInsMgr;\n\tconst superInit = proto.initialize;\n\tproto.initialize = function (this: IWedEditorBoxSel & IWedEditorInsMgr, config: OWedEditorBoxConfig): IWedEditorBoxSel {\n\t\tsuperInit.call(this, config);\n\n\t\tthis.rootNode.addEventListener('delegate-host', (ev: Event) => {\n\t\t\tconst elt = ev.composedPath()[0];\n\t\t\tconst host = (elt as IElementWedlet).delegatedHost;\n\t\t\tif (host instanceof BoxHost) addDragMgrOnWedletHost(host); //on est bien sur un delegate-host de type Box\n\t\t});\n\n\t\tthis.rootNode.addEventListener(\"dragenter\", (ev: DragEvent) => {\n\t\t\tif (this._dragEnter) {\n\t\t\t\t//session de drag déjà en cours\n\t\t\t\t//on garde ce dernier dragenter sans recalculer.\n\t\t\t\tthis._dragEnter = ev.target;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//console.log(\"dragenter:::\", (ev.dataTransfer as any).insSession, ev.target, ev);\n\t\t\tconst datas = this.wedMgr.extractDatasFromDragSession(ev.dataTransfer);\n\t\t\tif (datas) {\n\t\t\t\tthis._dragEnter = ev.target;\n\t\t\t\tthis.startInsertSession(datas, true);\n\t\t\t}\n\t\t});\n\n\t\tthis.rootNode.addEventListener(\"dragleave\", (ev: DragEvent) => {\n\t\t\tif (this._dragEnter !== ev.target) return;\n\t\t\t//console.log(\"dragleave:::\", (ev.dataTransfer as any).insSession, ev.target, ev);\n\n\t\t\t//on quitte le noeud corrrespondant au dernier dragenter\n\t\t\t// Résoud un pb d'imbrication d'events 'dragenter' et 'dragleave' mal ordonnés sur des noeuds différents\n\t\t\t// autour de la scroll bar notamment.\n\t\t\tthis._dragEnter = null;\n\t\t\tthis.endInsertSession();\n\t\t});\n\n\t\t//TODO abonnement aux updates concurrents du contenu pendant la session pour invalider\n\t\t//     et rafraichir les marques d'insertion potentiellement concernées par la modif.\n\t\t//     cf IInsMgrWedlet.eraseInsertMarks() et InsSession.redraw()\n\n\t\t//\n\t\tconst insAction = new ListInsBoxStruct();\n\t\tconfig.reg.addToList(\"actions:wed:commonbar:start\", \"insTag\", 1, insAction, 60);\n\t\tthis.wedMgr.accelKeyMgr.addAccelKey(\"Insert\", '', insAction);\n\n\t\treturn this;\n\t};\n\tproto._insMgrVisitOptions = visitOptions;\n\tproto.startInsertSession = startInsertSession;\n\tproto.endInsertSession = endInsertSession;\n\n\treturn cls;\n}\n\n/** Abonne un container de widgets WED aux drag&drop des widgets. */\nexport function addDragMgrOnWedletHost(root: HTMLElement | ShadowRoot) {\n\t//console.log(\"addDragMgrOnWedletHost:::::\", root);\n\troot.addEventListener(\"dragstart\", function onDragStart(this: void, ev: DragEvent) {\n\t\t//console.log(\"onDragStart::::\", ev.target, ev.composedPath());\n\t\tconst eltWedlet = DOM.findParentOrSelf(ev.target as Element, null, IS_EltWedlet);\n\t\tconst wedlet = eltWedlet ? eltWedlet.wedlet : null;\n\t\tconst wedMgr = wedlet.wedMgr;\n\t\tconst boxSelMgr = (wedMgr.wedEditor as IWedEditorBoxSel).boxSelMgr;\n\t\tif (!eltWedlet || wedlet.isVirtual() || (boxSelMgr && boxSelMgr.activeWedlet !== wedlet)) {\n\t\t\tev.preventDefault();\n\t\t\treturn;\n\t\t}\n\t\tconst doc = wedMgr.docHolder.getDocument();\n\t\tconst frag = doc.createElementNS(DOM.SCCORE_NS, \"fragment\");\n\t\tif (boxSelMgr) {\n\t\t\tXA.cloneFragment(doc, frag, boxSelMgr.range);\n\t\t\tif (!frag.hasChildNodes()) {\n\t\t\t\tev.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t//pas boxSelMgr = outline par ex.\n\t\t\tconst node = XA.findDomLast(wedlet.wedAnchor, doc);\n\t\t\tif (!node || node.nodeType === ENodeType.attribute) {\n\t\t\t\tev.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfrag.appendChild(node.cloneNode(true));\n\t\t}\n\t\tev.dataTransfer.effectAllowed = (wedlet as IEditableWedlet).editMode === EWedletEditMode.write ? \"copyMove\" : \"copy\";\n\t\tev.dataTransfer.setDragImage(new Image(), 0, 0);\n\t\t(wedMgr.wedEditor as IWedEditorInsMgr).startInsertSession({originalDom: frag}, true, wedlet as IInsSessionCtrl);\n\t});\n\troot.addEventListener(\"dragend\", function onDragEnd(this: void, ev: DragEvent) {\n\t\tconst eltWedlet = DOM.findParentOrSelf(ev.target as Element, null, IS_EltWedlet);\n\t\tif (eltWedlet) (eltWedlet.wedlet.wedMgr.wedEditor as IWedEditorInsMgr).endInsertSession();\n\t});\n}\n\n/** Gestion des insertions au niveau des IWedlets. */\nexport interface IInsMgrWedlet extends IWedlet {\n\n\tmarkInserts(datas: OSkImportDatas): \"next\" | \"nextSibling\"\n\n\teraseInsertMarks(): void\n\n\t/** Mémoire des datas déjà analysées. A purger en cas de changement pour forcer un appel à markInserts() au prochain cycle. */\n\tcurrentInsDatas: OSkImportDatas\n}\n\nfunction isInsMgrWedlet(w: IWedlet): w is IInsMgrWedlet {return w && typeof (w as IInsMgrWedlet).markInserts === 'function'}\n\n\n/** Aggrégation pour les wedlet IWedletSingleElt pour gérer les marques d'insertion possibles dans ses fils. */\nexport function AgWedletInsMgr(cls: any): any {\n\tconst proto = cls.prototype as IInsMgrWedlet & IInsSessionCtrl & IWedletSingleElt;\n\tif (!proto.markInserts) proto.markInserts = markInserts;\n\tif (!proto.eraseInsertMarks) proto.eraseInsertMarks = eraseInsertMarks;\n\n\tif (!proto.getDropEffect) proto.getDropEffect = function (this: IInsSessionCtrl & IWedletSingleElt, mark: MarkImportInsert, ev: DragEvent): 'copy' | 'move' | 'link' {\n\t\tconst allowed = ev.dataTransfer.effectAllowed;\n\t\tif (allowed === 'copyMove') {\n\t\t\tlet result: 'copy' | 'move' | 'link';\n\n\t\t\tfunction checkFrom(w: IWedlet): 'copy' | 'move' | 'link' | undefined {\n\t\t\t\t//Si on est autour de nous, on ne peut déplacer !\n\t\t\t\tif (mark.wdlBefore === w || mark.wdlAfter === w) return 'copy';\n\t\t\t\t//On ne peut déplacer dans ses propres fils.\n\t\t\t\tif (WEDLET.isAncestorOrEqual(w, mark.from)) return 'copy';\n\t\t\t}\n\n\t\t\tconst boxSelMgr = (this.wedMgr.wedEditor as IWedEditorBoxSel).boxSelMgr;\n\t\t\tif (boxSelMgr) {\n\t\t\t\tresult = boxSelMgr.visitSelectedWedlets(checkFrom);\n\t\t\t} else {\n\t\t\t\t//pas boxSelMgr = outline par ex.\n\t\t\t\tresult = checkFrom(this);\n\t\t\t}\n\t\t\t//Si ctrl enfoncé, on copie.\n\t\t\treturn result || ACTION.isCopyOverMove(ev) ? 'copy' : 'move';\n\t\t}\n\t\treturn allowed as 'copy' | 'move' | 'link';\n\t};\n\n\tif (!proto.finalizeInsertion) proto.finalizeInsertion = function (this: IInsSessionCtrl & IWedletSingleElt, batch: IDocBatch & XmlBatch, action?: 'copy' | 'move' | 'link'): void {\n\t\tif (action === 'move') {\n\t\t\tconst wedMgr = this.wedMgr;\n\t\t\tconst boxSelMgr = (wedMgr.wedEditor as IWedEditorBoxSel).boxSelMgr;\n\t\t\tif (batch.docHolder === wedMgr.docHolder) {\n\t\t\t\t//Même doc, on ajoute la suppr.\n\t\t\t\tbatch.needAdjustForNextAdds();\n\t\t\t\tif (boxSelMgr) {\n\t\t\t\t\tbatch.setSelBefore(boxSelMgr.range.start, boxSelMgr.range.end);\n\t\t\t\t\tboxSelMgr.deleteContentSelection(batch);\n\t\t\t\t} else {\n\t\t\t\t\t//pas boxSelMgr = outline par ex.\n\t\t\t\t\tbatch.setSelBeforeSeq(this.wedAnchor, 1);\n\t\t\t\t\tbatch.deleteSequence(this.wedAnchor, 1);\n\t\t\t\t}\n\t\t\t\tbatch.doBatch();\n\t\t\t} else {\n\t\t\t\t//Docs différents, on valide l'ajout.\n\t\t\t\tbatch.doBatch();\n\t\t\t\t//Puis on suppr ici.\n\t\t\t\tif (boxSelMgr) boxSelMgr.deleteContentSelection();\n\t\t\t\telse wedMgr.docHolder.newBatch().deleteSequence(this.wedAnchor, 1).doBatch();\n\t\t\t}\n\t\t} else {\n\t\t\tbatch.doBatch();\n\t\t}\n\t};\n\treturn cls;\n}\n\n\n/** Controler de la session d'insertion fourni à l'appel de IWedEditorInsMgr.startInsertSession(). */\nexport interface IInsSessionCtrl {\n\n\t/** Evalue l'action possible au drag. */\n\tgetDropEffect?(mark: MarkImportInsert, ev: DragEvent): 'copy' | 'move' | 'link'\n\n\t/** Si méthode présente finalise et execute le batch (cas du move : suppr de la source). */\n\tfinalizeInsertion?(batch: IDocBatch & XmlBatch, action?: 'copy' | 'move' | 'link'): void\n}\n\n\nfunction startInsertSession(this: IWedEditorInsMgr, datas: OSkImportDatas, byDrag: boolean, ctrl?: IInsSessionCtrl) {\n\tthis.endInsertSession();\n\tthis._insSession = new InsSession(this, datas, byDrag, ctrl);\n}\n\nfunction endInsertSession(this: IWedEditorInsMgr) {\n\tconst insSess = this._insSession;\n\tif (!insSess) return;\n\tthis._insSession = null;\n\tthis._dragEnter = null;\n\tinsSess.erase();\n}\n\nclass InsSession {\n\n\twidgets: Set<IInsMgrWedlet> = new Set();\n\n\tconstructor(public editor: IWedEditorInsMgr, public datas: OSkImportDatas, public byDrag: boolean, public ctrl: IInsSessionCtrl) {\n\t\tif (!byDrag) editor.rootNode.addEventListener('pointerdown', onPointerdownInsSession, {capture: true});\n\t\tconst scrollCtn = this.editor.scrollContainer;\n\t\tif (scrollCtn) scrollCtn.addEventListener('scroll', this.onScroll, {passive: true});\n\t\tthis.redraw();\n\t}\n\n\t/** A appeler à l'init, après scroll, après update */\n\tredraw() {\n\t\t//let t = performance.now();\n\t\tWEDLET.findWedletInArea((wedletArea: IWedletArea) => {\n\t\t\tconst w = wedletArea.wedlet;\n\t\t\t// if (w.model.nodeName === \"op:keywds\") {\n\t\t\t// \tconsole.log(\"insMgr.redraw:::\", w);\n\t\t\t// \t//debugger;\n\t\t\t// }\n\t\t\tif (isInsMgrWedlet(w) && WEDLET.isWritableWedlet(w)) {\n\t\t\t\tif (w.currentInsDatas !== this.datas) {\n\t\t\t\t\tthis.widgets.add(w);\n\t\t\t\t\treturn w.markInserts(this.datas);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"next\";\n\t\t}, this.editor.wedMgr.rootWedlet, this.editor.rootNode.getBoundingClientRect() as DOMRectReadOnly, this.editor._insMgrVisitOptions);\n\t\t//console.log(\"InsSession-perf:::::\", performance.now() - t, \"widgets::\", this.widgets.size);\n\t}\n\n\terase() {\n\t\t//console.trace('InsSession.erase()::::::');\n\t\tif (!this.byDrag) this.editor.rootNode.removeEventListener('pointerdown', onPointerdownInsSession, {capture: true});\n\t\tif (this.editor.scrollContainer) this.editor.scrollContainer.removeEventListener('scroll', this.onScroll);\n\t\tfor (const w of this.widgets) w.eraseInsertMarks();\n\t\tthis.editor = null;//help gc\n\t\tthis.widgets.clear();\n\t}\n\n\tonScroll(this: HTMLElement, ev: Event) {\n\t\t//console.log(\"onScroll!!!!!!\");\n\t\tDOMSH.findHost<IWedEditorInsMgr>(this)._insSession.redraw()\n\t}\n\n}\n\n/** Pour les sessions qui ne sont pas activée via drag. */\nasync function onPointerdownInsSession(this: HTMLElement, ev: PointerEvent) {\n\tconst eltPath = ev.composedPath();\n\tconst editor = findWedEditor(this) as IWedEditorInsMgr;\n\ttry {\n\t\tconst mark = eltPath.find(IS_MarkImportInsert);\n\t\tif (mark) await mark.execute();\n\t} finally {\n\t\teditor.endInsertSession();\n\t}\n}\n\n\n/** Mark les inserts au niveau du IWedlet. */\nexport function markInserts(this: IInsMgrWedlet & IWedletSingleElt, datas: OSkImportDatas): \"next\" | \"nextSibling\" {\n\tthis.currentInsDatas = datas;\n\t// if (this.model.nodeName === 'dk:text') {\n\t// \tconsole.log(\"markInserts:::::\", this, datas);\n\t// }\n\tif (!isEltInsertDrawer(this.elementHost) || !WEDLET.isWritableWedlet(this)) return \"next\";\n\tif (this.wedParent == null) return \"next\"; //Cas particulier du wedletRoot à voir...\n\n\tconst wedMgr = this.wedMgr;\n\tconst impCtx = {xaParent: this.wedAnchor, virtualPath: WEDLET.buildVirtualPath(this)} as OSkPasteSearchContext;\n\twedMgr.docHolder.house.schemaDom.tryImport(impCtx, datas)?.then((importers: ISkImporter[]) => {\n\t\tif (importers?.length > 0 && this.currentInsDatas === datas) {\n\t\t\t//console.log(\"importers:::\", importers, impCtx);\n\t\t\t(this.elementHost as IEltInsertDrawer).drawInsertMarks(importers, datas.emptyStruct);\n\t\t}\n\t});\n\treturn \"next\";\n}\n\n/** Efface les marks d'inserts au niveau du IWedlet. */\nfunction eraseInsertMarks(this: IInsMgrWedlet & IWedletSingleElt) {\n\tthis.currentInsDatas = null;\n\tconst p = this.elementHost;\n\tif (isEltInsertDrawer(p) && p.isConnected) p.removeInsertMarks();\n}\n\n\nexport interface IEltInsertDrawer extends IElementWedlet {\n\tdrawInsertMarks(importers: ISkImporter[], emptyStruct: boolean): void\n\n\tremoveInsertMarks(): void\n\n\t/** interne : marques ajoutées. */\n\t_insMarks: HTMLElement[];\n}\n\nfunction isEltInsertDrawer(elt: Element): elt is IEltInsertDrawer {return elt && ('drawInsertMarks' in elt)}\n\n/** Aggrégation pour les IElementWedlet. */\nexport function AgEltBoxInsertDrawerBox(cls: any): any {\n\tconst proto = cls.prototype as IEltInsertDrawer;\n\tproto.drawInsertMarks = drawInsertMarks_Box;\n\tproto.removeInsertMarks = removeInsertMarks;\n\treturn cls;\n}\n\nfunction drawInsertMarks_Box(this: IEltInsertDrawer, importers: ISkImporter[], emptyStruct: boolean) {\n\t// if (this.wedlet.model.nodeName === 'op:keywds') {\n\t// \tconsole.log(\"drawInsertMarks\", this);\n\t// \t//debugger;\n\t// }\n\tthis._insMarks = [];\n\tlet replaceFull: MarkImportReplace; //mémoire du replaceFull\n\tlet replaceCh: Map<number | string, MarkImportReplaceCtn>;//mémoire des remplacements de fils.\n\tlet insertCh: Map<number | string, MarkImportInsert>;//mémoire des insertions entre les fils.\n\tlet replaceVirtuals: Map<IElementWedlet, MarkImportReplaceCtn>; //mémoire des remplacements des noeuds virtuels\n\tlet orientHoriz: boolean;\n\tfor (const imp of importers) {\n\t\tif (!imp.importPos) {\n\t\t\t//on remplace tout (attr liens par ex.)\n\t\t\tif (replaceFull) replaceFull.addImporter(imp);\n\t\t\telse {\n\t\t\t\tthis._insMarks.push(replaceFull = new MarkImportReplace().placeOn(this.wedlet, imp, this));\n\t\t\t}\n\t\t} else {\n\t\t\tif (imp.importPos.replaceChildren) {\n\t\t\t\t//on remplace certains fils\n\t\t\t\tif (!replaceCh) replaceCh = new Map();\n\t\t\t\trepl: for (const chPath of imp.importPos.replaceChildren) {\n\t\t\t\t\tlet mark = replaceCh ? replaceCh.get(chPath) : null;\n\t\t\t\t\tif (mark) {\n\t\t\t\t\t\tmark.addImporter(imp);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst ch = (this.wedlet as IParentWedlet).findWedletChild(chPath, WEDLET.VISITOPTIONS_mainBranch) as IWedlet;\n\t\t\t\t\t\tif (isWedletSingleElt(ch)) {\n\t\t\t\t\t\t\tif (!emptyStruct || !WEDLET.matchModel(imp.importPos.similarTo, ch.model)) {\n\t\t\t\t\t\t\t\tfor (let widget = ch.elementHost.previousElementSibling; widget; widget = widget.previousElementSibling) {\n\t\t\t\t\t\t\t\t\t//Si un virtual widget précédent match le modèle à insérer, on passe.\n\t\t\t\t\t\t\t\t\tif (IS_EltWedlet(widget)) {\n\t\t\t\t\t\t\t\t\t\tif (widget.wedlet.model.nodeType === ENodeType.comment) continue;\n\t\t\t\t\t\t\t\t\t\tif (!widget.wedlet.isVirtual()) break;\n\t\t\t\t\t\t\t\t\t\tif (WEDLET.matchModel(imp.importPos.similarTo, widget.wedlet.model)) continue repl;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmark = new MarkImportReplaceCtn().placeOn(ch, imp, ch.element);\n\t\t\t\t\t\t\t\tthis._insMarks.push(mark);\n\t\t\t\t\t\t\t\treplaceCh.set(chPath, mark);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (imp.importPos.insertOffsetMin !== undefined) {\n\t\t\t\t//on injecte des marques d'insertion\n\t\t\t\tif (!insertCh) insertCh = new Map();\n\t\t\t\tlet previousCh: IWedlet;\n\t\t\t\teachOffset: for (let i = imp.importPos.insertOffsetMin; i <= imp.importPos.insertOffsetMax; i++) {\n\t\t\t\t\tlet mark = insertCh.get(i);\n\t\t\t\t\tif (mark) {\n\t\t\t\t\t\tmark.addImporter(imp);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst ch = (this.wedlet as IParentWedlet).findWedletChild(i, WEDLET.VISITOPTIONS_mainBranch) as IWedlet;\n\t\t\t\t\t\t//On élimine les insertions qui ont déjà une représentation virtuelle\n\t\t\t\t\t\tif (!ch || isWedletSingleElt(ch)) {\n\t\t\t\t\t\t\tfor (let widget = ch ? (ch as IWedletSingleElt).elementHost.previousElementSibling : (this.wedlet as IWedletSingleElt).elementHost.lastElementChild; widget; widget = widget.previousElementSibling) {\n\t\t\t\t\t\t\t\tif (IS_EltWedlet(widget)) {\n\t\t\t\t\t\t\t\t\tif (widget.wedlet.model.nodeType === ENodeType.comment) continue;\n\t\t\t\t\t\t\t\t\tif (!widget.wedlet.isVirtual()) break;\n\t\t\t\t\t\t\t\t\tconst sameModel = WEDLET.matchModel(imp.importPos.similarTo, widget.wedlet.model);\n\t\t\t\t\t\t\t\t\tif (emptyStruct ? !sameModel && isWedDefaultDisplay(widget.wedlet.displayCtx) : sameModel) {\n\t\t\t\t\t\t\t\t\t\t//Si on insert une struct empty : on propose de remplacer le defaultDisplay si modèle différent.\n\t\t\t\t\t\t\t\t\t\t//Si on insert un lien (ou un contenu) : on propose de remplacer si le wedlet virtuel est de même modèle.\n\t\t\t\t\t\t\t\t\t\tlet mark = replaceVirtuals && replaceVirtuals.get(widget);\n\t\t\t\t\t\t\t\t\t\tif (mark) {\n\t\t\t\t\t\t\t\t\t\t\tmark.addImporter(imp);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tmark = new MarkImportReplaceCtn().placeOn(widget.wedlet, imp, widget);\n\t\t\t\t\t\t\t\t\t\t\tthis._insMarks.push(mark);\n\t\t\t\t\t\t\t\t\t\t\t(replaceVirtuals || (replaceVirtuals = new Map())).set(widget, mark);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (sameModel) continue eachOffset; //widget virtuel trouvé, donc pas d'autre insertion.\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (orientHoriz === undefined) orientHoriz = GFX.getContainerOrient((ch as IWedletSingleElt)?.elementHost?.assignedSlot || (this.wedlet as IWedletSingleElt).elementHost) === 'h';\n\t\t\t\t\t\tmark = new MarkImportInsert().placeOn(this.wedlet, imp, this, i, ch, previousCh, orientHoriz);\n\t\t\t\t\t\tthis._insMarks.push(mark);\n\t\t\t\t\t\tinsertCh.set(i, mark);\n\t\t\t\t\t\tpreviousCh = ch;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (imp.importPos.insertAtts) throw \"TODO imp.importPos.insertAtts\";\n\t\t}\n\t}\n}\n\nfunction removeInsertMarks(this: IEltInsertDrawer) {\n\tif (this._insMarks) {\n\t\tfor (const mark of this._insMarks) mark.remove();\n\t\tthis._insMarks = null;\n\t}\n}\n\n/**\n * Marque d'insertion d'un contenu\n */\nexport class MarkImportInsert extends HTMLElement {\n\n\tfrom: IWedlet;\n\twdlBefore: IWedlet;\n\twdlAfter: IWedlet;\n\toffset: number;\n\n\timporter: ISkImporter | ISkImporter[];\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.ondragenter = this.onDragEnter;\n\t\tthis.ondragleave = this.onDragLeave;\n\t\tthis.ondragover = this.onDragOver;\n\t\tthis.ondrop = this.onDrop;\n\t\tthis.onkeydown = this.onKeyDown;\n\t\tthis.onblur = this.onBlur;\n\t\tthis.onclick = this.onClick;\n\t\tthis.tabIndex = 0;\n\t}\n\n\tsetClass(cls: string): this {\n\t\tif (cls) this.classList.add(cls);\n\t\treturn this;\n\t}\n\n\tplaceOn(from: IWedlet, importer: ISkImporter, parentRef: IElementWedlet, offset: number, before: IWedlet, after: IWedlet, orientHoriz?: boolean): this {\n\t\tthis.from = from;\n\t\tthis.wdlBefore = before;\n\t\tthis.wdlAfter = after;\n\t\tthis.offset = offset;\n\t\tthis.importer = importer;\n\t\tREG.findReg(parentRef).installSkin(orientHoriz ? 'box-mark-ins/horiz' : 'box-mark-ins', this.attachShadow(DOMSH.SHADOWDOM_INIT));\n\t\t(parentRef.wedlet as IParentWedlet).injectForeignChild(importer.importPos.similarTo, this, before, after);\n\t\treturn this;\n\t}\n\n\taddImporter(importer: ISkImporter) {\n\t\tif (!Array.isArray(this.importer)) this.importer = [this.importer, importer];\n\t\telse this.importer.push(importer);\n\t}\n\n\tonDragEnter(ev: DragEvent) {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tthis.setDropEffect(ev);\n\t\tDOM.addClass(this, \"over\");\n\t\t//console.log(\"MarkImportInsert.onDragEnter:::\", this.nextElementSibling || this.parentElement, this.importer);\n\t}\n\n\tonDragOver(ev: DragEvent) {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tthis.setDropEffect(ev);\n\t}\n\n\tprotected setDropEffect(ev: DragEvent) {\n\t\tconst insCtrl = (this.from.wedMgr.wedEditor as IWedEditorInsMgr)._insSession.ctrl;\n\t\tif (insCtrl && insCtrl.getDropEffect) {\n\t\t\tev.dataTransfer.dropEffect = insCtrl.getDropEffect(this, ev);\n\t\t} else {\n\t\t\tswitch (ev.dataTransfer.effectAllowed) {\n\t\t\tcase 'copy':\n\t\t\t\tev.dataTransfer.dropEffect = 'copy';\n\t\t\t\treturn;\n\t\t\tcase 'move':\n\t\t\t\tev.dataTransfer.dropEffect = 'move';\n\t\t\t\treturn;\n\t\t\tcase 'copyMove':\n\t\t\t\tif (ACTION.isCopyOverMove(ev)) {\n\t\t\t\t\tev.dataTransfer.dropEffect = 'copy';\n\t\t\t\t} else {\n\t\t\t\t\tev.dataTransfer.dropEffect = 'move';\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tev.dataTransfer.dropEffect = \"link\";\n\t\t}\n\t}\n\n\tonDragLeave(ev: DragEvent) {\n\t\tev.preventDefault();\n\t\t//ev.stopImmediatePropagation(); NON\n\t\tDOM.removeClass(this, \"over\");\n\t}\n\n\tonDrop(ev: DragEvent) {\n\t\tthis.onDragLeave(ev);\n\t\tthis.setDropEffect(ev);\n\t\tthis.execute(ev.dataTransfer, ev.dataTransfer.dropEffect as 'copy' | 'move' | 'link');\n\t}\n\n\tonKeyDown(ev: KeyboardEvent) {\n\t\tif (ev.key === 'Tab') {\n\t\t\tif (ev.shiftKey) findPreviousMark(this.from.wedMgr.wedEditor, this, ev);\n\t\t\telse findNextMark(this.from.wedMgr.wedEditor, this, ev);\n\t\t} else if (ev.key === 'ArrowDown') {\n\t\t\tev.preventDefault();\n\t\t\tev.stopImmediatePropagation();\n\t\t\tfindNextMark(this.from.wedMgr.wedEditor, this, ev);\n\t\t} else if (ev.key === 'ArrowUp') {\n\t\t\tev.preventDefault();\n\t\t\tev.stopImmediatePropagation();\n\t\t\tfindPreviousMark(this.from.wedMgr.wedEditor, this, ev);\n\t\t} else if (ev.key === 'Enter' || ev.key === ' ') {\n\t\t\tev.preventDefault();\n\t\t\tev.stopImmediatePropagation();\n\t\t\tthis.execute();\n\t\t}\n\t}\n\n\tonBlur(ev: FocusEvent) {\n\t\tif (!this._freezeBlur) (this.from.wedMgr.wedEditor as IWedEditorInsMgr).endInsertSession();\n\t\telse this._freezeBlur = false;\n\t}\n\n\t_freezeBlur: boolean;\n\n\tonClick(ev: Event): void {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tthis.execute();\n\t}\n\n\tasync execute(dataTransfer?: DataTransfer, dropEffect?: 'copy' | 'move' | 'link') {\n\t\tconst editor = this.from.wedMgr.wedEditor as IWedEditorInsMgr;\n\t\tif (Array.isArray(this.importer)) {\n\t\t\tconst actions = [];\n\t\t\tfor (const imp of this.importer) {\n\t\t\t\tif (dataTransfer && imp.completeDatasAtDrop) {\n\t\t\t\t\tif (await imp.completeDatasAtDrop(dataTransfer) === 'stop') continue;\n\t\t\t\t}\n\t\t\t\tactions.push(new Action().setLabel(imp.getLabel()).setExecute(() => {this.executeImporter(imp, dropEffect)}));\n\t\t\t}\n\t\t\tswitch (actions.length) {\n\t\t\tcase 0: {\n\t\t\t\tPOPUP.showNotifInfo(\"Import incompatible\", this);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase 1: {\n\t\t\t\treturn actions[0].execute(null);\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tconst action = await POPUP.showPopupActions({actions}, {posFrom: this, fromY: 'middle', targetY: 'middle'} as ORelativePosition, editor);\n\t\t\t\tif (!action) editor.endInsertSession();\n\t\t\t}\n\t\t} else {\n\t\t\tif (dataTransfer && this.importer.completeDatasAtDrop) {\n\t\t\t\tif (await this.importer.completeDatasAtDrop(dataTransfer) === 'stop') {\n\t\t\t\t\tPOPUP.showNotifInfo(\"Import incompatible\", this);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.executeImporter(this.importer, dropEffect);\n\t\t}\n\t}\n\n\tasync executeImporter(imp: ISkImporter, action: 'copy' | 'move' | 'link') {\n\t\t//console.log(\"executeImporter:::\", imp);\n\t\tconst wedMgr = this.from.wedMgr;\n\t\tconst insCtrl = (wedMgr.wedEditor as IWedEditorInsMgr)._insSession.ctrl;\n\t\tconst batch = wedMgr.docHolder.newBatch();\n\t\ttry {\n\t\t\tif (imp.needAsyncBuild) {\n\t\t\t\tif (await imp.buildContentToImport(wedMgr.wedEditor) === 'stop') return;\n\t\t\t}\n\t\t\timp.doImport(this.buildImportContext(), batch);\n\t\t} finally {\n\t\t\t(wedMgr.wedEditor as IWedEditorInsMgr).endInsertSession();\n\t\t}\n\t\tif (insCtrl && insCtrl.finalizeInsertion) insCtrl.finalizeInsertion(batch, action);\n\t\telse batch.doBatch();\n\t}\n\n\tprotected buildImportContext(): OSkPasteContext {\n\t\tif (this.from.isVirtual()) {\n\t\t\treturn {sel: {start: XA.append(this.from.wedAnchor, 0)}, virtualPath: WEDLET.buildVirtualPath(this.from)}\n\t\t} else {\n\t\t\treturn {sel: {start: XA.append(this.from.wedAnchor, this.offset)}};\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('box-mark-ins', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: block;\n\t\tposition: relative;\n\t\tz-index: 900;\n\t\twidth: 38px;\n\t\theight: 16px;\n\t\tmargin-top: -8px;\n\t\tmargin-bottom: -8px;\n\t\tbox-sizing: border-box;\n\t\tbackground-color: var(--edit-drop-color);\n\t\tbackground-clip: padding-box;\n\t\tborder: 6px solid transparent;\n\t\tborder-radius: 12px;\n\t}\n\n\t:host(.small) {\n\t\tborder: 7px solid transparent;\n\t}\n\n\t:host(.over),\n\t:host(:hover),\n\t:host(:focus) {\n\t\twidth: 48px;\n\t\theight: 20px;\n\t\tmargin-top: -10px;\n\t\tmargin-bottom: -10px;\n\t\tborder: 7px solid var(--edit-drop-bgcolor);\n\t\tborder-radius: 14px;\n\t\tmargin-inline-start: -1px;\n\t}\n\n\t:host(:focus) {\n\t\toutline: var(--focus-outline);\n\t}\n`);\n\nREG.reg.registerSkin('box-mark-ins/horiz', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: block;\n\t\tposition: relative;\n\t\tz-index: 900;\n\t\twidth: 12px;\n\t\theight: 2em;\n\t\tmargin-inline-start: -6px;\n\t\tmargin-inline-end: -6px;\n\t\tbox-sizing: border-box;\n\t\tbackground-color: var(--edit-drop-color);\n\t\tbackground-clip: padding-box;\n\t\tborder: 4px solid transparent;\n\t\tborder-bottom-width: .3em;\n\t\tborder-top-width: .3em;\n\t\tborder-radius: 8px;\n\t}\n\n\t:host(.over),\n\t:host(:hover),\n\t:host(:focus) {\n\t\twidth: 16px;\n\t\tmargin-inline-start: -8px;\n\t\tmargin-inline-end: -8px;\n\t\tborder: 5px solid var(--edit-drop-bgcolor);\n\t\tborder-bottom-width: .3em;\n\t\tborder-top-width: .3em;\n\t\tborder-radius: 10px;\n\t\tmargin-block-start: -1px;\n\t}\n\n\t:host(:focus) {\n\t\toutline: var(--focus-outline);\n\t}\n`);\n\ncustomElements.define('box-mark-ins', MarkImportInsert);\n\nfunction IS_MarkImportInsert(n: Node): n is MarkImportInsert {return n instanceof MarkImportInsert}\n\nfunction findPreviousMark(wedEditor: IWedEditor, mark: MarkImportInsert, ev: KeyboardEvent) {\n\tconst prev = DOMSH.findFlatPrevious(mark || wedEditor.rootNode, wedEditor.rootNode, IS_MarkImportInsert);\n\tif (prev) {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tmark._freezeBlur = true;\n\t\tprev.focus();\n\t} else if (wedEditor.scrollContainer) {\n\t\twedEditor.scrollContainer.scrollBy({top: -wedEditor.scrollContainer.clientHeight * .8, behavior: \"smooth\"});\n\t}\n}\n\nfunction findNextMark(wedEditor: IWedEditor, mark?: MarkImportInsert, ev?: KeyboardEvent) {\n\tconst next = DOMSH.findFlatNext(mark || wedEditor.rootNode, wedEditor.rootNode, IS_MarkImportInsert);\n\t//console.log(\"findNextMark::::::\", next);\n\tif (next) {\n\t\tif (ev) {\n\t\t\tev.preventDefault();\n\t\t\tev.stopImmediatePropagation();\n\t\t}\n\t\tif (mark) mark._freezeBlur = true;\n\t\tnext.focus();\n\t} else if (wedEditor.scrollContainer) {\n\t\t//Plus de suivants, on opère un scroll correspondant à un changement de pages pour découvrir de nouvelles marks\n\t\twedEditor.scrollContainer.scrollBy({top: wedEditor.scrollContainer.clientHeight * .8, behavior: \"smooth\"});\n\t}\n}\n\nfunction findVisibleMark(wedEditor: IWedEditor) {\n\tconst top = wedEditor.scrollContainer ? wedEditor.scrollContainer.scrollTop : 0;\n\tlet next = DOMSH.findFlatNext(wedEditor.rootNode, wedEditor.rootNode, IS_MarkImportInsert);\n\twhile (next) {\n\t\tif (next.offsetTop + next.offsetHeight > top) {\n\t\t\tnext.focus();\n\t\t\treturn;\n\t\t}\n\t\tnext = DOMSH.findFlatNext(next, wedEditor.rootNode, IS_MarkImportInsert);\n\t}\n}\n\n/**\n * Marque de remplacement du contenu\n */\nexport class MarkImportReplace extends MarkImportInsert {\n\tplaceOn(from: IWedlet, importer: ISkImporter, ref: HTMLElement): this {\n\t\tthis.from = from;\n\t\tthis.importer = importer;\n\t\tREG.findReg(ref).installSkin(this.localName, this.attachShadow(DOMSH.SHADOWDOM_INIT));\n\t\tref.style.setProperty('position', 'relative');\n\t\t(ref.shadowRoot || ref).appendChild(this);\n\t\treturn this;\n\t}\n\n\tprotected buildImportContext(): OSkPasteContext {\n\t\tconst xa = this.from.wedAnchor;\n\t\tif (this.from.isVirtual()) {\n\t\t\treturn {sel: {start: xa}, virtualPath: WEDLET.buildVirtualPath(this.from.wedParent)}\n\t\t} else if (XA.isAttribute(xa)) {\n\t\t\treturn {sel: {start: xa}};\n\t\t} else {\n\t\t\treturn {sel: XA.newRangeAround(xa)}\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('box-mark-rep', 1, /* language=CSS */ `\n\t:host {\n\t\tbackground-color: var(--edit-drop-bgcolor);\n\t\tposition: absolute;\n\t\tz-index: 900;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t}\n\n\t:host(.over),\n\t:host(:hover),\n\t:host(:focus) {\n\t\tbackground-color: var(--edit-drop-bgcolor);\n\t\toutline: 2px solid var(--edit-drop-color);\n\t}\n\n\t:host(:focus) {\n\t\toutline: var(--focus-outline);\n\t}\n`);\n\ncustomElements.define('box-mark-rep', MarkImportReplace);\n\n\n/**\n * Marque de remplacement d'un container\n */\nexport class MarkImportReplaceCtn extends MarkImportReplace {\n\tplaceOn(from: IWedlet, importer: ISkImporter, ref: HTMLElement): this {\n\t\tthis.from = from;\n\t\tthis.importer = importer;\n\t\tREG.findReg(ref).installSkin(this.localName, this.attachShadow(DOMSH.SHADOWDOM_INIT));\n\t\tref.style.setProperty('position', 'relative');\n\t\t(ref.shadowRoot || ref).appendChild(this);\n\t\treturn this;\n\t}\n\n\tonDragEnter(ev: DragEvent) {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tthis.setDropEffect(ev);\n\t\tif (DOM.addClass(this, \"over\")) {\n\t\t\tthis.parentNode.insertBefore(<div style=\"pointer-events: none; background-color: var(--edit-drop-bgcolor); position: absolute;\ttop:0; bottom:0; left:0; right:0; z-index: 1;\"/>, this);\n\t\t}\n\t\t//console.log(\"MarkImportReplaceCtn.onDragEnter:::\", this.parentElement || DOMSH.findHost(this), this.importer);\n\t}\n\n\tonDragLeave(ev: DragEvent) {\n\t\tev.preventDefault();\n\t\t//ev.stopImmediatePropagation(); NON\n\t\tif (DOM.removeClass(this, \"over\")) {\n\t\t\tthis.previousElementSibling.remove();\n\t\t}\n\t}\n\n}\n\nREG.reg.registerSkin('box-mark-rep-ctn', 1, /* language=CSS */ `\n\t:host {\n\t\tbackground: linear-gradient(to right, var(--edit-drop-bgcolor), var(--edit-drop-bgcolor), transparent);\n\t\tposition: absolute;\n\t\tz-index: 900;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 15px;\n\t}\n\n\t:host(:hover),\n\t:host(:focus) {\n\t\tbackground: linear-gradient(to right, var(--edit-drop-bgcolor), var(--edit-drop-bgcolor), transparent);\n\t\twidth: 30px;\n\t}\n\n\t:host(:focus) {\n\t\toutline: var(--focus-outline);\n\t}\n`);\n\ncustomElements.define('box-mark-rep-ctn', MarkImportReplaceCtn);\n\n/** Affichage d'un popup des structs insérables dans l'écran courant. */\nclass ListInsBoxStruct extends Action<IWedEditorBoxSel & IWedEditorInsMgr> {\n\n\tconstructor() {\n\t\tsuper(\"insTag\");\n\t\tthis._label = \"Insérer...\";\n\t\tthis._icon = \"/@skin@/edit/wed/insertTag.svg\";\n\t}\n\n\tisVisible(ctx: IWedEditorBoxSel & IWedEditorInsMgr): boolean {\n\t\tif (!ctx.boxSelMgr || (ctx.config as OWedEditorBoxConfig).disableBoxSelection) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisEnabled(ctx: IWedEditorBoxSel & IWedEditorInsMgr): boolean {\n\t\tif (ctx.wedMgr.readOnly) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\texecute(ctx: IWedEditorBoxSel & IWedEditorInsMgr, ev?: Event): any | \"noPreventDefault\" {\n\t\t//console.log(\"InsBoxStruct!!!!!!!!!\");\n\t\tctx.boxSelMgr.clearSel();\n\t\tconst structs = new Set<ISkStructDef>(); //XXX Map<ISkStructDef, ParentWedlet> pour construction graphique plus riche de la struct, dédoublonnage du label... ?\n\t\tconst virtualParents = new Set(); // cache des parents virtuels déjà traités.\n\t\tWEDLET.findWedletInArea((wedletArea: IWedletArea): 'next' | 'nextSibling' | 'stop' => {\n\t\t\tconst w = wedletArea.wedlet;\n\t\t\tconst wParent = w.wedParent;\n\t\t\tif (wParent && isWedletBoxSelection(w) && isWedletSingleElt(w) && WEDLET.isWritableWedlet(wParent) && !(wParent as IWedletSingleElt).isCollapsed) {\n\t\t\t\t//On limite la recherche des structs insérables aux frères des wedlets isWedletBoxSelection()\n\t\t\t\t// pour sauter les niveaux de profondeur du flux XML qui sont graphiquement masqués et non manipulables.\n\t\t\t\tconst xaPart = w.xaPart;\n\t\t\t\tconst wedMgr = ctx.wedMgr;\n\t\t\t\tif (wParent.isVirtual()) {\n\t\t\t\t\t//on est dans un contexte virtuel\n\t\t\t\t\tif (!virtualParents.has(wParent)) {\n\t\t\t\t\t\tvirtualParents.add(wParent);\n\t\t\t\t\t\t//parent pas encore évalué, et un fils virtuel est bien isWedletBoxSelection, c'est donc un niveau d'insertion\n\t\t\t\t\t\tconst struct = wedMgr.docHolder.getStruct(wParent.wedAnchor, WEDLET.buildVirtualPath(wParent));\n\t\t\t\t\t\tif (struct instanceof SkRuleNode) {\n\t\t\t\t\t\t\tconst subStructs = struct.contentRule.findRules((r) => r.structType == ENodeType.element);\n\t\t\t\t\t\t\tif (subStructs) {\n\t\t\t\t\t\t\t\tWEDLET.cleanupStructList(subStructs, WEDLET.findVirtualWedletsAfter(w.element, WEDLET.findVirtualWedletsBefore(w.element, true)), true);\n\t\t\t\t\t\t\t\t//console.log(\"getInsertableStructs inVirtuals:::\", wParent, subStructs);\n\t\t\t\t\t\t\t\tfor (const s of subStructs) if (s) structs.add(s);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (w.isVirtual()) {\n\t\t\t\t\t\t//wedlet virtuel\n\t\t\t\t\t\tif (w.model.nodeType === ENodeType.element) {\n\t\t\t\t\t\t\tconst [structsBefore] = wedMgr.docHolder.getInsertableStructs(wParent.wedAnchor, w.getVirtualXaPart() as number);\n\t\t\t\t\t\t\tWEDLET.cleanupStructList(structsBefore, WEDLET.findVirtualWedletsAfter(w.element, WEDLET.findVirtualWedletsBefore(w.element, true)), true);\n\t\t\t\t\t\t\t//console.log(\"getInsertableStructs:::\", structsBefore);\n\t\t\t\t\t\t\tif (structsBefore) for (const s of structsBefore) if (s?.structType === ENodeType.element) structs.add(s);\n\t\t\t\t\t\t\tif (w.model.config.hasAttribute(\"insertUiForChildren\")) {\n\t\t\t\t\t\t\t\tconst struct = wedMgr.docHolder.getStruct(w.wedAnchor, WEDLET.buildVirtualPath(w)) as SkRuleNode;\n\t\t\t\t\t\t\t\t//todo suppr virtuals affichés, restrictions au même childrenElt comme ci-après ?\n\t\t\t\t\t\t\t\tstruct?.contentRule?.findRules((r) => r instanceof SkRuleNode)?.forEach((s) => {if (s?.structType === ENodeType.element) structs.add(s)});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof xaPart === 'number') {\n\t\t\t\t\t\t//Ce n'est pas un attribut\n\t\t\t\t\t\t//FIXME PERF double test de xaPart et xaPart + 1 pour chaque frère avec son frère suivant.\n\t\t\t\t\t\tconst [structsBefore, structsAfter, structsReplace] = wedMgr.docHolder.getInsertableStructs(wParent.wedAnchor, xaPart, xaPart + 1, false, xaPart);\n\t\t\t\t\t\tWEDLET.cleanupStructList(structsBefore, WEDLET.findVirtualWedletsBefore(w.element), true);\n\t\t\t\t\t\tWEDLET.cleanupStructList(structsAfter, WEDLET.findVirtualWedletsAfter(w.element), true);\n\t\t\t\t\t\tconst childrenElt = w.element.fromChildrenElt;\n\n\t\t\t\t\t\t//console.log(\"getInsertableStructs:::\", structsBefore, structsAfter, structsReplace);\n\t\t\t\t\t\tfunction appendStructs(structList: ISkStructDef[]) {\n\t\t\t\t\t\t\tif (structList) for (const s of structList) if (s?.structType === ENodeType.element) {\n\t\t\t\t\t\t\t\tif (!childrenElt || !childrenElt.wedMatchStrict || childrenElt.wedMatcher.matchStruct(s)) structs.add(s);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tappendStructs(structsBefore);\n\t\t\t\t\t\tappendStructs(structsReplace);\n\t\t\t\t\t\tappendStructs(structsAfter);\n\n\t\t\t\t\t\tif (w.model.config.hasAttribute(\"insertUiForChildren\")) {\n\t\t\t\t\t\t\tconst subStructs = wedMgr.docHolder.getInsertableStructsAll('children', w.wedAnchor);\n\t\t\t\t\t\t\tif (WEDLET.cleanupStructList(subStructs[0], WEDLET.findAllChildrenVirtualWedlets(w.element)) > 0) appendStructs(subStructs[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 'next';\n\t\t}, ctx.wedMgr.rootWedlet, ctx.rootNode.getBoundingClientRect() as DOMRectReadOnly, WEDLET.VISITOPTIONS_includeVirtuals);\n\t\t//console.log(\"ListInsBoxStruct:::\", structs);\n\t\tif (structs.size > 0) {\n\t\t\tconst rootList = <div id=\"list\"/> as HTMLElement;\n\t\t\tconst structsAdded = [] as SkRuleElt[];\n\t\t\tlist:for (const s of structs) {\n\t\t\t\tfor (const other of structsAdded) if (other.isSameRoot(s as SkRuleElt)) continue list;\n\t\t\t\tstructsAdded.push(s as SkRuleElt);\n\t\t\t\trootList.appendChild(ActionBtn.buildButton(new InsertableStruct(s), ctx, 'custom'));\n\t\t\t}\n\n\t\t\tconst rootFilter = <div id=\"search\">\n\t\t\t\t<input type=\"search\" oninput={this.onSearchChange} onchange={this.onSearchChange} onkeydown={this.onSearchKeydown} onfocus={() => {ctx.endInsertSession()}}/>\n\t\t\t</div> as HTMLElement;\n\n\t\t\tconst root = <div>\n\t\t\t\t<ShadowJsx reg={ctx.wedMgr.reg} skin=\"ListInsBoxStruct\" skinOver=\"webzone:panel\">\n\t\t\t\t\t{rootFilter}\n\t\t\t\t\t{rootList}\n\t\t\t\t</ShadowJsx>\n\t\t\t</div>;\n\n\t\t\tconst popup = POPUP.showFloating(root, listInsPopupPos(ctx.rootNode), ctx);\n\n\t\t\troot.addEventListener('focusout', function (this: HTMLDivElement, ev: FocusEvent) {\n\t\t\t\tif (!ev.relatedTarget || !DOM.isAncestor(this, ev.relatedTarget as Node)) {\n\t\t\t\t\tctx.endInsertSession();\n\t\t\t\t\tpopup.close();\n\t\t\t\t}\n\t\t\t});\n\t\t\trootList.addEventListener('focusin', function (this: HTMLDivElement, ev: FocusEvent) {\n\t\t\t\tconst target = ev.target;\n\t\t\t\tif (IS_ActionableEnabled(target)) (target.action as InsertableStruct).startSession(target.actionContext, false);\n\t\t\t});\n\t\t\trootList.addEventListener('pointerover', function (this: IPopupable, ev: MouseEvent) {\n\t\t\t\tconst target = ev.target;\n\t\t\t\tif (IS_ActionableEnabled(target)) target.focus();\n\t\t\t});\n\t\t\trootList.addEventListener('keydown', function (this: IPopupable, ev: KeyboardEvent) {\n\t\t\t\tlet next: HTMLElement;\n\t\t\t\tif (ev.key === 'ArrowDown') {\n\t\t\t\t\tnext = DOM.findNextSibling(ev.target as Element, IS_ActionableEnabled);\n\t\t\t\t} else if (ev.key === 'ArrowUp') {\n\t\t\t\t\tnext = DOM.findPreviousSibling(ev.target as Element, IS_ActionableEnabled);\n\t\t\t\t} else return;\n\t\t\t\tconst target = ev.target;\n\t\t\t\tif (next) {\n\t\t\t\t\tnext.focus();\n\t\t\t\t\tev.preventDefault();\n\t\t\t\t\tev.stopImmediatePropagation();\n\t\t\t\t}\n\t\t\t});\n\t\t\tDOM.findNext(root.shadowRoot, null, DOM.IS_focusable)?.focus();\n\t\t} else {\n\t\t\tPOPUP.showFloating(<div style=\"padding:.5em; font-style:italic;\">\n\t\t\t\t<ShadowJsx reg={ctx.wedMgr.reg} skin=\"webzone:panel\">\n\t\t\t\t\t{\"Aucune insertion possible\"}\n\t\t\t\t</ShadowJsx>\n\t\t\t</div>, listInsPopupPos(ctx.rootNode), ctx, {closeOnBlur: true});\n\t\t}\n\t}\n\n\tprotected onSearchChange(this: HTMLInputElement, ev: Event) {\n\t\tconst value = this.value.trim();\n\t\tconst IS_actionBtn = (n: Node): n is ActionBtn<any> => n instanceof ActionBtn;\n\t\tlet btn = DOM.findFirstChild(DOMSH.findDocumentOrShadowRoot(this).getElementById(\"list\"), IS_actionBtn);\n\t\tif (value) {\n\t\t\tconst regexp = new RegExp(LANG.escape4RegexpFuzzy(value), 'i');\n\t\t\twhile (btn != null) {\n\t\t\t\tbtn.hidden = !regexp.test(btn.label);\n\t\t\t\tbtn = DOM.findNextSibling(btn, IS_actionBtn);\n\t\t\t}\n\t\t} else {\n\t\t\twhile (btn != null) {\n\t\t\t\tbtn.hidden = false;\n\t\t\t\tbtn = DOM.findNextSibling(btn, IS_actionBtn);\n\t\t\t}\n\t\t}\n\t}\n\n\tonSearchKeydown(this: HTMLInputElement, ev: KeyboardEvent) {\n\t\tif (ev.key === \"ArrowDown\") {\n\t\t\tDOM.findFirstChild(DOMSH.findDocumentOrShadowRoot(this).getElementById(\"list\"), DOM.IS_focusable)?.focus();\n\t\t}\n\t}\n}\n\nfunction listInsPopupPos(posFrom: HTMLElement): ORelativePosition {\n\treturn {\n\t\tposFrom: posFrom,\n\t\tfromX: \"start\",\n\t\ttargetX: \"start\",\n\t\tmarginX: 200,\n\t\ttoleranceX: 50,\n\t\tfromY: \"middle\",\n\t\ttargetY: \"middle\",\n\t\ttoleranceY: 10000,\n\t\tnotAvailableSpace: {\n\t\t\tposFrom: posFrom,\n\t\t\tfromX: \"end\",\n\t\t\ttargetX: \"start\",\n\t\t\ttoleranceX: 10000,\n\t\t\tfromY: \"middle\",\n\t\t\ttargetY: \"middle\",\n\t\t\ttoleranceY: 10000,\n\t\t}\n\t};\n}\n\nREG.reg.registerSkin('ListInsBoxStruct', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t#search {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tbackground: 0.1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg) var(--form-search-bgcolor);\n\t\tpadding-inline-start: 1.2em;\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\tinput {\n\t\tflex: 1;\n\t\tpadding: 2px;\n\t\tbackground: var(--form-search-bgcolor);\n\t\tcolor: var(--form-color);\n\t\tborder: none;\n\t\tfont-size: inherit;\n\t}\n\n\t:focus {\n\t\toutline: var(--edit-input-focus);\n\t}\n\n\t#list {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\tc-action {\n\t\talign-items: start;\n\t\ttext-align: start;\n\t\tpadding: 1px 2px;\n\t}\n\n\tc-action:focus {\n\t\tbackground-color: var(--row-inSel-bgcolor);\n\t\toutline: none;\n\t}\n`);\n\n/**\n * Définition d'une structure insérable.\n * Utilisé dans le contexte de ListInsBoxStruct.\n */\nclass InsertableStruct extends Action<IWedEditorBoxSel & IWedEditorInsMgr> {\n\tconstructor(public struct: ISkStructDef) {\n\t\tsuper(struct.structName);\n\t\tthis._label = struct.structLabel;\n\t}\n\n\texecute(ctx: IWedEditorBoxSel & IWedEditorInsMgr, ev?: Event): any | \"noPreventDefault\" {\n\t\tconst isDrag = ev instanceof DragEvent;\n\t\tif (!isDrag) {\n\t\t\tconst focus = DOMSH.findDeepActiveElement();\n\t\t\tif (focus instanceof HTMLElement) focus.blur();\n\t\t\tPOPUP.findPopupableParent(ev.target as Element).close();\n\t\t}\n\t\tthis.startSession(ctx, isDrag);\n\t\tsetTimeout(() => {findVisibleMark(ctx)}, 200);\n\t}\n\n\tstartSession(ctx: IWedEditorBoxSel & IWedEditorInsMgr, byDrag: boolean) {\n\t\tconst ct = [] as IJmlSet;\n\t\tconst root = DOM.newDomDoc().createElementNS(DOM.SCCORE_NS, DOM.SCFRAGMENT_TAG);\n\t\tthis.struct.createContent(ct);\n\t\tctx.startInsertSession({\n\t\t\toriginalDom: JML.jmlToDom(ct, root),\n\t\t\temptyStruct: true\n\t\t}, byDrag);\n\t}\n\n}\n"]}