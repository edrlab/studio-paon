{"version":3,"sources":["/@back@/wsp/views/task/taskFields.tsx"],"names":["BaseElement","BaseElementAsync","MsgOver","REG","DOM","ENodeType","JSX","DOMSH","AddComment","ETaskStage","ExecTrans","LIFECYCLE","PutUserResp","RemoveUserResp","SetDeadline","SetDescription","SetScheduleDt","SetTitle","TASK","WedEditorBox","ptrItemTagsDefined","WspDataTransferWedAnalyzer","boxTagsDefined","txtTagsDefined","WED","DocHolder","Button","ButtonActions","SrcExecTransition","InfoSrcUriMoved","POPUP","UserRef","EUserType","USER","EAnnotLevel","SRC","ERROR","TaskField","[object Object]","init","this","reg","findReg","config","setAttribute","field","_field","appendChild","createElement","itemType","env","longDesc","setTextContent","itTi","lc","getLcStateOrUnknown","lcSt","label","name","icon","iconUrl","setAttr","tkDeadline","toString","ct","taskContent","getScheduledDtFromContent","customElements","define","TaskFieldInput","fieldName","value","_input","dt","valueAsDate","getTime","valueTime","isDirty","originalValue","sr","_attach","localName","st","initStates","actTi","required","ti","type","currentStage","taskStage","timeToInputValue","scheduledDt","deadlinedDt","addEventListener","onInputChange","taskEditBroker","addConsumer","info","InfoReqStateTask","forthcoming","isInError","permissive","states","InfoReqFillUpdates","updates","push","InfoChangeTask","refresh","ev","dispatchInfo","hidden","hideContextField","setAttrBool","editable","writePerms","hasPerm","val","Date","parseInt","toStr","n","getFullYear","getMonth","getDate","e","registerSkin","TaskFieldLc","selectedTrans","trans","targetState","shortDescs","srcView","emitter","code","isNewSrcUri","srcUri","actions","getCreateTransitions","map","tr","execTr","groupOrder","getLcTransitionsGroupOrder","find","a","listAllTransitionActions","skinOver","super","_initialize","_refresh","disabled","ctx","TaskFieldUsers","resp","currentUsers","originalUsers","size","u","has","count","shadowRoot","querySelectorAll","length","isCardMulti","isRequired","respConf","RegExp","test","currentLcSt","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","getResp","userCard","getUsersFromContent","ctn","id","msg","accounts","resps","Set","users","universe","useUsers","getUserSet","Array","from","sort","sortUsers","Ã®","nickOrAccount","class","onclick","onRemUser","title","onAddUsers","firstElementChild","onSelectUser","u1","u2","getPrimaryName","localeCompare","user","getElementById","next","findFirstChild","IS_user","findNextSibling","insertBefore","lastElementChild","stopImmediatePropagation","me","findHost","userRef","previousElementSibling","delete","parentElement","remove","UserSelector","import","userSelector","initialize","userGrid","usersSrv","grid","selType","filterGroups","_a","usersSelection","restrictFromGroups","filterType","_b","userType","group","_c","filterTypeInputVisibility","selectAndCloseOnDblClick","showMenuFromEvent","initWidth","onNextClose","account","add","insertUser","clear","querySelector","elt","item","setCustomMsg","IS_element","classList","contains","TaskXmlField","house","document","documentElement","_initedAsDirty","wsp","wspMetaUi","getItemType","itModel","dataEditor","getEditor","editorKey","Error","editorConfig","Object","assign","wedMgrConfig","fetchContentThreshold","dataTransferAnalyzer","SINGLETON","view","initReg","createSubReg","overrideConfigs","addAsyncLib","mainEndP","getWed","mainWed","loadWedModel","then","wed","wedModel","readOnlyCauses","hideDiffBar","withoutScrolls","hideCommonBar","hideErrBar","hideUnknownBar","disableBoxSelection","disableVirtuals","hideStackBar","doc","schema","getDesriptionSchema","desc","parseDomValid","originalDesc","getDescriptionFromContent","newDomDoc","importNode","createElementNS","TASK_NS","TAG_setDescription","getCommentSchema","cmt","TAG_addComment","wspServer","wspsLive","newLocalHouse","initialDoc","buildOptions","genAnnots","autoMutate","autoComplete","autoNormXml","autoNormChars","autoCleanup","initFromDocHolder","listeners","on","console","log","closeEditor","connectedCallback","schemaDom","getAllAnnots","level","weight","error","ser","getDocumentForSave","isCommentEmpty","isEmpty","wedMgr","rootWedlet","visitWedletChildren","Infinity","w","model","nodeName","nodeType","element","removeLocalHouse","killEditor","parentNode","closed","visitor","options","Promise","resolve","undefined","TaskSaveBtn","setDefaultBtn","onClick","state","setHidden","setNeedValid","showNotifWarning","req","setStandardMsg","showMsgOver","waitFor","saveTask","srcRef","resetMainView","infoBroker","report","TaskCancelBtn","confirm","okLbl","redrawMainView","TaskDeleteBtn","deleteTask","srcId","uiContext","TaskExecTransBtn","getLcTransition","transition","buildInitFromAtts","getAttribute","noConfirm","isVisible","isEnabled","_state"],"mappings":"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","sourcesContent":["import {BaseElement, BaseElementAsync, Label, MsgLabel, MsgOver, OSkinableInit} from \"back/commons/basis\";\nimport {ITaskUiEnv} from \"back/wsp/views/itemMain\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {IView, IViewContainer, OViewVisitOptions} from \"lib/commons/views\";\nimport {DOM, ENodeType, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {AddComment, ETaskStage, ExecTrans, IUpdateTask, JTaskStates, LIFECYCLE, PutUserResp, RemoveUserResp, SetDeadline, SetDescription, SetScheduleDt, SetTitle, TASK} from \"lib/wsp/lcTask\";\nimport {OWedEditorBoxConfig, WedEditorBox} from \"back/edit/wed/wedEditorBox\";\nimport {OWedManagerConfig} from \"back/edit/wed/wedEditor\";\nimport {ptrItemTagsDefined, WspDataTransferWedAnalyzer} from \"back/wsp/widgets/wed/ptrItem\";\nimport {boxTagsDefined} from \"back/edit/wed/wedlets/box/boxTags\";\nimport {txtTagsDefined} from \"back/edit/wed/wedlets/txt/txt\";\nimport {WED} from \"back/edit/wed/wedCore\";\nimport {DocHolder} from \"lib/edit/docHolder\";\nimport {IDatasResp, ItemTypeTask} from \"lib/wsp/wspMetaUi\";\nimport {Button, ButtonActions, OButtonActionsInit, OButtonInit} from \"back/commons/widgets/buttons\";\nimport {SrcExecTransition} from \"back/wsp/actions/lcTaskActions\";\nimport {InfoSrcUriMoved, IShortDescCtx} from \"lib/wsp/item\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {OWedEditorTxtConfig} from \"back/edit/wed/features/txtSel\";\nimport {IInfo, IInfoConsumer, IInfoProducer} from \"lib/commons/infos\";\nimport {Schema} from \"lib/edit/schema/schema\";\nimport {OUserRefInit, UserRef} from \"back/core/widgets/userRef\";\nimport {UserSelector} from \"back/core/dialogs/userSelector\";\nimport {EUserType, JUser, USER} from \"lib/core/user\";\nimport {EAnnotLevel} from \"lib/edit/schema/schemaAnnots\";\nimport {IChildWedlet, IParentWedlet} from \"back/edit/wed/wedlets/wedlet\";\nimport {JSrcFields, SRC} from \"lib/wsp/src\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {IWspXmlHouse} from \"lib/wsp/wspsLive\";\nimport {OWedEditorDiffBarConfig} from \"back/edit/wed/features/diffBar\";\n\n/**\n * Affichage des champs simples des tasks en lecture seule\n */\nexport interface TaskField extends BaseElement {\n\tinitialize(init: OTaskFieldInit): this;\n}\n\nexport interface OTaskFieldInit extends OSkinableInit {\n\treg?: IReg<ITaskUiEnv>\n\tfield: 'actTi' | 'tkDeadline' | 'scheduledDt' | 'lcSt'\n}\n\nexport class TaskField extends BaseElement implements IView {\n\treg: IReg<ITaskUiEnv>;\n\n\tconfig: OTaskFieldInit;\n\n\t_field: HTMLElement;\n\n\t_initialize(init: OTaskFieldInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.config = init;\n\t\tthis.setAttribute(\"field\", this.config.field);\n\t\tif (this.config.field === \"actTi\") {\n\t\t\t//na\n\t\t} else if (this.config.field === \"lcSt\") {\n\t\t\tthis._field = this.appendChild(<c-label/>); //Ã®={{noShadow:true} as OLabelableConfigs}\n\t\t} else {\n\t\t\t//tkDeadline et scheduledDt\n\t\t\tthis._field = this.appendChild(<input/>);\n\t\t}\n\t}\n\n\tprotected _refresh() {\n\t\tconst itemType = this.reg.env.itemType;\n\t\tconst longDesc = this.reg.env.longDesc;\n\t\t//console.log(\"longDesc:::::\", longDesc);\n\t\tswitch (this.config.field) {\n\t\tcase 'actTi':\n\t\t\tDOM.setTextContent(this, longDesc.itTi || \"\");\n\t\t\tbreak;\n\t\tcase 'lcSt':\n\t\t\tconst lc = itemType.getLcStateOrUnknown(longDesc.lcSt);\n\t\t\t(this._field as Label).label = lc.name;\n\t\t\t(this._field as Label).icon = lc.iconUrl;\n\t\t\tbreak;\n\t\tcase 'tkDeadline':\n\t\t\tDOM.setAttr(this._field, \"value\", longDesc.tkDeadline.toString());\n\t\t\tbreak;\n\t\tcase 'scheduledDt':\n\t\t\tconst ct = this.reg.env.taskContent;\n\t\t\tDOM.setAttr(this._field, \"value\", TASK.getScheduledDtFromContent(ct));\n\t\t\tbreak;\n\t\t}\n\t}\n\n}\n\n//REG.reg.registerSkin(\"wsp-task-field\", 1, /* language=CSS */ ``);\n\ncustomElements.define(\"wsp-task-field\", TaskField);\n\n\n/**\n * Affichage des champs simples des tasks en mode Ã©ditable.\n */\nexport interface TaskFieldInput extends BaseElement {\n\tinitialize(init: OTaskFieldInit): this;\n}\n\nexport interface OTaskFieldInputInit extends OSkinableInit {\n\treg?: IReg<ITaskUiEnv>\n\tfield: 'actTi' | 'tkDeadline' | 'scheduledDt'\n\t/** true par dÃ©faut */\n\teditable?: boolean\n\t/** Si true, accepte que le champ soit en erreur Ã  l'enregistrement.\n\t * false par dÃ©faut */\n\tpermissive?: boolean\n\twritePerms?: string | string[]\n}\n\nexport class TaskFieldInput extends BaseElement implements ITaskEditableField, IInfoConsumer {\n\treg: IReg<ITaskUiEnv>;\n\n\tget fieldName() {return this.config.field}\n\n\tget value(): string {\n\t\tif (this.config.field === 'actTi') return this._input.value;\n\t\tconst dt = this._input.valueAsDate;\n\t\treturn dt ? dt.getTime().toString() : \"\";\n\t}\n\n\tget valueTime(): number {\n\t\tif (this.config.field === 'actTi') return 0;\n\t\tconst dt = this._input.valueAsDate;\n\t\treturn dt ? dt.getTime() : 0;\n\t}\n\n\toriginalValue: string;\n\n\tget isDirty(): boolean {return this.originalValue !== this.value}\n\n\tconfig: OTaskFieldInputInit;\n\n\t_input: HTMLInputElement;\n\n\tcurrentStage?: ETaskStage;\n\n\t_initialize(init: OTaskFieldInputInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tconst sr = this._attach(this.localName, init);\n\t\tthis.config = init;\n\t\tthis.setAttribute(\"field\", this.config.field);\n\t\tconst st = this.reg.env.initStates;\n\t\tif (this.config.field === \"actTi\") {\n\t\t\tthis.originalValue = this.reg.env.longDesc.actTi || \"\";\n\t\t\tthis._input = sr.appendChild(<input required/> as HTMLInputElement);\n\t\t\tif (st && st.ti != null) this._input.value = st.ti;\n\t\t\telse this._input.value = this.originalValue;\n\t\t} else {\n\t\t\t//tkDeadline et scheduledDt\n\t\t\tthis._input = sr.appendChild(<input type=\"date\"/> as HTMLInputElement);\n\t\t\tif (this.config.field === \"scheduledDt\") {\n\t\t\t\tthis.originalValue = TASK.getScheduledDtFromContent(this.reg.env.taskContent);\n\t\t\t\tthis._input.required = true;\n\t\t\t\tthis.currentStage = this.reg.env.itemType.getLcStateOrUnknown(this.reg.env.longDesc.lcSt).taskStage;\n\t\t\t\tthis._input.value = this.timeToInputValue(st && st.scheduledDt ? st && st.scheduledDt.toString() : this.originalValue);\n\t\t\t} else {\n\t\t\t\tconst longDesc = this.reg.env.longDesc;\n\t\t\t\tthis.originalValue = longDesc.tkDeadline > 0 ? longDesc.tkDeadline.toString() : \"\";\n\t\t\t\tthis._input.value = this.timeToInputValue(st && st.deadlinedDt ? st && st.deadlinedDt.toString() : this.originalValue);\n\t\t\t}\n\t\t}\n\t\tthis.addEventListener(\"input\", this.onInputChange);\n\t\tthis.reg.env.taskEditBroker.addConsumer(this);\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoReqStateTask) {\n\t\t\tif (this.config.field === 'scheduledDt') {\n\t\t\t\tif (this.currentStage === ETaskStage.forthcoming) {\n\t\t\t\t\tif (!info.isDirty) info.isDirty = this.isDirty;\n\t\t\t\t\tif (!info.isInError && this._input.valueAsDate == null && !this.config.permissive) info.isInError = true;\n\t\t\t\t\tif (info.states && this.isDirty) info.states.scheduledDt = this.valueTime;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!info.isDirty) info.isDirty = this.isDirty;\n\t\t\t\tif (this.config.field === \"actTi\") {\n\t\t\t\t\tif (!info.isInError && !this.config.permissive) info.isInError = !this.value;\n\t\t\t\t\tif (info.states && this.isDirty) info.states.ti = this.value;\n\t\t\t\t} else {\n\t\t\t\t\tif (info.states && this.isDirty) info.states.deadlinedDt = this.valueTime;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (info instanceof InfoReqFillUpdates) {\n\t\t\tif (this.isDirty) {\n\t\t\t\tswitch (this.config.field) {\n\t\t\t\tcase 'actTi':\n\t\t\t\t\tinfo.updates.push(new SetTitle(this.value));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'tkDeadline':\n\t\t\t\t\tinfo.updates.push(new SetDeadline(this.value));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'scheduledDt':\n\t\t\t\t\tif (this.currentStage === ETaskStage.forthcoming) info.updates.push(new SetScheduleDt(this.value));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (info instanceof InfoChangeTask && info.field.fieldName === \"lcSt\" && this.config.field === \"scheduledDt\") {\n\t\t\tthis.currentStage = this.reg.env.itemType.getLcStateOrUnknown(info.field.value).taskStage;\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\tprotected onInputChange(ev: Event) {\n\t\tthis.reg.env.taskEditBroker.dispatchInfo(new InfoChangeTask(this), this);\n\t}\n\n\tprotected _refresh() {\n\t\tif (this.config.field === \"scheduledDt\") {\n\t\t\tconst hidden = this.currentStage !== ETaskStage.forthcoming;\n\t\t\tTASK.hideContextField(this, hidden);\n\t\t\tif (hidden) return;\n\t\t}\n\t\tDOM.setAttrBool(this._input, \"readonly\", this.config.editable === false || (this.config.writePerms && !this.reg.hasPerm(this.config.writePerms)));\n\t}\n\n\tprotected timeToInputValue(val: string): string {\n\t\tif (!val) return \"\";\n\t\ttry {\n\t\t\tconst dt = new Date(parseInt(val));\n\n\t\t\tfunction toStr(n: number) {return n < 10 ? \"0\" + n.toString() : n.toString()}\n\n\t\t\treturn `${dt.getFullYear()}-${toStr(dt.getMonth() + 1)}-${toStr(dt.getDate())}`;\n\t\t} catch (e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n}\n\nREG.reg.registerSkin(\"wsp-task-field-input\", 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t}\n\n\t:host([hidden]) {\n\t\tdisplay: none !important;\n\t}\n\n\tinput {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tbackground-color: var(--edit-bgcolor);\n\t\tcolor: var(--edit-color);\n\t\tborder: 1px solid var(--border-color);\n\t\tpadding: .3em;\n\t\ttext-overflow: ellipsis;\n\t\tfont-size: inherit;\n\t}\n\n\tinput[type=\"date\"] {\n\t\tflex: unset;\n\t}\n\n\tinput[readonly] {\n\t\tbackground-color: initial;\n\t\tborder: initial;\n\t}\n\n\tinput:invalid {\n\t\tborder: 1px solid var(--error-color);\n\t\tbox-shadow: 0 0 2px var(--error-color);\n\t}\n`);\n\ncustomElements.define(\"wsp-task-field-input\", TaskFieldInput);\n\n\n/** Affiche dans un formulaire d'Ã©dition de la tÃ¢che l'Ã©tat du cycle de vie courant et permet de choisir une transition dÃ©finissant le prochain Ã©tat. */\n\nexport interface OTaskFieldLcInit extends OButtonActionsInit<TaskFieldLc> {\n\treg?: IReg<ITaskUiEnv>\n\t/** true par dÃ©faut */\n\teditable?: boolean\n\t/** Si true, accepte que le champ soit en erreur Ã  l'enregistrement.\n\t * false par dÃ©faut */\n\tpermissive?: boolean\n\twritePerms?: string | string[]\n}\n\nexport class TaskFieldLc extends ButtonActions<TaskFieldLc> implements ITaskEditableField, IShortDescCtx, IInfoConsumer {\n\treg: IReg<ITaskUiEnv>;\n\n\tconfig: OTaskFieldLcInit;\n\n\tselectedTrans: SrcExecTransition<IShortDescCtx>;\n\n\tget fieldName() {return 'lcSt' as 'lcSt'}\n\n\tget value(): string {return this.selectedTrans ? this.selectedTrans.trans.targetState : this.reg.env.longDesc.lcSt}\n\n\tget label() {\n\t\treturn this.reg.env.itemType.getLcStateOrUnknown(this.value).name;\n\t}\n\n\tget icon() {\n\t\treturn this.reg.env.itemType.getLcStateOrUnknown(this.value).iconUrl;\n\t}\n\n\tget shortDescs() {return this.reg.env.srcView.shortDescs}\n\n\tget emitter() {return this}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoReqStateTask) {\n\t\t\tif (this.selectedTrans) {\n\t\t\t\tinfo.isDirty = true;\n\t\t\t\tif (info.states) info.states.trans = this.selectedTrans.trans.code;\n\t\t\t}\n\t\t} else if (info instanceof InfoReqFillUpdates) {\n\t\t\tif (this.selectedTrans) info.updates.push(new ExecTrans(this.selectedTrans.trans.code));\n\t\t}\n\t}\n\n\tprotected _initialize(init: OTaskFieldLcInit): void {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.config = init;\n\t\tconst st = this.reg.env.initStates;\n\t\tif (SRC.isNewSrcUri(this.reg.env.longDesc.srcUri)) {\n\t\t\tinit.actions = this.reg.env.itemType.getCreateTransitions().map((tr) => new SrcExecTransition(tr, this.reg.env.itemType, this.execTr));\n\t\t\tinit.groupOrder = this.reg.env.itemType.getLcTransitionsGroupOrder();\n\t\t\tif (st && st.trans) this.selectedTrans = init.actions.find((a: SrcExecTransition<IShortDescCtx>) => a.trans.code === st.trans) as SrcExecTransition<IShortDescCtx>;\n\t\t\tif (!this.selectedTrans) this.selectedTrans = init.actions[0] as SrcExecTransition<IShortDescCtx>;\n\t\t} else {\n\t\t\tinit.actions = LIFECYCLE.listAllTransitionActions(this.reg.env.itemType, this.execTr);\n\t\t\tinit.groupOrder = this.reg.env.itemType.getLcTransitionsGroupOrder();\n\t\t\tif (st && st.trans) this.selectedTrans = init.actions.find((a: SrcExecTransition<IShortDescCtx>) => a.trans.code === st.trans) as SrcExecTransition<IShortDescCtx>;\n\t\t}\n\t\tinit.skinOver = this.localName;\n\t\tsuper._initialize(init);\n\t\tthis.reg.env.taskEditBroker.addConsumer(this);\n\t}\n\n\tprotected _refresh() {\n\t\tsuper._refresh();\n\t\tthis.disabled = this.config.editable === false || (this.config.writePerms && !this.reg.hasPerm(this.config.writePerms));\n\t}\n\n\tprotected execTr(this: SrcExecTransition<TaskFieldLc>, ctx: TaskFieldLc) {\n\t\tctx.selectedTrans = this;\n\t\tctx.refresh();\n\t\tctx.reg.env.taskEditBroker.dispatchInfo(new InfoChangeTask(ctx), ctx);\n\t}\n}\n\nREG.reg.registerSkin(\"wsp-task-field-lc\", 1, /* language=CSS */ `\n\t:host {\n\t\tcolor: var(--edit-color);\n\t}\n\n\t:host([disabled]) {\n\t\topacity: unset;\n\t}\n`);\n\ncustomElements.define(\"wsp-task-field-lc\", TaskFieldLc);\n\n\n/**\n * Affichage des champs simples des tasks en mode Ã©ditable.\n */\nexport interface TaskFieldUsers extends BaseElement {\n\tinitialize(init: OTaskFieldUsersInit): this;\n}\n\nexport interface OTaskFieldUsersInit extends OSkinableInit {\n\treg?: IReg<ITaskUiEnv>\n\tresp: string\n\t/** true par dÃ©faut */\n\teditable?: boolean\n\t/** Si true, accepte que le champ soit en erreur Ã  l'enregistrement.\n\t * false par dÃ©faut */\n\tpermissive?: boolean\n\twritePerms?: string | string[]\n\thideErrors?: boolean\n}\n\nexport class TaskFieldUsers extends BaseElementAsync implements ITaskEditableField, IInfoConsumer {\n\treg: IReg<ITaskUiEnv>;\n\n\tconfig: OTaskFieldUsersInit;\n\n\trespConf: IDatasResp;\n\toriginalUsers: Set<string>;\n\tcurrentUsers: Set<string>;\n\tcurrentLcSt: string;\n\tmsg: MsgLabel;\n\n\tget fieldName() {return 'resps' as 'resps'}\n\n\tget value() {return this.config.resp}\n\n\tget isDirty() {\n\t\tif (!this.currentUsers) return false;\n\t\tif (this.originalUsers.size !== this.currentUsers.size) return true;\n\t\tfor (const u of this.originalUsers) if (!this.currentUsers.has(u)) return true;\n\t\treturn false;\n\t}\n\n\tget isInError() {\n\t\tconst count = this.shadowRoot.querySelectorAll<HTMLElement>('c-userref:not([data-isEmpty])').length;\n\t\tif (count > 1) return !this.isCardMulti;\n\t\treturn count === 0 && this.isRequired;\n\t}\n\n\tisCardMulti: boolean;\n\n\tget isRequired() {\n\t\tconst required = this.respConf.required;\n\t\treturn required instanceof RegExp ? required.test(this.currentLcSt) : required || false;\n\t}\n\n\tprotected async _initialize(init: OTaskFieldUsersInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.config = init;\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tthis.respConf = this.reg.env.itemType.getResp(this.config.resp);\n\t\tif (!this.respConf) {\n\t\t\tthis.hidden = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.isCardMulti = this.respConf.userCard === 'multi';\n\n\t\tthis.originalUsers = TASK.getUsersFromContent(this.reg.env.taskContent, this.config.resp);\n\t\tthis.currentLcSt = this.reg.env.longDesc.lcSt;\n\n\t\tconst ctn = sr.appendChild(<div id=\"ctn\"/>);\n\t\tthis.msg = sr.appendChild(<c-msg hidden/>) as MsgLabel;\n\n\t\tconst states = this.reg.env.initStates;\n\t\tconst accounts = states && states.resps && states.resps[this.config.resp];\n\t\tif (accounts) this.currentUsers = new Set(accounts);\n\n\t\tconst users = this.originalUsers.size > 0 ? await this.reg.env.universe.useUsers.getUserSet(Array.from(this.currentUsers || this.originalUsers)) : [];\n\t\tusers.sort(this.sortUsers);\n\n\t\tif (this.config.editable === false) {\n\t\t\tfor (const u of (this.currentUsers || this.originalUsers)) {\n\t\t\t\tctn.appendChild(<UserRef Ã®={{reg: this.reg, nickOrAccount: u} as OUserRefInit}/>);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const u of (this.currentUsers || this.originalUsers)) {\n\t\t\t\t//Si pb config card=single mais >1 users, on garde le bouton suppr dans tous les cas.\n\t\t\t\tctn.appendChild(<div class=\"user\">\n\t\t\t\t\t<UserRef Ã®={{reg: this.reg, nickOrAccount: u} as OUserRefInit}/>\n\t\t\t\t\t<button class=\"remUser\" onclick={this.onRemUser} title=\"Supprimer\"/>\n\t\t\t\t</div>);\n\t\t\t}\n\t\t\tif (this.isCardMulti) {\n\t\t\t\tctn.appendChild(<button class=\"addUsers\" onclick={this.onAddUsers} title=\"Ajouter des utilisateurs\"/>);\n\t\t\t} else {\n\t\t\t\tctn.setAttribute(\"card\", \"single\");\n\t\t\t\tif (!ctn.firstElementChild) ctn.appendChild(<div class=\"user\">\n\t\t\t\t\t<UserRef Ã®={{reg: this.reg} as OUserRefInit}/>\n\t\t\t\t</div>);\n\t\t\t\tctn.appendChild(<button class=\"selectUser\" onclick={this.onSelectUser} title=\"SÃ©lectionner l'utilisateur\"/>);\n\t\t\t\t(ctn.firstElementChild as HTMLElement).onclick = this.onSelectUser;\n\t\t\t}\n\t\t}\n\t\tthis.reg.env.taskEditBroker.addConsumer(this);\n\t}\n\n\tsortUsers(u1: JUser, u2: JUser): number {\n\t\treturn USER.getPrimaryName(u1).localeCompare(USER.getPrimaryName(u2));\n\t}\n\n\tinsertUser(user: JUser) {\n\t\tconst ctn = this.shadowRoot.getElementById('ctn');\n\t\tlet next: HTMLElement = DOM.findFirstChild(ctn, IS_user);\n\t\twhile (next && this.sortUsers((next.firstElementChild as UserRef).user, user) < 0) {\n\t\t\tnext = DOM.findNextSibling(ctn, IS_user);\n\t\t}\n\t\tctn.insertBefore(<div class=\"user\">\n\t\t\t<UserRef Ã®={{reg: this.reg, user} as OUserRefInit}/>\n\t\t\t<button class=\"remUser\" onclick={this.onRemUser} title=\"Supprimer\"/>\n\t\t</div>, next || ctn.lastElementChild);\n\t}\n\n\tonRemUser(this: HTMLButtonElement, ev: Event) {\n\t\tev.stopImmediatePropagation();\n\t\tconst me = DOMSH.findHost<TaskFieldUsers>(this);\n\t\tconst userRef = this.previousElementSibling as UserRef;\n\t\tif (!me.currentUsers) me.currentUsers = new Set(me.originalUsers);\n\t\tme.currentUsers.delete(userRef.nickOrAccount);\n\t\tuserRef.parentElement.remove();\n\t\tme.refresh();\n\t\tme.reg.env.taskEditBroker.dispatchInfo(new InfoChangeTask(me), me);\n\t}\n\n\tasync onAddUsers(this: HTMLButtonElement, ev: Event) {\n\t\tev.stopImmediatePropagation();\n\t\tconst me = DOMSH.findHost<TaskFieldUsers>(this);\n\t\tconst {UserSelector} = await import(\"back/core/dialogs/userSelector.js\");\n\t\tconst userSelector = new UserSelector().initialize({\n\t\t\treg: me.reg,\n\t\t\tuserGrid: {\n\t\t\t\tusersSrv: me.reg.env.universe.useUsers,\n\t\t\t\tgrid: {selType: \"multi\"},\n\t\t\t\tfilterGroups: me.respConf.usersSelection?.restrictFromGroups,\n\t\t\t\tfilterType: me.respConf.usersSelection?.userType === 'groups' ? EUserType.group : (me.respConf.usersSelection?.userType === 'users' ? EUserType.user : null),\n\t\t\t\tfilterTypeInputVisibility: false\n\t\t\t},\n\t\t\tselectAndCloseOnDblClick: true\n\t\t});\n\t\tconst users = await POPUP.showMenuFromEvent<JUser[] | null>(userSelector, ev || me, me, null, { initWidth: '20em'}).onNextClose();\n\t\tif (users) {\n\t\t\tif (!me.currentUsers) me.currentUsers = new Set(me.originalUsers);\n\t\t\tfor (const u of users) {\n\t\t\t\tif (!me.currentUsers.has(u.account)) {\n\t\t\t\t\tme.currentUsers.add(u.account);\n\t\t\t\t\tme.insertUser(u);\n\t\t\t\t}\n\t\t\t}\n\t\t\tme.refresh();\n\t\t\tme.reg.env.taskEditBroker.dispatchInfo(new InfoChangeTask(me), me);\n\t\t}\n\t}\n\n\tasync onSelectUser(this: HTMLButtonElement, ev: Event) {\n\t\tev.stopImmediatePropagation();\n\t\tconst me = DOMSH.findHost<TaskFieldUsers>(this);\n\t\tconst {UserSelector} = await import(\"back/core/dialogs/userSelector.js\");\n\t\tconst userSelector = new UserSelector().initialize({\n\t\t\treg: me.reg,\n\t\t\tuserGrid: {\n\t\t\t\tusersSrv: me.reg.env.universe.useUsers,\n\t\t\t\tfilterGroups: me.respConf.usersSelection?.restrictFromGroups,\n\t\t\t\tfilterType: me.respConf.usersSelection?.userType === 'groups' ? EUserType.group : (me.respConf.usersSelection?.userType === 'users' ? EUserType.user : null),\n\t\t\t},\n\t\t\tselectAndCloseOnDblClick: true\n\t\t});\n\t\tconst users = await POPUP.showMenuFromEvent<JUser[] | null>(userSelector, ev || me, me, null, { initWidth: '20em'}).onNextClose();\n\t\tif (users && users[0]) {\n\t\t\tif (!me.currentUsers) me.currentUsers = new Set();\n\t\t\telse me.currentUsers.clear();\n\t\t\tme.currentUsers.add(users[0].account);\n\t\t\tconst userRef = me.shadowRoot.querySelector('c-userref') as UserRef;\n\t\t\tuserRef.user = users[0];\n\t\t\t//cleanup des suivants si anomalie\n\t\t\tlet elt: HTMLElement;\n\t\t\twhile ((elt = DOM.findNextSibling(userRef.parentElement, IS_user))) elt.remove();\n\t\t\tme.refresh();\n\t\t\tme.reg.env.taskEditBroker.dispatchInfo(new InfoChangeTask(me), me);\n\t\t}\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoReqStateTask) {\n\t\t\tif (!info.isDirty && this.isDirty) info.isDirty = true;\n\t\t\tif (!info.isInError && this.isInError && !this.config.permissive) info.isInError = true;\n\t\t\tif (info.states && this.isDirty) {\n\t\t\t\tif (!info.states.resps) info.states.resps = {};\n\t\t\t\tinfo.states.resps[this.respConf.code] = Array.from(this.currentUsers);\n\t\t\t}\n\t\t} else if (info instanceof InfoReqFillUpdates) {\n\t\t\tif (this.currentUsers) {\n\t\t\t\tfor (const u of this.currentUsers) {\n\t\t\t\t\tif (!this.originalUsers.has(u)) info.updates.push(new PutUserResp(u, this.config.resp));\n\t\t\t\t}\n\t\t\t\tfor (const u of this.originalUsers) {\n\t\t\t\t\tif (!this.currentUsers.has(u)) info.updates.push(new RemoveUserResp(u, this.config.resp));\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (info instanceof InfoChangeTask && info.field.fieldName === \"lcSt\") {\n\t\t\tthis.currentLcSt = info.field.value;\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\tprotected _refresh() {\n\t\tsuper._refresh();\n\t\tDOM.setAttrBool(this, \"readonly\", this.config.editable === false || (this.config.writePerms && !this.reg.hasPerm(this.config.writePerms)));\n\t\tconst users = this.shadowRoot.querySelectorAll<UserRef>('c-userref');\n\t\tconst count = users.length;\n\t\tlet msg = null;\n\t\tif (count > 1 && !this.isCardMulti) msg = \"Un seul utilisateur doit Ãªtre renseignÃ©\";\n\t\telse if ((count === 0 || !users.item(0).nickOrAccount) && this.isRequired) msg = this.isCardMulti ? \"Au moins un utilisateur doit Ãªtre renseignÃ©\" : \"Un utilisateur doit Ãªtre renseignÃ©\";\n\t\tthis.msg.setCustomMsg(msg, 'error');\n\t}\n}\n\nfunction IS_user(n: Node): n is HTMLElement {return DOM.IS_element(n) && n.classList.contains('user')}\n\nREG.reg.registerSkin(\"wsp-task-field-users\", 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\t#ctn {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-wrap: wrap;\n\t}\n\n\t.user {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tmargin: .2em;\n\t\tborder: 1px solid var(--border-color);\n\t\tborder-radius: .1em;\n\t\tpadding: .1em;\n\t}\n\n\tc-userref {\n\t\tcolor: var(--edit-color);\n\t}\n\n\tbutton {\n\t\tborder: none;\n\t\tcursor: pointer;\n\t\twidth: 1.2em;\n\t\theight: 1.2em;\n\t\talign-self: center;\n\t\tfont-size: inherit;\n\t}\n\n\t.remUser {\n\t  align-self: flex-start;\n\t  background: transparent no-repeat url(\"/@skin@/commons/icons/delete.svg\") top;\n\t  background-size: 65%;\n  }\n\n  .addUsers {\n\t  background: transparent no-repeat url(\"/@skin@/core/actions/users/add-user.svg\") center;\n\t\theight: var(--icon-size);\n    width: var(--icon-size);\n    min-height: var(--icon-size);\n    min-width: var(--icon-size);\n    background-size: contain;\n }\n\n  .selectUser {\n\t  background: transparent no-repeat var(--dropdown-url) center;\n\t  background-size: 1em 1em;\n  }\n\n  c-msg {\n\t  justify-content: flex-start;\n\t  font-style: italic;\n  }\n\n  [card=single] > .user {\n\t  cursor: pointer;\n\t\tuser-select: none;\n\t}\n\n\t[card=single] > :only-of-type > .remUser {\n\t\tdisplay: none;\n\t}\n\n\t:host([readonly]) button {\n\t\tdisplay: none;\n\t}\n`);\n\ncustomElements.define(\"wsp-task-field-users\", TaskFieldUsers);\n\n\n/**\n * Champs XML des taches (affichÃ© via un Wed et une house volatile)\n */\nexport interface TaskXmlField extends BaseElement {\n\tinitialize(init: OTaskXmlFieldInit): this;\n}\n\nexport interface OTaskXmlFieldInit extends OSkinableInit {\n\treg?: IReg<ITaskUiEnv>\n\t/** true par dÃ©faut */\n\teditable?: boolean\n\t/** Si true, accepte que le champ soit en erreur Ã  l'enregistrement.\n\t * false par dÃ©faut */\n\tpermissive?: boolean\n\tfield: 'tkDescription' | 'tkComment'\n\teditorKey: string\n\teditorConfig?: OWedEditorBoxConfig\n\twedMgrConfig?: OWedManagerConfig\n\twritePerms?: string | string[]\n}\n\nexport class TaskXmlField extends BaseElementAsync implements IView, IViewContainer, ITaskEditableField, IInfoConsumer {\n\treg: IReg<ITaskUiEnv>;\n\n\tview: WedEditorBox;\n\n\thouse: IWspXmlHouse;\n\n\tfieldName: 'tkDescription' | 'tkComment';\n\n\tconfig: OTaskXmlFieldInit;\n\n\tget value(): Element {return this.house.document.documentElement}\n\n\tget isDirty(): boolean {return this._initedAsDirty || this.house.isDirty}\n\n\tprotected _initedAsDirty: boolean;\n\n\tasync _initialize(init: OTaskXmlFieldInit) {\n\t\ttry {\n\t\t\tthis.config = init;\n\t\t\tthis.reg = this.findReg(init);\n\t\t\tthis.fieldName = init.field;\n\t\t\tif (init.editable !== false) {\n\t\t\t\tthis.reg.env.taskEditBroker.addConsumer(this);\n\t\t\t\tthis.setAttribute(\"editable\", \"\");\n\t\t\t}\n\t\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\t\tconst wsp = this.reg.env.wsp;\n\t\t\tconst longDesc = this.reg.env.longDesc;\n\t\t\tconst itemType = wsp.wspMetaUi.getItemType(longDesc.itModel) as ItemTypeTask;\n\n\t\t\tconst dataEditor = itemType.getEditor(init.editorKey);\n\t\t\tif (!dataEditor) throw Error(\"No editor found for task desc: \" + init.editorKey);\n\n\t\t\tconst editorConfig = Object.assign({}, init.editorConfig) as OWedEditorBoxConfig & OWedEditorDiffBarConfig;\n\t\t\tconst wedMgrConfig = Object.assign({}, init.wedMgrConfig) as OWedManagerConfig;\n\n\t\t\t//if (!editorConfig.metaBarMode) editorConfig.metaBarMode = 'available';\n\n\t\t\tif (!wedMgrConfig.fetchContentThreshold) wedMgrConfig.fetchContentThreshold = 6000;\n\t\t\tif (!wedMgrConfig.dataTransferAnalyzer) wedMgrConfig.dataTransferAnalyzer = WspDataTransferWedAnalyzer.SINGLETON;\n\n\t\t\tthis.view = new WedEditorBox();\n\n\t\t\tif (dataEditor.initReg) {\n\t\t\t\t//Customisation du reg pour l'editor.\n\t\t\t\tthis.reg = REG.createSubReg(this.reg);\n\t\t\t\tawait dataEditor.initReg(this.reg, this.view);\n\t\t\t}\n\n\t\t\tif (dataEditor.overrideConfigs) await dataEditor.overrideConfigs(editorConfig, wedMgrConfig, this.view);\n\n\t\t\t//AprÃ¨s dataEditor.overrideConfigs() pour empÃªcher de surcharger editorConfig.reg qui doit Ãªtre fait dans dataEditor.initReg()\n\t\t\tif (!editorConfig.reg) editorConfig.reg = this.reg;\n\n\t\t\t//chargement asynchrone en // des librairies standard wed et des wedModels\n\t\t\tthis.view.addAsyncLib(boxTagsDefined);\n\t\t\tthis.view.addAsyncLib(txtTagsDefined);\n\t\t\tthis.view.addAsyncLib(ptrItemTagsDefined);\n\t\t\tconst mainEndP = itemType.getWed(dataEditor.mainWed);\n\t\t\tthis.view.addAsyncLib(WED.loadWedModel(mainEndP, mainEndP).then((wed) => this.view.wedModel = wed));\n\t\t\t// if (dataEditor.outlineWed) {\n\t\t\t// \tlet outlineEndP = itemType.getWed(dataEditor.outlineWed);\n\t\t\t// \tthis.view.addAsyncLib(WED.loadWedModel(outlineEndP, outlineEndP).then((wed) => this.view.outlineWedModel = wed));\n\t\t\t// }\n\t\t\t// if (dataEditor.previewWed) {\n\t\t\t// \tlet altviewEndP = itemType.getWed(dataEditor.previewWed);\n\t\t\t// \tthis.view.addAsyncLib(WED.loadWedModel(altviewEndP, altviewEndP).then((wed) => this.view.previewWedModel = wed));\n\t\t\t// }\n\n\t\t\twedMgrConfig.readOnlyCauses = [];\n\t\t\teditorConfig.hideDiffBar = true; //Pas de diff sur une tÃ¢che\n\t\t\teditorConfig.withoutScrolls = true; //XXX Permettre de pointer un scroll parent\n\t\t\tif (init.editable === false) {\n\t\t\t\twedMgrConfig.readOnlyCauses.push(\"initView\");\n\t\t\t\teditorConfig.hideCommonBar = true;\n\t\t\t\teditorConfig.hideErrBar = true;\n\t\t\t\teditorConfig.hideUnknownBar = true;\n\t\t\t\teditorConfig.disableBoxSelection = true;\n\t\t\t\teditorConfig.disableVirtuals = true;\n\t\t\t\t(editorConfig as OWedEditorTxtConfig).hideStackBar = true;\n\t\t\t} else if (!this.reg.hasPerm(init.writePerms || \"write.task.update\")) {\n\t\t\t\twedMgrConfig.readOnlyCauses.push(\"perms\");\n\t\t\t}\n\n\t\t\tlet doc: Document;\n\t\t\tconst st = this.reg.env.initStates;\n\t\t\tlet schema: Schema;\n\t\t\tif (init.field === \"tkDescription\") {\n\t\t\t\tschema = await itemType.getDesriptionSchema();\n\t\t\t\tif (st && st.desc) {\n\t\t\t\t\tthis._initedAsDirty = true;\n\t\t\t\t\tdoc = DOM.parseDomValid(st.desc);\n\t\t\t\t}\n\t\t\t\tif (!doc) {\n\t\t\t\t\tconst originalDesc = TASK.getDescriptionFromContent(this.reg.env.taskContent);\n\t\t\t\t\t//console.log(\"originalDesc::::::\", originalDesc);\n\t\t\t\t\tdoc = DOM.newDomDoc();\n\t\t\t\t\tif (originalDesc) doc.appendChild(doc.importNode(originalDesc, true));\n\t\t\t\t\telse doc.appendChild(doc.createElementNS(TASK.TASK_NS, TASK.TAG_setDescription));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tschema = await itemType.getCommentSchema();\n\t\t\t\tif (st && st.cmt) {\n\t\t\t\t\tthis._initedAsDirty = true;\n\t\t\t\t\tdoc = DOM.parseDomValid(st.cmt);\n\t\t\t\t}\n\t\t\t\tif (!doc) {\n\t\t\t\t\tdoc = DOM.newDomDoc();\n\t\t\t\t\tdoc.appendChild(doc.createElementNS(TASK.TASK_NS, TASK.TAG_addComment));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.house = await wsp.wspServer.wspsLive.newLocalHouse({\n\t\t\t\tinitialDoc: doc,\n\t\t\t\tschema,\n\t\t\t\tbuildOptions: {genAnnots: init.editable !== false, autoMutate: true, autoComplete: true, autoNormXml: true, autoNormChars: true, autoCleanup: true}\n\t\t\t}, wsp);\n\t\t\tthis.view.initialize(editorConfig);\n\t\t\tif (await this.view.initFromDocHolder(new DocHolder(this.house), wedMgrConfig)) {\n\t\t\t\tthis.shadowRoot.appendChild(this.view);\n\t\t\t} else {\n\t\t\t\tthrow Error(\"Init editor failed\");\n\t\t\t}\n\n\t\t\tthis.house.listeners.on(\"dirtyChange\", () => {this.reg.env.taskEditBroker.dispatchInfo(new InfoChangeTask(this), this)})\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthis.closeEditor();\n\t\t}\n\t}\n\n\tconnectedCallback() {\n\t\tsuper.connectedCallback();\n\t\t// Comment masquÃ© Ã  la crÃ©ation\n\t\tif (this.fieldName === 'tkComment' && SRC.isNewSrcUri(this.reg.env.longDesc.srcUri)) {\n\t\t\tTASK.hideContextField(this, true);\n\t\t}\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoReqStateTask) {\n\t\t\tswitch (this.fieldName) {\n\t\t\tcase 'tkDescription':\n\t\t\t\tif (!info.isInError && !this.config.permissive) info.isInError = this.house.schemaDom.getAllAnnots().find((a) => a.level.weight >= EAnnotLevel.error.weight) != null;\n\t\t\t\tif (info.states) {\n\t\t\t\t\tif (this.isDirty) {\n\t\t\t\t\t\tinfo.isDirty = true;\n\t\t\t\t\t\tinfo.states.desc = DOM.ser(this.house.getDocumentForSave());\n\t\t\t\t\t}\n\t\t\t\t} else if (!info.isDirty) info.isDirty = this.isDirty;\n\t\t\t\tbreak;\n\t\t\tcase 'tkComment':\n\t\t\t\tif (info.states) {\n\t\t\t\t\tif (!this.isCommentEmpty()) {\n\t\t\t\t\t\tinfo.isDirty = true;\n\t\t\t\t\t\tinfo.states.cmt = DOM.ser(this.house.getDocumentForSave());\n\t\t\t\t\t}\n\t\t\t\t} else if (!info.isDirty) info.isDirty = !this.isCommentEmpty();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (info instanceof InfoReqFillUpdates) {\n\t\t\tif (this.isDirty) {\n\t\t\t\tswitch (this.fieldName) {\n\t\t\t\tcase 'tkDescription':\n\t\t\t\t\tinfo.updates.push(new SetDescription(this.value));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'tkComment':\n\t\t\t\t\tif (!this.isCommentEmpty()) {\n\t\t\t\t\t\tinfo.updates.push(new AddComment(this.value));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tisCommentEmpty(): boolean {\n\t\tlet isEmpty = true;\n\t\tthis.view.wedMgr.rootWedlet.visitWedletChildren(0, Infinity, (w: IChildWedlet) => {\n\t\t\tif (w.model.nodeName === TASK.TAG_addComment) {\n\t\t\t\t(w as IParentWedlet).visitWedletChildren(0, Infinity, (w: IChildWedlet) => {\n\t\t\t\t\tif (w.model.nodeType === ENodeType.element) {\n\t\t\t\t\t\t(w as IParentWedlet).visitWedletChildren(0, Infinity, (w: IChildWedlet) => {\n\t\t\t\t\t\t\tif (!w.isEmpty()) {\n\t\t\t\t\t\t\t\tisEmpty = false;\n\t\t\t\t\t\t\t\treturn 'stop';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn 'stop';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn 'stop';\n\t\t\t}\n\t\t});\n\t\treturn isEmpty;\n\t}\n\n\tcloseEditor() {\n\t\tif (this.house) {\n\t\t\tthis.reg.env.universe.wspServer.wspsLive.removeLocalHouse(this.house);\n\t\t\tthis.house = null;\n\t\t}\n\t\tif (!this.view) {\n\t\t\tthis.view.wedMgr.killEditor();\n\t\t\tif (this.view.parentNode) this.view.remove();\n\t\t\tthis.view = null;\n\t\t}\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\tif (closed) this.closeEditor();\n\t}\n\n\tvisitViews(visitor: (view: IView) => any): any {\n\t\tif (this.view) return visitor(this.view);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\treturn this.view ? visitor(this.view) : Promise.resolve(undefined);\n\t}\n}\n\nREG.reg.registerSkin(\"wsp-task-xmlfield\", 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\t:host([editable]) {\n\t\tborder: 1px solid var(--border-color);\n\t}\n`);\n\n\ncustomElements.define(\"wsp-task-xmlfield\", TaskXmlField);\n\n/**\n * Bouton d'enregistrement d'une Ã©dition d'un formulaire (Ã  placer gÃ©nÃ©ralement avec wsp-task-cancel).\n */\nexport class TaskSaveBtn extends Button implements IInfoConsumer {\n\treg: IReg<ITaskUiEnv>;\n\n\t_initialize(init: OButtonInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tsetDefaultBtn(init, \"Valider les modifications\", \"/@skin@/wsp/views/tasks/save.svg\");\n\t\tthis.hidden = true;\n\t\tsuper._initialize(init);\n\t\tthis.onclick = this.onClick;\n\t\tthis.reg.env.taskEditBroker.addConsumer(this);\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoChangeTask) {\n\t\t\tthis.disabled = info.state.isInError;\n\t\t\tif (DOM.setHidden(this, !info.state.isDirty)) {\n\t\t\t\tthis.reg.env.srcView.setNeedValid(info.state.isDirty);\n\t\t\t\tthis.refresh();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync onClick(ev: MouseEvent) {\n\t\tif (this.hidden) return;\n\t\tif (this.disabled) {\n\t\t\tPOPUP.showNotifWarning(\"Des erreurs doivent Ãªtre corrigÃ©es avant de pouvoir valider les modifications.\", this);\n\t\t\treturn;\n\t\t}\n\t\tconst env = this.reg.env;\n\t\tconst req = new InfoReqFillUpdates();\n\t\tenv.taskEditBroker.dispatchInfo(req, this);\n\t\tif (req.updates.length > 0) {\n\t\t\ttry {\n\t\t\t\tconst {srcUri} = await new MsgOver().setStandardMsg(\"saving\").showMsgOver(env.srcView).waitFor<JSrcFields>(\n\t\t\t\t\tTASK.saveTask(env.wsp, this, SRC.srcRef(env.longDesc), req.updates)\n\t\t\t\t);\n\t\t\t\tif (srcUri !== env.longDesc.srcUri) {\n\t\t\t\t\t//cas d'une crÃ©ation de task.\n\t\t\t\t\t//console.log(\"new srcUri:::\",srcUri);\n\t\t\t\t\tthis.reg.env.srcView.resetMainView();\n\t\t\t\t\tthis.reg.env.infoBroker.dispatchInfo(new InfoSrcUriMoved(env.longDesc.srcUri, srcUri), this);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tERROR.report(\"Ãchec Ã  la validation de la tÃ¢che\", e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n}\n\ncustomElements.define(\"wsp-task-save\", TaskSaveBtn);\n\n/**\n * Bouton d'annulation d'une Ã©dition d'un formulaire (pendant de wsp-task-save).\n */\nexport class TaskCancelBtn extends Button implements IInfoConsumer {\n\treg: IReg<ITaskUiEnv>;\n\n\t_initialize(init: OButtonInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tsetDefaultBtn(init, \"Annuler les modifications\", \"/@skin@/wsp/views/tasks/cancel.svg\");\n\t\tthis.hidden = true;\n\t\tsuper._initialize(init);\n\t\tthis.onclick = this.onClick;\n\t\tthis.reg.env.taskEditBroker.addConsumer(this);\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoChangeTask) {\n\t\t\tthis.hidden = !info.state.isDirty || SRC.isNewSrcUri(this.reg.env.longDesc.srcUri);\n\t\t}\n\t}\n\n\tasync onClick(ev: MouseEvent) {\n\t\tif (this.hidden) return;\n\t\tif (await POPUP.confirm(\"Confirmez l'abandon des modifications de cette tÃ¢che\", this, {okLbl: \"Abandonner mes changements\"})) {\n\t\t\tthis.reg.env.srcView.redrawMainView();\n\t\t}\n\t}\n\n}\n\ncustomElements.define(\"wsp-task-cancel\", TaskCancelBtn);\n\n\n/**\n * Bouton de suppression dÃ©finitive d'une task.\n */\nexport class TaskDeleteBtn extends Button implements IInfoConsumer {\n\treg: IReg<ITaskUiEnv>;\n\n\t_initialize(init: OButtonInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tsetDefaultBtn(init, \"Supprimer cette tÃ¢che\", \"/@skin@/wsp/views/tasks/delete.svg\");\n\t\tsuper._initialize(init);\n\t\tconst hasPerm = this.reg.hasPerm(\"ui.task.fields.deleteBtn\");\n\t\tif (hasPerm) {\n\t\t\tthis.onclick = this.onClick;\n\t\t\tthis.reg.env.taskEditBroker.addConsumer(this);\n\t\t}\n\t\tDOM.setAttrBool(this, \"hidden\", !hasPerm);\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoChangeTask) {\n\t\t\tthis.hidden = info.state.isDirty;\n\t\t}\n\t}\n\n\tasync onClick(ev: MouseEvent) {\n\t\tif (this.hidden) return;\n\t\tif (await POPUP.confirm(\"Souhaitez-vous vraiment supprimer DÃFINITIVEMENT cette tÃ¢che ?\", this, {okLbl: \"Supprimer\"})) {\n\t\t\tconst env = this.reg.env;\n\t\t\tnew MsgOver().setStandardMsg(\"deleting\").showMsgOver(env.srcView).waitFor(\n\t\t\t\tTASK.deleteTask(env.wsp, this, [env.longDesc.srcId])\n\t\t\t);\n\t\t}\n\t}\n}\n\ncustomElements.define(\"wsp-task-delete\", TaskDeleteBtn);\n\nfunction setDefaultBtn(init: OButtonInit, label: string, icon: string) {\n\tif (init.uiContext === 'dialog') {\n\t\tif (init.label === undefined) init.label = label;\n\t} else {\n\t\tif (init.title === undefined) init.title = label;\n\t}\n\tif (init.icon === undefined) init.icon = icon;\n}\n\n/**\n * Bouton d'exÃ©cution d'une transition prÃ©cise, indÃ©pendamment de tout formulaire\n * et autres input en cours d'Ã©dition et bouton wsp-task-save.\n */\nexport interface TaskExecTransBtn extends Button {\n\tinitialize(init: OTaskExecTransBtnInit): this;\n}\n\nexport interface OTaskExecTransBtnInit extends OButtonInit {\n\treg?: IReg<ITaskUiEnv>\n\ttransition: string\n\tnoConfirm?: boolean\n}\n\nexport class TaskExecTransBtn extends Button {\n\treg: IReg<ITaskUiEnv>;\n\n\tconfig: OTaskExecTransBtnInit;\n\n\ttrans: SrcExecTransition<IShortDescCtx>;\n\n\t_initialize(init: OTaskExecTransBtnInit) {\n\t\tthis.config = init;\n\t\tthis.reg = this.findReg(init);\n\t\tsuper._initialize(init);\n\t\tconst trans = this.reg.env.itemType.getLcTransition(this.config.transition);\n\t\tif (trans) {\n\t\t\tthis.trans = new SrcExecTransition(trans, this.reg.env.itemType);\n\t\t\tthis.onclick = this.onClick;\n\t\t\tif (!this.label) this.label = trans.name;\n\t\t}\n\t}\n\n\tbuildInitFromAtts(init?: OTaskExecTransBtnInit): any {\n\t\tinit = super.buildInitFromAtts(init) as OTaskExecTransBtnInit;\n\t\tinit.transition = this.getAttribute(\"transition\");\n\t\tinit.noConfirm = this.getAttribute(\"confirm\") === \"no\";\n\t\treturn init;\n\t}\n\n\tasync onClick(ev: MouseEvent) {\n\t\tif (this.config.noConfirm || await POPUP.confirm(`Confirmez votre choix '${this.label}'`, this)) {\n\t\t\ttry {\n\t\t\t\tawait TASK.saveTask(this.reg.env.wsp, this, this.reg.env.longDesc.srcId, [new ExecTrans(this.config.transition)]);\n\t\t\t} catch (e) {\n\t\t\t\tERROR.report(\"Ãchec Ã  l'exÃ©cution de la transition\", e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _refresh() {\n\t\tif (this.trans && this.trans.isVisible(this.reg.env.srcView)) {\n\t\t\tDOM.setHidden(this, false);\n\t\t\tDOM.setAttrBool(this, 'disabled', !this.trans.isEnabled(this.reg.env.srcView));\n\t\t\tsuper._refresh();\n\t\t} else {\n\t\t\tDOM.setHidden(this, true);\n\t\t}\n\t}\n\n}\n\n//REG.reg.registerSkin(\"wsp-task-exec-trans\", 1, /* language=CSS */ ``);\n\ncustomElements.define(\"wsp-task-exec-trans\", TaskExecTransBtn);\n\n\n/** Requete auprÃ¨s des champs pour connaitre du formulaire d'Ã©dition. */\nexport class InfoReqStateTask implements IInfo {\n\n\tisDirty?: boolean;\n\tisInError?: boolean;\n\n\t/** Si non null les fileds doivent renseigner les valeurs si ils sont dirty. */\n\tstates: JTaskStates;\n\n\tinfoHolders?: IInfoProducer[];\n}\n\n/** Notification d'une Ã©dition d'un champ. */\nexport class InfoChangeTask implements IInfo {\n\n\tprotected _state: InfoReqStateTask;\n\tget state(): InfoReqStateTask {\n\t\tif (!this._state) {\n\t\t\tthis._state = new InfoReqStateTask();\n\t\t\tthis.field.reg.env.taskEditBroker.dispatchInfo(this._state, null);\n\t\t}\n\t\treturn this._state;\n\t}\n\n\tconstructor(public field: ITaskEditableField) {}\n\n\tinfoHolders?: IInfoProducer[];\n}\n\n\n/** Requete pour constituer la liste des modifications Ã  appliquer. */\nexport class InfoReqFillUpdates implements IInfo {\n\tupdates: IUpdateTask[] = [];\n\n\tinfoHolders?: IInfoProducer[];\n}\n\ninterface ITaskEditableField {\n\treg: IReg<ITaskUiEnv>\n\tfieldName: 'actTi' | 'tkDeadline' | 'scheduledDt' | 'lcSt' | 'tkDescription' | 'tkComment' | 'resps' | 'init'\n\tvalue?: any\n}\n"]}