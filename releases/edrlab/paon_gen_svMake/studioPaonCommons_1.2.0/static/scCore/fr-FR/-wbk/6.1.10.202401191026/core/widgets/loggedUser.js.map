{"version":3,"sources":["/@back@/core/widgets/loggedUser.tsx"],"names":["BaseElement","ActionBtn","ButtonActions","POPUP","LoginDialog","Action","REG","DOMSH","USER","showDialog","LoggedUser","[object Object]","init","this","reg","findReg","sr","attachShadow","SHADOWDOM_INIT","auth","env","universe","config","noAuthentication","_initAndInstallSkin","localName","defaultIcon","icon","connectBtn","connectInit","Object","create","action","getSvc","appendChild","initialize","actionsInit","groupOrder","actions","getList","actionContext","userBtn","listeners","on","oldUser","newUser","setNewUser","currentUser","hidden","label","getPrimaryName","title","getLongName","registerSkin","customElements","define","registerSvc","setLabel","setIcon","setVisible","ctx","currentAuthenticatedUser","setExecute","dialog","fixSize","titleBar","barLabel","onUserChange","close","onNextClose","then","removeListener","setGroup","userSelf","logout","async","UserProfile","import","UserPrefEditor","body","prefEditorsList","initializedAsync","resizer","addSvcToList"],"mappings":"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","sourcesContent":["import {BaseElement} from \"back/commons/basis\";\nimport {ActionBtn, ButtonActions, OButtonActionsInit, OButtonInit} from \"back/commons/widgets/buttons\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {LoginDialog} from \"back/core/dialogs/login\";\nimport {Action} from \"lib/commons/actions\";\nimport {IReg, REG} from 'lib/commons/registry';\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IBasicUniversePointer, IUniverseEnv} from \"lib/core/universe\";\nimport {JUser, USER} from \"lib/core/user\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {UserProfile} from \"back/core/dialogs/userProfile\";\nimport {UserPrefEditor} from \"back/core/dialogs/userPrefEditor\";\nimport showDialog = POPUP.showDialog;\n\nexport interface LoggedUser extends BaseElement {\n\tinitialize(init: OLoggedUserInit): this\n}\n\nexport interface OLoggedUserInit extends OButtonInit {}\n\nexport class LoggedUser extends BaseElement {\n\n\tdefaultIcon?: string;\n\n\tprotected connectBtn: ActionBtn<Element>;\n\n\tprotected userBtn: ButtonActions<Element>;\n\n\treg: IReg<IUniverseEnv>;\n\n\tprotected _initialize(init: OLoggedUserInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tconst auth = this.reg.env.universe.auth;\n\t\tif (!auth.config.noAuthentication) {\n\t\t\tthis._initAndInstallSkin(this.localName, init);\n\t\t\tthis.defaultIcon = init.icon;\n\t\t\tthis.connectBtn = new ActionBtn();\n\t\t\tconst connectInit = Object.create(init || null);\n\t\t\tconnectInit.action = this.reg.getSvc('userLogin') as Action;\n\t\t\tsr.appendChild(this.connectBtn.initialize(connectInit));\n\t\t\tconst actionsInit = Object.create(init) as OButtonActionsInit<LoggedUser>;\n\t\t\tactionsInit.groupOrder = \"me * logout\";\n\t\t\tactionsInit.actions = this.reg.getList(\"actions:loggedUser\");\n\t\t\tactionsInit.actionContext = this;\n\t\t\tthis.userBtn = new ButtonActions<Element>().initialize(actionsInit);\n\t\t\tsr.appendChild(this.userBtn);\n\t\t\tauth.listeners.on('loggedUserChanged', (oldUser, newUser) => {this.setNewUser(newUser)}, 100); //Après les différents chargements\n\t\t\tthis.setNewUser(auth.currentUser);\n\t\t}\n\t}\n\n\tprotected setNewUser(newUser: JUser | null) {\n\t\tif (newUser) {\n\t\t\tthis.connectBtn.hidden = true;\n\t\t\tthis.userBtn.hidden = false;\n\t\t\tthis.userBtn.label = USER.getPrimaryName(newUser);\n\t\t\tthis.userBtn.title = USER.getLongName(newUser);\n\t\t\tthis.userBtn.icon = this.defaultIcon || \"/@skin@/core/objects/user.svg\"; //TODO avatar si module actif\n\t\t} else {\n\t\t\tthis.userBtn.hidden = true;\n\t\t\tthis.connectBtn.hidden = false;\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('c-loggeduser', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t}\n`);\n\ncustomElements.define('c-loggeduser', LoggedUser);\n\n/**\n *\n */\nREG.reg.registerSvc('userLogin', 1, new Action<Element>('userLogin')\n\t.setLabel(\"Se connecter...\")\n\t.setIcon(\"/@skin@/core/widgets/loggedUser/login.svg\")\n\t.setVisible((ctx: Element) => {\n\t\tconst auth = (REG.findReg(ctx).env as IBasicUniversePointer).universe.auth;\n\t\treturn auth.currentAuthenticatedUser == null;\n\t})\n\t.setExecute((ctx: Element) => {\n\t\tconst dialog = POPUP.showDialog(new LoginDialog(), ctx, {fixSize: false, titleBar: {barLabel: {label: \"Connexion\"}}});\n\t\tconst universe = (REG.findReg(ctx).env as IBasicUniversePointer).universe;\n\t\tconst onUserChange = () => {dialog.close()};\n\t\tuniverse.auth.listeners.on('loggedUserChanged', onUserChange);\n\t\tdialog.onNextClose().then(() => {universe.auth.listeners.removeListener('loggedUserChanged', onUserChange)})\n\t}));\n\nREG.reg.registerSvc('userLogout', 1, new Action<Element>('userLogout')\n\t.setGroup(\"logout\")\n\t.setLabel(\"Se déconnecter\")\n\t.setVisible((ctx: Element) => {\n\t\tconst auth = (REG.findReg(ctx).env as IBasicUniversePointer).universe.auth;\n\t\treturn auth.currentAuthenticatedUser != null;\n\t})\n\t.setExecute((ctx: Element) => {\n\t\tconst userSelf = (REG.findReg(ctx).env as IBasicUniversePointer).universe.userSelf;\n\t\tuserSelf.logout();\n\t}));\n\nREG.reg.registerSvc('userProfile', 1, new Action<Element>('userProfile')\n\t.setGroup(\"me\")\n\t.setLabel(\"Mon profil...\")\n\t.setVisible((ctx: Element) => {\n\t\tconst auth = (REG.findReg(ctx).env as IBasicUniversePointer).universe.auth;\n\t\treturn auth.currentAuthenticatedUser != null;\n\t})\n\t.setExecute(async (ctx: Element) => {\n\t\tconst reg = REG.findReg(ctx) as IReg<IBasicUniversePointer>;\n\t\tconst {UserProfile} = await import(\"back/core/dialogs/userProfile.js\");\n\t\tshowDialog(new UserProfile().initialize({reg}), ctx, {titleBar: {barLabel: {label: \"Mon profil\"}}, fixSize: false});\n\t}));\n\nREG.reg.registerSvc('userPref', 1, new Action<Element>('userPref')\n\t.setGroup(\"me\")\n\t.setLabel(\"Mes préférences...\")\n\t.setVisible((ctx: Element) => {\n\t\tconst auth = (REG.findReg(ctx).env as IBasicUniversePointer).universe.auth;\n\t\treturn auth.currentAuthenticatedUser != null;\n\t})\n\t.setExecute(async (ctx: Element) => {\n\t\tconst reg = REG.findReg(ctx) as IReg<IBasicUniversePointer>;\n\t\tconst {UserPrefEditor} = await import(\"back/core/dialogs/userPrefEditor.js\");\n\t\tconst body = new UserPrefEditor().initialize({reg, prefEditorsList: \"user:prefs\"});\n\t\tawait body.initializedAsync;\n\t\tshowDialog(body, ctx, {titleBar: \"Mes préférences\", resizer:{}});\n\t}));\n\nREG.reg.addSvcToList(\"actions:loggedUser\", 'userProfile', 1, 'userProfile', 10);\nREG.reg.addSvcToList(\"actions:loggedUser\", 'userPref', 1, 'userPref', 20);\nREG.reg.addSvcToList(\"actions:loggedUser\", 'userLogout', 1, 'userLogout', 110);\n"]}