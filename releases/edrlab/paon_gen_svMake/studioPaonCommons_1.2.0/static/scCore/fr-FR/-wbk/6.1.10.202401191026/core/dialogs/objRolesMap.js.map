{"version":3,"sources":["/@back@/core/dialogs/objRolesMap.tsx"],"names":["MsgOver","REG","DOM","JSX","DOMSH","GridColDef","CellBuilderAccount","BarActions","AccelKeyMgr","Action","ACTION","BaseAreaViewAsync","VIEWS","POPUP","AREAS","ControlAsyncArea","UserAccountInputArea","UserRolesInputArea","FORMS","ERROR","GridDataHolderJsonTree","GridSmall","CellBuilderUserRoles","InputUserPanel","ObjRolesMapEdit","[object Object]","this","userRoles","buildControlLabel","_formEditEmptyData","_dirtyStatus","_dirtyMdgOver","createElement","class","init","reg","createSubReg","findReg","params","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","accelKeyMgr","initFromMapActions","mergeListsAsMap","id","addToList","actionRefreshUi","CreateEntryAction","requireVisiblePerm","objEditRolesMapPerms","UserFormSaveAction","UserFormRevertAction","DeleteEntriesAction","setReadOnly","SelectUserInputArea","uiLayerSgn","rolesUiLayerSng","canBeIndeterminate","_headBoxElt","appendChild","c-resizable","_detailsBoxElt","hidden","_dataHolder","columnDefs","setFlex","setMinWidth","setLabel","setCellBuilder","addAnonymousAccount","account","isAnonymous","setDescription","_rolesGridElt","initialize","Object","assign","selType","hideHeaders","emptyBody","_lastLoadErrorStatus","skinOver","lineDrawer","dataHolder","grid","ctxMenuActions","actions","injectSepByGroup","mergeLists","getPref","actionContext","addEventListener","async","ev","handleKeyboardEvent","countRows","getSelectedDatas","_showToolbarTop","refreshContent","_showToolbarBottom","showDetails","toolbarsBox","uiContext","disableFullOverlay","setAttribute","_editUserRolesToolbar","formEditElt","autocomplete","onFormEditRequest","clearTimeout","setTimeout","computeDirtyStatus","key","isAccelPressed","preventDefault","stopImmediatePropagation","SINGLETON","executeIfAvailable","canHideView","findPopupableParent","close","refreshUi","_b","_a","preSelectAccounts","map","entry","refreshFreeze","super","_refresh","selectRolesMapEntries","fetchRolesMap","getDatas","find","usersRolesMap","usersRoles","keys","forEach","push","grantedRoles","allowedRoles","refusedRoles","deniedRoles","inheritedRoles","userUnknown","setDatas","undefined","selectedEntries","allUserRolesChange","objFetchRolesMap","objThis","selectRolesMapEntry","e","show","usersSetRoles","isEmpty","resp","objEditRolesMap","entries","length","selectedRows","i","c","userRow","getRow","rowDatas","setSelectedRows","forced","setHidden","_detailUserCurrentData","dirtyStatus","initFormUi","jsonToForm","formToJson","checkValidity","querySelectorAll","fieldsetElt","disabled","isReadOnlyForm","user","hasPerm","morphology","onlyIfNecessay","_lastFormMorphology","innerHTML","area-ids","listCodes","applyLayout","Promise","all","val","showMsgOver","removeMsg","hasAttribute","userData","JSON","stringify","row","line","title","setAttrBool","confirm","env","uiRoot","okLbl","cancelLbl","customElements","define","registerSkin","rolesMapEdit","ctx","name","userSelector","_id","required","emptySelectionMsg","userCard","usersGridInit","usersSrv","universe","useUsers","filterType","filterTypeInputVisibility","normalizeList","array","filterTxtRegExp","openFilter","isAccountInMap","initializedAsync","evt","value","objFetchRolesMapForAccounts","userAccount","form","querySelector","setInheritedRoles","RolesMapAction","mode","isVisible","setGroup","setIcon","setExecute","me","findHost","target","refresh","_label","isEnabled","getId","reportValidity","msg","setCustomMsg","waitFor","filteredList","filter","saveRolesMap","showNotifWarning","report","_group","setMode","_description","usersCount"],"mappings":"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","sourcesContent":["import {MsgOver, OSkinableInit} from \"back/commons/basis\";\nimport {IReg, IRegPointer, IUiEnv, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {GridColDef, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {ICoreUniverseEnv} from \"lib/core/universe\";\nimport {CellBuilderAccount} from \"back/core/widgets/usersGrid\";\nimport {JUser, JUserRoles} from \"lib/core/user\";\nimport {BarActions, OBarActionsInit} from \"back/commons/widgets/bars\";\nimport {AccelKeyMgr, Action, ACTION, IAction} from \"lib/commons/actions\";\nimport {GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {BaseAreaViewAsync, VIEWS} from \"lib/commons/views\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {AREAS, ControlAsyncArea, IArea, IControlAreaContext, IControlLabelContext} from \"lib/commons/areas\";\nimport {UserAccountInputArea, UserRolesInputArea} from \"back/core/dialogs/userAreas\";\nimport {FORMS} from \"lib/commons/forms\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport \"back/core/dialogs/dialogs_Perms\";\nimport {GridDataHolderJsonTree} from \"back/commons/widgets/tree\";\nimport {IRoleEditUiHandlerContext, JUserRolesMap, JUserSpecifiedRolesMap, ORolesSelectorInit, RolesSelectorInput} from \"lib/commons/roles\";\nimport {GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {IContextMenuActionsPointer} from \"back/commons/actionables\";\nimport {CellBuilderUserRoles} from \"back/core/dialogs/usersMgr\";\nimport {InputUserPanel, OInputUserInit} from \"back/core/widgets/inputs\";\n\n\nexport interface ObjRolesMapEdit<OBJCTX, E extends ICoreUniverseEnv & IUiEnv> extends BaseAreaViewAsync<E> {\n\tinitialize(init: OObjRolesMapInit<OBJCTX, E>): this\n}\n\n\n/** Gestionnaire des rôles des users sur un objet métier : wsp, space, ... */\nexport interface OObjRolesMapInit<OBJCTX, E extends ICoreUniverseEnv & IUiEnv> extends OSkinableInit {\n\treg: IReg<E>,\n\t/** Init de la liste des {user/rôles}. */\n\tgrid?: OGridSmallInit,\n\tuiContext?: \"popup\" | undefined,\n\t/** Signature du niveau courant pour l'affectation des rôles\n\t * {@link IRoleEditUiHandlerContext.uiLayerSgn}\n\t */\n\trolesUiLayerSng?: string,\n\n\t/** Contexte de l'objet courant */\n\tobjThis: OBJCTX,\n\n\t/** Fonction retournant la liste des OUserRolesMap définis sur l'objet courant */\n\tobjFetchRolesMap: (objThis: OBJCTX) => (Promise<JUserRolesMap>),\n\n\t/** Fonction retournant la liste des OUserRolesMap résolus d'une lise de users sur l'objet courrant */\n\tobjFetchRolesMapForAccounts?: (objThis: OBJCTX, pAccounts: string[]) => Promise<JUserRolesMap>,\n\n\t/**\n\t * Fonction permettant d'enregistrer la liste *complète* des OUserRolesMap de l'objet courant.\n\t * Si la promesse est rejetée un message d'erreur sera affiché à l'utilisateur.\n\t * Si null est retourné, on considère que l'action a échoué mais que l'utilisateur a déja été informé.\n\t */\n\tobjEditRolesMap: (objThis: OBJCTX, rolesMap: JUserSpecifiedRolesMap) => Promise<JUserRolesMap | null>,\n\n\t/** Role contrôlé sur le reg pour l'édition */\n\tobjEditRolesMapPerms?: string[],\n\n\t/** Affiche l'entré \"Utilisateurs non connectés\" sur l'account spécifié */\n\taddAnonymousAccount?: string,\n\n\t/** accounts sélectionnées au load */\n\tpreSelectAccounts?: string[],\n}\n\n/** Contexte des actions associées à un / plusieurs rolesMap */\nexport interface JRolesMapActionCtx extends IRegPointer<ICoreUniverseEnv & IUiEnv> {\n\tuserRoles: JUserSetRoles[],\n}\n\n/** Roles du user account sur l'objet courant */\ninterface JUserSetRoles extends JUserRoles {\n\taccount: string,\n\t/** Flag indiquant que cet account n'existe pas dans la base.*/\n\tuserUnknown?: boolean,\n}\n\nexport class ObjRolesMapEdit<OBJCTX, E extends ICoreUniverseEnv & IUiEnv> extends BaseAreaViewAsync<E> implements IGridLineDrawer, JRolesMapActionCtx, IControlLabelContext {\n\treg: IReg<E>;\n\n\t/** Contexte d'initialisation */\n\tparams: OObjRolesMapInit<OBJCTX, E>;\n\n\t// JRolesMapActionCtx\n\t/** userRoles actuellement sélectionnée */\n\tuserRoles: JUserSetRoles[] = null;\n\n\t// IControlLabelContext\n\tbuildControlLabel = true;\n\n\tformEditElt: HTMLFormElement;\n\n\tprotected _rolesGridElt: GridSmall & IContextMenuActionsPointer<JRolesMapActionCtx>;\n\tprotected _dataHolder: GridDataHolderJsonTree<JUserSetRoles>;\n\tprotected _detailsBoxElt: HTMLDivElement;\n\tprotected _headBoxElt: HTMLDivElement;\n\tprotected _editUserRolesToolbar: BarActions<ObjRolesMapEdit<OBJCTX, E>>;\n\tprotected _showToolbarTop: BarActions<JRolesMapActionCtx>;\n\tprotected _showToolbarBottom: BarActions<JRolesMapActionCtx>;\n\tprotected _formEditEmptyData: Dict<any> = {};\n\tprotected _detailUserCurrentData: Jsonisable;\n\n\tprotected async _initialize(init: OObjRolesMapInit<OBJCTX, E>): Promise<void> {\n\t\tif (!this.reg) this.reg = REG.createSubReg(this.findReg(init));\n\t\tthis.params = init;\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin(\"webzone:panel\", sr);\n\t\tthis.reg.installSkin(\"form-control-areas\", sr);\n\t\tthis._initAndInstallSkin(\"rolesmap-edit\", init);\n\n\t\t// Accelkey\n\t\tlet accelKeyMgr = new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:rolesmap\", \"accelkeys:rolesmap:\" + this.id));\n\t\taccelKeyMgr.initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:rolesmap\", \"accelkeys:rolesmap:\" + this.id));\n\n\t\t// Actions\n\t\tthis.reg.addToList(\"actions:rolesmap:show:toolbar:top\", \"actionRefreshUi\", 1, actionRefreshUi);\n\t\tthis.reg.addToList(\"actions:rolesmap:show:toolbar:top\", \"actionNew\", 1, new CreateEntryAction().requireVisiblePerm(this.params.objEditRolesMapPerms));\n\t\tthis.reg.addToList(\"actions:rolesmap:edit:toolbar\", 'formSave', 1, new UserFormSaveAction().requireVisiblePerm(this.params.objEditRolesMapPerms));\n\t\tthis.reg.addToList(\"actions:rolesmap:edit:toolbar\", 'formRevert', 1, new UserFormRevertAction().requireVisiblePerm(this.params.objEditRolesMapPerms));\n\t\tthis.reg.addToList(\"actions:rolesmap:edit:toolbar\", \"deleteEntry\", 1, new DeleteEntriesAction().requireVisiblePerm(this.params.objEditRolesMapPerms));\n\n\t\t// ContextMenu\n\t\tthis.reg.addToList(\"actions:rolesmap:ctxtmenu\", \"actionDeleteEntry\", 1, new DeleteEntriesAction().requireVisiblePerm(this.params.objEditRolesMapPerms));\n\n\t\t// Areas\n\t\tthis.reg.addToList(\"areas:rolesmap:single\", 'account', 1, new UserAccountInputArea().setReadOnly(true));\n\t\tthis.reg.addToList(\"areas:rolesmap:new\", 'account', 1, new SelectUserInputArea(null, this));\n\t\tthis.reg.addToList(\"areas:rolesmap:single\", 'grantedRoles', 1, new UserRolesInputArea(null, {uiLayerSgn: this.params.rolesUiLayerSng} as ORolesSelectorInit & IRoleEditUiHandlerContext));\n\t\tthis.reg.addToList(\"areas:rolesmap:multi\", 'grantedRoles', 1, new UserRolesInputArea(null, {uiLayerSgn: this.params.rolesUiLayerSng, canBeIndeterminate: true} as ORolesSelectorInit & IRoleEditUiHandlerContext));\n\t\tthis.reg.addToList(\"areas:rolesmap:new\", 'grantedRoles', 1, new UserRolesInputArea(null, {uiLayerSgn: this.params.rolesUiLayerSng} as ORolesSelectorInit & IRoleEditUiHandlerContext));\n\n\t\tthis._headBoxElt = sr.appendChild(<div id=\"head\" c-resizable/>) as HTMLDivElement;\n\t\tsr.appendChild(<c-resizer/>);\n\t\tthis._detailsBoxElt = sr.appendChild(<div id=\"details\" c-resizable hidden/>) as HTMLDivElement;\n\n\t\t// [head] Grid\n\t\tthis._dataHolder = new GridDataHolderJsonTree<JUserSetRoles>();\n\t\tconst columnDefs = [new GridColDef('tree')\n\t\t\t.setFlex('1rem', 1, 1).setMinWidth('55px').setLabel(\"Compte\")\n\t\t\t.setCellBuilder(new CellBuilderAccount(this.reg, 'account', false, this.params.addAnonymousAccount ? [{account: this.params.addAnonymousAccount, isAnonymous: true}] : null)),\n\t\t\tnew GridColDef('roles')\n\t\t\t\t.setLabel(\"Rôles\").setDescription(\"Rôles résolus de l'utilisateur dans ce contexte\").setFlex('5rem', 1, 1)\n\t\t\t\t.setCellBuilder(new CellBuilderUserRoles(this.reg, \"roles\"))\n\t\t];\n\n\t\tthis._rolesGridElt = this._headBoxElt.appendChild(new GridSmall().initialize(Object.assign({\n\t\t\treg: this.reg,\n\t\t\tselType: \"multi\",\n\t\t\thideHeaders: false,\n\t\t\tcolumnDefs,\n\t\t\temptyBody: () => this._lastLoadErrorStatus ? <span class=\"error\">Accès aux rôles affectés en échec</span> : <span>Aucun rôle affecté à ce niveau</span>,\n\t\t\tskinOver: \"rolesmap-edit-tree\",\n\t\t\tlineDrawer: this,\n\t\t\tdataHolder: this._dataHolder,\n\t\t} as OGridSmallInit, init.grid)));\n\n\t\tthis._rolesGridElt.ctxMenuActions = {\n\t\t\tactions: ACTION.injectSepByGroup(this.reg.mergeLists(\"actions:rolesmap\", \"actions:rolesmap:ctxtmenu\", \"actions:rolesmap:ctxtmenu:\" + this.id) as IAction<JRolesMapActionCtx>[], this.reg.getPref(\"actions.rolesmap.groupOrder\", \"refresh users *\"), this),\n\t\t\tactionContext: this,\n\t\t};\n\n\t\tthis._rolesGridElt.addEventListener('keydown', async (ev: KeyboardEvent) => {\n\t\t\treturn accelKeyMgr.handleKeyboardEvent(ev, this);\n\t\t});\n\t\tthis._rolesGridElt.addEventListener('grid-select', async (ev: Event) => {\n\t\t\tthis.userRoles = (this._dataHolder && this._dataHolder.countRows() > 0) ? this._dataHolder.getSelectedDatas() as JUserSetRoles[] : [];\n\t\t\tthis._showToolbarTop.refreshContent();\n\t\t\tthis._showToolbarBottom.refreshContent();\n\t\t\tawait this.showDetails(this.userRoles);\n\t\t});\n\n\t\t// Toolbars\n\t\tlet toolbarsBox = this._headBoxElt.appendChild(<div id=\"toolbarsBox\"/>);\n\t\tthis._showToolbarTop = toolbarsBox.appendChild(new BarActions<JRolesMapActionCtx>().initialize({\n\t\t\treg: this.reg,\n\t\t\tactions: ACTION.injectSepByGroup(\n\t\t\t\tthis.reg.mergeLists(\"actions:rolesmap\", \"actions:rolesmap:show:toolbar:top\", \"actions:rolesmap:show:toolbar:top:\" + this.id, \"actions:rolesmap:\" + this.id),\n\t\t\t\tthis.reg.getPref(\"actions.rolesmap.groupOrder\", \"refresh users *\"), this),\n\t\t\tuiContext: \"bar\",\n\t\t\tactionContext: this,\n\t\t\tdisableFullOverlay: true,\n\t\t} as OBarActionsInit<JRolesMapActionCtx>));\n\t\tthis._showToolbarTop.setAttribute(\"class\", \"showToolbarTop\");\n\n\t\tthis._showToolbarBottom = toolbarsBox.appendChild(new BarActions<JRolesMapActionCtx>().initialize({\n\t\t\treg: this.reg,\n\t\t\tactions: ACTION.injectSepByGroup(\n\t\t\t\tthis.reg.mergeLists(\"actions:rolesmap:show:toolbar:bottom\", \"actions:rolesmap:show:toolbar:bottom:\" + this.id),\n\t\t\t\tthis.reg.getPref(\"actions.rolesmap.groupOrder\", \"refresh users *\"), this),\n\t\t\tuiContext: \"bar\",\n\t\t\tactionContext: this,\n\t\t\tdisableFullOverlay: true,\n\t\t} as OBarActionsInit<JRolesMapActionCtx>));\n\t\tthis._showToolbarBottom.setAttribute(\"class\", \"showToolbarBottom\");\n\n\t\t// Form details\n\t\tthis._editUserRolesToolbar = this._detailsBoxElt.appendChild(new BarActions<ObjRolesMapEdit<OBJCTX, E>>().initialize({\n\t\t\treg: this.reg,\n\t\t\tactions: ACTION.injectSepByGroup(\n\t\t\t\tthis.reg.mergeLists(\"actions:rolesmap:edit:toolbar\", \"actions:rolesmap:edit:toolbar:\" + this.id),\n\t\t\t\tthis.reg.getPref(\"actions.rolesmap.groupOrder\", \"edit *\"), this),\n\t\t\tuiContext: \"bar\",\n\t\t\tactionContext: this,\n\t\t\tdisableFullOverlay: true,\n\t\t} as OBarActionsInit<ObjRolesMapEdit<OBJCTX, E>>));\n\t\tthis._editUserRolesToolbar.setAttribute(\"class\", \"detailToolbar\");\n\t\t//this._editUserRolesToolbar.setAttribute(\"hidden\", \"true\");\n\n\t\tthis.formEditElt = this._detailsBoxElt.appendChild(<form id=\"form\" autocomplete=\"off\"/>) as HTMLFormElement;\n\t\t//await this.initFormUi();\n\n\t\tlet onFormEditRequest = 0;\n\t\tthis.formEditElt.addEventListener('input', () => {\n\t\t\tif (onFormEditRequest) {\n\t\t\t\tclearTimeout(onFormEditRequest);\n\t\t\t\tonFormEditRequest = 0;\n\t\t\t}\n\t\t\tonFormEditRequest = setTimeout(async () => {\n\t\t\t\tawait this.computeDirtyStatus();\n\t\t\t\tonFormEditRequest = 0;\n\t\t\t}, 300) as any;\n\t\t});\n\t\tthis.formEditElt.addEventListener('keydown', async (ev: KeyboardEvent) => {\n\t\t\tif (ev.key === 's' && ACTION.isAccelPressed(ev)) {\n\t\t\t\tev.preventDefault();\n\t\t\t\tev.stopImmediatePropagation();\n\t\t\t\tUserFormSaveAction.SINGLETON.executeIfAvailable(this, ev);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\tthis._dirtyMdgOver.addEventListener(\"dblclick\", (ev) => {UserFormRevertAction.SINGLETON.executeIfAvailable(this, ev)});\n\n\t\tthis.addEventListener('keydown', async (ev: KeyboardEvent) => {\n\t\t\tif (ev.key === 'Enter' && ACTION.isAccelPressed(ev)) {\n\t\t\t\tev.preventDefault();\n\t\t\t\tev.stopImmediatePropagation();\n\t\t\t\tif (init.uiContext === \"popup\" && await VIEWS.canHideView(this)) {\n\t\t\t\t\tPOPUP.findPopupableParent(this).close(false);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\treturn this.refreshUi(this.params?.preSelectAccounts?.map(entry => {return {account: entry}}));\n\t}\n\n\t/** Refresh UI */\n\tasync _refresh() {\n\t\tthis.refreshFreeze(1);\n\t\ttry {\n\t\t\tsuper._refresh();\n\t\t\tawait this.refreshUi();\n\t\t} finally {\n\t\t\tthis.refreshFreeze(-1);\n\t\t}\n\t}\n\n\tasync refreshUi(selectRolesMapEntries?: JUserSetRoles[]) {\n\t\tawait this.fetchRolesMap(selectRolesMapEntries);\n\t}\n\n\t/** Retourne true si le compte a déjàdes rôles affectés (et que le dateHolter est chargé) */\n\tisAccountInMap(account: string): boolean {\n\t\treturn this._dataHolder.getDatas().find((entry) => entry.account === account) ? true : false;\n\t}\n\n\t/**\n\t * Tree\n\t */\n\n\t/** Affecte des modifications d'utilisateurs dans le tree\n\t * \tNOTE : aucun enregistrement n'est réalisé via cette fonction\n\t */\n\n\t/*\n\tuserRolesChange(userRoles: JUserSetRoles | JUserSetRoles[], remove:boolean=false){\n\t\tif (userRoles){\n\t\t\tif(Array.isArray(userRoles))\n\t\t\t\tuserRoles.forEach((entry)=>this.userRolesChange(entry, remove));\n\t\t\telse{\n\t\t\t\tlet datas = this._dataHolder.getDatas();\n\t\t\t\tlet userEntry = datas.find((entry) => entry.account === userRoles.account);\n\t\t\t\tif (userEntry) {\n\t\t\t\t\tconst offset = this._dataHolder.getOffset(userEntry);\n\t\t\t\t\tif(remove){\n\t\t\t\t\t\tthis._dataHolder.deleteRowKey(this._dataHolder.getRowKey(offset));\n\t\t\t\t\t}else{\n\t\t\t\t\t\tObject.keys(userEntry).forEach((key) => {(userEntry as any)[key] = undefined});\n\t\t\t\t\t\tObject.assign(userEntry, userRoles);\n\t\t\t\t\t\tthis._rolesGridElt.invalidateRows(offset, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t*/\n\n\t/** Rafraichissement global du tree\n\t * \tNOTE : aucun enregistrement n'est réalisé via cette fonction\n\t */\n\tprivate allUserRolesChange(usersRolesMap: JUserRolesMap): void {\n\t\tlet usersRoles: JUserSetRoles[] = [];\n\t\tObject.keys(usersRolesMap).forEach((account) => {\n\t\t\tusersRoles.push({\n\t\t\t\taccount,\n\t\t\t\tgrantedRoles: usersRolesMap[account].allowedRoles,\n\t\t\t\trefusedRoles: usersRolesMap[account].deniedRoles,\n\t\t\t\tinheritedRoles: usersRolesMap[account].inheritedRoles,\n\t\t\t\tuserUnknown: usersRolesMap[account].userUnknown\n\t\t\t})\n\t\t});\n\t\tthis._dataHolder.setDatas(usersRoles);\n\t}\n\n\t/** Raffraichit le tree avec préservation de la sélection */\n\tasync fetchRolesMap(selectRolesMapEntries?: JUserSetRoles[]) {\n\t\ttry {\n\t\t\tthis._lastLoadErrorStatus = undefined;\n\t\t\tconst selectedEntries = selectRolesMapEntries ? selectRolesMapEntries : ((this._dataHolder && this._dataHolder.countRows() > 0) ? this._dataHolder.getSelectedDatas() as JUserSetRoles[] : []);\n\t\t\tthis.allUserRolesChange(await this.params.objFetchRolesMap(this.params.objThis));\n\t\t\tthis._lastLoadErrorStatus = false;\n\t\t\tif (selectedEntries) this.selectRolesMapEntry(selectedEntries);\n\t\t} catch (e) {\n\t\t\tthis._lastLoadErrorStatus = true;\n\t\t\tthis.allUserRolesChange({});\n\t\t\tawait ERROR.show(\"Accès à la liste des rôles en échec\", e);\n\t\t}\n\t}\n\n\tprivate _lastLoadErrorStatus: boolean;\n\n\t/**\n\t * Enregistre un usersSetRoles et raffraichit les entrées du tree correspondant.\n\t *\n\t */\n\tasync saveRolesMap(usersSetRoles: JUserSetRoles[]): Promise<JUserRolesMap | null> {\n\t\tlet usersRolesMap: JUserSpecifiedRolesMap = {};\n\t\tlet isEmpty = true;\n\t\tusersSetRoles.forEach((entry) => {\n\t\t\tif (entry.account) {\n\t\t\t\tusersRolesMap[entry.account] = (entry.grantedRoles || entry.refusedRoles) ? {allowedRoles: entry.grantedRoles, deniedRoles: entry.refusedRoles} : null;\n\t\t\t\tisEmpty = false;\n\t\t\t}\n\t\t});\n\t\tif (!isEmpty) {\n\t\t\tlet resp = await this.params.objEditRolesMap(this.params.objThis, usersRolesMap);\n\t\t\tthis.showDetails(null);\n\t\t\tif (resp != null) this.allUserRolesChange(resp);\n\t\t\telse this.fetchRolesMap()\n\t\t\treturn resp;\n\t\t}\n\t}\n\n\t/**\n\t * Sélection des entrées de l'arbre via une liste de JUser sur un tree **chargé**\n\t * Si un itemType demandé n'est pas présent dans le tree, aucune erreur n'est remontée\n\t * @param entries\n\t */\n\tselectRolesMapEntry(entries: JUserSetRoles[]): void {\n\t\tif (entries?.length) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this._dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst userRow = this._dataHolder.getRow(i).rowDatas as JUser;\n\t\t\t\tif (userRow && entries.find(entry => entry && entry.account == userRow.account))\n\t\t\t\t\tselectedRows.push(i);\n\t\t\t}\n\t\t\tthis._rolesGridElt.setSelectedRows(selectedRows);\n\t\t}\n\t}\n\n\n\t/**\n\t * Initialisation des fieldset du formulaire\n\t * Retourne true si le user a été affiché\n\t */\n\tasync showDetails(userRoles: JUserSetRoles[] | null, forced: boolean = false): Promise<boolean> {\n\t\tif (!forced && (userRoles === null || userRoles.length == 0)) {\n\t\t\tDOM.setHidden(this._detailsBoxElt, true);\n\t\t\tthis._detailUserCurrentData = undefined;\n\t\t\tthis.dirtyStatus = false;\n\t\t\tthis._editUserRolesToolbar.refreshContent();\n\t\t\treturn false;\n\t\t} else if (userRoles && userRoles.length == 1) {\n\t\t\tDOM.setHidden(this._detailsBoxElt, false);\n\t\t\tawait this.initFormUi('single', true);\n\t\t\tFORMS.jsonToForm(userRoles[0], this.formEditElt, false, true);\n\t\t\tthis._detailUserCurrentData = FORMS.formToJson(this.formEditElt);\n\t\t\tthis.formEditElt.checkValidity();\n\t\t\tthis.formEditElt.querySelectorAll(\"fieldset\").forEach((fieldsetElt: HTMLFieldSetElement) => {\n\t\t\t\tfieldsetElt.disabled = this.isReadOnlyForm(userRoles);\n\t\t\t});\n\t\t\tthis.dirtyStatus = false;\n\t\t\tthis._editUserRolesToolbar.refreshContent();\n\t\t\treturn true;\n\t\t} else if (userRoles && userRoles.length > 1) {\n\t\t\t// sélection multiple de users\n\t\t\tDOM.setHidden(this._detailsBoxElt, false);\n\t\t\tawait this.initFormUi('multi', true);\n\t\t\tFORMS.jsonToForm([], this.formEditElt, false, true);\n\t\t\tthis._detailUserCurrentData = FORMS.formToJson(this.formEditElt);\n\t\t\tthis.formEditElt.checkValidity();\n\t\t\tthis.formEditElt.querySelectorAll(\"fieldset\").forEach((fieldsetElt: HTMLFieldSetElement) => {\n\t\t\t\tfieldsetElt.disabled = this.isReadOnlyForm(userRoles);\n\t\t\t});\n\t\t\tthis.dirtyStatus = false;\n\t\t\tthis._editUserRolesToolbar.refreshContent();\n\t\t\treturn true;\n\t\t} else {\n\t\t\t// forced\n\t\t\tDOM.setHidden(this._detailsBoxElt, false);\n\t\t\tawait this.initFormUi('new', true);\n\t\t\tawait FORMS.jsonToForm([], this.formEditElt, false, true);\n\t\t\tthis._detailUserCurrentData = FORMS.formToJson(this.formEditElt);\n\t\t\tthis.formEditElt.checkValidity();\n\t\t\tthis.formEditElt.querySelectorAll(\"fieldset\").forEach((fieldsetElt: HTMLFieldSetElement) => {\n\t\t\t\tfieldsetElt.disabled = this.isReadOnlyForm(userRoles);\n\t\t\t});\n\t\t\tthis.dirtyStatus = \"forcedTrue\";\n\t\t\tthis._editUserRolesToolbar.refreshContent();\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/** Retourne true si le formulaire est readonly */\n\tprotected isReadOnlyForm(user: JUserSetRoles | JUserSetRoles[] | null): boolean {\n\t\tif (!this.params.objEditRolesMapPerms || !this.reg.hasPerm(this.params.objEditRolesMapPerms)) return true;\n\t\treturn false;\n\t}\n\n\t/** Reset/Initialisation du formulaire (def du/des fieldset)\n\t * @param onlyIfNecessay : recalcul de la zone qu'en cas de changement de contexte ui\n\t * */\n\tprivate async initFormUi(morphology: 'single' | 'multi' | 'new' = 'single', onlyIfNecessay?: boolean): Promise<void> {\n\t\t// permet d'éviter un effet de flash sur changement de user\n\t\tif (onlyIfNecessay && this._lastFormMorphology === morphology)\n\t\t\treturn;\n\t\t// Recalcul de l'area\n\t\tthis.formEditElt.innerHTML = \"\";\n\t\tthis.formEditElt.appendChild(\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"fields\" area-ids=\"*\"/>\n\t\t\t</fieldset>);\n\t\tlet listCodes = [\"areas:rolesmap\", \"areas:rolesmap:\" + morphology, \"areas:rolesmap:\" + morphology + \":\" + this.id];\n\t\tawait AREAS.applyLayout(this.formEditElt, await Promise.all(this.reg.mergeLists<IArea<JRolesMapActionCtx & IControlAreaContext> | Promise<IArea<JRolesMapActionCtx & IControlAreaContext>>>(...listCodes)), this);\n\t\tthis._formEditEmptyData = FORMS.formToJson(this.formEditElt);\n\t\tthis._lastFormMorphology = morphology;\n\t}\n\n\tprivate _lastFormMorphology: 'single' | 'multi' | 'new' | undefined;\n\n\t/** Retourne true si au moins une valeur du formulaire a changé */\n\tget dirtyStatus(): boolean | \"forcedTrue\" {return this._dirtyStatus}\n\n\tset dirtyStatus(val: boolean | \"forcedTrue\") {\n\t\tif (this._dirtyStatus != val) {\n\t\t\tthis._dirtyStatus = val;\n\t\t\t//DOM.setHidden(this._editUserRolesToolbar, !this._dirtyStatus);\n\t\t\tthis._editUserRolesToolbar.refreshContent();\n\t\t\tif (this.dirtyStatus === true || this.dirtyStatus === \"forcedTrue\") {\n\t\t\t\tthis._dirtyMdgOver.showMsgOver(this._headBoxElt);\n\t\t\t} else {\n\t\t\t\tthis._dirtyMdgOver.removeMsg();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _dirtyStatus: boolean | \"forcedTrue\" = false;\n\t_dirtyMdgOver: MsgOver = <c-msg-over class=\"disableMsgOver\"/> as MsgOver;\n\n\tasync computeDirtyStatus(): Promise<boolean | \"forcedTrue\"> {\n\t\tif (this._detailsBoxElt.hasAttribute(\"hidden\"))\n\t\t\treturn false;\n\t\tif (this.dirtyStatus === \"forcedTrue\") return;\n\t\tconst userData = FORMS.formToJson(this.formEditElt);\n\t\t/*console.log(\"DIRTY :: \", JSON.stringify(wspData) !== JSON.stringify(this._lastWspData));\n\t\tconsole.log(\"LAST :: \", JSON.stringify(this._lastWspData));\n\t\tconsole.log(\"NEW  :: \", JSON.stringify(wspData));*/\n\t\tthis.dirtyStatus = JSON.stringify(userData) !== JSON.stringify(this._detailUserCurrentData);\n\t\treturn this.dirtyStatus;\n\t}\n\n\t/**\n\t * Tree\n\t */\n\tredrawLine(row: GridDataRowJson<JUserSetRoles>, line: HTMLElement): void {\n\t\tif (row.rowDatas.userUnknown)\n\t\t\tline.title = \"Utilisateur / groupe inconnu\";\n\t\telse\n\t\t\tdelete line.title;\n\t\tDOM.setAttrBool(line, \"data-user-unknown\", row.rowDatas.userUnknown);\n\t}\n\n\t/**\n\t * IViewApi\n\t */\n\tonViewBeforeHide(close?: boolean): boolean {\n\t\treturn false;\n\t}\n\n\tasync onViewWaitForHide(close?: boolean): Promise<boolean> {\n\t\treturn !await this.computeDirtyStatus() || await POPUP.confirm(`Des propriétés n'ont pas été enregistrées. Voulez-vous abandonner ces modifications et quitter ?`, this.reg.env.uiRoot, {\n\t\t\tokLbl: \"Abandonner les modifications et quitter\",\n\t\t\tcancelLbl: \"Reprendre l'édition\"\n\t\t});\n\t}\n\n}\n\ncustomElements.define(\"rolesmap-edit\", ObjRolesMapEdit);\n\nREG.reg.registerSkin('rolesmap-edit', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tflex-direction: column;\n\t\toverflow: hidden;\n\t}\n\n\t#head {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\toverflow: auto;\n\t}\n\n\tc-grid-small {\n\t\tflex: 1;\n\t}\n\n\t#toolbarsBox {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\tc-bar-actions.showToolbarTop {\n\t\tflex: 1;\n\t}\n\n\tc-bar-actions.showToolbarTop,\n\tc-bar-actions.showToolbarBottom {\n\t\tflex-direction: column;\n\t\tborder-inline-start: 1px solid var(--border-color);\n\t}\n\n\n\tc-bar-actions.detailToolbar {\n\t\tflex-direction: row;\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\tc-bar-actions.detailToolbar[hidden] {\n\t\tdisplay: none;\n\t}\n\n\tc-resizer {\n\t\tpointer-events: auto;\n\t\tcursor: ns-resize;\n\t\theight: 2px;\n\t}\n\n\t.disableMsgOver {\n\t\tbackground-color: rgba(0, 0, 0, .2);\n\t}\n\n\t/* Form */\n\t#details {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\toverflow: auto;\n\t}\n\n\t#details[hidden] {\n\t\tdisplay: none;\n\t}\n\n\tform {\n\t\tflex-direction: column;\n\t\tpadding: .4em;\n\t\toverflow: auto;\n\t}\n\n\tfieldset {\n\t\tborder: none;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tmin-width: 0;\n\t}\n\n\t.lbl {\n\t\tmin-width: 4em;\n\t}\n\n\t.fields > * {\n\t\tflex: 1;\n\t\tdisplay: grid;\n\t\tmin-width: 0;\n\t\tgrid-template-columns: auto 1fr;\n\t\tgrid-row-gap: .7rem;\n\t\tgrid-auto-rows: max-content;\n\t}\n\n\tc-input-users-panel, c-input-roles-selector {\n\t\tflex: 1\n\t}\n\n`);\nREG.reg.registerSkin('rolesmap-edit-tree', 1, /* language=CSS */ `\n\t*[data-user-unknown] {\n\t\tfont-style: italic;\n\t\tcolor: var(--warning-color);\n\t}\n\n\t.error {\n\t\tcolor: var(--error-color);\n\t}\n\n\t.icon {\n\t\tbackground-size: 1rem;\n\t}\n\n\t/** Mise en forme de CellBuilderUserRoles */\n\t.role-unknown {\n\t\ttext-decoration: line-through;\n\t}\n\n\t.role-inherited {\n\t\tfont-style: italic;\n\t}\n\n`);\n\n/** Areas **/\n/** Sélection de l'utilisateur / groupe */\nexport class SelectUserInputArea<C extends JRolesMapActionCtx & IControlAreaContext> extends ControlAsyncArea<C> {\n\tconstructor(id: string, public rolesMapEdit: ObjRolesMapEdit<any, any>) {\n\t\tsuper(id || \"account\");\n\t\tthis.setLabel(\"Compte\");\n\t}\n\n\tasync _loadControl(ctx: C, name: string): Promise<InputUserPanel<any>> {\n\t\tlet userSelector = new InputUserPanel().initialize({\n\t\t\tname: this._id,\n\t\t\trequired: true,\n\t\t\treg: ctx.reg,\n\t\t\temptySelectionMsg: \"Choisir un compte...\",\n\t\t\tuserCard: \"multi\",\n\t\t\tusersGridInit: {\n\t\t\t\tusersSrv: ctx.reg.env.universe.useUsers,\n\t\t\t\tgrid: {selType: \"multi\"},\n\t\t\t\tfilterType: null,\n\t\t\t\tfilterTypeInputVisibility: true,\n\t\t\t\tnormalizeList: this.rolesMapEdit.params.addAnonymousAccount ? (array: JUser[], filterTxtRegExp?: RegExp) => {\n\t\t\t\t\tif (!array.find(entry => entry.account === this.rolesMapEdit.params.addAnonymousAccount))\n\t\t\t\t\t\tarray.push({account: this.rolesMapEdit.params.addAnonymousAccount, isAnonymous: true});\n\t\t\t\t\treturn array;\n\t\t\t\t} : null,\n\t\t\t\topenFilter: (entry) => !this.rolesMapEdit.isAccountInMap(entry.account),\n\t\t\t},\n\t\t} as OInputUserInit<any>);\n\t\tawait userSelector.initializedAsync;\n\n\t\t// maj de la zone \"roles\"\n\t\tuserSelector.addEventListener(\"change\", async (evt) => {\n\t\t\tif (userSelector.value && userSelector.value.length > 0) {\n\t\t\t\tconst resp = await this.rolesMapEdit.params.objFetchRolesMapForAccounts(this.rolesMapEdit.params.objThis, userSelector.value);\n\t\t\t\tctx.userRoles = [];\n\t\t\t\tfor (const userAccount in resp) {\n\t\t\t\t\tif (resp[userAccount])\n\t\t\t\t\t\tctx.userRoles.push({\n\t\t\t\t\t\t\taccount: userAccount,\n\t\t\t\t\t\t\tgrantedRoles: resp[userAccount].allowedRoles,\n\t\t\t\t\t\t\trefusedRoles: resp[userAccount].deniedRoles,\n\t\t\t\t\t\t\tinheritedRoles: resp[userAccount].inheritedRoles,\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tctx.userRoles = [];\n\t\t\tawait (userSelector.form.querySelector(\"c-input-roles-selector\") as RolesSelectorInput).setInheritedRoles((ctx.userRoles && ctx.userRoles.length == 1) ? ctx.userRoles[0].inheritedRoles : null);\n\t\t});\n\t\treturn userSelector;\n\t}\n}\n\n/** Actions **/\n\nabstract class RolesMapAction<E extends JRolesMapActionCtx = JRolesMapActionCtx> extends Action<E> {\n\tprotected mode: 'mono' | 'multi' = null;\n\n\tsetMode(mode: 'mono' | 'multi') {\n\t\tthis.mode = mode;\n\t}\n\n\tisVisible(ctx: E): boolean {\n\t\tif (!ctx.reg) return false;\n\t\tif (this.mode === \"mono\" && (!ctx.userRoles || ctx.userRoles.length !== 1)) return false;\n\t\tif (this.mode === \"multi\" && (!ctx.userRoles || ctx.userRoles.length === 0)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n}\n\n/** Action refresh UI */\nconst actionRefreshUi = new Action<any>(\"refreshUi\")\n\t.setLabel(\"Rafraichir\")\n\t.setGroup(\"refresh\")\n\t.setIcon(\"/@skin@/commons/icons/refresh.svg\")\n\t.setExecute(async function (this: Action<any>, ctx: any, ev: Event) {\n\t\t\tconst me = DOMSH.findHost<ObjRolesMapEdit<any, any>>(ev.target as Node);\n\t\t\tawait me.refresh();\n\t\t}\n\t);\n\n/** Formulaire : reset du formulaire */\nclass UserFormRevertAction<E extends ObjRolesMapEdit<any, any>> extends RolesMapAction<E> {\n\tstatic SINGLETON = new UserFormRevertAction();\n\n\tconstructor(id?: string) {\n\t\tsuper(id || \"userFormRevert\");\n\t\tthis._label = \"Annuler\";\n\t\tthis.setGroup(\"edit\");\n\t\tthis.setIcon(\"/@skin@/core/dialogs/cancel.svg\");\n\t}\n\n\tisEnabled(ctx: E): boolean {\n\t\tif (!ctx.formEditElt || ctx.formEditElt.hasAttribute(\"disabled\"))\n\t\t\treturn false;\n\t\tif (!ctx.dirtyStatus)\n\t\t\treturn false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\tasync execute(ctx: ObjRolesMapEdit<any, any>, ev?: Event): Promise<boolean> {\n\t\t// si pas execute issu de \"this\", confirmation\n\t\tif (ctx.dirtyStatus === \"forcedTrue\" || ((ev.target as Element).id === this.getId() || await POPUP.confirm(`Voulez-vous abandonner les modifications en cours ?`, ctx.reg.env.uiRoot, {\n\t\t\tokLbl: \"Abandonner les modifications\",\n\t\t\tcancelLbl: \"Reprendre l'édition\"\n\t\t}))) {\n\t\t\treturn ctx.showDetails(ctx.userRoles);\n\t\t}\n\t}\n}\n\n\n/** Formulaire : enregistrement des propriétés d'un utilisateur */\nclass UserFormSaveAction<E extends ObjRolesMapEdit<any, any>> extends RolesMapAction<E> {\n\tstatic SINGLETON = new UserFormSaveAction();\n\n\tconstructor(id?: string) {\n\t\tsuper(id || \"userFormSave\");\n\t\tthis._label = \"Enregistrer\";\n\t\tthis.setGroup(\"edit\");\n\t\tthis.setIcon(\"/@skin@/core/dialogs/save.svg\");\n\t}\n\n\tisEnabled(ctx: E): boolean {\n\t\tif (!ctx.formEditElt || ctx.formEditElt.hasAttribute(\"disabled\"))\n\t\t\treturn false;\n\t\tif (!ctx.dirtyStatus)\n\t\t\treturn false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\tasync execute(ctx: E, ev?: Event): Promise<void> {\n\t\tif (ctx.formEditElt.reportValidity()) {\n\t\t\tlet msg = new MsgOver();\n\t\t\tawait msg.setCustomMsg(\"Veuillez patienter...\", \"info\").showMsgOver(ctx).waitFor(\n\t\t\t\tasync () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst params: JUserSetRoles = FORMS.formToJson(ctx.formEditElt);\n\t\t\t\t\t\tif (ctx.userRoles) {\n\t\t\t\t\t\t\tctx.userRoles.forEach((entry) => {\n\t\t\t\t\t\t\t\tObject.assign(entry, {grantedRoles: params.grantedRoles, refusedRoles: params.refusedRoles} as JUserSetRoles);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t// On filtre les users ajoutés, sans directive\n\t\t\t\t\t\t\tconst filteredList = ctx.userRoles.filter((entry) => ctx.isAccountInMap(entry.account) || entry.grantedRoles?.length || entry.refusedRoles?.length);\n\t\t\t\t\t\t\tif (filteredList.length)\n\t\t\t\t\t\t\t\tawait ctx.saveRolesMap(filteredList);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tPOPUP.showNotifWarning(\"Aucune information à enregistrer\", ctx.formEditElt);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tERROR.report(`L'enregistrement a échoué. Veuillez réessayer ultérieurement.`, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n}\n\n/** Création d'une entrée */\nexport class CreateEntryAction<E extends ObjRolesMapEdit<any, any>> extends RolesMapAction<E> {\n\tstatic SINGLETON = new CreateEntryAction();\n\n\tconstructor(id?: string) {\n\t\tsuper(id || \"createEntry\");\n\t\tthis.setLabel(\"Modifier les permissions pour un utilisateur\");\n\t\tthis.setDescription(\"Modifier les permissions pour un utilisateur\");\n\t\tthis._group = \"add\";\n\t\tthis.setIcon(\"/@skin@/commons/icons/new.svg\");\n\t}\n\n\tasync execute(ctx: E, ev?: Event): Promise<void> {\n\t\tlet msg;\n\t\tawait ctx.showDetails(null, true);\n\t}\n}\n\n/** Suppression d'une ou plusieurs entrées */\nexport class DeleteEntriesAction<E extends ObjRolesMapEdit<any, any>> extends RolesMapAction<E> {\n\tstatic SINGLETON = new DeleteEntriesAction();\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis.setMode(\"multi\");\n\t\tthis._label = (ctx) => {\n\t\t\tif (ctx.userRoles && ctx.userRoles.length > 1) return \"Supprimer les déclarations de rôles\"\n\t\t\telse return \"Supprimer la déclaration de rôles\";\n\t\t};\n\t\tthis._description = (ctx) => {\n\t\t\tif (ctx.userRoles && ctx.userRoles.length > 1) return \"Suppression des déclarations de rôles\"\n\t\t\telse return \"Suppression de la déclaration de rôles\";\n\t\t};\n\t\tthis._group = \"remove\";\n\t\tthis.setIcon(\"/@skin@/commons/icons/delete.svg\");\n\t}\n\n\tisEnabled(ctx: E): boolean {\n\t\tif (ctx.dirtyStatus !== false) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\tasync execute(ctx: E, ev?: Event): Promise<boolean> {\n\t\tlet msg;\n\t\tif (ctx.userRoles.length === 1) {\n\t\t\tmsg = `Voulez-vous vraiment supprimer cette déclaration de rôles ?`;\n\t\t} else {\n\t\t\tconst usersCount = ctx.userRoles.length;\n\t\t\tmsg = `Voulez-vous vraiment supprimer ces '${usersCount}' déclarations de rôles ?`;\n\t\t}\n\n\t\tif (await POPUP.confirm(msg, null, {okLbl: \"Supprimer\", cancelLbl: \"Annuler\"})) {\n\t\t\ttry {\n\t\t\t\tif (ctx.userRoles) {\n\t\t\t\t\tctx.userRoles.forEach((entry) => {\n\t\t\t\t\t\tdelete entry.grantedRoles;\n\t\t\t\t\t\tdelete entry.refusedRoles;\n\t\t\t\t\t});\n\t\t\t\t\tif (!await ctx.saveRolesMap(ctx.userRoles)) return false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} catch (e) {\n\t\t\t\tawait ERROR.report(`La suppression des déclarations de rôles n'a pas pu aboutir. Veuillez réessayer ultérieurement.`, e);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}"]}