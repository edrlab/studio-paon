{"version":3,"sources":["/@back@/wsp/actions/scProtocolActions.tsx"],"names":["POPUP","REG","JSX","ViewsContainer","InfoCurrentItem","InfoFocusNodeInItem","ItemViewerSingle","SCPRTC","ScUniverseProtocolExec","Wsp","WSP","ESrcSt","ERROR","ImportScar","SKINPACK","WSPPACK","ScWspProtocolExec","[object Object]","params","reg","wsp","this","u","findUniverse","wspServer","env","place","getWsp","registerWsp","OpenAppOnWspScProtocolExec","emitter","ev","appDef","appDefUniversIdParam","universe","getId","appDefWspCdParam","findWsp","code","desk","findAndOpenApp","OpenNodeScProtocolExec","handled","Error","infoBroker","info","refUri","dispatchInfo","itemViewer","root","createElement","Ã®","views","style","initViewer","showDialog","uiRoot","titleBar","initWidth","initHeight","resizer","AddWspOptionsScProtocolExec","wspOptions","length","progress","showProgress","waitForLoad","close","wspTitle","optionsTitle","map","entry","title","key","sort","join","confirm","newWspType","Object","wspType","hasChanged","forEach","find","opt","version","startsWith","push","updateWspType","ImportScarScProtocolExec","scarUrl","dstSpaceSrcUriFavour","maxChecks","counter","dstSpaceSrcUriTarget","dstSpaceSrcUriCandidate","node","fetchSrcTree","srcSt","none","data","resp","fetch","method","cache","blob","e","show","type","leafname","split","pop","file","File","doImportScar","dataType","CreateWspScProtocolExec","wspLabel","wspParams","wspCd","alias","infoWspError","status","createWsp","subActions","newReg","createSubReg","act","action","findAction","execute","console","log","InstallPackScProtocolExec","_a","packServer","packUrl","packName","hasPerm","pack","installPack","error","errorToString","mimeType","InstallSkinScProtocolExec","install","isStatusInstalled","installStatus","registerWspProtocolsActions","addToList","LIST_EXECUTORS"],"mappings":"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","sourcesContent":["import {POPUP} from \"back/commons/widgets/popups\";\nimport {IReg, IUiEnv, REG} from 'lib/commons/registry';\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {ViewsContainer} from \"lib/commons/views\";\nimport \"back/wsp/views/views_Perms\";\nimport {InfoCurrentItem, InfoFocusNodeInItem} from \"lib/wsp/item\";\nimport {ItemViewerSingle} from \"back/wsp/views/itemViewerSingle\";\nimport {IScProtocolExecutor, JScProtocolParams, JScProtocolParamsOnUniverse, JScProtocolParamsSubActions, SCPRTC, ScUniverseProtocolExec} from \"lib/core/scenariProtocol\";\nimport {IWspUiEnv, JWspCreateParamsDB, JWspCreateParamsDB_DRF, JWspCreateParamsDB_DRV, JWspCreateParamsFS, JWspType, JWspTypeInst, Wsp, WSP} from \"lib/wsp/wsp\";\nimport {ESrcSt, srcRef} from \"lib/wsp/src\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {ImportScar} from \"back/wsp/actions/srcActions\";\nimport {ChainUniverse, IChainEnv} from \"lib/wsp/chain\";\nimport {AppFrameDeskFeat, JAppDef} from \"back/core/appFrame\";\nimport {IInfoBrokerPointer} from \"lib/commons/infos\";\nimport {BasicUniverse, IBasicUniversePointer, IUniverseEnv} from \"lib/core/universe\";\nimport {IPacksInUniverse, SKINPACK, WSPPACK} from \"lib/wsp/pack\";\nimport {ISecurityCtxPointer} from \"lib/commons/security\";\n\n\n/** ParamÃ¨tres typÃ©s du protocol Scenari (json parsÃ©) liÃ©s Ã  la dÃ©signation d'un wsp */\ninterface JScProtocolParamsOnWsp extends JScProtocolParams, JScProtocolParamsOnUniverse {\n\twsp?: string\n}\n\n/**\n * ScWspProtocolExec spÃ©cialisÃ© au contexte \"Wsp\"\n */\nabstract class ScWspProtocolExec<P extends JScProtocolParamsOnWsp> extends ScUniverseProtocolExec<P, IChainEnv, ChainUniverse> implements IScProtocolExecutor<P> {\n\tprivate wsp: Wsp;\n\n\t/** Retourne un objet wsp **pas nÃ©cessairement chargÃ©** */\n\tfindWsp(params: P, reg: IReg<IWspUiEnv | IChainEnv>): Wsp {\n\t\tif (params.wsp) {\n\t\t\tif (!this.wsp) {\n\t\t\t\tconst u = this.findUniverse(params, reg as IReg<IChainEnv>);\n\t\t\t\tif (!u || !u.wspServer) return;\n\t\t\t\tif ((reg as IReg<IWspUiEnv>).env.place) {\n\t\t\t\t\tthis.wsp = (reg as IReg<IWspUiEnv>).env.place.getWsp(params.wsp);\n\t\t\t\t\tif (!this.wsp) (reg as IReg<IWspUiEnv>).env.place.registerWsp(new Wsp(u.wspServer, params.wsp));\n\t\t\t\t} else {\n\t\t\t\t\tthis.wsp = new Wsp(u.wspServer, params.wsp);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.wsp;\n\t\t} else\n\t\t\treturn (reg as IReg<IWspUiEnv>).env.wsp;\n\t}\n}\n\n\n/**\n * Protocole scenari pour ouvrir une app (item, tÃ¢che...) en lien avec un wsp\n * Contexte minimum requis : IWspUiEnv, ou param \"wsp\"\n *\n * ex : scenari:{\"action\":\"openAppOnWsp\",\"appDefUniversIdParam\":\"u\", \"appDefWspCdParam\":\"wsp\"}\n */\nexport interface JOpenAppOnWspScProtocolParams extends JScProtocolParamsOnWsp {\n\n\taction: \"openAppOnWsp\"\n\n\t/** params de l'app */\n\tappDef: JAppDef\n\n\tappDefUniversIdParam?: string;\n\n\tappDefWspCdParam?: string;\n\n}\n\nexport class OpenAppOnWspScProtocolExec<P extends JOpenAppOnWspScProtocolParams> extends ScWspProtocolExec<P> {\n\tasync execute(params: P, reg: IReg<IWspUiEnv | IChainEnv & IUiEnv | IUiEnv>, emitter: HTMLElement, ev: Event) {\n\t\tif (!params.appDef) params.appDef = {};\n\n\t\t/** Injection des paramÃ¨tres contextuels */\n\t\tif (params.appDefUniversIdParam) {\n\t\t\tconst universe = this.findUniverse(params, reg as IReg<IChainEnv>);\n\t\t\tif (universe)\n\t\t\t\t(params.appDef as any)[params.appDefUniversIdParam] = universe.getId();\n\t\t}\n\t\tif (params.appDefWspCdParam) {\n\t\t\tconst wsp = this.findWsp(params, reg as IReg<IChainEnv>);\n\t\t\tif (wsp)\n\t\t\t\t(params.appDef as any)[params.appDefWspCdParam] = wsp.code;\n\t\t}\n\n\t\treturn (desk as AppFrameDeskFeat).findAndOpenApp(params.appDef, ev);\n\t}\n}\n\n/**\n * Protocole scenari pour ouvrir une src (item, tÃ¢che...).\n * Contexte minimum requis : IWspUiEnv, ou param \"wsp\"\n *\n * ex : scenari:{\"action\":\"openNode\",\"refUri\":\"/my/item.xml\"}\n */\nexport interface JOpenNodeScProtocolParams extends JScProtocolParamsOnWsp {\n\n\taction: \"openNode\"\n\n\t/** ref de la source Ã  ouvrir */\n\trefUri: srcRef\n}\n\nexport class OpenNodeScProtocolExec<P extends JOpenNodeScProtocolParams> extends ScWspProtocolExec<P> {\n\tasync execute(params: P, reg: IReg<IWspUiEnv | IChainEnv & IUiEnv>, emitter: HTMLElement, ev: Event) {\n\t\tlet handled = false;\n\n\t\tconst wsp = this.findWsp(params, reg as IReg<IWspUiEnv | IChainEnv & IUiEnv>);\n\t\tif (!wsp) throw Error(\"No wsp context found\");\n\n\t\tif ((reg.env as IInfoBrokerPointer).infoBroker) {\n\t\t\tconst info = new InfoFocusNodeInItem('/', params.refUri);\n\t\t\t(reg.env as IInfoBrokerPointer).infoBroker.dispatchInfo(info, emitter);\n\t\t\thandled = info.handled;\n\t\t}\n\t\tif (!handled) {\n\t\t\tconst itemViewer = new ItemViewerSingle();\n\t\t\tconst root = <ViewsContainer Ã®={{views: [itemViewer]}} style=\"flex:1;display:flex;min-height:0;min-width:0;flex-direction:column;\"/> as ViewsContainer;\n\t\t\tawait itemViewer.initViewer(wsp.reg, root, null, params.refUri);\n\t\t\tPOPUP.showDialog(root, reg.env.uiRoot, {\n\t\t\t\ttitleBar: {},\n\t\t\t\tinitWidth: '90%',\n\t\t\t\tinitHeight: '90%',\n\t\t\t\tresizer: {}\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * Protocole scenari pour ajouter une option dans un atelier existant donnÃ©\n * Contexte minimum requis : IWspUiEnv, ou param \"wsp\"\n *\n * ex : scenari:{\n *  \"action\":\"addWspOptions\",\n *  \"universe\":\"chain\",\n *  \"wsp\":\"08GtVJ090s45AAPpI3D0Yd\",\n *  \"wspOptions\":[\n *  \t{\n *  \t\t\"key\":\"OpaleGenAuroraPrint3-8\",\n *  \t\t\"title\":\"xxxxx\"\n *  \t}\n *  ]}\n */\nexport interface JAddWspOptionsScProtocolParams extends JScProtocolParamsOnWsp {\n\n\taction: \"addWspOptions\"\n\n\twspOptions: JWspType[]\n}\n\nexport class AddWspOptionsScProtocolExec<P extends JAddWspOptionsScProtocolParams> extends ScWspProtocolExec<P> {\n\tasync execute(params: P, reg: IReg<IWspUiEnv | IChainEnv & IUiEnv>, emitter: HTMLElement, ev: Event) {\n\t\tlet handled = false;\n\n\t\tconst wsp = this.findWsp(params, reg as IReg<IWspUiEnv | IChainEnv & IUiEnv>);\n\t\tif (!wsp) throw Error(\"No wsp context found\");\n\n\t\tif (!params?.wspOptions || !params.wspOptions.length) return false;\n\n\t\tlet progress = POPUP.showProgress(emitter || reg.env.uiRoot, `Veuillez patienter...`);\n\n\t\ttry {\n\t\t\tawait wsp.waitForLoad();\n\t\t\tprogress.close();\n\n\t\t\t// Confirmation\n\t\t\tconst wspTitle = wsp.wspTitle;\n\t\t\tconst optionsTitle = params.wspOptions.map((entry) => entry.title || entry.key).sort().join(\", \");\n\t\t\tif (!await POPUP.confirm(params.wspOptions.length > 1 ?\n\t\t\t\t`Activer les options '${optionsTitle}' sur l'atelier '${wspTitle}' ?` :\n\t\t\t\t`Activer l'option '${optionsTitle}' sur l'atelier '${wspTitle}' ?`, emitter || reg.env.uiRoot)) return false;\n\n\t\t\tprogress = POPUP.showProgress(emitter || reg.env.uiRoot, `Veuillez patienter...`);\n\n\t\t\tconst newWspType: JWspTypeInst = new Object(wsp.wspType) as JWspTypeInst;\n\t\t\tif (!newWspType) throw Error(\"Current wsp not loadable\");\n\t\t\tif (!newWspType.wspOptions) newWspType.wspOptions = [];\n\t\t\tlet hasChanged = false;\n\t\t\tparams.wspOptions.forEach((entry) => {\n\t\t\t\tif (!newWspType.wspOptions.find((opt) => (opt.key === entry.key && (!entry.version || opt.version.startsWith(entry.version))))) {\n\t\t\t\t\thasChanged = true;\n\t\t\t\t\tnewWspType.wspOptions.push(entry);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (hasChanged) await wsp.updateWspType(newWspType, true, true);\n\t\t} finally {\n\t\t\tprogress.close();\n\t\t}\n\t}\n}\n\n/**\n * Protocole scenari pour importer une archive Scenari\n * Contexte minimum requis : IWspUiEnv, ou param \"wsp\"\n *\n * ex : scenari:{\"action\":\"importScar\",\"scarUrl\":\"https://xxx/yyy.scar\",\"dstSpaceSrcUriFavour\":\"/test\"}\n */\nexport interface JImportScarScProtocolParams extends JScProtocolParamsOnWsp {\n\n\taction: \"importScar\"\n\n\t/**  URL du scar */\n\tscarUrl: string\n\n\t/**\n\t * Path prÃ©fÃ©rÃ© de l'espace de destination\n\t * Si cet espace existe, alors un espace est crÃ©Ã© en respectant la rÃªgle dstSpaceSrcUriFavour_{000}\n\t */\n\tdstSpaceSrcUriFavour: string\n}\n\nexport class ImportScarScProtocolExec<P extends JImportScarScProtocolParams> extends ScWspProtocolExec<P> {\n\tasync execute(params: P, reg: IReg<IWspUiEnv | IChainEnv & IUiEnv>, emitter: HTMLElement, ev: Event) {\n\t\tconst wsp = this.findWsp(params, reg as IReg<IWspUiEnv | IChainEnv & IUiEnv>);\n\t\tif (!wsp) throw Error(\"No wsp context found\");\n\t\tif (!params.scarUrl) throw Error(\"Param 'scarUrl' required\");\n\t\tif (!params.dstSpaceSrcUriFavour) throw Error(\"Param 'dstSpaceSrcUriFavour' required\");\n\n\t\t// Confirmation : secu pour les actions en Ã©criture\n\t\tconst scarUrl = params.scarUrl;\n\t\tif (!await POPUP.confirm(`Importer l'archive provenant de '${scarUrl}' ?`, emitter || reg.env.uiRoot)) return false;\n\n\t\t// # Recherche d'un espace vide\n\t\tconst maxChecks = 1000;\n\t\tlet counter = 0;\n\t\tlet dstSpaceSrcUriTarget;\n\t\twhile (!dstSpaceSrcUriTarget && counter < maxChecks) {\n\t\t\tconst dstSpaceSrcUriCandidate = params.dstSpaceSrcUriFavour + (counter ? \"_\" + counter : \"\");\n\t\t\tconst node = await WSP.fetchSrcTree(wsp, null, dstSpaceSrcUriCandidate, 0, [\"srcSt\"]);\n\t\t\tif (node.srcSt != ESrcSt.none)\n\t\t\t\tcounter++;\n\t\t\telse\n\t\t\t\tdstSpaceSrcUriTarget = dstSpaceSrcUriCandidate;\n\t\t}\n\t\tif (!dstSpaceSrcUriTarget) throw Error(\"No dest space available\");\n\n\t\t// # Upload du scar\n\t\tconst progress = POPUP.showProgress(emitter || reg.env.uiRoot, `TÃ©lÃ©chargement en cours...`);\n\t\tlet data: Blob;\n\t\ttry {\n\t\t\tconst resp = await fetch(params.scarUrl, {\n\t\t\t\tmethod: 'get',\n\t\t\t\tcache: \"no-cache\"\n\t\t\t});\n\t\t\tdata = await resp.blob();\n\t\t} catch (e) {\n\t\t\tconst scarUrl = params.scarUrl;\n\t\t\tawait ERROR.show(`Impossible de tÃ©lÃ©charger l'archive Scenari: ${scarUrl}`, e);\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tprogress.close();\n\t\t}\n\n\t\tif (data && data.type === \"application/scenari.scar\") {\n\t\t\tconst leafname = params.scarUrl.split('/').pop();\n\t\t\tconst file = new File([data], leafname);\n\t\t\tif (await ImportScar.doImportScar(wsp, emitter || reg.env.uiRoot, dstSpaceSrcUriTarget, file, false)) {\n\t\t\t\t//remontÃ©e erreur au user dÃ©jÃ  assumÃ©e dans ImportScar.doImportScar().\n\t\t\t\tif ((reg.env as IInfoBrokerPointer).infoBroker) {\n\t\t\t\t\t// focus sur l'espace\n\t\t\t\t\tconst info = new InfoCurrentItem(dstSpaceSrcUriTarget);\n\t\t\t\t\t(reg.env as IInfoBrokerPointer).infoBroker.dispatchInfo(info, emitter);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst scarUrl = params.scarUrl;\n\t\t\tconst dataType = data.type;\n\t\t\tawait ERROR.show(`La ressource pointÃ©e '${scarUrl}' n'est pas une archive Scenari (type '${dataType}' au lieu de 'application/scenari.scar')`);\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n\n/**\n * Protocole scenari pour crÃ©er un atelier\n * Contexte requis : IUiEnv avec le param univers, ou IChainEnv\n * Contexte des subActions : IWspUiEnv (avec l'atelier crÃ©Ã©)\n *\n * ex : scenari:{\"action\":\"createWsp\",\"wspParams\":{...}}\n */\nexport interface JCreateWspScProtocolParams extends JScProtocolParamsOnUniverse, JScProtocolParamsSubActions {\n\n\taction: \"createWsp\"\n\n\twspParams: JWspCreateParamsFS | JWspCreateParamsDB | JWspCreateParamsDB_DRF | JWspCreateParamsDB_DRV\n\n\twspType: JWspTypeInst\n\n}\n\nexport class CreateWspScProtocolExec<P extends JCreateWspScProtocolParams> extends ScUniverseProtocolExec<P, IChainEnv, ChainUniverse> {\n\tasync execute(params: P, reg: IReg<IChainEnv & IUiEnv | IUniverseEnv & IUiEnv>, emitter: HTMLElement, ev: Event) {\n\t\tconst universe = this.findUniverse(params, reg as IReg<IChainEnv>);\n\t\tlet wspLabel: string;\n\t\ttry {\n\t\t\tif (!universe || !universe.wspServer)\n\t\t\t\tthrow Error(\"chain univers required (param 'univers')\");\n\n\t\t\tif (!params.wspParams) throw Error(\"Param 'wspParams' required\");\n\t\t\tif (!params.wspType) throw Error(\"Param 'wspType' required\");\n\n\t\t\tconst wspCd = (params.wspParams as JWspCreateParamsDB).alias || (params.wspParams as JWspCreateParamsFS).code;\n\t\t\tlet wsp: Wsp;\n\t\t\tif (wspCd) {\n\t\t\t\t// ContrÃ´le d'existance du wsp\n\t\t\t\twsp = new Wsp(universe.wspServer, (params.wspParams as JWspCreateParamsDB).alias || (params.wspParams as JWspCreateParamsFS).code);\n\t\t\t\tawait wsp.waitForLoad();\n\t\t\t\tif (wsp.infoWspError && wsp.infoWspError.status === \"noWsp\") wsp = null;\n\t\t\t}\n\t\t\tif (!wsp) {\n\t\t\t\twspLabel = params.wspParams.title || (params.wspParams as JWspCreateParamsDB).alias || (params.wspParams as JWspCreateParamsFS).code;\n\t\t\t\t// Confirmation : secu pour les actions en Ã©criture\n\t\t\t\tif (!await POPUP.confirm(`CrÃ©er l'atelier '${wspLabel}' ?`, emitter || reg.env.uiRoot)) return false;\n\t\t\t\twsp = await WSP.createWsp(universe.wspServer, params.wspParams, params.wspType, true);\n\t\t\t}\n\n\t\t\tif (params.subActions) {\n\t\t\t\tconst newReg = REG.createSubReg(reg, wsp.reg);\n\t\t\t\tparams.subActions.forEach((act) => {\n\t\t\t\t\tconst action = SCPRTC.findAction(act.action, reg);\n\t\t\t\t\tif (action) {\n\t\t\t\t\t\taction.execute(act, newReg, emitter, ev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(`No action registered for scenari: protocol '${act.action}'`);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} catch (e) {\n\t\t\tawait ERROR.show(wspLabel ? `CrÃ©ation de l'atelier '${wspLabel}' en Ã©chec.` : 'CrÃ©ation de l\\'atelier en Ã©chec.', e, params);\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Protocole scenari pour installer un wspPack\n * Contexte requis : IUiEnv avec le param univers, ou IPacksInUniverse\n *\n * ex : scenari:{\n * \t\t\t\t\"action\":\"installPack\",\n * \t\t\t  \"universe\":\"chain\",\n * \t\t\t\t\"packUrl\":\"http://xxx/yyy.wsppack\"\n * \t\t}\n */\nexport interface JInstallPackScProtocolParams extends JScProtocolParamsOnUniverse {\n\n\taction: \"installPack\"\n\n\t/**  URL du pack */\n\tpackUrl: string\n\n\t/** Nom de du skin Ã  installer (utilisÃ© pour construire les retours UI) */\n\tpackName?: string\n}\n\nexport class InstallPackScProtocolExec<P extends JInstallPackScProtocolParams> extends ScUniverseProtocolExec<P, IBasicUniversePointer & IPacksInUniverse & ISecurityCtxPointer, BasicUniverse> {\n\n\tasync execute(params: P, reg: IReg<IUniverseEnv & IUiEnv>, emitter: HTMLElement, ev: Event) {\n\t\tconst universe = this.findUniverse(params, reg as IReg<IBasicUniversePointer>);\n\t\tif (!(universe as IPacksInUniverse)?.packServer)\n\t\t\tthrow Error(\"'univers' required (param 'univers')\");\n\t\tif (!params.packUrl) throw Error(\"Param 'packUrl' required\");\n\t\tconst packUrl = params.packUrl;\n\t\tconst packName = params.packName || params.packUrl.split('/').pop();\n\n\t\t// Verif perm\n\t\tif (!universe.reg.hasPerm(\"install.wspPack\"))\n\t\t\tif (!await POPUP.confirm(`Vous ne disposez pas des habilitations requises`, emitter || reg.env.uiRoot)) return false;\n\n\t\t// Confirmation : secu pour les actions en Ã©criture\n\t\tif (!await POPUP.confirm(`Installer le pack '${packName}' provenant de '${packUrl}' ?`, emitter || reg.env.uiRoot)) return false;\n\n\t\t// # Download du pack\n\t\tlet data: Blob;\n\t\tconst progress = POPUP.showProgress(emitter || reg.env.uiRoot, `TÃ©lÃ©chargement du pack '${packName}' en cours...`);\n\t\ttry {\n\t\t\tconst resp = await fetch(params.packUrl, {\n\t\t\t\tmethod: 'get',\n\t\t\t\tcache: 'no-cache'\n\t\t\t});\n\t\t\tdata = await resp.blob();\n\t\t\tprogress.close();\n\t\t} catch (e) {\n\t\t\tprogress.close();\n\t\t\tawait ERROR.show(`Impossible de tÃ©lÃ©charger le pack '${packName}' : ${packUrl}`, e);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (data && data.type === 'application/scenari.wsppack') {\n\t\t\t//application/scenari.skinpack\n\t\t\tconst leafname = params.packUrl.split('/').pop();\n\t\t\tconst file = new File([data], leafname);\n\t\t\tconst progress = POPUP.showProgress(emitter || reg.env.uiRoot, `Installation du pack '${packName}' en cours...`);\n\t\t\ttry {\n\t\t\t\tconst pack = await WSPPACK.installPack((universe as IPacksInUniverse).packServer, file, true);\n\t\t\t\tprogress.close();\n\t\t\t\tif (pack?.error) {\n\t\t\t\t\tconst error = WSPPACK.errorToString(pack.error);\n\t\t\t\t\tawait ERROR.show(`Installation du pack '${packName}' en erreur : ${error}`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tprogress.close();\n\t\t\t}\n\n\t\t} else {\n\t\t\tconst mimeType = data.type;\n\t\t\tawait ERROR.show(`La ressource '${packUrl}' n'est pas un wspPack Scenari (type '${mimeType}' au lieu de 'application/scenari.wsppack')`);\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Protocole scenari pour installer un wspPack\n * Contexte requis : IUiEnv avec le param univers, ou IPacksInUniverse\n *\n * ex : scenari:{\n * \t\t\t\t\"action\":\"installSkin\",\n * \t\t\t  \"universe\":\"chain\",\n * \t\t\t\t\"packUrl\":\"http://xxx/yyy.skinpack\"\n * \t\t}\n */\n\nexport interface JInstalllSkinScProtocolParams extends JScProtocolParamsOnUniverse {\n\n\taction: \"installSkin\"\n\n\t/**  URL du pack */\n\tpackUrl: string\n\n\t/** Nom de du skin Ã  installer (utilisÃ© pour construire les retours UI) */\n\tpackName?: string\n\n}\n\nexport class InstallSkinScProtocolExec<P extends JInstalllSkinScProtocolParams> extends ScUniverseProtocolExec<P, IBasicUniversePointer & IPacksInUniverse & ISecurityCtxPointer, BasicUniverse> {\n\n\tasync execute(params: P, reg: IReg<IUniverseEnv & IUiEnv>, emitter: HTMLElement, ev: Event) {\n\t\tconst universe = this.findUniverse(params, reg as IReg<IBasicUniversePointer>);\n\t\tif (!(universe as IPacksInUniverse)?.packServer)\n\t\t\tthrow Error(\"'universe'' required (param 'univers')\");\n\t\tif (!params.packUrl) throw Error(\"Param 'packUrl' required\");\n\t\tconst packUrl = params.packUrl;\n\t\tconst packName = params.packName || params.packUrl.split('/').pop();\n\n\t\t// Verif perm\n\t\tif (!universe.reg.hasPerm(\"install.skinPack\"))\n\t\t\tif (!await POPUP.confirm(`Vous ne disposez pas des habilitations requises`, emitter || reg.env.uiRoot)) return false;\n\n\t\t// Confirmation : secu pour les actions en Ã©criture\n\t\tif (!await POPUP.confirm(`Installer l'habillage graphique '${packName}' provenant de '${packUrl}' ?`, emitter || reg.env.uiRoot)) return false;\n\n\t\t// # Download du pack\n\t\tlet data: Blob;\n\t\tconst progress = POPUP.showProgress(emitter || reg.env.uiRoot, `TÃ©lÃ©chargement de l'habillage graphique '${packName}' en cours...`);\n\t\ttry {\n\t\t\tconst resp = await fetch(params.packUrl, {\n\t\t\t\tmethod: 'get',\n\t\t\t\tcache: 'no-cache'\n\t\t\t});\n\t\t\tdata = await resp.blob();\n\t\t\tprogress.close();\n\t\t} catch (e) {\n\t\t\tprogress.close();\n\t\t\tawait ERROR.show(`Impossible de tÃ©lÃ©charger l'habillage graphique '${packName}'`, e);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (data && data.type === 'application/scenari.skinpack') {\n\t\t\tconst leafname = params.packUrl.split('/').pop();\n\t\t\tconst file = new File([data], leafname);\n\t\t\tconst progress = POPUP.showProgress(emitter || reg.env.uiRoot, `Installation de l'habillage graphique '${packName}' en cours...\"`);\n\t\t\ttry {\n\t\t\t\tconst pack = await SKINPACK.install((universe as IPacksInUniverse).packServer, file);\n\t\t\t\tprogress.close();\n\t\t\t\tif (!SKINPACK.isStatusInstalled(pack?.installStatus)) {\n\t\t\t\t\tawait ERROR.show(`L'installation de l'habillage graphique '${packName}' a Ã©chouÃ©`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tprogress.close();\n\t\t\t}\n\n\t\t} else {\n\t\t\tconst mimeType = data.type;\n\t\t\tawait ERROR.show(`La ressource pointÃ©e '${packUrl}' n'est pas un habillage graphique Scenari (type '${mimeType}' au lieu de 'application/scenari.skinpack')`);\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Ajoute les diffÃ©rents exÃ©cutors WSp au registre\n * @param reg\n */\nexport function registerWspProtocolsActions(reg: IReg<any>) {\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'openNode', 1, new OpenNodeScProtocolExec());\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'importScar', 1, new ImportScarScProtocolExec());\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'createWsp', 1, new CreateWspScProtocolExec());\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'addWspOptions', 1, new AddWspOptionsScProtocolExec());\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'installPack', 1, new InstallPackScProtocolExec());\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'installSkin', 1, new InstallSkinScProtocolExec());\n\treg.addToList(SCPRTC.LIST_EXECUTORS, 'openAppOnWsp', 1, new OpenAppOnWspScProtocolExec());\n}"]}