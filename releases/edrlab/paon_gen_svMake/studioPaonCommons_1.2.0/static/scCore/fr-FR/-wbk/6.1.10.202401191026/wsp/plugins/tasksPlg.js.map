{"version":3,"sources":["/@back@/wsp/plugins/tasksPlg.tsx"],"names":["Action","ActionHackCtx","SimpleTagArea","REG","POPUP","initApp","reg","env","universe","config","backEnd","WrapReg","[object Object]","sub","super","this","ctx","buttonNode","initButtonNode","wrap","action","d","desk","addAppBuilder","TaskAppBuilder","tasksAction","setLabel","setSkinOver","requireVisiblePerm","override","setAttribute","execute","async","ev","MyTasksRepos","import","myTasks","initialize","showMenu","target","addToList","resolver","resolve","data","task","skin","skinOver","newElt"],"mappings":"OAEQA,OAAQC,kBAAuB;OAC/BC,kBAAc;OACKC,QAAI;;OAKvBC,UAAM;OAYR,SAAUC,QAAQC,IAAuBH,IAAIG,KAClD,GAAIA,IAAIC,IAAIC,SAASC,OAAOC,UAAY,KAAM;AAE9C,MAAMC,gBAAgBV,cACrBW,YAAYC,IAAsCP,KACjDQ,MAAMD;AAD2CE,KAAAT,IAAAA,IAIlDM,QAAQI,KAAgC,OAAOD,KAAKT,IAEpDM,eAAeK,WAAqBD,KAElCC,WAAsCX,IAAMS,KAAKT;AAClDS,KAAKF,IAAIK,eAAeD,WAAYF,KAAKT,MAI3C,SAASa,KAAKC,QACb,OAAO,IAAIT,QAAQS,OAAQd,KAG5B,MAAMe,EAAIC;AACVD,EAAEE,cAAc,IAAIC,eAAelB;AAGnC,MAAMmB,YAAcN,KAAK,IAAInB,OAAwB,SACnD0B,SAAS,gBAETC,YAAY,wBACZC,mBAAmB,eACnBC,SAAS,kBACT,SAAUZ,WAAqBD,KAC9BC,WAAWa,aAAa,OAAQ;AAInCL,YAAYM,QAAUC,MAAOhB,IAAciB,MAC1C,MAAMC,aAACA,oBAAsBC,OAAM;AACnC,MAAMC,SAAU,IAAIF,cAAeG,WAAW,CAAC/B,IAAAA;AAC/CF,MAAMkC,SAASF,QAASH,GAAGM,OAAuBN,GAAGM;AAGtDpC,IAAIG,IAAIkC,UAAU,0BAA2B,QAAS,EAAGf,oBAWpD,MAAOD,uBAAuBtB,cAMnCU,YAAmBN,KAClBQ,MAAM,eAAgBR,IAAIC,IAAIkC,SAASC,QAAQ;AAD7B3B,KAAAT,IAAAA,IAInBM,cAAc+B,MAAoB,cAAcA,KAAKC,OAAS,SAE9DhC,OAAOI,KACN,IAAKA,IAAI6B,KAAM7B,IAAI6B,KAAO9B,KAAK8B;AAC/B,IAAK7B,IAAI8B,SAAU9B,IAAI8B,SAAW/B,KAAK+B;AACvC9B,IAAIV,IAAMS,KAAKT;AACf,OAAQQ,MAAMiC,OAAO/B,KAAiBqB,WAAWrB","sourcesContent":["import {OSkinableInit} from \"back/commons/basis\";\nimport {AppFrameDeskFeat, IAppBuilder, IAppCtx, JAppDef} from \"back/core/appFrame\";\nimport {Action, ActionHackCtx, IAction} from \"lib/commons/actions\";\nimport {SimpleTagArea} from \"lib/commons/areas\";\nimport {IReg, IRegPointer, REG} from 'lib/commons/registry';\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {IChainEnv} from \"lib/wsp/chain\";\nimport {IWspUiEnv, wspCd} from \"lib/wsp/wsp\";\nimport \"back/wsp/plugins/plugins_Perms\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {srcRef} from \"lib/wsp/src\";\nimport {TaskApp} from \"back/wsp/apps/taskApp\";\nimport {MyTasksRepos} from \"back/wsp/views/myTasksRepos\";\n\n\n/**\n * Accès aux tâches d'un chain dans une appFrame.\n * A appeler au cours du processus d'init du desk (qui doit disposer de AppFrameDeskFeat).\n *\n * @param reg Registre à exploiter correspondant au chain, nécessaire en cas de front multi-universe.\n */\nexport function initApp(reg: IReg<IChainEnv> = REG.reg) {\n\tif (reg.env.universe.config.backEnd === 'fs') return;\n\n\tclass WrapReg extends ActionHackCtx<Element, IReg<IChainEnv>> {\n\t\tconstructor(sub: IAction<IReg<IChainEnv>>, public reg: IReg<IChainEnv>) {\n\t\t\tsuper(sub);\n\t\t}\n\n\t\twrapCtx(ctx: Element): IReg<IChainEnv> {return this.reg}\n\n\t\tinitButtonNode(buttonNode: Element, ctx: Element) {\n\t\t\t//Affectation du bon registre dans le contexte graphique.\n\t\t\t(buttonNode as IRegPointer<IChainEnv>).reg = this.reg;\n\t\t\tthis.sub.initButtonNode(buttonNode, this.reg);\n\t\t}\n\t}\n\n\tfunction wrap(action: IAction<IReg<IChainEnv>>): IAction<Element> {\n\t\treturn new WrapReg(action, reg);\n\t}\n\n\tconst d = desk as AppFrameDeskFeat;\n\td.addAppBuilder(new TaskAppBuilder(reg));\n\n\t// Création du menu 'Mes tâches'\n\tconst tasksAction = wrap(new Action<IReg<IChainEnv>>('tasks')\n\t\t.setLabel(\"Mes tâches\")\n\t\t//.setIcon(\"/@skin@/wsp/objects/tasksList.svg\")\n\t\t.setSkinOver(\"appframeHeader_tasks\")\n\t\t.requireVisiblePerm(\"ui.tasksPlg\")\n\t\t.override(\"initButtonNode\",\n\t\t\tfunction (buttonNode: Element, ctx: Element) {\n\t\t\t\tbuttonNode.setAttribute(\"role\", \"menu\");\n\t\t\t}\n\t\t));\n\n\ttasksAction.execute = async (ctx: Element, ev: Event) => {\n\t\tconst {MyTasksRepos} = await import(\"back/wsp/views/myTasksRepos.js\");\n\t\tconst myTasks = new MyTasksRepos().initialize({reg});\n\t\tPOPUP.showMenu(myTasks, ev.target as HTMLElement, ev.target as Node);\n\t};\n\n\tREG.reg.addToList(\"appframe:header:toolbar\", \"tasks\", 1, tasksAction);\n}\n\n/** Définition pour une TaskApp. */\nexport interface JTaskAppDef extends JAppDef {\n\ttask: srcRef\n\tw: wspCd\n}\n\n\n/** Construction async de la view TaskApp de consultation d'une tâche. */\nexport class TaskAppBuilder extends SimpleTagArea<IAppCtx<IChainEnv>, TaskApp> implements OSkinableInit, IAppBuilder<IChainEnv, IWspUiEnv> {\n\n\tskin?: string;\n\n\tskinOver?: string;\n\n\tconstructor(public reg: IReg<IChainEnv>) {\n\t\tsuper('wsp-task-app', reg.env.resolver.resolve(\":back:wsp/apps/taskApp.js\"));\n\t}\n\n\tisAppDefMatch(data: JTaskAppDef) {return typeof data.task === 'string'}\n\n\tnewElt(ctx: IAppCtx<IChainEnv> & OSkinableInit): TaskApp {\n\t\tif (!ctx.skin) ctx.skin = this.skin;\n\t\tif (!ctx.skinOver) ctx.skinOver = this.skinOver;\n\t\tctx.reg = this.reg;\n\t\treturn (super.newElt(ctx) as TaskApp).initialize(ctx);\n\t}\n}\n"]}