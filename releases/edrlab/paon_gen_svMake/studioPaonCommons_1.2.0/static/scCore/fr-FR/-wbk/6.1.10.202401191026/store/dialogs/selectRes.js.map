{"version":3,"sources":["/@back@/store/dialogs/selectRes.tsx"],"names":["BaseElementAsync","Button","POPUP","REG","JSX","DOMSH","AreaAsync","InfoBrokerBasic","InfoCurrentRes","IO","AddFolderInList","SelectRes","holder","this","_holder","findPopupableParent","[object Object]","init","reg","findReg","checkSel","infoBroker","addConsumer","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","boards","filter","board","isVisible","root","appendChild","createElement","footer","id","msg","doBtn","class","disabled","ui-context","label","selBtnLabel","onclick","onDoBtn","onCancelBtn","checkSelValid","length","console","trace","cancel","elt","view","loadBody","initialPath","setResPath","info","currentSel","nodeProps","valid","setCustomMsg","close","_a","findHost","validAndDo","visitor","options","Promise","resolve","undefined","registerSkin","customElements","define","SelectResBrowseArea","super","requireLib","asEndPoint","ctx","lastDatas","selMono","utBrowser","actions","resViewer","keyView","î"],"mappings":"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","sourcesContent":["import {BaseElement, BaseElementAsync, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {Button} from \"back/commons/widgets/buttons\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IDepotUiEnv} from \"lib/store/depot\";\nimport {JNodeShortProps} from \"lib/store/urlTree\";\nimport {OBrowseBoardInit} from \"back/store/views/browseBoard\";\nimport {AreaAsync, IArea} from \"lib/commons/areas\";\nimport {IInfo, IInfoBroker, IInfoConsumer, InfoBrokerBasic} from \"lib/commons/infos\";\nimport {InfoCurrentRes, resPath} from \"lib/store/res\";\nimport {IO} from \"lib/commons/io/io\";\nimport {JLastDatas} from \"lib/commons/lastDatas\";\nimport {IResViewable} from \"back/store/views/resViewer\";\nimport {IView, IViewContainer, OViewVisitOptions} from \"lib/commons/views\";\nimport {ICloseable} from \"back/commons/widgets/popupable\";\nimport {AddFolderInList} from \"back/store/actions/depotActions\";\n\n/**\n * Dialogue de sélection d'un dossier ou d'une ressource via\n * les différents Boards (browse et/ou search) pour trouver une ressource.\n */\nexport interface SelectRes extends BaseElement {\n\tinitialize(init: OSelectResInit): this\n}\n\nexport interface OSelectResInit extends OSkinableInit {\n\n\tinitialPath?: resPath\n\n\t/**\n\t * Board(s) à afficher pour permettre la sélection.\n\t * Chaque Board doit exploiter le SelectRes.infoBroker pour notifier le InfoCurrentRes\n\t * indiquant le noeud courant.\n\t */\n\tboards: IArea<SelectRes, HTMLElement & Partial<IResViewable>>[]\n\n\t/**\n\t * Accepte la sélection (true) ou la refuse avec un msg pour le user (string).\n\t * Note : peut aussi être utilisé pour ajouter un autre bouton custom de validation\n\t * (\"Mettre à jour ce dossier\", \"Ajouter un dossier fils\", ...)\n\t */\n\tcheckSel?: (selectRes: SelectRes) => true | string\n\n\t/** Contexte d'appel auprès duquel retourner le résultat de la sélection. */\n\tholder?: ICloseable<JNodeShortProps | null>\n\n\t/** Label du bouton de sélection. \"Sélectionner\" par défaut */\n\tselBtnLabel?: string\n}\n\nexport class SelectRes extends BaseElementAsync implements IInfoConsumer, IViewContainer {\n\n\treg: IReg<IDepotUiEnv>;\n\n\tcheckSel?: (utSelector: SelectRes) => true | string\n\n\tinfoBroker?: IInfoBroker;\n\n\t/** Widgets */\n\tview: HTMLElement;\n\tfooter: HTMLElement;\n\tdoBtn: Button;\n\tmsg: MsgLabel;\n\n\tcurrentSel: JNodeShortProps;\n\n\tget holder(): ICloseable<JNodeShortProps | null> {return this._holder || POPUP.findPopupableParent(this)}\n\n\t_holder?: ICloseable<JNodeShortProps | null>\n\n\tprotected async _initialize(init: OSelectResInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.checkSel = init.checkSel;\n\t\tthis._holder = init.holder;\n\t\tthis.infoBroker = new InfoBrokerBasic();\n\t\tthis.infoBroker.addConsumer(this);\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin(\"standard-dialog\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tconst boards = init.boards.filter((board) => board.isVisible(this));\n\t\tconst root = sr.appendChild(<main/>);\n\t\tthis.footer = sr.appendChild(<div id=\"footer\"/>);\n\t\tthis.msg = this.footer.appendChild(<c-msg id=\"msg\"/>) as MsgLabel;\n\t\tthis.doBtn = this.footer.appendChild(<Button id=\"do\" class=\"default\" disabled ui-context=\"dialog\" label={init.selBtnLabel || \"Sélectionner\"} onclick={this.onDoBtn}/>) as Button;\n\t\tthis.footer.appendChild(<Button id=\"cancel\" ui-context=\"dialog\" label=\"Annuler\" onclick={this.onCancelBtn}/>);\n\t\tthis.checkSelValid();\n\t\tif (boards.length > 1) {\n\t\t\tconsole.trace(\"TODO multi-boards tabs\");\n\t\t} else if (boards.length === 0) {\n\t\t\tthis.cancel();\n\t\t} else {\n\t\t\tconst elt = this.view = await boards[0].loadBody(this);\n\t\t\troot.appendChild(elt);\n\t\t\tthis.checkSelValid();\n\t\t\tif (init.initialPath != null && elt.setResPath) {\n\t\t\t\telt.setResPath(init.initialPath);\n\t\t\t}\n\t\t}\n\t}\n\n\tonInfo(info: IInfo) {\n\t\tif (info instanceof InfoCurrentRes) {\n\t\t\tthis.currentSel = info.nodeProps;\n\t\t\tthis.checkSelValid();\n\t\t}\n\t}\n\n\tcheckSelValid(): boolean {\n\t\tlet valid: true | string = true;\n\t\tif (this.currentSel == null) {\n\t\t\tvalid = \"Sélectionnez un contenu\";\n\t\t} else if (this.checkSel) {\n\t\t\tvalid = this.checkSel(this);\n\t\t}\n\t\tthis.doBtn.disabled = valid !== true;\n\t\tthis.msg.setCustomMsg(valid !== true ? valid : null, \"warning\");\n\t\treturn valid === true;\n\t}\n\n\tvalidAndDo() {\n\t\tif (this.checkSelValid()) this.holder.close(this.currentSel);\n\t}\n\n\tcancel() {\n\t\tthis.holder?.close();\n\t}\n\n\tonCancelBtn(this: Button) {\n\t\tDOMSH.findHost<SelectRes>(this).cancel();\n\t}\n\n\tonDoBtn(this: Button) {\n\t\tDOMSH.findHost<SelectRes>(this).validAndDo();\n\t}\n\n\tvisitViews(visitor: (view: IView) => any): any {\n\t\tif (this.view) return visitor(this.view);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\treturn this.view ? visitor(this.view) : Promise.resolve(undefined);\n\t}\n}\n\nREG.reg.registerSkin('store-select-res', 1, /* language=CSS */ `\n\tmain {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n`);\n\ncustomElements.define(\"store-select-res\", SelectRes);\n\n\nexport class SelectResBrowseArea extends AreaAsync<SelectRes> {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/browseBoard.js\"));\n\t}\n\n\tbuildBody(ctx: SelectRes, lastDatas?: JLastDatas): HTMLElement {\n\t\tconst init: OBrowseBoardInit = {\n\t\t\treg: ctx.reg,\n\t\t\tinfoBroker: ctx.infoBroker,\n\t\t\tselMono: true,\n\t\t\tutBrowser: {\n\t\t\t\tactions: [new AddFolderInList()]\n\t\t\t},\n\t\t\tresViewer: {\n\t\t\t\tkeyView: \"select\"\n\t\t\t}\n\t\t}\n\t\treturn <store-browse-board î={init}/>\n\t}\n}"]}