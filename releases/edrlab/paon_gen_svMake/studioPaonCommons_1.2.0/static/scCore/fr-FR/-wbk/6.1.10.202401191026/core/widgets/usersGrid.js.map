{"version":3,"sources":["/@back@/core/widgets/usersGrid.tsx"],"names":["BaseElementAsync","MsgLabel","CellBuilderString","Grid","GridColTreeDef","GridDataHolderJsonTree","REG","DOM","JSX","DOMSH","EUserAspects","EUserType","USER","LANG","Button","ButtonToggle","InputUserPanel","UserRef","ROLES","UsersGrid","[object Object]","init","this","reg","findReg","params","firstMaxEntries","undefined","fullMaxEntries","filterTxtInputVisibility","filterTypeInputVisibility","filterHiddenInputVisibility","filterHidden","preserveSelectionOnFilter","usersSrv","dataHolder","colDefs","setFlex","setMinWidth","setCellBuilder","CellBuilderAccountJUser","showLongName","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","headElt","appendChild","createElement","id","filterFormElt","title","input","type","name","spellcheck","autocomplete","oninput","onSearchInput","onkeydown","onKeyPress","focus","hasAspect","groupable","onchange","value","label","addEventListener","ev","setAttr","hideable","filterHiddenInputPerms","hasPerm","onclick","toggleFilterHiddenInput","Ã®","Object","assign","toggleOn","uiContext","icon","filterHiddenBtnInit","filterGroupsInputVisibility","filterFormGroupsInput","initialize","emptySelectionMsg","userCard","usersGridInit","filterType","group","filterGroupsInputInit","initializedAsync","async","evt","call","setHidden","filterRolesInputVisibility","rolable","rolesUiHandlers","Promise","all","mergeLists","UI_ROLES_LIST","filterFormRolesInput","disabled","selected","style","forEach","entry","roleCode","getDescription","getLabel","setAttrBool","displayRazFilterBtn","razButton","razFilters","msgBox","msgElt","searchMoreBtn","doSearchUsers","bind","grid","autoSelOnFocus","columnDefs","hideHeaders","defaultAction","defaultActionCtx","emptyBody","disableAutoSearchOnInit","refreshGrid","shadowRoot","filterTxt","getElementById","removeAttribute","filterGroups","groupsSet","list","userList","length","filterRoles","filter","_contextualUserFilter","row","getRow","getSelectedRow","rowDatas","countRows","getSelectedDatas","users","showUserIfUnknown","usersSet","getDatas","find","user","account","insertRowKey","selectedRows","i","c","userRow","push","setSelectedRows","clearSel","tree","findHost","me","_searchInputWaiter","clearTimeout","setTimeout","max","filterIsDirty","_currentMaxEntries","fd","FormData","selectedUsers","getSelectedUsers","setDatas","filterTxtRegExp","has","get","RegExp","toString","replace","escapeChar4Regexp","_a","_b","btnInput","querySelector","requestMax","Number","isInteger","classList","toggle","Error","normalizeList","openFilter","more","nbMax","msg","hidden","setCustomMsg","selectByJUser","forceSelectEntry","key","registerSkin","customElements","define","hideIcon","super","root","firstElementChild","class","withIcon","getPrimaryName","CellBuilderAccount","dataKey","knownUsers","cacheKey","Symbol","cache","cacheHolder","getAccount","redrawCellUser","env","universe","useUsers","getUserBatch","then","findUserPending","isUnknown","CellBuilderAccounts","canSort","redrawCellAccounts","getAccounts","findIndex","findUsersPending","sort","u1","u2","localeCompare","redrawCellUsers","valuesTxt","innerHTML","withTitle","join","values","setTextContent"],"mappings":"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","sourcesContent":["import {BaseElementAsync, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {CellBuilderString} from \"back/commons/widgets/grid-libs\";\nimport {Grid, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridColTreeDef, GridDataHolderJsonTree, GridDataRowJsonTree} from \"back/commons/widgets/tree\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {EUserAspects, EUserType, JUser, USER, UsersSrv} from \"lib/core/user\";\nimport {IAction} from \"lib/commons/actions\";\nimport {LANG} from \"lib/commons/lang\";\nimport {IContextMenuActionsPointer} from \"back/commons/actionables\";\nimport {Button, ButtonToggle, OButtonInit, OButtonToggleInit} from \"back/commons/widgets/buttons\";\nimport {InputUserPanel, OInputUserInit} from \"back/core/widgets/inputs\";\nimport {OUserRefInit, UserRef} from \"back/core/widgets/userRef\";\nimport {ICoreUniverseEnv} from \"lib/core/universe\";\nimport {IRoleEditUiHandlerContext, RoleEditUiHandler, ROLES} from \"lib/commons/roles\";\nimport {RoleUiHandlerContextUsed} from \"back/core/dialogs/rolesExplorer\";\nimport {IRowSortFn} from \"back/commons/widgets/grid-core\";\n\n/**\n * Widget d'affichage d'une liste de users avec filtre.\n */\nexport interface UsersGrid<E> extends BaseElementAsync {\n\tinitialize(init?: OUsersGridInit<E>): this\n}\n\nexport interface OUsersGridInit<E> extends OSkinableInit {\n\treg?: IReg<ICoreUniverseEnv>\n\n\tusersSrv: UsersSrv;\n\n\t/** Modification de la liste des users obtenue : ajout d'Ã©lÃ©ments (user anonymous si non prÃ©sent dans la liste), ... */\n\tnormalizeList?: (array: JUser[], filterTxtRegExp?: RegExp) => JUser[],\n\n\t/** Affichage d'un btn de raz des filtres */\n\tdisplayRazFilterBtn?: boolean,\n\n\t/** Filtre libre appliquÃ© sur les entrÃ©es affichÃ©es\n\t * \t\tfonction : retourne true si l'entrÃ©e est prÃ©servÃ©e */\n\topenFilter?: (entry: JUser) => boolean,\n\n\t/** Filtre TXT : affichage du champ input \"txt\" - true par dÃ©faut */\n\tfilterTxtInputVisibility?: boolean\n\n\t/** Filtre TXT : valeur de recherche initiale */\n\tfilterTxt?: string\n\n\t/** Filtre TYPE : affichage du champ input \"type\" - false par dÃ©faut\n\t * \t\tNote : affichÃ© SSi le usersSrv possÃ¨de l'aspect EUserAspects.groupable */\n\tfilterTypeInputVisibility?: boolean\n\n\t/** Filtre TYPE : valeur de recherche initiale - null par dÃ©faut (ie tous les types) */\n\tfilterType?: EUserType\n\n\t/** Filtre HIDDEN : affichage du champ input \"hidden\" - false par dÃ©faut\n\t * \t\tNote : affichÃ© SSi le usersSrv possÃ¨de l'aspect EUserAspects.hideable,\n\t * \tet s l'utilisateur courant possÃ¨de la permission {@link OUsersGridInit.filterHiddenInputPerms}  */\n\tfilterHiddenInputVisibility?: boolean\n\n\t/** Filtre HIDDEN : perms UI requises pour afficher ce bouton */\n\tfilterHiddenInputPerms?: string[]\n\n\t/** Filtre TYPE : valeur de recherche initiale */\n\tfilterHidden?: boolean | null\n\n\t/** Filtre TYPE : initialisation du bounton */\n\tfilterHiddenBtnInit?: OButtonToggleInit\n\n\t/** Filtre GROUPS : affichage du champ input \"groups\"  - false par dÃ©faut\n\t * \t\tNote : affichÃ© SSi le usersSrv possÃ¨de l'aspect EUserAspects.groupable ET au moins un groupe a Ã©tÃ© dÃ©fini */\n\tfilterGroupsInputVisibility?: boolean\n\n\tfilterGroupsInputInit?: OInputUserInit<E>\n\n\t/** Filtre GROUPS : valeur de recherche initiale ou fixÃ©es */\n\tfilterGroups?: string[] | string\n\n\n\t/** Filtre ROLES : affichage du champ input \"roles\"  - false par dÃ©faut\n\t * \t\tNote : affichÃ© SSi le usersSrv possÃ¨de l'aspect EUserAspects.rolable */\n\tfilterRolesInputVisibility?: boolean\n\n\t/** Filtre ROLES : valeur de recherche initiale ou fixÃ©es */\n\tfilterRoles?: string //evol : string[]\n\n\t/** PrÃ©serve la sÃ©lection courante lors d'un changement de filtre. False par dÃ©faut */\n\tpreserveSelectionOnFilter?: boolean\n\n\t/** Permet de modifier la valeur initiale du nombre maximal d'utilisateurs affichÃ©s */\n\tfirstMaxEntries?: number\n\n\t/** Permet de modifier la valeur du nombre maximal d'utilisateurs affichÃ©s en mode 'expand'\n\t * Si fullMaxEntries est infÃ©rieur Ã  firstMaxEntries, alors ce concept d'affichage Ã©tendu n'est pas proposÃ© */\n\tfullMaxEntries?: number\n\n\t/** Force la sÃ©lection d'une entrÃ©e (la premiÃ¨re si rien n'est spÃ©cifiÃ©) **/\n\tforceSelectEntry?: false\n\n\t/** ParamÃ©trage du cellBuilder : ajoute le longname derriÃ¨re le nick or account */\n\tshowLongName?: boolean\n\n\t/** Si true, l'appel de doSearchUsers est assumÃ© par le contexte exploitant ce widget **/\n\tdisableAutoSearchOnInit?: boolean\n\n\t/** Action excutÃ©e au double-click ou sur les frappes entrÃ©e ou espace. */\n\tdefaultAction?: IAction<E>\n\n\tgrid?: OGridSmallInit\n}\n\n/**\n *\n */\n\nexport class UsersGrid<E> extends BaseElementAsync {\n\n\tparams: OUsersGridInit<E>;\n\n\treg: IReg<ICoreUniverseEnv>;\n\n\tusersSrv: UsersSrv;\n\n\tdataHolder: GridDataHolderJsonTree<JUser>;\n\n\tgrid: Grid & IContextMenuActionsPointer<E>\n\n\t/** Formulaire de filtre */\n\tfilterFormElt: HTMLFormElement;\n\n\t/** Formulaire de filtre : filtre par groupe */\n\tfilterFormGroupsInput: InputUserPanel<E> | null;\n\n\t/** Formulaire de filtre : filtre par role */\n\tfilterFormRolesInput: HTMLSelectElement | null;\n\n\tmsgElt: MsgLabel;\n\n\trazButton: Button;\n\n\tsearchMoreBtn: Button;\n\n\tprotected async _initialize(init: OUsersGridInit<E>): Promise<void> {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.params = init;\n\n\t\t// Valeur par dÃ©faut des params\n\t\tif (this.params.firstMaxEntries === undefined) this.params.firstMaxEntries = 100;\n\t\tif (this.params.fullMaxEntries === undefined) this.params.fullMaxEntries = 1000;\n\t\tif (this.params.filterTxtInputVisibility === undefined) this.params.filterTxtInputVisibility = true;\n\t\tif (this.params.filterTypeInputVisibility === undefined) this.params.filterTypeInputVisibility = false;\n\t\tif (this.params.filterHiddenInputVisibility === undefined) this.params.filterHiddenInputVisibility = false;\n\t\tif (this.params.filterHidden === undefined) this.params.filterHidden = false;\n\t\tif (this.params.preserveSelectionOnFilter === undefined) this.params.preserveSelectionOnFilter = false;\n\n\t\tthis.usersSrv = init.usersSrv;\n\n\t\tthis.dataHolder = new GridDataHolderJsonTree<JUser>('children');\n\n\t\tconst colDefs = [new GridColTreeDef('tree')\n\t\t\t.setFlex('1rem', 1, 1).setMinWidth('55px')\n\t\t\t.setCellBuilder(new CellBuilderAccountJUser(this.reg, false, this.params.showLongName))];\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin(\"form-control-areas\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\t// Filtres\n\t\tlet headElt = sr.appendChild(<div id=\"head\"/>) as HTMLDivElement;\n\t\tthis.filterFormElt = headElt.appendChild(<form id=\"filter\" title=\"Filtres appliquÃ©s Ã  la liste des utilisateurs...\"/>) as HTMLFormElement;\n\n\t\tif (this.params.filterTxtInputVisibility) {\n\t\t\tlet input = this.filterFormElt.appendChild(<input type=\"search\" id=\"filterTxt\" name=\"filterTxt\" spellcheck=\"false\" autocomplete=\"off\" oninput={this.onSearchInput} onkeydown={this.onKeyPress}/>) as HTMLInputElement;\n\t\t\tinput.focus();\n\t\t}\n\t\tif (this.params.filterTypeInputVisibility && this.usersSrv.hasAspect(EUserAspects.groupable)) {\n\t\t\tlet input = this.filterFormElt.appendChild(<select id=\"filterType\" name=\"filterType\" onchange={this.onSearchInput}>\n\t\t\t\t<option value=\"\" title=\"Utilisateurs et groupes\" label=\"Utilisateurs et groupes\"/>\n\t\t\t\t<option value=\"user\" title=\"Utilisateurs\" label=\"Utilisateurs\"/>\n\t\t\t\t<option value=\"group\" title=\"Groupes\" label=\"Groupes\"/>\n\t\t\t</select>) as HTMLSelectElement;\n\t\t\tinput.addEventListener(\"change\", function (ev) {DOM.setAttr(this, \"data-value\", this.value)});\n\t\t}\n\t\tif (this.params.filterHiddenInputVisibility && this.usersSrv.hasAspect(EUserAspects.hideable) && (!this.params.filterHiddenInputPerms || this.reg.hasPerm(this.params.filterHiddenInputPerms))) {\n\t\t\tthis.filterFormElt.appendChild(<ButtonToggle id=\"filterHidden\" onclick={this.toggleFilterHiddenInput} Ã®={Object.assign({\n\t\t\t\ttoggleOn: this.params.filterHidden,\n\t\t\t\tuiContext: \"bar\",\n\t\t\t\ticon: \"/@skin@/core/objects/user/system.svg\",\n\t\t\t\ttitle: \"Afficher/cacher les utilisateurs masquÃ©s\"\n\t\t\t} as OButtonToggleInit, this.params.filterHiddenBtnInit)}/>) as ButtonToggle;\n\t\t}\n\t\tif (this.params.filterGroupsInputVisibility && this.usersSrv.hasAspect(EUserAspects.groupable)) {\n\t\t\tthis.filterFormGroupsInput = this.filterFormElt.appendChild(new InputUserPanel().initialize(Object.assign({\n\t\t\t\tname: \"filterGroups\",\n\t\t\t\treg: this.reg,\n\t\t\t\temptySelectionMsg: \"Membres de l'un des groupes...\",\n\t\t\t\tuserCard: \"multi\",\n\t\t\t\tusersGridInit: {\n\t\t\t\t\tusersSrv: this.usersSrv,\n\t\t\t\t\tfilterType: EUserType.group,\n\t\t\t\t\tfilterTypeInputVisibility: false,\n\t\t\t\t},\n\t\t\t} as OInputUserInit<E>, this.params.filterGroupsInputInit))) as InputUserPanel<E>;\n\t\t\tawait this.filterFormGroupsInput.initializedAsync;\n\t\t\tthis.filterFormGroupsInput.addEventListener(\"change\", async (evt) => {\n\t\t\t\tthis.onSearchInput.call(this.filterFormGroupsInput, evt);\n\t\t\t});\n\t\t\tthis.filterFormGroupsInput.title = \"Membres de l'un des groupes spÃ©cifiÃ©s\";\n\t\t\tDOM.setHidden(this.filterFormGroupsInput, true);\n\t\t}\n\n\t\tif (this.params.filterRolesInputVisibility && this.usersSrv.hasAspect(EUserAspects.rolable)) {\n\t\t\tlet rolesUiHandlers = await Promise.all(this.reg.mergeLists(ROLES.UI_ROLES_LIST)) as (RoleEditUiHandler<IRoleEditUiHandlerContext> & RoleUiHandlerContextUsed)[];\n\n\t\t\tthis.filterFormRolesInput = this.filterFormElt.appendChild(\n\t\t\t\t<select id=\"filterRoles\" name=\"filterRoles\" onchange={this.onSearchInput} title=\"PossÃ¨dent le rÃ´le sÃ©lectionnÃ©\">\n\t\t\t\t\t<option value=\"\" label=\"PossÃ¨dent le rÃ´le...\" disabled selected style=\"display: none;\"/>\n\t\t\t\t\t<option value=\"\" label=\"\"/>\n\t\t\t\t</select>\n\t\t\t) as HTMLSelectElement;\n\t\t\trolesUiHandlers.forEach((entry => {\n\t\t\t\tthis.filterFormRolesInput.appendChild(<option value={entry.roleCode} title={entry.getDescription(this)} label={entry.getLabel(this)}/>)\n\t\t\t}));\n\t\t\tDOM.setHidden(this.filterFormRolesInput, true);\n\t\t\t// isNotSet : pour gestion du placeholder nativement de \"select\"...\n\t\t\tthis.filterFormRolesInput.addEventListener(\"change\", async (evt) => {\n\t\t\t\tDOM.setAttrBool(this.filterFormRolesInput, \"isNotSet\", this.filterFormRolesInput.value === '');\n\t\t\t\tif (this.filterFormRolesInput.value === \"\") this.filterFormRolesInput.value = \"\";\n\t\t\t});\n\t\t}\n\n\t\tif (this.params.displayRazFilterBtn) this.razButton = this.filterFormElt.appendChild(\n\t\t\t<Button id=\"btnRazFilter\"\n\t\t\t\t\t\t\tÃ®={{\n\t\t\t\t\t\t\t\tuiContext: \"bar\",\n\t\t\t\t\t\t\t\ttitle: \"RÃ©initialiser les filtres...\",\n\t\t\t\t\t\t\t\ticon: \"/@skin@/commons/icons/reset-filter.svg\",\n\t\t\t\t\t\t\t} as OButtonInit}\n\t\t\t\t\t\t\tonclick={() => {if (!this.razButton.disabled) this.razFilters(true)}}/> as Button);\n\n\t\tawait this.razFilters();\n\n\t\tconst msgBox = headElt.appendChild(<div id=\"msgBox\"/>);\n\n\t\tthis.msgElt = msgBox.appendChild(<MsgLabel id=\"msg\"/>) as MsgLabel;\n\n\t\tif (this.params.fullMaxEntries > this.params.firstMaxEntries) this.searchMoreBtn = msgBox.appendChild(<Button id=\"btnMore\" Ã®={{uiContext: \"dialog\", label: \"Voir plus...\"} as OButtonInit}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonclick={this.doSearchUsers.bind(this, this.params.fullMaxEntries)}/> as Button);\n\n\n\t\tthis.grid = sr.appendChild(new Grid().initialize(Object.assign({\n\t\t\tautoSelOnFocus: \"first\",\n\t\t\tcolumnDefs: colDefs,\n\t\t\tdataHolder: this.dataHolder,\n\t\t\thideHeaders: true,\n\t\t\tdefaultAction: init.defaultAction,\n\t\t\tdefaultActionCtx: this,\n\t\t\temptyBody: () => <span>Aucune entrÃ©e</span>\n\t\t}, init.grid)));\n\t\tif (!init.disableAutoSearchOnInit) await this.doSearchUsers();\n\t}\n\n\t/** RÃ©initialisation des diffÃ©rentes zones de filtre */\n\tpublic async razFilters(refreshGrid = false): Promise<void> {\n\t\tconst sr = this.shadowRoot;\n\t\t// - filterTxt\n\t\tconst filterTxt = sr.getElementById(\"filterTxt\") as HTMLInputElement;\n\t\tif (filterTxt)\n\t\t\tfilterTxt.value = this.params.filterTxt || \"\";\n\t\t// - filterType\n\t\tconst filterType = sr.getElementById(\"filterType\") as HTMLSelectElement;\n\t\tif (filterType) {\n\t\t\tif (this.params.filterType) {\n\t\t\t\tDOM.setAttr(filterType, \"data-value\", this.params.filterType);\n\t\t\t\tfilterType.value = this.params.filterType;\n\t\t\t} else {\n\t\t\t\tfilterType.removeAttribute(\"data-value\");\n\t\t\t\tfilterType.value = undefined;\n\t\t\t}\n\t\t}\n\t\t// - filterHidden\n\t\tconst filterHidden = sr.getElementById(\"filterHidden\") as ButtonToggle;\n\t\tif (filterHidden)\n\t\t\tfilterHidden.toggleOn = this.params.filterHidden;\n\t\t// - filterFormGroupsInput\n\t\tif (this.filterFormGroupsInput) {\n\t\t\tif (this.usersSrv.hasAspect(EUserAspects.groupable)) {\n\t\t\t\t// raz\n\t\t\t\tif (typeof this.params.filterGroups === \"string\") this.params.filterGroups = [this.params.filterGroups];\n\t\t\t\tthis.filterFormGroupsInput.value = this.params.filterGroups || null;\n\t\t\t\tconst groupsSet = await this.usersSrv.list(null, EUserType.group, false, null, 1);\n\t\t\t\tDOM.setHidden(this.filterFormGroupsInput, !groupsSet.userList || groupsSet.userList.length == 0);\n\t\t\t} else\n\t\t\t\tDOM.setHidden(this.filterFormGroupsInput, true);\n\t\t}\n\t\t// - filterFormRolesInput\n\t\tif (this.filterFormRolesInput) {\n\t\t\tif (this.usersSrv.hasAspect(EUserAspects.rolable)) {\n\t\t\t\t// raz\n\t\t\t\tthis.filterFormRolesInput.value = this.params.filterRoles || \"\";\n\t\t\t\tDOM.setAttrBool(this.filterFormRolesInput, \"isNotSet\", this.params.filterRoles ? false : true);\n\t\t\t\tDOM.setHidden(this.filterFormRolesInput, false);\n\t\t\t} else\n\t\t\t\tDOM.setHidden(this.filterFormRolesInput, true);\n\t\t}\n\t\tif (refreshGrid)\n\t\t\tawait this.doSearchUsers();\n\t}\n\n\t/** Filtre des utilisateurs\n\t * Retourne true si l'entrÃ©e est prÃ©servÃ©e\n\t */\n\tsetContextualUserFilter(filter: (entry: JUser) => boolean) {\n\t\tthis._contextualUserFilter = filter;\n\t}\n\n\t_contextualUserFilter: (entry: JUser) => boolean;\n\n\tgetSelectedUser(): JUser | null {\n\t\tif (this.dataHolder) {\n\t\t\tconst row = this.dataHolder.getRow(this.grid.getSelectedRow());\n\t\t\tif (!row) return null;\n\t\t\treturn row.rowDatas;\n\t\t}\n\t}\n\n\tgetSelectedUsers(): JUser[] {\n\t\treturn (this.dataHolder && this.dataHolder.countRows() > 0) ? this.dataHolder.getSelectedDatas() as JUser[] : [];\n\t}\n\n\t/**\n\t * SÃ©lection des entrÃ©es de l'arbre via une liste de JUser sur un tree **chargÃ©**\n\t * Si un itemType demandÃ© n'est pas prÃ©sent dans le tree, aucune erreur n'est remontÃ©e\n\t * @param JUser[]\n\t */\n\tselectByJUser(users: JUser[], showUserIfUnknown: boolean = false): void {\n\t\tif (users != null) {\n\t\t\t// Injection des users inconnus dans le tree\n\t\t\tif (showUserIfUnknown) {\n\t\t\t\tconst usersSet = this.dataHolder.getDatas();\n\t\t\t\tusers.forEach((entry) => {\n\t\t\t\t\t\tif (!usersSet.find((user) => user.account == entry.account)) {\n\t\t\t\t\t\t\tthis.dataHolder.insertRowKey(null, entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst userRow = this.dataHolder.getRow(i).rowDatas as JUser;\n\t\t\t\tif (userRow && users.find(user => {\n\t\t\t\t\tif (user && user.account == userRow.account)\n\t\t\t\t\t\treturn true;\n\t\t\t\t})) {\n\t\t\t\t\tselectedRows.push(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (selectedRows.length > 0)\n\t\t\t\tthis.grid.setSelectedRows(selectedRows);\n\t\t\telse\n\t\t\t\tthis.grid.clearSel();\n\t\t}\n\t}\n\n\tprivate toggleFilterHiddenInput(this: ButtonToggle, ev: InputEvent) {\n\t\tconst tree = DOMSH.findHost(this) as UsersGrid<E>;\n\t\tthis.toggleOn = !this.toggleOn;\n\t\ttree.doSearchUsers();\n\t}\n\n\n\tprivate _searchInputWaiter: number;\n\n\tprivate onSearchInput(this: HTMLInputElement, ev: InputEvent) {\n\t\tconst me = DOMSH.findHost(this) as UsersGrid<E>;\n\t\tif (me._searchInputWaiter) clearTimeout(me._searchInputWaiter);\n\t\tme._searchInputWaiter = setTimeout(() => me.doSearchUsers(), 500) as any;\n\t}\n\n\t/**\n\t * Raffraichit la liste des users\n\t * @param max\n\t * <ul>\n\t * \t<li>integer : borne max explicitement dÃ©finie</li>\n\t * \t<li>null : this._currentMaxEntries ou firstMaxEntries Ã  dÃ©faut</li>\n\t * \t<li>undefined : raz de 'this._currentMaxEntries', firstMaxEntries</li>\n\t * </ul>\n\t */\n\tasync doSearchUsers(max?: number | null | undefined) {\n\t\tlet filterIsDirty = false;\n\t\tif (max === undefined || max)\n\t\t\tthis._currentMaxEntries = max\n\t\tlet fd = new FormData(this.filterFormElt);\n\t\tconst selectedUsers: JUser[] = this.getSelectedUsers();\n\t\tthis.dataHolder.setDatas([]);\n\n\t\tlet filterTxtRegExp = null;\n\t\tif (fd.has(\"filterTxt\")) {\n\t\t\tif (fd.get(\"filterTxt\")) {\n\t\t\t\tfilterTxtRegExp = new RegExp(\".*\" + fd.get(\"filterTxt\").toString().replace(/\\W/g, LANG.escapeChar4Regexp) + \".*\", \"i\");\n\t\t\t\tfilterIsDirty = true;\n\t\t\t}\n\t\t} else if (this.params.filterTxt)\n\t\t\tfilterTxtRegExp = new RegExp(\".*\" + this.params.filterTxt.replace(/\\W/g, LANG.escapeChar4Regexp) + \".*\", \"i\");\n\n\t\tlet filterType: EUserType = null;\n\t\tif (this.usersSrv.hasAspect(EUserAspects.groupable)) {\n\t\t\tif (fd.has(\"filterType\")) {\n\t\t\t\tfilterIsDirty = true;\n\t\t\t\tfilterType = fd.get(\"filterType\") as EUserType;\n\t\t\t} else if (this.params.filterType)\n\t\t\t\tfilterType = this.params.filterType;\n\t\t}\n\n\t\tlet filterGroups: string[] | undefined = undefined;\n\t\tif (this.usersSrv.hasAspect(EUserAspects.groupable)) {\n\t\t\tif (this.filterFormGroupsInput) {\n\t\t\t\tfilterGroups = this.filterFormGroupsInput.value;\n\t\t\t\tif (this.filterFormGroupsInput.value?.length) filterIsDirty = true;\n\t\t\t} else if (this.params.filterGroups) {\n\t\t\t\tif (typeof this.params.filterGroups === \"string\") this.params.filterGroups = [this.params.filterGroups];\n\t\t\t\tfilterGroups = this.params.filterGroups;\n\t\t\t}\n\t\t}\n\n\t\tlet filterRoles: string[] | undefined = undefined;\n\t\tif (this.usersSrv.hasAspect(EUserAspects.rolable)) {\n\t\t\tif (this.filterFormRolesInput?.value) {\n\t\t\t\tfilterIsDirty = true;\n\t\t\t\tfilterRoles = [this.filterFormRolesInput.value];\n\t\t\t} else {\n\t\t\t\tfilterRoles = this.params.filterRoles ? [this.params.filterRoles] : null;\n\t\t\t}\n\t\t}\n\n\t\tlet filterHidden: boolean | undefined = undefined;\n\t\tif (this.usersSrv.hasAspect(EUserAspects.hideable)) {\n\t\t\tlet btnInput = this.filterFormElt.querySelector(\"#filterHidden\") as ButtonToggle;\n\t\t\tif (btnInput) {\n\t\t\t\tfilterHidden = btnInput.toggleOn;\n\t\t\t\tif (filterHidden != this.params.filterHidden) filterIsDirty = true;\n\t\t\t} else if (this.params.filterHidden !== undefined) {\n\t\t\t\tfilterHidden = this.params.filterHidden;\n\t\t\t}\n\t\t}\n\t\tconst requestMax = Number.isInteger(this._currentMaxEntries) ? this._currentMaxEntries : this.params.firstMaxEntries;\n\n\n\t\tthis.grid.classList.toggle(\"filtered\", filterIsDirty);\n\n\t\tconst usersSet = await this.usersSrv.list(null, filterType, filterHidden, filterGroups, requestMax, filterTxtRegExp, null, null, null, filterRoles);\n\t\tif (!usersSet.userList) throw Error(\"usersSrv can't browse users\");\n\n\t\tif (this.params.normalizeList) usersSet.userList = this.params.normalizeList(usersSet.userList, filterTxtRegExp);\n\t\tif (this.params.openFilter) usersSet.userList = usersSet.userList.filter(this.params.openFilter);\n\t\tif (this._contextualUserFilter) usersSet.userList = usersSet.userList.filter(this._contextualUserFilter);\n\n\t\tthis.dataHolder.setDatas(usersSet.userList);\n\n\t\t// Refresh des btns\n\t\tif (this.razButton) this.razButton.disabled = !filterIsDirty;\n\t\tif (this.searchMoreBtn) DOM.setHidden(this.searchMoreBtn, requestMax >= this.params.fullMaxEntries || !usersSet.more);\n\n\t\tconst nbMax = usersSet.userList.length;\n\t\tlet msg = \"\";\n\t\tif (usersSet.more && this.searchMoreBtn && !this.searchMoreBtn.hidden) msg = `Seules les ${nbMax} premiÃ¨res entrÃ©es sont affichÃ©es.`\n\t\telse if (usersSet.more) msg = `Seules les ${nbMax} premiÃ¨res entrÃ©es sont affichÃ©es. Veuillez prÃ©ciser la recherche...`\n\t\tthis.msgElt.setCustomMsg(msg);\n\n\t\tif (selectedUsers && selectedUsers.length > 0) this.selectByJUser(selectedUsers, this.params.preserveSelectionOnFilter);\n\t\tif (this.params.forceSelectEntry && this.getSelectedUsers().length == 0) this.grid.setSelectedRows(0);\n\t}\n\n\tprivate _currentMaxEntries: number;\n\n\tprivate onKeyPress(this: HTMLInputElement, ev: KeyboardEvent) {\n\t\tif (ev.key === 'ArrowDown') {\n\t\t\tconst tree = DOMSH.findHost(this) as UsersGrid<E>;\n\t\t\tif (tree.grid.getSelectedRow() !== undefined) tree.grid.focus();\n\t\t}\n\t}\n\n}\n\nREG.reg.registerSkin('server-users-grid', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\t:focus-visible {\n\t\toutline: var(--focus-outline);\n\t}\n\n\t#head {\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\t#filter {\n\t  background: .1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg);\n\t  padding-block: 2px;\n\t  padding-inline: 1.2em 2px;\n\t  display: flex;\n\t  min-width: 0;\n\t  min-height: 0;\n\t  align-items: center;\n\t  overflow: hidden;\n\t  flex-wrap: wrap;\n  }\n\n  #btnRazFilter {\n\t  margin-inline: 0;\n\t  padding-inline: 0;\n  }\n\n  #filter > * {\n\t  margin-block: 0;\n\t  margin-inline: .3rem 0;\n  }\n\n\t#filterTxt {\n\t\tmin-width: 10em;\n\t\tflex: 1;\n\t}\n\n\t#filterType {\n\t\tborder: none;\n\t\tbackground-image: url(\"/@skin@/core/objects/userGroup.svg\");\n\t\tbackground-color: var(--form-bgcolor);\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-size: auto 11px;\n\t\tbackground-position-y: center;\n\t\tbackground-position-x: 3px;\n\t\tmin-width: 37px;\n\t\tmax-width: 37px;\n\t\tpadding-inline-start: 37px;\n\t\tfont-size: inherit;\n\t}\n\n\t#filterType[data-value=group] {\n\t\tbackground-image: url(\"/@skin@/core/objects/group.svg\");\n\t}\n\n\t#filterType[data-value=user] {\n\t\tbackground-image: url(\"/@skin@/core/objects/user.svg\");\n\t}\n\n\t#filterRoles {\n\t\tmin-width: 0;\n\t}\n\n\t#filterRoles[isNotSet] {\n\t\tfont-style: italic;\n\t}\n\n\t#filterRoles[isNotSet] > option {\n\t\tfont-style: normal;\n\t}\n\n\t#filterRoles > option[value='main:~fallback'] {\n\t\tfont-style: italic;\n\t}\n\n\t#filterGroup {\n\t\tmin-width: 0;\n\t}\n\n\tc-input-users-panel {\n\t\tmin-width: 12rem;\n\t}\n\n\t#msgBox {\n\t\tfont-size: .8rem;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t}\n\n\t#msg {\n\t\tcolor: var(--info-color);\n\t\tjustify-content: flex-end;\n\t\tfont-style: italic;\n\t\tmargin-inline-end: .5rem;\n\t}\n\n\t#btnMore {\n\t\tmargin: .1em;\n\t\tmargin-inline-end: .5rem;\n\t}\n\n\tc-grid {\n\t\tflex: 1;\n\t\tborder: none;\n\t\tbackground-color: var(--row-bgcolor);\n\t}\n`);\n\ncustomElements.define(\"server-users-grid\", UsersGrid);\n\n/** Colonne lorsque les datas est un JUser. */\nexport class CellBuilderAccountJUser extends CellBuilderString {\n\n\tconstructor(protected reg: IReg<ICoreUniverseEnv>, public hideIcon: boolean = false, public showLongName = false) {\n\t\tsuper(null);\n\t}\n\n\tredrawCell(row: GridDataRowJsonTree<JUser>, root: HTMLElement): void {\n\t\tif (!root.firstElementChild)\n\t\t\troot.appendChild(<UserRef class=\"inline list\" Ã®={{reg: this.reg, user: row.rowDatas, withIcon: !this.hideIcon, showLongName: this.showLongName} as OUserRefInit}/>);\n\t\telse\n\t\t\t(root.firstElementChild as UserRef).user = row.rowDatas;\n\t}\n\n\t_getValue(row: GridDataRowJsonTree<JUser>) {\n\t\treturn USER.getPrimaryName(row.rowDatas);\n\t}\n\n}\n\n\n/**\n * Colonne lorsque les datas ne contient que le account dans une key particuliÃ¨re\n * avec interrogation async du UsersSrv pour obtenir les infos.\n */\nexport class CellBuilderAccount extends CellBuilderString {\n\n\tcacheKey: symbol;\n\n\tconstructor(protected reg: IReg<ICoreUniverseEnv>, dataKey: string, public hideIcon: boolean = false, protected knownUsers?: JUser[]) {\n\t\tsuper(dataKey);\n\t\tthis.cacheKey = Symbol(\"CellBuilderAccount:\" + dataKey);\n\t}\n\n\tasync redrawCell(row: GridDataRowJsonTree<any>, root: HTMLElement) {\n\t\tlet cache: JUser | Promise<JUser> = row.cacheHolder[this.cacheKey];\n\t\tconst cacheHolder = row.cacheHolder;\n\t\tconst rowDatas = row.rowDatas;\n\n\t\tif (cache === undefined) {\n\t\t\tlet account: string;\n\t\t\tif (account = this.getAccount(row)) {\n\t\t\t\tthis.redrawCellUser(row, root);\n\t\t\t\tcacheHolder[this.cacheKey] = cache = this.knownUsers?.find(entry => entry.account === account);\n\t\t\t\tif (!cacheHolder[this.cacheKey]) cacheHolder[this.cacheKey] = cache = this.reg.env.universe.useUsers.getUserBatch(account).then((user) => {\n\t\t\t\t\tif (cacheHolder[this.cacheKey] !== cache) return; //raceCond : les donnÃ©es de cette row ont Ã©voluÃ©es.\n\t\t\t\t\treturn cacheHolder[this.cacheKey] = user;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//Pas de user\n\t\t\t\tcache = cacheHolder[this.cacheKey] = null;\n\t\t\t}\n\t\t}\n\n\t\tif (cache instanceof Promise) {\n\t\t\t//cache non resetÃ© mais calcul en cours, on attend, on rÃ©affiche le login en attendant.\n\t\t\tthis.redrawCellUser(row, root);\n\t\t\t(root as any).findUserPending = cache; //raceCond pour refresh async de la line HTML.\n\t\t\tcache.then(() => {\n\t\t\t\tif ((root as any).findUserPending !== cache) return; //raceCond : cette ligne HTML a Ã©tÃ© redessinÃ©e\n\t\t\t\t(root as any).findUserPending = null; //cleanup\n\t\t\t\t// FIXME : trouver meilleur moyen pour retrouver la row courante plutot que de la reconstruire\n\t\t\t\tthis.redrawCellUser({cacheHolder, rowDatas} as any, root);\n\t\t\t});\n\t\t} else {\n\t\t\t(root as any).findUserPending = null; //raceCond pour refresh async de la line HTML.\n\t\t\tthis.redrawCellUser(row, root);\n\t\t}\n\t}\n\n\tprivate redrawCellUser(row: GridDataRowJsonTree<any>, root: HTMLElement) {\n\t\tconst cache: JUser = row.cacheHolder[this.cacheKey];\n\t\tif (!root.firstElementChild)\n\t\t\troot.appendChild(<UserRef class=\"inline list\" Ã®={{reg: this.reg, withIcon: !this.hideIcon} as OUserRefInit}/>);\n\t\tif (!cache || cache instanceof Promise)\n\t\t\t(root.firstElementChild as UserRef).user = this.getAccount(row) ? {account: this.getAccount(row), isUnknown: true} : null;\n\t\telse\n\t\t\t(root.firstElementChild as UserRef).user = cache;\n\t}\n\n\tgetAccount(row: GridDataRowJsonTree<any>): string {\n\t\treturn row.rowDatas[this.dataKey];\n\t}\n\n\t/**\n\t * Usage : sort\n\t * ATTENTION : tri sur les **account**\n\t * On ne peut rÃ©cupÃ©rer la valeur affichÃ©e ici, car rÃ©cupÃ©rÃ© en async lorsque nÃ©cessaire sur le show de la cell\n\t * Exploiter le cache quand dispo crÃ©e une **situation hÃ©tÃ©rogÃ¨ne**, ou des memes accounts (cache prÃ©sent - cache absent) pourraient donc ne pas Ãªtre adjacents\n\t */\n\t_getValue(row: GridDataRowJsonTree<any>) {\n\t\t// const cache: JUser = row.cacheHolder[this.cacheKey];\n\t\t// return (cache && !(cache instanceof Promise)) ? USER.getPrimaryName(cache) : this.getAccount(row) || \"\";\n\t\treturn this.getAccount(row) || \"\";\n\t}\n}\n\n/**\n * Colonne affichant une liste d'accounts, fournis via key particuliÃ¨re\n * avec interrogation async du UsersSrv pour obtenir les infos.\n */\nexport class CellBuilderAccounts extends CellBuilderString {\n\n\tcacheKey: symbol;\n\n\tconstructor(protected reg: IReg<ICoreUniverseEnv>, dataKey: string, public hideIcon: boolean = false, public canSort: boolean = true) {\n\t\tsuper(dataKey);\n\t\tthis.cacheKey = Symbol(\"CellBuilderAccount:\" + dataKey);\n\t}\n\n\tasync redrawCell(row: GridDataRowJsonTree<any>, root: HTMLElement) {\n\t\tlet cache: JUser[] | Promise<JUser>[] = row.cacheHolder[this.cacheKey];\n\t\tconst cacheHolder = row.cacheHolder;\n\t\tconst rowDatas = row.rowDatas;\n\n\t\tif (cache === undefined) {\n\t\t\tlet account: string;\n\t\t\tif (account = row.rowDatas[this.dataKey]) {\n\t\t\t\tthis.redrawCellAccounts(row, root);//affiche les accounts en attendant\n\t\t\t\tcacheHolder[this.cacheKey] = cache = [];\n\t\t\t\tthis.getAccounts(row)?.forEach((account) => {\n\t\t\t\t\t(cache as Promise<JUser>[]).push(this.reg.env.universe.useUsers.getUserBatch(account));\n\t\t\t\t})\n\t\t\t\tPromise.all(cache).then((users) => {\n\t\t\t\t\tif (cacheHolder[this.cacheKey] !== cache) return; //raceCond : les donnÃ©es de cette row ont Ã©voluÃ©es.\n\t\t\t\t\treturn cacheHolder[this.cacheKey] = users;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//Pas de user\n\t\t\t\tcache = cacheHolder[this.cacheKey] = null;\n\t\t\t}\n\t\t}\n\n\t\tif (cache?.findIndex((entry: JUser | Promise<JUser>) => entry instanceof Promise) > -1) {\n\t\t\t//cache non resetÃ© mais calcul en cours, on attend, on rÃ©affiche le nombre en attendant.\n\t\t\tthis.redrawCellAccounts(row, root);//affiche les accounts en attendant\n\t\t\t(root as any).findUsersPending = cache; //raceCond pour refresh async de la line HTML.\n\t\t\tPromise.all(cache).then(() => {\n\t\t\t\tif ((root as any).findUsersPending !== cache) return; //raceCond : cette line HTML a Ã©tÃ© redessinÃ©e\n\t\t\t\t(root as any).findUsersPending = null; //cleanup\n\t\t\t\t//(cacheHolder[this.cacheKey] as JUser[]) = (cacheHolder[this.cacheKey] as JUser[]).filter((user)=>user!=null);\n\t\t\t\tif (this.canSort) (cacheHolder[this.cacheKey] as JUser[]).sort((u1, u2) => USER.getPrimaryName(u1).localeCompare(USER.getPrimaryName(u2)));\n\t\t\t\tthis.redrawCellUsers(cacheHolder[this.cacheKey], root);\n\t\t\t});\n\t\t} else {\n\t\t\t(root as any).findUserPending = null; //raceCond pour refresh async de la line HTML.\n\t\t\tthis.redrawCellUsers(cacheHolder[this.cacheKey], root);\n\t\t}\n\t}\n\n\tprivate redrawCellUsers(users: JUser[], root: HTMLElement) {\n\t\tlet valuesTxt: string[] = [];\n\t\troot.innerHTML = \"\";\n\t\tusers?.forEach((user) => {\n\t\t\troot.appendChild(<UserRef class=\"inline list\" Ã®={{reg: this.reg, user: user, withTitle: false, withIcon: !this.hideIcon} as OUserRefInit}/>);\n\t\t\tif (user) valuesTxt.push(USER.getPrimaryName(user));\n\t\t});\n\t\tDOM.setAttr(root, \"title\", valuesTxt.length > 0 ? valuesTxt.join(', ') : null);\n\t}\n\n\tprivate redrawCellAccounts(row: GridDataRowJsonTree<any>, root: HTMLElement) {\n\t\tconst values = this.getAccounts(row)?.join(', ');\n\t\tDOM.setTextContent(root, values || '');\n\t\tDOM.setAttr(root, \"title\", values);\n\t}\n\n\tgetAccounts(row: GridDataRowJsonTree<any>): string[] {\n\t\treturn row.rowDatas[this.dataKey];\n\t}\n\n\t/** Le tri d'une cellule contenant n valeurs non ordonnÃ©es n'a pas de sens */\n\tgetColSortFn(): IRowSortFn | null {\n\t\treturn undefined;\n\t}\n\n}\n\n"]}