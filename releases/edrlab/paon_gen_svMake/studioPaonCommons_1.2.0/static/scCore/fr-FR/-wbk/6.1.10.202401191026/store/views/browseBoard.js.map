{"version":3,"sources":["/@back@/store/views/browseBoard.tsx"],"names":["BaseElement","BASIS","REG","ResViewerSingle","AccelKeyMgr","UtBrowser","JSX","DOMSH","InfoBrokerBasic","VIEWS","FocusLiveRes","InfoFocusRes","URLTREE","BrowseBoard","[object Object]","init","this","reg","createSubReg","findReg","infoBroker","env","BrowseBoardInfoBroker","parentReg","widthDetector","matchMedia","registerSvc","matches","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","accelKeyMgr","addEventListener","ev","handleKeyboardEvent","initFromMapActions","getListAsMap","resViewerInit","newInit","resViewer","lastDatas","initialize","shadowRoot","utBrowserInit","utBrowser","resHandlingReact","defaultAction","selMono","resHandlingMode","nodeFilter","undefined","n","isQueryPath","actions","fillDefaultActions","mergeLists","mergeListsAsMap","resizer","createElement","c-orient","panel-pos","switchWidth","style","display","setAttribute","append","id","c-resizable","resPath","dispatchInfo","shown","onContainerShown","closed","close","onContainerHidden","visitor","options","visible","visitDescendants","visitDescendantsAsync","registerSkin","customElements","define","view","parent","super","addConsumer","info","from","infoHolders","indexOf","_a","removeConsumer"],"mappings":"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","sourcesContent":["import {BaseElement, BASIS, OSkinableInit} from \"back/commons/basis\";\nimport {IDepotUiEnv} from \"lib/store/depot\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {IResViewable, OResViewerSingleInit, ResViewerSingle} from \"back/store/views/resViewer\";\nimport {AccelKeyMgr} from \"lib/commons/actions\";\nimport {WspApp} from \"back/wsp/apps/wspApp\";\nimport {IUtBrowserCtx, OUtBrowserInit, UtBrowser} from \"back/store/views/utBrowser\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {OLastDatasInit} from \"lib/commons/lastDatas\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IInfo, IInfoBroker, IInfoBrokerPointer, IInfoConsumer, IInfoProducer, InfoBrokerBasic} from \"lib/commons/infos\";\nimport {IView, IViewApi, IViewsContainer, OViewVisitOptions, VIEWS} from \"lib/commons/views\";\nimport {FocusLiveRes} from \"back/store/actions/depotActions\";\nimport {InfoFocusRes, resPath} from \"lib/store/res\";\nimport {URLTREE} from \"lib/store/urlTree\";\nimport {IResChildrenShowModeSvc} from \"back/store/areas/resViewAreas\";\n\n/**\n * Panneau combinant un utBrowser et un ResViewerSingle.\n */\nexport interface BrowseBoard extends BaseElement, IResViewable {\n\tinitialize(init: OBrowseBoardInit): this;\n}\n\nexport interface OBrowseBoardInit extends OSkinableInit, OLastDatasInit, IInfoBrokerPointer {\n\treg?: IReg<IDepotUiEnv>\n\n\t/** Mode simple click mono-selection forc√©. */\n\tselMono?: boolean\n\n\t/** Personnalisation du resViewer. */\n\tresViewer?: OResViewerSingleInit\n\n\t/** Personnalisation de l'utBrowser. */\n\tutBrowser?: OUtBrowserInit\n}\n\nexport class BrowseBoard extends BaseElement implements IResViewable, IView, IViewsContainer {\n\treg: IReg<IDepotUiEnv>;\n\n\tinfoBroker: BrowseBoardInfoBroker;\n\n\taccelKeyMgr: AccelKeyMgr<IRegPointer<IDepotUiEnv>>;\n\n\tprotected _initialize(init: OBrowseBoardInit) {\n\t\tthis.reg = REG.createSubReg(this.findReg(init));\n\t\tthis.infoBroker = this.reg.env.infoBroker = new BrowseBoardInfoBroker(this, init.infoBroker || this.reg.parentReg.env.infoBroker);\n\n\t\tconst widthDetector = matchMedia(\"(max-width: 640px)\")\n\t\tthis.reg.registerSvc<IResChildrenShowModeSvc>(\"storeResChildrenShowMode\", 1, (): 'children' | 'tree' => {\n\t\t\treturn widthDetector.matches ? 'tree' : 'children';\n\t\t});\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin('webzone:panel', sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tthis.accelKeyMgr = new AccelKeyMgr();\n\t\tthis.addEventListener('keydown', function (this: WspApp, ev: KeyboardEvent) {\n\t\t\tthis.accelKeyMgr.handleKeyboardEvent(ev, this)\n\t\t});\n\t\tthis.accelKeyMgr.initFromMapActions(this.reg.getListAsMap(\"accelkeys:BrowseBoard:global\"));\n\n\t\tconst resViewerInit = BASIS.newInit(init.resViewer, this.reg);\n\t\tresViewerInit.lastDatas = init.lastDatas;\n\t\tconst resViewer = new ResViewerSingle().initialize(resViewerInit);\n\t\tthis.reg.installSkin('webzone:page', resViewer.shadowRoot);\n\n\t\tconst utBrowserInit = BASIS.newInit(init.utBrowser, this.reg);\n\t\tutBrowserInit.infoBroker = utBrowserInit.resHandlingReact = this.infoBroker;\n\t\tutBrowserInit.defaultAction = new FocusLiveRes();\n\t\tif (init.selMono) utBrowserInit.resHandlingMode = \"sel\";\n\t\tif (utBrowserInit.nodeFilter === undefined) utBrowserInit.nodeFilter = (n) => !URLTREE.isQueryPath(n.n);\n\n\t\tif (utBrowserInit.actions === undefined) {\n\t\t\tthis.fillDefaultActions();\n\t\t\tutBrowserInit.actions = this.reg.mergeLists(\"actions:BrowseBoard:utBrowser\", \"actions:store:resList\");\n\t\t\tif (!utBrowserInit.accelKeyMgr) utBrowserInit.accelKeyMgr = new AccelKeyMgr<IUtBrowserCtx>().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:BrowseBoard:utBrowser\", \"accelkeys:store:resList\"));\n\t\t}\n\n\t\tconst utBrowser = new UtBrowser().initialize(utBrowserInit);\n\n\t\tconst resizer = <c-resizer c-orient=\"row\">\n\t\t\t<c-collapser c-orient=\"row\" panel-pos=\"prev\"/>\n\t\t</c-resizer>;\n\n\t\tfunction switchWidth(ev: MediaQueryList | MediaQueryListEvent) {\n\t\t\tif (ev.matches) {\n\t\t\t\tutBrowser.style.display = \"none\";\n\t\t\t\tresizer.style.display = \"none\";\n\t\t\t} else {\n\t\t\t\tutBrowser.style.display = null;\n\t\t\t\tresizer.style.display = null;\n\t\t\t}\n\t\t}\n\n\t\tswitchWidth(widthDetector);\n\t\twidthDetector.addEventListener('change', switchWidth);\n\n\t\tutBrowser.setAttribute(\"c-resizable\", \"\");\n\t\tsr.append(utBrowser, resizer, <div id=\"main\" c-resizable=\"\">{resViewer}</div>);\n\t}\n\n\tprotected fillDefaultActions() {\n\t\t// const reg = this.reg;\n\t\t// function add(action: IAction<IDepotCtx>, accelKey?: string) {\n\t\t// \treg.addToList(\"actions:BrowseBoard:utBrowser\", action.getId(), 1, action);\n\t\t// \tif (accelKey) reg.addToList(\"accelkeys:BrowseBoard:utBrowser\", action.getId(), 1, action);\n\t\t// }\n\t\t// add(new Xxx());\n\t}\n\n\tsetResPath(resPath: resPath) {\n\t\tthis.infoBroker.dispatchInfo(new InfoFocusRes(resPath), this);\n\t}\n\n\tshown: boolean;\n\n\tonViewShown() {\n\t\tthis.shown = true;\n\t\tVIEWS.onContainerShown(this);\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\tthis.shown = false;\n\t\tif (closed) this.infoBroker.close();\n\t\tVIEWS.onContainerHidden(this, closed);\n\t}\n\n\tvisitViews(visitor: (view: IViewApi) => any, options?: OViewVisitOptions): any {\n\t\tif (options?.visible && !this.shown) return;\n\t\treturn VIEWS.visitDescendants(this.shadowRoot, visitor);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IViewApi) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\tif (options?.visible && !this.shown) return;\n\t\treturn VIEWS.visitDescendantsAsync(this.shadowRoot, visitor);\n\t}\n}\n\n\nREG.reg.registerSkin('store-browse-board', 1, /* language=CSS */ `\n\t:host {\n\t  flex: 1;\n\t  display: flex;\n\t  min-height: 0;\n\t  min-width: 0;\n\t  flex-direction: row;\n\t  padding: 5px;\n  }\n\n  [hidden] {\n\t  display: none;\n  }\n\n  store-ut-browser {\n\t  flex: 1 1 5em;\n\t  border: 1px solid var(--border-color);\n\t  border-radius: 7px;\n  }\n\n  c-resizer[c-orient=row] {\n\t  width: 10px;\n\t  background-color: transparent;\n  }\n\n  c-collapser {\n\t  background-color: var(--panel-bgcolor);\n  }\n\n  #main {\n\t  flex: 3 1 20em;\n\t  display: flex;\n\t  border: 1px solid var(--border-color);\n\t  border-radius: 7px;\n\t  overflow: hidden;\n  }\n\n  store-resviewer-single {\n\t  flex: 1;\n  }\n`);\n\ncustomElements.define('store-browse-board', BrowseBoard);\n\nclass BrowseBoardInfoBroker extends InfoBrokerBasic implements IInfoConsumer {\n\tconstructor(public view: BrowseBoard, public parent: IInfoBroker) {\n\t\tsuper();\n\t\tif (parent) parent.addConsumer(this);\n\t}\n\n\tdispatchInfo(info: IInfo, from: IInfoProducer) {\n\t\tsuper.dispatchInfo(info, from);\n\t\tif (this.parent && info.infoHolders.indexOf(this) < 0) {\n\t\t\tthis.parent.dispatchInfo(info, this);\n\t\t}\n\t}\n\n\tclose() {\n\t\tthis.parent?.removeConsumer(this);\n\t}\n\n\t//Info from parent\n\tonInfo(info: IInfo) {\n\t\tif (this.view.shown) this.dispatchInfo(info, this);\n\t}\n}"]}