{"version":3,"sources":["/@back@/store/views/resViewer.tsx"],"names":["BaseAreaView","VIEWS","REG","InfoCurrentRes","InfoFocusRes","InfoReqCurrentRes","InfoUpdatePendingRes","EHttpStatusCode","isRespError","JSX","BaseElement","BaseElementAsync","BASIS","isEltRefreshable","URLTREE","DOMSH","BarActions","ResViewerSingle","[object Object]","resPath","lastDatas","this","view","onViewHidden","remove","resReg","reg","env","universe","newDepotResUiRegFromDepotUiReg","nodeInfosPending","nodeInfos","setResPath","extractParentPath","path","resType","livePath","permaPath","ResRoot","initialize","keyView","onErrorFallback","shadowRoot","appendChild","_shown","onViewShown","_a","infoBroker","dispatchInfo","_b","init","findReg","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","addConsumer","depotEvents","on","_onResChange","onResChange","bind","_c","_onConnOpened","onConnOpened","startPath","startWithResPath","lastPath","m","props","movedTo","visitor","options","visible","closed","removeConsumer","removeListener","refresh","info","resProps","focusHandled","current","currentType","done","then","r","catch","e","resRoot","me","findHost","registerSkin","customElements","define","close","dptReg","_lastDatas","setResReg","createResReg","lstn","nodeInfosChange","draw","drawError","resView","loadBody","isClosed","clear","clearContent","createElement","level","label","err","nodeInfosError","response","status","forbidden","ResBodyView","parent","actionsBar","id","î","newInit"],"mappings":"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","sourcesContent":["import {BaseAreaView, IView, IViewApi, IViewContainer, OBaseAreaViewInit, OViewVisitOptions, VIEWS} from \"lib/commons/views\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {IDepotResUiEnv, IDepotShortResUiEnv, IDepotUiEnv, JStoreChange} from \"lib/store/depot\";\nimport {InfoCurrentRes, InfoFocusRes, InfoReqCurrentRes, InfoUpdatePendingRes, IResType, resPath} from \"lib/store/res\";\nimport {EHttpStatusCode, isRespError} from \"lib/commons/io/io\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {BaseElement, BaseElementAsync, BASIS, isEltRefreshable, OSkinableInit} from \"back/commons/basis\";\nimport {JLastDatas, OLastDatasInit} from \"lib/commons/lastDatas\";\nimport {IInfo, IInfoConsumer} from \"lib/commons/infos\";\nimport {URLTREE} from \"lib/store/urlTree\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {BarActions, OBarActionsInit} from \"back/commons/widgets/bars\";\n\n/**\n * Interface pour tout composant susceptible d'afficher une ressource\n * dans un contexte donné.\n */\nexport interface IResViewable {\n\tsetResPath(resPath: resPath): any\n}\n\n\n/**\n * Viewer d'une seule res courante (ie pas d'onglets de N res : todo ResViewerMulti...).\n * Répond aux requetes InfoReqCurrentRes et dispatch les InfoCurrentRes en cas de changement de path.\n */\nexport interface ResViewerSingle extends BaseElement {\n\tinitialize(init: OResViewerSingleInit): this\n}\n\nexport interface OResViewerSingleInit extends OSkinableInit, OLastDatasInit {\n\n\treg?: IReg<IDepotUiEnv>\n\n\t/** Key de la view à afficher issue de IResType.resView(key) */\n\tkeyView?: string\n\n\t/** Force ce path à se charger (surcharge les lastDatas : path imposé par l'URL...) */\n\tstartWithResPath?: resPath\n}\n\nexport class ResViewerSingle extends BaseElement implements IResViewable, IViewContainer, IInfoConsumer {\n\n\treg: IReg<IDepotUiEnv>;\n\n\t/** */\n\tview: ResRoot;\n\n\tkeyView: string;\n\n\tprotected _lastDatas: any;\n\n\tprotected _shown: boolean;\n\n\tasync setResPath(resPath: resPath, lastDatas?: JLastDatas): Promise<void> {\n\t\tif (this.view) {\n\t\t\tif (this.view.resPath === resPath) return; //Pas de chgt\n\t\t\tVIEWS.onViewHidden(this.view, true);\n\t\t\tthis.view.remove();\n\t\t\tthis.view = null;\n\t\t} else if (resPath == null) return; //Pas de chgt : pas de res courante.\n\n\t\tif (resPath != null) {\n\t\t\t//Chargement du resReg\n\t\t\tconst resReg = this.reg.env.universe.newDepotResUiRegFromDepotUiReg(this.reg, resPath);\n\t\t\twhile (resReg.env.nodeInfosPending) await resReg.env.nodeInfosPending;\n\t\t\tif (this.view != null) return; //raceCond\n\t\t\tif (!resReg.env.nodeInfos) {\n\t\t\t\treturn this.setResPath(URLTREE.extractParentPath(resPath)); //pas trouvé, on remonte au père.\n\t\t\t} else {\n\t\t\t\t//Ajustement du path du reg au livePath.\n\t\t\t\tresReg.env.path = resReg.env.resType.livePath(resReg.env.nodeInfos.permaPath);\n\t\t\t\tconst view = this.view = new ResRoot().initialize({\n\t\t\t\t\treg: this.reg,\n\t\t\t\t\tkeyView: this.keyView,\n\t\t\t\t\tresReg,\n\t\t\t\t\tlastDatas,\n\t\t\t\t\tonErrorFallback: this.onErrorFallback\n\t\t\t\t});\n\t\t\t\tthis.shadowRoot.appendChild(view);\n\t\t\t\tif (this._shown) VIEWS.onViewShown(view);\n\t\t\t\tthis.reg.env.infoBroker?.dispatchInfo(new InfoCurrentRes(this.view.resPath, this.view.reg.env.nodeInfos), this);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.reg.env.infoBroker?.dispatchInfo(new InfoCurrentRes(null), this);\n\t\t}\n\t}\n\n\tprotected _initialize(init: OResViewerSingleInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis.keyView = init.keyView;\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tthis.reg.env.infoBroker?.addConsumer(this);\n\t\tthis.reg.env.depotEvents?.on(\"resChange\", (this._onResChange = this.onResChange.bind(this)));\n\t\tthis.reg.env.depotEvents?.on(\"connOpened\", (this._onConnOpened = this.onConnOpened.bind(this)));\n\t\tlet startPath = init.startWithResPath;\n\t\tif (startPath == null && init.lastDatas) startPath = (init.lastDatas as JLDResViewerSingle).lastPath;\n\t\tif (startPath != null) this.setResPath(startPath, init.lastDatas);\n\t}\n\n\tonResChange(m: JStoreChange) {\n\t\tif (this.view) {\n\t\t\t//On évalue si un chgt du resPath de la vue est nécessaire\n\t\t\t//Si m n'implique un cght de resPath ce sont les listeners dan view qui feront les refresh nécessaires.\n\t\t\tconst livePath = this.view.reg.env.resType?.livePath(m.props.path);\n\t\t\tif ((livePath !== m.props.path || m.props.movedTo) && livePath === this.view.resPath) {\n\t\t\t\tthis.setResPath(m.props.movedTo || m.props.path);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _onResChange: (m: JStoreChange) => void;\n\n\tonConnOpened() {\n\t\tif (this.view && !this.view.reg.env.nodeInfosPending) {\n\t\t\t//Vue déjà chargée\n\t\t\tconst path = this.view.resPath;\n\t\t\tthis.setResPath(null);\n\t\t\tthis.setResPath(path);\n\t\t}\n\t}\n\n\tprotected _onConnOpened: () => void;\n\n\tvisitViews(visitor: (view: IViewApi) => any, options?: OViewVisitOptions): any {\n\t\tif (!this.view) return;\n\t\tif (options?.visible && !this._shown) return;\n\t\treturn visitor(this.view);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IViewApi) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\tif (!this.view) return;\n\t\tif (options?.visible && !this._shown) return;\n\t\treturn visitor(this.view);\n\t}\n\n\tonViewShown() {\n\t\tthis._shown = true;\n\t\tif (this.view) VIEWS.onViewShown(this.view);\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\tthis._shown = false;\n\t\ttry {\n\t\t\tif (this.view) VIEWS.onViewHidden(this.view, closed);\n\t\t} finally {\n\t\t\tif (closed) {\n\t\t\t\tthis.view = null;\n\t\t\t\tthis.reg.env.infoBroker?.removeConsumer(this);\n\t\t\t\tthis.reg.env.depotEvents?.removeListener(\"resChange\", this._onResChange);\n\t\t\t\tthis.reg.env.depotEvents?.removeListener(\"connOpened\", this._onConnOpened);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _refresh() {\n\t\tthis.view?.refresh();\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoReqCurrentRes) {\n\t\t\tif (this.view) {\n\t\t\t\tinfo.resPath = this.view.resPath;\n\t\t\t\tinfo.resProps = this.view.reg.env.nodeInfos;\n\t\t\t}\n\t\t} else if (info instanceof InfoFocusRes) {\n\t\t\tthis.setResPath(info.resPath);\n\t\t\tinfo.focusHandled = this;\n\t\t} else if (info instanceof InfoUpdatePendingRes) {\n\t\t\tconst current = this.view?.resPath;\n\t\t\tif (current) {\n\t\t\t\tconst currentType = this.view.reg.env.resType;\n\t\t\t\tif (currentType && currentType.livePath(info.resPath) === current) {\n\t\t\t\t\tthis.setResPath(null);\n\t\t\t\t\tinfo.done.then((r) => {\n\t\t\t\t\t\tif (r === null) {\n\t\t\t\t\t\t\t//noeud supprimé, on remonte au père.\n\t\t\t\t\t\t\tthis.setResPath(URLTREE.extractParentPath(current));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.setResPath(r.path);\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch((e) => {\n\t\t\t\t\t\t//Rechargement de l'ancien path\n\t\t\t\t\t\tthis.setResPath(current);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonErrorFallback(this: void, resRoot: ResRoot) {\n\t\tconst me = DOMSH.findHost<ResViewerSingle>(resRoot);\n\t\tme.setResPath(URLTREE.extractParentPath(resRoot.resPath));\n\t}\n}\n\nexport interface JLDResViewerSingle extends JLastDatas {\n\tlastPath?: string\n}\n\nREG.reg.registerSkin('store-resviewer-single', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tflex-direction: column;\n\t}\n\n\tstore-res-root {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t}\n`);\n\ncustomElements.define('store-resviewer-single', ResViewerSingle);\n\n\n/**\n * Racine d'une vue d'une Res pour un resPath **fixé** qui instancie\n * dynamiquement son propre registre IDepotResUiEnv enrichi par son IResType.\n *\n * Si une modif de la res entraine un changement de type, le registre est reconstruit.\n *\n * TODO impl IView avec les attr icon, label, description et VIEWS.dispatchViewChange(this)\n * \tsi on veut qu'un container de type ResViewerMulti avec onglets par exemple soit mis à jour...\n */\nexport interface ResRoot extends BaseElement, IViewContainer {\n\tinitialize(init: OResRootInit): this\n}\n\nexport interface OResRootInit extends OLastDatasInit {\n\n\treg?: IReg<IDepotUiEnv>\n\n\t/** Key de la view à afficher issue de IResType.resView(key) */\n\tkeyView?: string\n\n\t/** Path fixé (généralement le resLivePath). Utilisé si resReg non renseigné. */\n\tresPath?: resPath\n\n\t/** Registre déjà instancié. Si spécifié, resPath non utilisé. */\n\tresReg?: IReg<IDepotResUiEnv>\n\n\t/** En cas d'erreur (contenu supprimé, accès refusé, echec...)*/\n\tonErrorFallback?: (resRoot: ResRoot) => void\n}\n\nexport class ResRoot extends BaseElementAsync implements IViewContainer, IView {\n\n\tkeyView: string;\n\n\tdptReg: IReg<IDepotUiEnv>;\n\n\tresPath: resPath;\n\n\tonErrorFallback?: (resRoot: ResRoot) => void\n\n\t/** Registre instancié propre à la Res. */\n\treg: IReg<IDepotResUiEnv>;\n\n\t/** resView dépendante de son type. */\n\tview: IView;\n\n\t/** Mémoire du resType associé. */\n\tresType: IResType;\n\n\t/** Mémoire transitoire des lastDatas pour le 1er chargement. */\n\tprotected _lastDatas: any;\n\n\tprotected _shown: boolean;\n\n\tvisitViews(visitor: (view: IViewApi) => any, options?: OViewVisitOptions): any {\n\t\tif (!this.view) return;\n\t\tif (options?.visible && !this._shown) return;\n\t\treturn visitor(this.view);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IViewApi) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\tif (!this.view) return;\n\t\tif (options?.visible && !this._shown) return;\n\t\treturn visitor(this.view);\n\t}\n\n\tonViewShown() {\n\t\tthis._shown = true;\n\t\tif (this.view) VIEWS.onViewShown(this.view);\n\t}\n\n\tonViewHidden(closed?: boolean) {\n\t\tthis._shown = false;\n\t\ttry {\n\t\t\tif (this.view) VIEWS.onViewHidden(this.view, closed);\n\t\t} finally {\n\t\t\tif (closed) this.reg.close();\n\t\t}\n\t}\n\n\tprotected async _initialize(init: OResRootInit) {\n\t\tthis.dptReg = init.reg;\n\t\tthis.keyView = init.keyView || \"main\";\n\t\tthis.onErrorFallback = init.onErrorFallback;\n\t\tif (init.lastDatas) this._lastDatas = init.lastDatas;\n\t\tif (init.resReg) {\n\t\t\tthis.resPath = init.resReg.env.path;\n\t\t\tthis.setResReg(init.resReg);\n\t\t} else {\n\t\t\tthis.resPath = init.resPath;\n\t\t\tthis.createResReg();\n\t\t}\n\t}\n\n\tprotected createResReg() {\n\t\tthis.setResReg(this.dptReg.env.universe.newDepotResUiRegFromDepotUiReg(this.dptReg, this.resPath));\n\t}\n\n\tprotected setResReg(reg: IReg<IDepotResUiEnv>) {\n\t\tthis.reg = reg;\n\t\tconst lstn = this.reg.env.nodeInfosChange;\n\t\tif (lstn) lstn.on(\"nodeChange\", this.refresh.bind(this));\n\t\telse this.reg.env.nodeInfosPending?.then(this.refresh.bind(this));\n\t}\n\n\tprotected _refresh() {\n\t\tconst env = this.reg.env;\n\t\tif (env.nodeInfos) {\n\t\t\t//nodeInfos chargé\n\t\t\tif (env.resType !== this.resType) {\n\t\t\t\t//1er refresh ou chgt de type de res\n\t\t\t\tlet lastDatas;\n\t\t\t\tif (this.resType) {\n\t\t\t\t\t//C'est un chgt de type de res.\n\t\t\t\t\tthis.reg.close();\n\t\t\t\t\tthis.createResReg();\n\t\t\t\t} else if (this._lastDatas) {\n\t\t\t\t\tlastDatas = this._lastDatas;\n\t\t\t\t\tthis._lastDatas = null;\n\t\t\t\t}\n\t\t\t\tthis.resType = env.resType;\n\t\t\t\tthis.draw(lastDatas);\n\t\t\t} else if (isEltRefreshable(this.view)) {\n\t\t\t\tthis.view.refresh();\n\t\t\t} else {\n\t\t\t\t//this.view null ou pas refreshable\n\t\t\t\tthis.draw(null);\n\t\t\t}\n\t\t} else if (env.nodeInfosPending) {\n\t\t\t//nodeInfos en chargement\n\t\t} else {\n\t\t\t//Pas de nodeInfos, ni de chargement en cours => erreur\n\t\t\tthis.resType = null;\n\t\t\tthis.drawError();\n\t\t}\n\t}\n\n\tprotected async draw(lastDatas: null | JLastDatas) {\n\t\tthis.view = await this.resType.resView(this.keyView).loadBody(this.reg, lastDatas);\n\t\tif (this.reg.isClosed) return; //raceCond\n\t\tthis.clear();\n\t\tthis.appendChild(this.view);\n\t\tif (this._shown) VIEWS.onViewShown(this.view);\n\t\t//TODO avec impl IView VIEWS.dispatchViewChange(this);\n\t}\n\n\tprotected clear() {\n\t\tVIEWS.clearContent(this, true);\n\t}\n\n\tprotected drawError() {\n\t\tthis.clear();\n\t\tif (this.reg.env.nodeInfos === null) {\n\t\t\tthis.appendChild(<c-msg level=\"warning\" label=\"Ce contenu n'existe pas ou a été supprimé\"/>);\n\t\t} else {\n\t\t\tconst err = this.reg.env.nodeInfosError;\n\t\t\tif (isRespError(err) && err.response.status == EHttpStatusCode.forbidden) {\n\t\t\t\tthis.appendChild(<c-msg level=\"warning\" label=\"Vous ne disposez pas des permissions pour consulter ce contenu\"/>);\n\t\t\t} else {\n\t\t\t\tthis.appendChild(<c-msg level=\"error\" label=\"Erreur au chargement\"/>);\n\t\t\t}\n\t\t}\n\t\tif (this.onErrorFallback) this.onErrorFallback(this);\n\t}\n}\n\ncustomElements.define('store-res-root', ResRoot);\n\n\nexport interface OResBodyViewInit extends OBaseAreaViewInit<IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>> {\n\tactionsBar?: OBarActionsInit<IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>>\n}\n\n/**\n * Base aux views des res affichant un contenu avec gestion d'erreur.\n */\nexport abstract class ResBodyView extends BaseAreaView<IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>> {\n\n\treg: IReg<IDepotResUiEnv | IDepotShortResUiEnv>;\n\n\tprotected _refresh() {\n\t\tconst env = this.reg.env;\n\t\tif (env.nodeInfos) {\n\t\t\tthis.clear();\n\t\t\tthis.draw();\n\t\t} else if ((env as IDepotResUiEnv).nodeInfosPending) {\n\t\t\t(env as IDepotResUiEnv).nodeInfosPending.then(this.refresh.bind(this));\n\t\t} else {\n\t\t\t//Pas de nodeInfos, ni de chargement en cours => erreur\n\t\t\tthis.clear();\n\t\t\tthis.drawError();\n\t\t}\n\t}\n\n\tprotected initBarActions(init: OResBodyViewInit, parent: Node) {\n\t\tif (init.actionsBar) parent.appendChild(<BarActions id=\"bodyActions\" î={BASIS.newInit(init.actionsBar, this.reg)}/>);\n\t}\n\n\tprotected abstract draw(): void;\n\n\tprotected clear() {\n\t\tBASIS.clearContent(this.shadowRoot);\n\t}\n\n\tprotected drawError() {\n\t\tif (this.reg.env.nodeInfos === null) {\n\t\t\tthis.shadowRoot.appendChild(<c-msg level=\"warning\" label=\"Ce contenu n'existe pas ou a été supprimé\"/>);\n\t\t} else {\n\t\t\tconst err = (this.reg.env as IDepotResUiEnv).nodeInfosError;\n\t\t\tif (isRespError(err) && err.response.status == EHttpStatusCode.forbidden) {\n\t\t\t\tthis.shadowRoot.appendChild(<c-msg level=\"warning\" label=\"Vous ne disposez pas des permissions pour consulter ce contenu\"/>);\n\t\t\t} else {\n\t\t\t\tthis.shadowRoot.appendChild(<c-msg level=\"error\" label=\"Erreur au chargement\"/>);\n\t\t\t}\n\t\t}\n\t}\n}"]}