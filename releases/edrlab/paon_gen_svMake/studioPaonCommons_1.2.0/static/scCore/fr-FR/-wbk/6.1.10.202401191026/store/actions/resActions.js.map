{"version":3,"sources":["/@back@/store/actions/resActions.tsx"],"names":["Action","ActionHackCtx","JSX","POPUP","InfoFocusRes","InfoUpdatePendingRes","URLTREE","EStoreAspects","UtSelector","UtBrowserFetcher","ERROR","Desk","isRespError","ResEditAction","[object Object]","ctx","ev","emitter","target","reg","env","uiRoot","infoBroker","cidMetas","uiCtx","returnProps","cid","universe","promise","syncSend","concat","ReturnProps","_a","getInfoBroker","dispatchInfo","path","result","scCidSessStatus","showError","msg","extractCidLocalizedErrorMsg","cause","adminDetails","JSON","stringify","e","response","status","report","this","showEvenIfMoved","nodeInfos","t","resType","prcVersionning","succ","length","super","isVisible","AddByImport","id","_label","_description","_icon","_group","_enablePerms","metasIn","resTypes","getResTypeByPrc","processing","editMetasCode","getPref","resForm","EditMetasRes","import","metasOut","Object","assign","newDepotResUiRegInCreation","olderResId","adminUrlTree","resId","ct","initialize","skinOver","defaultValues","formView","metas","showDialog","titleBar","resizer","initWidth","initHeight","onNextClose","multiple","input","document","createElement","type","click","Promise","resolve","onchange","files","getUiCtx","libUi","pickFiles","EditPrcIdent","folderPath","prcIsFolder","permaPath","extractParentPath","i","importFileOrFolder","file","parentPath","isLast","File","leafName","name","resTypesTree","getResTypesTree","prcIsNoContent","prcNoCreator","preview","editMetas","cidResult","ImportRes","doImport","confirm","cancelLbl","okLbl","AddFolder","createFolder","entries","_b","defaultName","restTypes","doBtnLabel","defaultFolderType","RenameRes","isRootPath","hasAnyVCB","resPath","newDepotResUiRegFromDepotUiReg","config","formIdent","folderUi","resUpdatable","initializedAsync","close","MoveRes","fromPath","fromFolder","extractUnversionedPath","initialPath","checkSel","utSelector","selPath","currentSel","isDescendantPathOrEqual","selBtnLabel","utBrowser","fetcher","setFilter","extractUnversionedLeafName","folder","olderPath","appendToPath","VisStateRes","visStateDescription","visStateLabel","visStateIconUrl","hasAspect","trash","unlisted","api","actions","VisStateVisible","u","push","VisStateLimited","VisStateInvisible","VisState","initState","perms","getPerms","checkObjectRootPerm","getDatas","trashed","ni","sendCidUpdate","undefined","RemoveRes","getLabel","action","progress","showProgress","req","body","createMetas","progressCallback","sess","newSession","send","windowBar","barLabel","label","onProgress","waitForEndSession","resp","details","scCidSessDetails","done","total","step","startsWith","extractUnversionedLeafPath","olderTs","m","isClosed","humanPath","EditPermsRes","requireEnabledPerm","ObjRolesMapEdit","objThis","create","uiContext","rolesUiLayerSng","objFetchRolesMap","async","pAccounts","lastFetch","fetchUserRolesMap","userRolesMap","objFetchRolesMapForAccounts","nodeInfosForAccounts","fetchUserRolesMapForAccounts","objEditRolesMap","rolesMap","k","keys","newMetas","prc","addAnonymousAccount","urlTree","anonymousAccount","objEditRolesMapPerms","closeButton","SwitchProcessing","prcTarget","confirmMsg","resTypeTarget","overrideValues","values","forceNewProcessing","OpenViewRes","subPath","directive","setIcon","setLabel","setDescription","electron","window","open","urlFromPath","DownloadRes","link","href","download","resName","Depot2ResCtxAction","resList","isEnabled","res","getResTypeFor","newShortResRegFromDepotReg"],"mappings":"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","sourcesContent":["import {Action, ActionHackCtx, IAction, IActionMenu, IActionToggle} from \"lib/commons/actions\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {IDepotCtx, IDepotResCtx, IDepotShortResCtx, IDirResType, InfoFocusRes, InfoUpdatePendingRes, IResType, JCidMetas, JPersistMetas, resPath} from \"lib/store/res\";\nimport {JNodeInfos, JNodeShortProps, URLTREE} from \"lib/store/urlTree\";\nimport {JDepotCidResult, ODepotCidRequest} from \"lib/store/cid\";\nimport {EStoreAspects, IDepotResUiEnv, IDepotShortResUiEnv} from \"lib/store/depot\";\nimport {IInfoBroker} from \"lib/commons/infos\";\nimport {UtSelector} from \"back/store/dialogs/utSelector\";\nimport {UtBrowserFetcher} from \"back/store/views/utBrowser\";\nimport \"back/store/actions/actions_Perms\";\nimport {OEditPrcIdentInit} from \"back/store/dialogs/editPrcIdent\";\nimport {OEditMetasResInit} from \"back/store/dialogs/editMetasRes\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {Desk} from \"lib/commons/desk\";\nimport {IFolder} from \"lib/commons/io/files\";\nimport {isRespError} from \"lib/commons/io/io\";\n\n\nexport abstract class ResEditAction<C extends IDepotShortResCtx | IDepotResCtx> extends Action<C> {\n\n\tstatic getUiCtx(ctx: IDepotShortResCtx | IDepotResCtx | IDepotCtx, ev?: Event) {return ctx.emitter || (ev?.target as Node) || ctx.reg.env.uiRoot}\n\n\tstatic getInfoBroker(ctx: IDepotShortResCtx | IDepotResCtx | IDepotCtx): IInfoBroker {return ctx.infoBroker || ctx.reg.env.infoBroker}\n\n\t/** Update synchrone des metas d'une res.  */\n\tstatic async sendCidUpdate(cidMetas: JCidMetas, ctx: IDepotShortResCtx | IDepotResCtx | IDepotCtx, uiCtx: Node, returnProps?: Array<keyof (JDepotCidResult & JPersistMetas)>): Promise<JDepotCidResult & JCidMetas> {\n\t\tconst cid = ctx.reg.env.universe.cid;\n\t\ttry {\n\t\t\tconst promise = cid.syncSend<JCidMetas>({cidMetas, returnProps: returnProps ? returnProps.concat(ReturnProps) : ReturnProps});\n\t\t\t//Notifie le contexte graphique d'un update en cours.\n\t\t\tResEditAction.getInfoBroker(ctx)?.dispatchInfo(new InfoUpdatePendingRes(cidMetas.path, promise), uiCtx);\n\t\t\tconst result = await promise;\n\t\t\tif (result.scCidSessStatus !== \"commited\") {\n\t\t\t\tERROR.showError({msg: cid.extractCidLocalizedErrorMsg(result), cause: null, ctx: null, adminDetails: JSON.stringify(result)});\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tif (isRespError(e) && e.response.status === 403) {\n\t\t\t\tERROR.report(\"Vous ne disposez pas des autorisations nécessaires pour effectuer cette modification.\", e);\n\t\t\t} else {\n\t\t\t\tERROR.report(\"Une erreur est survenue durant cette modification.\", e);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tshowEvenIfMoved: boolean;\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!this.showEvenIfMoved && ctx.reg.env.nodeInfos.t === \"moved\") return false;\n\t\t//En VCS aucune édition si le node n'est pas le head.\n\t\tif (ctx.reg.env.resType.prcVersionning === \"VCS\" && (ctx.reg.env.nodeInfos as JNodeInfos).succ?.length > 0) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n}\n\n/**\n * Ajoute une ressource au dossier courant ou en frère de la res courante.\n */\nexport class AddByImport<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\t/**\n\t * Edition des metas d'une ressource en construction.\n\t * @param metasIn Doit a minima contenir le processing et le path (cf EditPrcIdent).\n\t */\n\tstatic async editMetas(metasIn: JCidMetas, ctx: IDepotShortResCtx | IDepotResCtx, uiCtx: Node): Promise<JCidMetas | null> {\n\t\tconst resType = ctx.reg.env.resTypes.getResTypeByPrc(metasIn.processing);\n\t\tconst editMetasCode = resType.reg.getPref(\"editMetas.beforeUpload\", \"editMetas\");\n\t\tif (!editMetasCode || !resType.resForm(editMetasCode)) return metasIn;\n\n\t\tconst EditMetasRes = (await import(\"back/store/dialogs/editMetasRes.js\")).EditMetasRes;\n\t\tconst metasOut = Object.assign({}, metasIn);\n\n\t\t//Construction du reg dédié au resType cible.\n\t\tconst reg = ctx.reg.env.universe.newDepotResUiRegInCreation(ctx.reg, metasIn.path, resType);\n\t\tif (metasIn.olderResId != null && resType.prcVersionning !== \"VCB\") { //FIXME resType.prcVersionning !== \"VCB\" à supprimer quand formIdent OK.\n\t\t\t//On a un contenu existant.\n\t\t\treg.env.nodeInfos = await ctx.reg.env.universe.adminUrlTree.nodeInfos(metasIn.path);\n\t\t\t//Affectation de la version exacte utilisée pour initialiser les metas pour le controle d'édition concurrente.\n\t\t\tmetasOut.olderResId = reg.env.nodeInfos.resId;\n\t\t}\n\n\t\tconst ct = new EditMetasRes().initialize({\n\t\t\treg,\n\t\t\tskinOver: \"webzone:panel\",\n\t\t\tdefaultValues: metasIn,\n\t\t\tformView: editMetasCode,\n\t\t} as OEditMetasResInit);\n\t\tconst metas = await POPUP.showDialog<JCidMetas>(ct, uiCtx, {titleBar: \"Édition des métadonnées...\", resizer: {}, initWidth: \"min(60em, 90vw)\", initHeight: \"min(40em, 90vh)\"}).onNextClose();\n\t\tif (metas) {\n\t\t\tObject.assign(metasOut, metas);\n\t\t\treturn metasOut;\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic async pickFiles(multiple?: boolean): Promise<FileList> {\n\t\t//FIXME utiliser https://wicg.github.io/file-system-access/#api-showopenfilepicker.\n\t\tconst input = document.createElement('input');\n\t\tinput.type = \"file\";\n\t\tif (multiple) input.multiple = true;\n\t\tinput.click();\n\t\treturn new Promise<FileList>((resolve) => {\n\t\t\tinput.onchange = function (this: HTMLInputElement) {\n\t\t\t\tresolve(this.files.length > 0 ? this.files : null);\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'addByImport');\n\t\tthis._label = \"Ressource\";\n\t\tthis._description = \"Ajouter une ressource\";\n\t\tthis._icon = \"/@skin@/store/actions/addRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#add.res\";\n\t}\n\n\t/** Pour exploitation de cette action par darg/drop. */\n\tsetFiles(files: FileList | (File | IFolder)[]): this {\n\t\tthis.files = files;\n\t\treturn this;\n\t}\n\n\tprotected files: FileList | (File | IFolder)[];\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = AddByImport.getUiCtx(ctx, ev);\n\t\tconst libUi = import(\"back/store/dialogs/editPrcIdent.js\");\n\t\tconst files = this.files || await AddByImport.pickFiles(true);\n\t\tif (files) {\n\t\t\tconst EditPrcIdent = (await libUi).EditPrcIdent;\n\t\t\t//console.log(\"AddRes:::\", files, ctx);\n\t\t\tconst folderPath = ctx.reg.env.resType.prcIsFolder ? ctx.reg.env.nodeInfos.permaPath : URLTREE.extractParentPath(ctx.reg.env.nodeInfos.permaPath);\n\t\t\tfor (let i = 0; i < files.length; i++) {\n\t\t\t\tif (!await this.importFileOrFolder(files[i], folderPath, ctx, uiCtx, i === files.length - 1, EditPrcIdent)) break;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync importFileOrFolder(file: File | IFolder, parentPath: resPath, ctx: C, uiCtx: Node, isLast: boolean, EditPrcIdent: typeof import(\"back/store/dialogs/editPrcIdent.js\").EditPrcIdent) {\n\t\tif (file instanceof File) {\n\t\t\tconst ct = new EditPrcIdent().initialize({\n\t\t\t\treg: ctx.reg,\n\t\t\t\tskinOver: \"webzone:panel\",\n\t\t\t\tfolderPath: parentPath,\n\t\t\t\tleafName: file.name,\n\t\t\t\tresTypesTree: {\n\t\t\t\t\tresTypes: ctx.reg.env.resTypes.getResTypesTree((resType) => !resType.prcIsNoContent && !resType.prcNoCreator)\n\t\t\t\t},\n\t\t\t\tpreview: file\n\t\t\t} as OEditPrcIdentInit);\n\t\t\tlet cidMetas = await POPUP.showDialog<JCidMetas>(ct, uiCtx, {titleBar: `Importer '${file.name}'`, resizer: {}, initWidth: \"min(60em, 90vw)\", initHeight: \"min(40em, 90vh)\"}).onNextClose();\n\t\t\tif (cidMetas) {\n\t\t\t\tcidMetas = await AddByImport.editMetas(cidMetas, ctx, uiCtx);\n\t\t\t\tif (cidMetas) {\n\t\t\t\t\tconst cidResult = await ImportRes.doImport(file, cidMetas, ctx, uiCtx);\n\t\t\t\t\tif (cidResult?.scCidSessStatus === \"commited\") {\n\t\t\t\t\t\tif (isLast) ResEditAction.getInfoBroker(ctx)?.dispatchInfo(new InfoFocusRes(cidResult.path), uiCtx);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//echec ou abandon\n\t\t\treturn !isLast && await POPUP.confirm(\"Voulez-vous poursuivre l'import des fichiers restants ?\", uiCtx, {cancelLbl: \"Arrêter\", okLbl: \"Poursuivre\"});\n\t\t} else {\n\t\t\t//Folder\n\t\t\tconst result = await AddFolder.createFolder(parentPath, file.name, ctx, uiCtx, EditPrcIdent);\n\t\t\tif (!result || result.scCidSessStatus !== \"commited\") {\n\t\t\t\tif (!isLast) return await POPUP.confirm(\"Voulez-vous poursuivre l'import des fichiers restants ?\", uiCtx, {cancelLbl: \"Arrêter\", okLbl: \"Poursuivre\"});\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (file.entries.length > 0) {\n\t\t\t\tfor (let i = 0; i < file.entries.length; i++) {\n\t\t\t\t\tif (!await this.importFileOrFolder(file.entries[i], result.path, ctx, uiCtx, isLast && i === file.entries.length - 1, EditPrcIdent)) return false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isLast) ResEditAction.getInfoBroker(ctx)?.dispatchInfo(new InfoFocusRes(result.path), uiCtx);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\n\nexport class AddFolder<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tstatic async createFolder(folderPath: resPath, defaultName: string, ctx: IDepotShortResCtx | IDepotResCtx, uiCtx: Node,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tEditPrcIdent: typeof import(\"back/store/dialogs/editPrcIdent.js\").EditPrcIdent,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trestTypes?: (IDirResType | IResType)[]): Promise<JDepotCidResult & JCidMetas> {\n\t\tconst ct = new EditPrcIdent().initialize({\n\t\t\treg: ctx.reg,\n\t\t\tskinOver: \"webzone:panel\",\n\t\t\tfolderPath,\n\t\t\tleafName: defaultName,\n\t\t\tresTypesTree: {\n\t\t\t\tresTypes: restTypes || ctx.reg.env.resTypes.getResTypesTree(resType => resType.prcIsFolder && !resType.prcNoCreator)\n\t\t\t},\n\t\t\tdoBtnLabel: \"Ajouter\"\n\t\t} as OEditPrcIdentInit);\n\t\tlet cidMetas = await POPUP.showDialog<JCidMetas | null>(ct, uiCtx, {titleBar: \"Ajouter un dossier...\", resizer: {}, initWidth: \"min(60em, 90vw)\", initHeight: \"min(40em, 90vh)\"}).onNextClose();\n\t\tif (cidMetas) {\n\t\t\tcidMetas = await AddByImport.editMetas(cidMetas, ctx, uiCtx);\n\t\t\tif (cidMetas) {\n\t\t\t\ttry {\n\t\t\t\t\tconst cid = ctx.reg.env.universe.cid;\n\t\t\t\t\tconst cidResult = await cid.syncSend<JCidMetas>({cidMetas, returnProps: ReturnProps});\n\t\t\t\t\tif (cidResult.scCidSessStatus === \"commited\") {\n\t\t\t\t\t\tResEditAction.getInfoBroker(ctx)?.dispatchInfo(new InfoFocusRes(cidResult.path), uiCtx);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait ERROR.showError({msg: cid.extractCidLocalizedErrorMsg(cidResult), cause: null, ctx: null, adminDetails: JSON.stringify(cidResult)});\n\t\t\t\t\t}\n\t\t\t\t\treturn cidResult;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tawait ERROR.report(\"Une erreur est survenue durant la création de ce dossier.\", e);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'addFolder');\n\t\tthis._label = \"Dossier\";\n\t\tthis._description = \"Ajouter un dossier\";\n\t\tthis._icon = \"/@skin@/store/actions/addFolder.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#add.folder\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.resTypes.defaultFolderType) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = AddFolder.getUiCtx(ctx, ev);\n\t\tconst EditPrcIdent = (await import(\"back/store/dialogs/editPrcIdent.js\")).EditPrcIdent;\n\t\tconst folderPath = ctx.reg.env.resType.prcIsFolder ? ctx.reg.env.nodeInfos.permaPath : URLTREE.extractParentPath(ctx.reg.env.nodeInfos.permaPath);\n\t\treturn AddFolder.createFolder(folderPath, \"\", ctx, uiCtx, EditPrcIdent);\n\t}\n}\n\nexport class RenameRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'renameRes');\n\t\tthis._label = \"Renommer...\";\n\t\tthis._description = \"Renommer cette ressource\";\n\t\tthis._icon = \"/@skin@/store/actions/renameRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#rename.res\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (URLTREE.isRootPath(ctx.reg.env.nodeInfos.permaPath)) return false; //root du dépot pas renommable.\n\t\tif (ctx.reg.env.resTypes.hasAnyVCB()) return false; //si VCB todo coté java...\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst EditMetasRes = (await import(\"back/store/dialogs/editMetasRes.js\")).EditMetasRes;\n\t\tconst uiCtx = AddFolder.getUiCtx(ctx, ev);\n\t\tconst resPath = ctx.reg.env.path;\n\t\tlet reg = ctx.reg;\n\t\ttry {\n\t\t\tif (reg.env.nodeInfos && !(reg.env.nodeInfos as JNodeInfos).metas) {\n\t\t\t\t//nodeInfos existe (on n'est pas en création) mais metas non chargées\n\t\t\t\t//reg IDepotShortResUiEnv -> IDepotResUiEnv\n\t\t\t\treg = reg.env.universe.newDepotResUiRegFromDepotUiReg(reg, resPath);\n\t\t\t}\n\t\t\tconst config: OEditMetasResInit = {\n\t\t\t\treg: reg,\n\t\t\t\tskinOver: \"webzone:panel\",\n\t\t\t\tformIdent: {\n\t\t\t\t\tfolderUi: \"hidden\",\n\t\t\t\t\tfolderPath: URLTREE.extractParentPath(resPath),\n\t\t\t\t\tresUpdatable: \"ifInTrash\"\n\t\t\t\t}\n\t\t\t\t//showRedirOption: \"unchecked\" | \"checked\",\n\t\t\t};\n\t\t\tconst ct = new EditMetasRes().initialize(config);\n\t\t\tawait ct.initializedAsync;\n\n\t\t\tconst cidMetas = await POPUP.showDialog<JCidMetas>(ct, uiCtx, {titleBar: `Identité de ${resPath}`, resizer: {}}).onNextClose();\n\t\t\tif (cidMetas != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst cid = ctx.reg.env.universe.cid;\n\t\t\t\t\tconst infoBroker = ResEditAction.getInfoBroker(ctx); //mémoire car msg webSocket de suppr de la source peut kill ctx.reg au syncSend.\n\t\t\t\t\tconst cidResult = await cid.syncSend<JCidMetas>({cidMetas, returnProps: ReturnProps});\n\t\t\t\t\tif (cidResult.scCidSessStatus === \"commited\") {\n\t\t\t\t\t\tinfoBroker?.dispatchInfo(new InfoFocusRes(cidResult.path), uiCtx);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait ERROR.showError({msg: cid.extractCidLocalizedErrorMsg(cidResult), cause: null, ctx: null, adminDetails: JSON.stringify(cidResult)});\n\t\t\t\t\t}\n\t\t\t\t\treturn cidResult;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tawait ERROR.report(\"Une erreur est survenue durant ce renommage.\", e);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tif (reg !== ctx.reg) reg.close();\n\t\t}\n\t}\n}\n\nexport class MoveRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'moveRes');\n\t\tthis._label = \"Déplacer...\";\n\t\tthis._description = \"Déplacer ce contenu\";\n\t\tthis._icon = \"/@skin@/store/actions/moveRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#moveFrom.res\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (URLTREE.isRootPath(ctx.reg.env.nodeInfos.permaPath)) return false; //root du dépot pas déplaçable.\n\t\tif (ctx.reg.env.resTypes.hasAnyVCB()) return false; //si VCB todo coté java...\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst fromPath = ctx.reg.env.nodeInfos.permaPath;\n\t\tconst fromFolder = URLTREE.extractUnversionedPath(URLTREE.extractParentPath(fromPath));\n\t\tconst uiCtx = MoveRes.getUiCtx(ctx, ev);\n\t\tconst ct = new UtSelector().initialize({\n\t\t\treg: ctx.reg,\n\t\t\tskinOver: \"webzone:panel\",\n\t\t\tinitialPath: fromFolder,\n\t\t\tcheckSel: (utSelector) => {\n\t\t\t\tconst selPath = URLTREE.extractUnversionedPath(utSelector.currentSel?.permaPath);\n\t\t\t\tif (selPath === fromFolder) return \"Sélectionnez le dossier cible du déplacement\";\n\t\t\t\tif (selPath && URLTREE.isDescendantPathOrEqual(fromPath, selPath)) return \"Un déplacement dans sa propre descendance est impossible\";\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tselBtnLabel: \"Déplacer\",\n\t\t\tutBrowser: {\n\t\t\t\tfetcher: new UtBrowserFetcher(ctx.reg.env.universe.adminUrlTree).setFilter(\"isFolder\"),\n\t\t\t}\n\t\t});\n\t\tconst name = URLTREE.extractUnversionedLeafName(fromPath);\n\t\tconst folder = await POPUP.showDialog<JNodeShortProps>(ct, uiCtx, {titleBar: `Déplacer '${name}' vers...`, initWidth: \"min(90vw, 40em)\", initHeight: \"min(90vh, 30em)\"}).onNextClose();\n\t\tif (folder) {\n\t\t\ttry {\n\t\t\t\tconst cid = ctx.reg.env.universe.cid;\n\t\t\t\tconst infoBroker = ResEditAction.getInfoBroker(ctx); //mémoire car msg webSocket de suppr de la source peut kill ctx.reg au syncSend.\n\t\t\t\tconst cidResult = await cid.syncSend<JCidMetas>({\n\t\t\t\t\tcidMetas: {\n\t\t\t\t\t\tolderPath: fromPath,\n\t\t\t\t\t\tpath: URLTREE.appendToPath(folder.permaPath, name)\n\t\t\t\t\t},\n\t\t\t\t\treturnProps: ReturnProps\n\t\t\t\t});\n\t\t\t\tif (cidResult.scCidSessStatus === \"commited\") {\n\t\t\t\t\tinfoBroker?.dispatchInfo(new InfoFocusRes(cidResult.path), uiCtx);\n\t\t\t\t} else {\n\t\t\t\t\tawait ERROR.showError({msg: cid.extractCidLocalizedErrorMsg(cidResult), cause: null, ctx: null, adminDetails: JSON.stringify(cidResult)});\n\t\t\t\t}\n\t\t\t\treturn cidResult;\n\t\t\t} catch (e) {\n\t\t\t\tawait ERROR.report(\"Une erreur est survenue durant le déplacement.\", e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport class VisStateRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> implements IActionMenu<C> {\n\tconstructor(id?: string) {\n\t\tsuper(id || 'visStateRes');\n\t\tthis._group = \"edit\";\n\t}\n\n\tgetDescription(ctx: C): string {\n\t\treturn ctx.reg.env.resTypes.visStateDescription(ctx.reg.env.nodeInfos);\n\t}\n\n\tgetLabel(ctx: C): string {\n\t\treturn ctx.reg.env.resTypes.visStateLabel(ctx.reg.env.nodeInfos);\n\t}\n\n\tgetIcon(ctx: C): string {\n\t\treturn ctx.reg.env.resTypes.visStateIconUrl(ctx.reg.env.nodeInfos);\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!super.isVisible(ctx)) return false;\n\t\tif (URLTREE.isRootPath(ctx.reg.env.nodeInfos.permaPath)) return false; //XXX à voir si root versionné ?\n\t\treturn ctx.reg.env.universe.hasAspect(EStoreAspects.trash) || ctx.reg.env.universe.hasAspect(EStoreAspects.unlisted);\n\t}\n\n\tisMenu(ctx: C): this is IActionMenu<C> {return true}\n\n\tgetDatas(api: \"menu\", ctx: C): IAction<C>[] | any {\n\t\tif (api !== \"menu\") return;\n\t\tconst actions: IAction<C>[] = [new VisStateVisible()];\n\t\tconst u = ctx.reg.env.universe;\n\t\tif (u.hasAspect(EStoreAspects.unlisted)) actions.push(new VisStateLimited())\n\t\tif (u.hasAspect(EStoreAspects.trash)) actions.push(new VisStateInvisible())\n\t\treturn actions;\n\t}\n\n}\n\nabstract class VisState<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> implements IActionToggle<C>, JNodeShortProps {\n\n\ttrashed: boolean;\n\tunlisted: boolean;\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis._group = \"edit\";\n\t\tthis.initState();\n\t}\n\n\tisToggle(ctx: C): this is IActionToggle<C> {return true}\n\n\tisEnabled(ctx: C): boolean {\n\t\tconst perms = this.getPerms(ctx);\n\t\tif (perms && !this.checkObjectRootPerm(ctx, perms, true)) return false;\n\t\treturn !this.getDatas(\"toggle\", ctx);\n\t}\n\n\tgetLabel(ctx: C): string {\n\t\treturn ctx.reg.env.resTypes.visStateLabel(this);\n\t}\n\n\tgetDescription(ctx: C): string {\n\t\treturn ctx.reg.env.resTypes.visStateDescription(this);\n\t}\n\n\tgetIcon(ctx: C): string {\n\t\treturn ctx.reg.env.resTypes.visStateIconUrl(this);\n\t}\n\n\tabstract initState(): void;\n\n\tabstract getPerms(ctx: C): string | string[] | null;\n}\n\nexport class VisStateVisible<C extends IDepotShortResCtx | IDepotResCtx> extends VisState<C> {\n\n\tinitState() {\n\t\tthis.trashed = false;\n\t\tthis.unlisted = false;\n\t}\n\n\tgetDatas(api: 'toggle', ctx: C): boolean | null {\n\t\tif (api !== \"toggle\") return;\n\t\tconst ni = ctx.reg.env.nodeInfos;\n\t\treturn !ni.trashed && !ni.unlisted;\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst ni = ctx.reg.env.nodeInfos;\n\t\treturn ResEditAction.sendCidUpdate({\n\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\tolderResId: \"\",\n\t\t\ttrashed: ctx.reg.env.universe.hasAspect(EStoreAspects.trash) || ni.trashed ? false : undefined,\n\t\t\tunlisted: ctx.reg.env.universe.hasAspect(EStoreAspects.unlisted) || ni.unlisted ? false : undefined,\n\t\t}, ctx, ResEditAction.getUiCtx(ctx, ev));\n\t}\n\n\tgetPerms(ctx: C): string | string[] {\n\t\tconst ni = ctx.reg.env.nodeInfos;\n\t\tif (ni.trashed) return ni.unlisted ? [\"action.store#untrash.res\", \"action.store#relist.res\"] : \"action.store#untrash.res\"\n\t\treturn ni.unlisted ? \"action.store#relist.res\" : null\n\t}\n}\n\nexport class VisStateLimited<C extends IDepotShortResCtx | IDepotResCtx> extends VisState<C> {\n\n\tinitState() {\n\t\tthis.trashed = false;\n\t\tthis.unlisted = true;\n\t}\n\n\tgetDatas(api: 'toggle', ctx: C): boolean | null {\n\t\tif (api !== \"toggle\") return;\n\t\tconst ni = ctx.reg.env.nodeInfos;\n\t\treturn !ni.trashed && ni.unlisted || false;\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\treturn ResEditAction.sendCidUpdate({\n\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\tolderResId: \"\",\n\t\t\ttrashed: ctx.reg.env.universe.hasAspect(EStoreAspects.trash) ? false : undefined,\n\t\t\tunlisted: true\n\t\t}, ctx, ResEditAction.getUiCtx(ctx, ev));\n\t}\n\n\tgetPerms(ctx: C): string | string[] {\n\t\treturn \"action.store#unlist.res\"\n\t}\n}\n\nexport class VisStateInvisible<C extends IDepotShortResCtx | IDepotResCtx> extends VisState<C> {\n\n\tinitState() {\n\t\tthis.trashed = true;\n\t\tthis.unlisted = false;\n\t}\n\n\tgetDatas(api: 'toggle', ctx: C): boolean | null {\n\t\tif (api !== \"toggle\") return;\n\t\treturn !!ctx.reg.env.nodeInfos.trashed;\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\treturn ResEditAction.sendCidUpdate({\n\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\tolderResId: \"\",\n\t\t\ttrashed: true,\n\t\t\tunlisted: ctx.reg.env.universe.hasAspect(EStoreAspects.unlisted) ? false : undefined\n\t\t}, ctx, ResEditAction.getUiCtx(ctx, ev));\n\t}\n\n\tgetPerms(ctx: C): string | string[] {\n\t\treturn \"action.store#trash.res\"\n\t}\n}\n\nexport class RemoveRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'removeRes');\n\t\tthis._description = \"Supprimer définitivement cette ressource (restauration impossible)\";\n\t\tthis._icon = \"/@skin@/store/actions/removeRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#remove.res\";\n\t\tthis.showEvenIfMoved = true;\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (URLTREE.isRootPath(ctx.reg.env.nodeInfos.permaPath)) return false; //XXX à voir si root versionné ?\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tgetLabel(ctx: C): string {\n\t\tif (!this._label) return ctx.reg.env.resType.prcVersionning === \"VCB\" ? \"Supprimer définitivement cette version\" : \"Supprimer définitivement\";\n\t\treturn super.getLabel(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tif (await POPUP.confirm(\"Supprimer définitivement cette ressource ? Attention, aucune restauration ne sera possible.\", uiCtx, {okLbl: \"Supprimer définitivement\"})) {\n\t\t\treturn ResEditAction.sendCidUpdate({\n\t\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\t\taction: ctx.reg.env.resType.prcVersionning === \"VCB\" ? \"removeNode\" : \"removeAll\"\n\t\t\t}, ctx, uiCtx);\n\t\t}\n\t}\n}\n\n/** Action qui import un nouveau contenu sans éditiondes metas. TODO autre action qui combine ImportRes et EditMetasRes. */\nexport class ImportRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tstatic async doImport(file: File, cidMetas: JCidMetas, ctx: IDepotShortResCtx | IDepotResCtx, uiCtx: Node) {\n\t\tconst progress = POPUP.showProgress(uiCtx, \"Import en cours...\");\n\t\ttry {\n\t\t\tconst req: ODepotCidRequest<JCidMetas, JPersistMetas> = {\n\t\t\t\tcidMetas,\n\t\t\t\tbody: file,\n\t\t\t\tcreateMetas: true,\n\t\t\t\tprogress: progress.progressCallback,\n\t\t\t\treturnProps: ReturnProps\n\t\t\t};\n\t\t\tconst cid = ctx.reg.env.universe.cid;\n\t\t\tconst sess = cid.newSession();\n\t\t\tawait sess.send(req);\n\t\t\tconst titleBar = progress.windowBar?.barLabel;\n\t\t\tif (titleBar) titleBar.label = \"Traitement en cours...\";\n\t\t\tprogress.onProgress(1, undefined);\n\t\t\tconst promise = sess.waitForEndSession<Pick<JPersistMetas, 'resId' | 'path' | 'processing'>>(ReturnProps, 750, (resp) => {\n\t\t\t\tconst details = resp?.scCidSessDetails;\n\t\t\t\tif (details) {\n\t\t\t\t\tlet done = 0;\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tfor (let step of details) {\n\t\t\t\t\t\tif (step.type.startsWith(\"step\")) {\n\t\t\t\t\t\t\ttotal++;\n\t\t\t\t\t\t\tif (step.type === \"stepDone\") done++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprogress.onProgress(done, total);\n\t\t\t\t}\n\t\t\t});\n\t\t\tResEditAction.getInfoBroker(ctx)?.dispatchInfo(new InfoUpdatePendingRes(cidMetas.path, promise), ctx.emitter);\n\t\t\tconst cidResult = await promise;\n\t\t\tif (cidResult.scCidSessStatus !== \"commited\") {\n\t\t\t\tawait ERROR.showError({msg: cid.extractCidLocalizedErrorMsg(cidResult), cause: null, ctx: null, adminDetails: JSON.stringify(cidResult)});\n\t\t\t}\n\t\t\treturn cidResult;\n\t\t} catch (e) {\n\t\t\tawait ERROR.report(\"Une erreur est survenue durant l'envoi de ce contenu.\", e);\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tprogress.close();\n\t\t}\n\t}\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'importRes');\n\t\tthis._label = \"Importer...\";\n\t\tthis._description = \"Importer un nouveau contenu pour cette ressource\";\n\t\tthis._icon = \"/@skin@/store/actions/importRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#import.res\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (ctx.reg.env.resType.prcIsNoContent) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = AddByImport.getUiCtx(ctx, ev);\n\t\tconst ni = ctx.reg.env.nodeInfos;\n\t\tconst files = await AddByImport.pickFiles(false);\n\t\tif (files) return ImportRes.doImport(files[0], {\n\t\t\tpath: URLTREE.extractUnversionedLeafPath(ni.permaPath),\n\t\t\tolderResId: ni.resId,\n\t\t\tolderTs: ni.m\n\t\t}, ctx, uiCtx);\n\t}\n}\n\nconst ReturnProps: Array<keyof (JDepotCidResult & Pick<JPersistMetas, 'resId' | 'path' | 'processing'>)> = ['scCidSessStatus', 'scCidSessDetails', 'resId', 'path', 'processing'];\n\n/** Action qui affiche un dialogue d'édition des metas. */\nexport class EditMetasRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'editMetas');\n\t\tthis._label = \"Modifier les métadonnées\";\n\t\tthis._icon = \"/@skin@/store/actions/editMetas.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#edit.metasRes\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!super.isVisible(ctx)) return false;\n\t\treturn ctx.reg.env.resType.resForm(\"editMetas\") != null;\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tconst resPath = ctx.reg.env.path;\n\t\tconst {EditMetasRes} = await import(\"back/store/dialogs/editMetasRes.js\");\n\t\tlet reg = ctx.reg;\n\t\ttry {\n\t\t\tif (reg.env.nodeInfos && !(reg.env.nodeInfos as JNodeInfos).metas) {\n\t\t\t\t//nodeInfos existe (on n'est pas en création) mais metas non chargées\n\t\t\t\t//reg IDepotShortResUiEnv -> IDepotResUiEnv\n\t\t\t\treg = reg.env.universe.newDepotResUiRegFromDepotUiReg(reg, resPath);\n\t\t\t}\n\t\t\tconst ct = new EditMetasRes().initialize({reg, skinOver: \"webzone:panel\"});\n\t\t\tawait ct.initializedAsync;\n\t\t\tif (ctx.reg.isClosed) return //racecond\n\t\t\tconst path = reg.env.resTypes.humanPath(resPath);\n\t\t\tconst cidMetas = await POPUP.showDialog<JCidMetas | null>(ct, uiCtx as HTMLElement, {\n\t\t\t\ttitleBar: `Métadonnées de ${path}`,\n\t\t\t\tresizer: {}\n\t\t\t}).onNextClose();\n\t\t\tif (cidMetas) {\n\t\t\t\treturn ResEditAction.sendCidUpdate(cidMetas, ctx, uiCtx);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (reg !== ctx.reg) reg.close();\n\t\t}\n\t}\n}\n\n\n/** Affectation des roles par user sur une res. */\nexport class EditPermsRes<C extends IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || \"editUserRoleOnRes\");\n\t\tthis._label = \"Permissions...\";\n\t\tthis._description = \"Définir les rôles des utilisateurs sur cette ressource ou ce dossier et ses contenus\";\n\t\tthis._group = \"edit\";\n\t\tthis._icon = \"/@skin@/store/actions/editPerms.svg\";\n\t\tthis.requireEnabledPerm([\"action.store#edit.res.perms\", \"admin.UTNode.configRoles.byAdmin\"]);\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<void> {\n\t\tconst reg = ctx.reg;\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tconst {ObjRolesMapEdit} = await import(\"back/core/dialogs/objRolesMap.js\");\n\t\tconst path = reg.env.resTypes.humanPath(reg.env.path);\n\t\tconst objThis: C & { lastFetch: JNodeInfos } = Object.create(ctx);\n\t\tawait POPUP.showDialog(new ObjRolesMapEdit<C & { lastFetch: JNodeInfos }, IDepotShortResUiEnv | IDepotResUiEnv>().initialize({\n\t\t\treg,\n\t\t\tuiContext: \"popup\",\n\t\t\trolesUiLayerSng: \"res\",\n\t\t\tobjThis,\n\t\t\tobjFetchRolesMap: async (objThis, pAccounts?: string[]) => {\n\t\t\t\tobjThis.lastFetch = await objThis.reg.env.universe.adminUrlTree.fetchUserRolesMap(objThis.reg.env.path);\n\t\t\t\treturn objThis.lastFetch.userRolesMap;\n\t\t\t},\n\t\t\tobjFetchRolesMapForAccounts: async (objThis, pAccounts) => {\n\t\t\t\tconst nodeInfosForAccounts = await objThis.reg.env.universe.adminUrlTree.fetchUserRolesMapForAccounts(objThis.reg.env.path, pAccounts);\n\t\t\t\treturn nodeInfosForAccounts?.userRolesMap;\n\t\t\t},\n\t\t\tobjEditRolesMap: async (objThis, rolesMap) => {\n\t\t\t\tconst userRolesMap = Object.assign({}, objThis.lastFetch.userRolesMap);\n\t\t\t\tfor (const k of Object.keys(rolesMap)) userRolesMap[k] = rolesMap[k] === null ? undefined : rolesMap[k];\n\t\t\t\t//console.log(\"userRolesMap::::::\", userRolesMap);\n\t\t\t\ttry {\n\t\t\t\t\tconst newMetas: JCidMetas = {\n\t\t\t\t\t\tpath: objThis.reg.env.path,\n\t\t\t\t\t\tolderResId: objThis.lastFetch.resId || \"\",\n\t\t\t\t\t\tuserRolesMap\n\t\t\t\t\t}\n\t\t\t\t\tif (!newMetas.olderResId) {\n\t\t\t\t\t\t//Nécessaire si node actuel créé par défaut sans resId (folder racine ou folder auto créé)\n\t\t\t\t\t\tnewMetas.processing = objThis.reg.env.universe.resTypes.defaultFolderType.prc;\n\t\t\t\t\t}\n\t\t\t\t\tconst result = await ResEditAction.sendCidUpdate(newMetas, ctx, uiCtx, [\"userRolesMap\"]);\n\t\t\t\t\tif (result) objThis.lastFetch = {\n\t\t\t\t\t\tpermaPath: result.path,\n\t\t\t\t\t\tresId: result.resId,\n\t\t\t\t\t\tuserRolesMap: result.userRolesMap\n\t\t\t\t\t};\n\t\t\t\t\treturn result?.userRolesMap || null;\n\t\t\t\t} catch (e) {\n\t\t\t\t\t//Erreur déjà notifée dans sendCidUpdate\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\t\t\taddAnonymousAccount: reg.env.universe.urlTree.anonymousAccount,\n\t\t\tobjEditRolesMapPerms: [\"action.store#edit.res.perms\", \"admin.UTNode.configRoles.byAdmin\"],\n\t\t}), reg.env.uiRoot, {\n\t\t\ttitleBar: {barLabel: {label: `Permissions sur '${path}'`}, closeButton: {}},\n\t\t\tresizer: {},\n\t\t\tinitWidth: \"40em\",\n\t\t\tinitHeight: \"40em\"\n\t\t}).onNextClose();\n\t}\n}\n\n\n/** Action qui affiche un dialogue d'édition des metas. */\nexport class SwitchProcessing<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tprcTarget: string\n\n\tconfirmMsg: string | ((ctx: C) => string)\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'switchPrc');\n\t\t//this._label = \"Modifier les métadonnées\";\n\t\t//this._icon = \"/@skin@/store/actions/switchPrc.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#edit.metasRes\";\n\t}\n\n\tsetPrcTarget(prc: string): this {\n\t\tthis.prcTarget = prc;\n\t\treturn this;\n\t}\n\n\tsetConfirmMsg(confirmMsg: string | ((ctx: C) => string)): this {\n\t\tthis.confirmMsg = confirmMsg;\n\t\treturn this;\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tconst resPath = ctx.reg.env.path;\n\t\tconst resTypeTarget = ctx.reg.env.resTypes.getResTypeByPrc(this.prcTarget);\n\t\tlet file: File;\n\t\tif (!this.confirmMsg || await POPUP.confirm(typeof this.confirmMsg === \"string\" ? this.confirmMsg : this.confirmMsg(ctx), uiCtx)) {\n\t\t\tif (!resTypeTarget.prcIsNoContent) {\n\t\t\t\tconst files = await AddByImport.pickFiles(false);\n\t\t\t\tif (!files) return;\n\t\t\t\tfile = files[0];\n\t\t\t}\n\t\t\tconst editMetas = resTypeTarget.resForm(\"editMetas\");\n\t\t\tlet cidMetas: JCidMetas;\n\n\t\t\tconst {EditMetasRes} = await import(\"back/store/dialogs/editMetasRes.js\");\n\t\t\tif (editMetas) {\n\t\t\t\t//On impose un reg dédié car on va hacker le resType.\n\t\t\t\tconst reg = ctx.reg.env.universe.newDepotResUiRegFromDepotUiReg(ctx.reg, resPath);\n\t\t\t\ttry {\n\t\t\t\t\tconst ct = new EditMetasRes().initialize({\n\t\t\t\t\t\treg,\n\t\t\t\t\t\tskinOver: \"webzone:panel\",\n\t\t\t\t\t\toverrideValues: (editMetas, values) => {\n\t\t\t\t\t\t\tvalues.processing = this.prcTarget;\n\t\t\t\t\t\t\treg.env.universe.forceNewProcessing(reg, resTypeTarget);\n\t\t\t\t\t\t\treturn values;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tawait ct.initializedAsync;\n\t\t\t\t\tif (ctx.reg.isClosed) return //racecond\n\t\t\t\t\tcidMetas = await POPUP.showDialog<JCidMetas | null>(ct, uiCtx as HTMLElement, {\n\t\t\t\t\t\ttitleBar: this.getLabel(ctx),\n\t\t\t\t\t\tresizer: {}\n\t\t\t\t\t}).onNextClose();\n\t\t\t\t} finally {\n\t\t\t\t\treg.close();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//Pas de metas\n\t\t\t\tcidMetas = {\n\t\t\t\t\tprocessing: this.prcTarget,\n\t\t\t\t\tpath: resPath,\n\t\t\t\t\tolderResId: ctx.reg.env.nodeInfos.resId\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cidMetas) {\n\t\t\t\tif (file) {\n\t\t\t\t\tconst infoBroker = ResEditAction.getInfoBroker(ctx);\n\t\t\t\t\tconst cidResult = await ImportRes.doImport(file, cidMetas, ctx, uiCtx);\n\t\t\t\t\tif (cidResult && cidResult.scCidSessStatus === \"commited\") infoBroker?.dispatchInfo(new InfoFocusRes(cidResult.path), uiCtx);\n\t\t\t\t} else {\n\t\t\t\t\treturn ResEditAction.sendCidUpdate(cidMetas, ctx, uiCtx);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * Actions : ouverture d'une vue dans un onglet\n */\nexport class OpenViewRes<C extends IDepotShortResCtx | IDepotResCtx> extends Action<C> {\n\n\tconstructor(public subPath?: string, public directive?: string, id?: string) {\n\t\tsuper(id || 'openViewRes');\n\t\tthis.setIcon(\"/@skin@/store/views/resViews/openInNewTab.svg\")\n\t\tthis.setLabel(\"Ouvrir\");\n\t\tthis.setDescription(Desk.electron ? \"Ouvrir dans votre navigateur\" : \"Ouvrir dans un onglet\");\n\t\tthis._group = \"views\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (ctx.reg.env.nodeInfos.trashed) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\twindow.open(ctx.reg.env.universe.urlTree.urlFromPath(URLTREE.appendToPath(ctx.reg.env.nodeInfos.permaPath, this.subPath), this.directive), '_blank');\n\t}\n}\n\n/**\n * Actions : téléchargement\n */\nexport class DownloadRes<C extends IDepotShortResCtx | IDepotResCtx> extends Action<C> {\n\n\tconstructor(public subPath?: string, id?: string) {\n\t\tsuper(id || 'download');\n\t\tthis.setIcon(\"/@skin@/store/views/resViews/downloadRes.svg\")\n\t\tthis.setLabel(\"Télécharger\");\n\t\tthis._group = \"views\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (ctx.reg.env.nodeInfos.t === \"moved\") return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst link = <a/>;\n\t\tlink.href = ctx.reg.env.universe.urlTree.urlFromPath(URLTREE.appendToPath(ctx.reg.env.nodeInfos.permaPath, this.subPath), \"download&evenIfTrashed\");\n\t\tlink.download = ctx.reg.env.resType.resName(ctx.reg.env.nodeInfos);\n\t\tlink.click();\n\t}\n}\n\n\n/** ActionWrapper qui transforme un Ctx IDepotCtx en IDepotShortResCtx si une et une seule res est sélectionnée. */\nexport class Depot2ResCtxAction<C extends IDepotCtx> extends ActionHackCtx<C, IDepotShortResCtx> {\n\n\tisVisible(ctx: C): boolean {\n\t\tif (ctx.resList.length !== 1) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisEnabled(ctx: C): boolean {\n\t\tif (ctx.resList.length !== 1) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\twrapCtx(ctx: C): IDepotShortResCtx {\n\t\tif (ctx.resList.length !== 1) return null;\n\t\tconst res = ctx.resList[0];\n\t\tconst type = ctx.reg.env.resTypes.getResTypeFor(res);\n\t\treturn {\n\t\t\treg: type.newShortResRegFromDepotReg(ctx.reg, res),\n\t\t\tinfoBroker: ctx.infoBroker,\n\t\t\temitter: ctx.emitter,\n\t\t};\n\t}\n}\n\n\n// Usage à valider...\n// /** ActionWrapper qui transforme un Ctx IDepotResCtx en IDepotCtx. */\n// export class Res2DepotCtxAction<C extends IDepotResCtx> extends ActionHackCtx<C, IDepotCtx> {\n// \twrapCtx(ctx: C): IDepotCtx {\n// \t\treturn {\n// \t\t\treg: ctx.reg.parentReg as IReg<IDepotUiEnv>,\n// \t\t\tresList: [ctx.reg.env.nodeInfos],\n// \t\t\tinfoBroker: ctx.infoBroker,\n// \t\t\temitter: ctx.emitter,\n// \t\t};\n// \t}\n// }\n"]}