{"version":3,"sources":["/@back@/wsp/actions/packActions.tsx"],"names":["Action","SKINPACK","WSPPACK","POPUP","JSX","InstallWspPackAction","[object Object]","id","super","this","defaultAccept","installOnSrvPerm","_label","_description","_group","setIcon","ctx","ev","subPackSrvMap","Map","packSrvList","forEach","packSrv","universe","reg","hasPerm","set","getId","files","packs","input","document","createElement","type","accept","packExtensions","join","multiple","click","Array","from","Promise","resolve","onchange","length","size","form","appendChild","name","value","checked","getName","confirm","emitter","okLbl","kind","inputElt","elements","namedItem","delete","globalInstallHandler","all","map","async","packFile","packInstallHandler","pack","doInstallPackOnSrv","installPack","findIndex","isVisible","SINGLETON","InstallSkinPackAction","install"],"mappings":"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","sourcesContent":["import \"back/wsp/actions/actions_Perms\";\nimport {Action} from \"lib/commons/actions\";\nimport {JPackBase, PackSrv, SKINPACK, WSPPACK} from \"lib/wsp/pack\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {IReg} from \"lib/commons/registry\";\n\n\n/**\n * Installation d'un wsp pack\n * accept : résolu via ctxt.accept, ou la pref du register \"pack.action.install.accept\" à défaut\n */\n\nexport class InstallWspPackAction extends Action<IInstallPackActionCtx> {\n\tprotected defaultAccept = \".wsppack\";\n\tprotected installOnSrvPerm = \"action.pack#install.wspPack\";\n\n\tconstructor(id?: string) {\n\t\tsuper(id || \"installWspPack\");\n\t\tthis._label = \"Installer...\";\n\t\tthis._description = \"Installer un modèle documentaire ou une extension\";\n\t\tthis._group = \"packs\";\n\t\tthis.setIcon(\"/@skin@/wsp/actions/installPack.svg\");\n\t}\n\n\tasync execute(ctx: IInstallPackActionCtx, ev?: Event): Promise<any | 'noPreventDefault' | 'noStopPropag' | 'noStopPropag-noPreventDefault'> {\n\t\t// - Recherche des packSrv sur lesquels on possède le droit d'installer un pack\n\t\tlet subPackSrvMap: Map<String, PackSrv> = new Map();\n\t\tctx.packSrvList.forEach((packSrv) => {\n\t\t\t// ATTENTION : perm controlée sur le REG du packServer\n\t\t\tif (packSrv.universe.reg.hasPerm(this.installOnSrvPerm))\n\t\t\t\tsubPackSrvMap.set(packSrv.universe.getId(), packSrv);\n\t\t});\n\t\t// - Selection des packs si ctx.packs non renseigné\n\t\tlet files = ctx.packs;\n\t\tif (!files) {\n\t\t\tconst input = document.createElement('input');\n\t\t\tinput.type = \"file\";\n\t\t\tinput.accept = (ctx.packExtensions ? ctx.packExtensions.join(\";\") : \"\") || this.defaultAccept;\n\t\t\tinput.multiple = true;\n\t\t\tinput.click();\n\t\t\tfiles = Array.from(await new Promise<FileList>((resolve) => {\n\t\t\t\tinput.onchange = function (this: HTMLInputElement) {\n\t\t\t\t\t//console.log(\"input.onchange:::\", this.files);\n\t\t\t\t\tresolve(this.files.length > 0 ? this.files : null);\n\t\t\t\t}\n\t\t\t}));\n\t\t\tif (!files || files.length == 0) return;\n\t\t}\n\n\t\t// - Proposition des cibles à l'utilisateur (si > 1)\n\t\tif (subPackSrvMap.size > 1) {\n\t\t\tconst form = <form>\n\t\t\t\t<p>Veuillez sélectionner les environnements cibles dans lesquels réaliser l'installation :</p>\n\t\t\t</form> as HTMLFormElement;\n\t\t\tsubPackSrvMap.forEach((packSrv) => {\n\t\t\t\tform.appendChild(<p>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=\"checkbox\" name={packSrv.universe.getId()} value={packSrv.universe.getId()} checked=\"true\"/>\n\t\t\t\t\t\t{packSrv.universe.getName()}\n\t\t\t\t\t</label>\n\t\t\t\t</p>)\n\t\t\t});\n\t\t\tif (!await POPUP.confirm(form, ctx.emitter, {okLbl: \"Installer\", kind: \"question\"})) return;\n\t\t\tsubPackSrvMap.forEach((packSrv) => {\n\t\t\t\tconst inputElt = form.elements.namedItem(packSrv.universe.getId()) as HTMLInputElement;\n\t\t\t\tif (!inputElt || !inputElt.checked)\n\t\t\t\t\tsubPackSrvMap.delete(packSrv.universe.getId());\n\t\t\t})\n\t\t}\n\t\t// - Installation\n\t\tif (ctx.globalInstallHandler)\n\t\t\tawait ctx.globalInstallHandler(\"start\", false);\n\t\ttry {\n\t\t\tif (subPackSrvMap.size > 0) {\n\t\t\t\tawait Promise.all(Array.from(subPackSrvMap).map(async (value) => {\n\t\t\t\t\tlet packSrv = value[1];\n\t\t\t\t\tawait Promise.all(files.map(async (packFile) => {\n\t\t\t\t\t\t//console.log(\"Install pack \"+packFile.name + \" in \"+packSrv.universe.getName());\n\t\t\t\t\t\tif (ctx.packInstallHandler)\n\t\t\t\t\t\t\tawait ctx.packInstallHandler(\"start\", packFile, packSrv);\n\t\t\t\t\t\tlet pack;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpack = await this.doInstallPackOnSrv(packSrv, packFile);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tif (ctx.packInstallHandler)\n\t\t\t\t\t\t\t\tawait ctx.packInstallHandler(\"end\", packFile, packSrv, pack);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}));\n\t\t\t}\n\t\t} finally {\n\t\t\tif (ctx.globalInstallHandler)\n\t\t\t\tawait ctx.globalInstallHandler(\"end\", subPackSrvMap.size > 0);\n\t\t}\n\t}\n\n\tasync doInstallPackOnSrv(packSrv: PackSrv, packFile: File): Promise<JPackBase> {\n\t\treturn WSPPACK.installPack(packSrv, packFile);\n\t}\n\n\tisVisible(ctx: IInstallPackActionCtx): boolean {\n\t\tif (ctx.packSrvList && ctx.packSrvList.findIndex((packSrv) => {\n\t\t\treturn packSrv.universe.reg.hasPerm(this.installOnSrvPerm);\n\t\t}) == -1) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tstatic SINGLETON = new InstallWspPackAction();\n}\n\n/**\n * Installation d'un wsp pack\n * accept : résolu via ctxt.accept, ou la pref du register \"pack.action.install.accept\" à défaut\n */\n\nexport class InstallSkinPackAction extends InstallWspPackAction {\n\tprotected defaultAccept = \".skinpack\";\n\tprotected installOnSrvPerm = \"action.pack#install.skinPack\";\n\n\tconstructor(id?: string) {\n\t\tsuper(id || \"installSkinPack\");\n\t\tthis._label = \"Installer...\";\n\t\tthis._description = \"Installer un habillage graphique\";\n\t\tthis._group = \"packs\";\n\t\tthis.setIcon(\"/@skin@/wsp/actions/installPack.svg\");\n\t}\n\n\tasync doInstallPackOnSrv(packSrv: PackSrv, packFile: File): Promise<JPackBase> {\n\t\treturn SKINPACK.install(packSrv, packFile);\n\t}\n\n\tstatic SINGLETON = new InstallSkinPackAction();\n\n}\n\n\nexport interface IInstallPackActionCtx {\n\treg: IReg<any>,\n\t/** Liste pré-définie de packs à installer **/\n\tpacks?: File[],\n\tpackSrvList: PackSrv[],\n\temitter?: HTMLElement,\n\n\t/** extensions autorisées pour l'installation (avec le .) **/\n\tpackExtensions?: string[],\n\n\t/** Suivi de chaque installations [pack,server]\n\t * Cette méthode est appelée deux fois :\n\t * \t- avant l'appel du service d'installation (@param state = \"start\")\n\t * \t- aprés l'appel du service (@param state = \"end\")\n\t * @param pack : ne peut être prédent que si state=\"end\"\n\t ***/\n\tpackInstallHandler?(state: \"start\" | \"end\", file: File, packSrv: PackSrv, pack?: JPackBase): Promise<void>,\n\n\t/** Suivi global de l'installation\n\t * Cette méthode est appelée deux fois :\n\t * \t- avant l'appel du service d'installation (@param state = \"start\")\n\t * \t- aprés l'appel du service (@param state = \"end\")\n\t * @param pack : ne peut être prédent que si state=\"end\"\n\t ***/\n\tglobalInstallHandler?(state: \"start\" | \"end\", packsAreInstalled: boolean): Promise<void>,\n}\n"]}