{"version":3,"sources":["/@back@/store/widgets/resGridColumns.tsx"],"names":["CellBuilderIconLabel","REG","DOM","JSX","EFolderState","GridDataRowJsonTree","POPUP","VIEWS","CellBuilderResIconName","[object Object]","reg","noTooltip","super","this","resTypes","env","iconFilter","row","cacheHolder","getResTypeFor","rowDatas","resName","getFolderState","opened","resIcon","root","_nodeProps","redrawCell","_addTooltip","_buildContent","cell","findParentOrSelf","n","Element","classList","contains","promiseTooltip","owner","tooltip","addEventListener","async","ev","findReg","tooltipOf","nodeProps","resType","area","shortResView","resReg","newShortResRegFromDepotReg","body","loadBody","view","textContent","appendChild","onViewShown","preventDefault","_a","firstElementChild","onViewHidden","createElement","style","hoverAllowed","anchor","posFrom","intersectWith","fromX","marginX","notAvailableSpace","targetX","CellBuilderResTile","firstChild","append","class","node","rowKey","previewArea","previewRoot","ctx","needAsync","backgroundImage","then","tag","buildBody","title","lastElementChild","registerSkin","redrawResLine","line","currentResPath","path","livePath","getData","toggle"],"mappings":"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","sourcesContent":["import {CellBuilderIconLabel, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {ICellBuilder, IRowSortFn} from \"back/commons/widgets/grid-core\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {EFolderState, GridDataRowJsonTree} from \"back/commons/widgets/tree\";\nimport {JNodeShortProps} from \"lib/store/urlTree\";\nimport {IDepotShortResUiEnv, IDepotUiEnv} from \"lib/store/depot\";\nimport {DepotResTypeProv, resPath} from \"lib/store/res\";\nimport {POPUP, PopupTooltip} from \"back/commons/widgets/popups\";\nimport {IView, VIEWS} from \"lib/commons/views\";\n\n\nexport class CellBuilderResIconName extends CellBuilderIconLabel {\n\n\tprotected resTypes: DepotResTypeProv;\n\n\tconstructor(reg: IReg<IDepotUiEnv>, public noTooltip?: boolean) {\n\t\tsuper(null);\n\t\tthis.resTypes = reg.env.resTypes;\n\t\tthis.iconFilter = \"var(--filter)\";\n\t}\n\n\tprotected _getValue(row: GridDataRowJson<JNodeShortProps>): string {\n\t\treturn row.cacheHolder['resNm'] || (row.cacheHolder['resNm'] = this.resTypes.getResTypeFor(row.rowDatas).resName(row.rowDatas));\n\t}\n\n\tprotected _getIcon(row: GridDataRowJson<JNodeShortProps>): string {\n\t\tif (row instanceof GridDataRowJsonTree && row.getFolderState() === EFolderState.opened) return row.cacheHolder['iconOpen'] || (row.cacheHolder['iconOpen'] = this.resTypes.getResTypeFor(row.rowDatas).resIcon(row.rowDatas, 'opened'));\n\t\treturn row.cacheHolder['icon'] || (row.cacheHolder['icon'] = this.resTypes.getResTypeFor(row.rowDatas).resIcon(row.rowDatas));\n\t}\n\n\tredrawCell(row: GridDataRowJson<any>, root: HTMLElement): void {\n\t\t(root as JNodePropsPointer)._nodeProps = row.rowDatas;\n\t\t//if( isTooltipPointer(root)) root.popupTooltip.contentRoot\n\t\tsuper.redrawCell(row, root);\n\t}\n\n\tprotected _buildContent(row: GridDataRowJson<JNodeShortProps>, root: HTMLElement): HTMLElement {\n\t\tif (!this.noTooltip) this._addTooltip(root);\n\t\treturn super._buildContent(row, root);\n\t}\n\n\tprotected _addTooltip(root: HTMLElement & JNodePropsPointer) {\n\t\t//On remonte sur la cell pour que le positionnement du tooltip reste dans la zone du grid.\n\t\tconst cell = DOM.findParentOrSelf(root, null, (n): n is HTMLElement => n instanceof Element && n.classList.contains(\"cell\")) || root;\n\t\t// TODO tooltip\n\t\tPOPUP.promiseTooltip(cell,\n\t\t\t(owner: HTMLElement, tooltip: PopupTooltip): IView | null => {\n\t\t\t\ttooltip.addEventListener('c-show', async function (this: PopupTooltip, ev: CustomEvent) {\n\t\t\t\t\tconst reg = REG.findReg<IDepotShortResUiEnv>(this.tooltipOf);\n\t\t\t\t\tconst nodeProps = root._nodeProps;\n\t\t\t\t\tif (nodeProps) {\n\t\t\t\t\t\tconst resType = reg.env.resTypes.getResTypeFor(nodeProps);\n\t\t\t\t\t\tconst area = resType.shortResView(\"hover\");\n\t\t\t\t\t\tif (area) {\n\t\t\t\t\t\t\tconst resReg = resType.newShortResRegFromDepotReg(reg, nodeProps);\n\t\t\t\t\t\t\tconst body = await area.loadBody(resReg);\n\t\t\t\t\t\t\tthis.view.textContent = null;\n\t\t\t\t\t\t\tthis.view.appendChild(body);\n\t\t\t\t\t\t\tVIEWS.onViewShown(body);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//Pas dispo\n\t\t\t\t\tev.preventDefault();\n\t\t\t\t});\n\t\t\t\ttooltip.addEventListener('c-close', async function (this: PopupTooltip, ev: CustomEvent) {\n\t\t\t\t\tconst view = this.view?.firstElementChild as IView;\n\t\t\t\t\tif (view) {\n\t\t\t\t\t\tVIEWS.onViewHidden(view, true);\n\t\t\t\t\t\tview.textContent = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn <div style=\"min-width:min(15em, 30vw)\"/>;\n\t\t\t},\n\t\t\t{\n\t\t\t\thoverAllowed: true,\n\t\t\t\tanchor: {\n\t\t\t\t\tposFrom: root, intersectWith: cell, fromX: 'end', marginX: -3,\n\t\t\t\t\tnotAvailableSpace: {\n\t\t\t\t\t\tposFrom: root, intersectWith: cell, fromX: 'start', targetX: 'end', marginX: 3\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tgetColSortFn(): IRowSortFn | null {\n\t\t//TODO à construire à partir de UrlTreeSrv.naturalSortPathFn\n\t\treturn null;\n\t}\n}\n\nexport class CellBuilderResTile implements ICellBuilder {\n\n\tprotected reg: IReg<IDepotUiEnv>;\n\tprotected resTypes: DepotResTypeProv;\n\n\tconstructor(reg: IReg<IDepotUiEnv>) {\n\t\tthis.reg = reg;\n\t\tthis.resTypes = reg.env.resTypes;\n\t}\n\n\tredrawCell(row: GridDataRowJson<JNodeShortProps>, root: HTMLElement): void {\n\t\tif (!root.firstChild) {\n\t\t\troot.append(<div class=\"preview\"/>);\n\t\t\troot.append(<div class=\"name\"/>);\n\t\t}\n\t\tconst node = row.rowKey;\n\t\tconst resType = this.resTypes.getResTypeFor(node);\n\t\tconst previewArea = resType.shortResView(\"preview\");\n\t\tconst previewRoot = root.firstElementChild as HTMLElement;\n\t\tpreviewRoot.textContent = null;\n\t\tif (previewArea) {\n\t\t\tconst ctx = resType.newShortResRegFromDepotReg(this.reg, node);\n\t\t\tif (previewArea.needAsync(ctx)) {\n\t\t\t\tpreviewRoot.style.backgroundImage = \"\";\n\t\t\t\tpreviewArea.loadBody(ctx).then((tag) => {\n\t\t\t\t\tif (tag) previewRoot.appendChild(tag);\n\t\t\t\t\telse previewRoot.style.backgroundImage = `url(${resType.resIcon(node)})`;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst tag = previewArea.buildBody(ctx);\n\t\t\t\tif (tag) previewRoot.appendChild(tag);\n\t\t\t\telse {\n\t\t\t\t\t//previewRoot.appendChild(<img src={resType.resIcon(node)}/>);\n\t\t\t\t\tpreviewRoot.style.backgroundImage = `url(${resType.resIcon(node)})`;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t//previewRoot.appendChild(<img src={resType.resIcon(node)}/>);\n\t\t\tpreviewRoot.style.backgroundImage = `url(${resType.resIcon(node)})`;\n\t\t}\n\t\troot.title = root.lastElementChild.textContent = resType.resName(node);\n\t}\n\n\tgetColSortFn(): IRowSortFn | null {\n\t\treturn null;\n\t}\n}\n\n\nREG.reg.registerSkin('store-res-tile', 1, /* language=CSS */ `\n\t#lines {\n\t\tgap: .5em;\n\t\tpadding: .5em;\n\t}\n\n\t.inSel {\n\t\tbackground-color: transparent;\n\t\tfont-weight: bold;\n\t}\n\n\t:host(:focus) .inSel {\n\t\tbackground-color: transparent;\n\t\tfont-weight: bold;\n\t\toutline: var(--focus-outline);\n\t\toutline-offset: -2px;\n\t}\n\n\t.line {\n\t\tmin-height: 8em;\n\t\tmax-height: 0;\n\t\t/*background-color: var(--alt1-bgcolor);*/\n\t\t/*border: 1px solid var(--border-color);*/\n\t\tborder-radius: 5px;\n\t\tbox-shadow: 0 2px 5px 0 var(--border-color);\n\t\tcursor: pointer;\n\t}\n\n\t.line:hover {\n\t\tbackground-color: var(--row-inSel-unfocus-bgcolor);\n\t}\n\n\t.cell {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n  .preview {\n\t  flex: 1;\n\t  display: flex;\n\t  min-height: 0;\n\t  min-width: 0;\n\t  flex-direction: column;\n\t  align-items: center;\n\t  justify-content: center;\n\t  background-position: center;\n\t  background-repeat: no-repeat;\n\t  background-size: auto;\n\t  background-color: var(--alt1-bgcolor);\n\t  margin: .3em;\n\t  border-radius: 2px;\n  }\n\n  .name {\n\t  text-align: center;\n\t  justify-content: flex-end;\n\t  display: flex;\n\t  white-space: break-spaces;\n\t  height: 2.3em;\n\t  flex-direction: column;\n\t  overflow: hidden;\n\t  align-self: center;\n\t  padding: .1em .3em .1em .3em;\n  }\n`);\n\n\nexport interface JNodePropsPointer {\n\t_nodeProps?: JNodeShortProps\n}\n\n/**\n * function commune pour redessiner les lignes en fonction du contexte.\n */\nexport function redrawResLine(reg: IReg<IDepotUiEnv>, row: GridDataRowJson<JNodeShortProps>, line: HTMLElement, currentResPath: resPath | null): void {\n\tconst path = row.cacheHolder.livePath ?? (row.cacheHolder.livePath = reg.env.resTypes.getResTypeFor(row.rowKey).livePath(row.getData('permaPath')));\n\tconst classList = line.classList;\n\tclassList.toggle('current', path === currentResPath && currentResPath !== null);\n\tclassList.toggle('trashed', row.getData('trashed') === true);\n\tclassList.toggle('unlisted', row.getData('unlisted') === true);\n\t// if (reg.env.lifecycle !== null) {\n\t// \t//liveCycle sur les res.\n\t// \tconst lc = (row.getData<ENodeInfo>('metas') as JPersistMetas).lc;\n\t// \tDOM.setStyle(line, \"color\", lc != null ? reg.env.lifecycle.getState(lc).color || \"\" : \"\");\n\t// }\n}\n\n"]}