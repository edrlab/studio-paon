{"version":3,"sources":["/@back@/commons/widgets/blocks.tsx"],"names":["BaseElementAsync","BASIS","REG","DOM","JSX","DOMSH","BaseAreaViewAsync","VIEWS","LASTDATAS","Resizer","BlocksCollapsable","areasContext","this","_areasContext","val","refresh","areas","_areas","[object Object]","block","lastDatas","show","selectedBlocks","collapsableBlockAreas","Array","from","_blocksCtn","childNodes","filter","node","IS_CollapsableBlockArea","opened","area","options","initBlock","push","before","position","p","nextElementSibling","_newBlock","open","_params","includes","getId","openBlock","_refreshUi","silently","removeFromAreas","closeBlockView","idx","indexOf","splice","remove","code","firstElementChild","visitor","visible","r","visitViews","undefined","visitViewsAsync","init","lastDatasKey","setAttribute","sr","attachShadow","SHADOWDOM_INIT","findReg","installSkin","_initAndInstallSkin","localName","createElement","id","_mainSlot","_initShadowRoot","_initBlocks","Promise","all","map","async","t","getBlockByCode","openBlocks","super","buildInitFromAtts","extractAttr","mergeLists","split","areaCtx","getSvc","getLastDatas","getAttribute","shadowRoot","appendChild","view","assignedNodes","CollapsableBlockArea","_initBlock","HTMLElement","initialize","parentBlockCtn","c-orient","forEach","prev","previousElementSibling","next","setAttrBool","hasAttribute","Object","assign","areaContext","insertBefore","k","d","blocks","buildLastDatas","entry","customElements","define","reg","registerSkin","n","getCode","label","getLabel","description","getDescription","icon","getIcon","disabled","isEnabled","hidden","isVisible","locked","parentNode","initHeaderNode","class","ondblclick","onToggle","onclick","initContentNode","setAttr","setHidden","resolve","needAsync","canHideViewSilently","canHideView","onViewHidden","_onChangeBlockState","loadBody","buildBody","setArea","initializedAsync","onViewShown","removeAttribute","ev","me","findHost","hide"],"mappings":"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","sourcesContent":["import {BaseElementAsync, BASIS, OSkinableInit, PickInit} from \"back/commons/basis\";\nimport {REG} from 'lib/commons/registry';\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {BaseAreaView, BaseAreaViewAsync, IView, IViewContainer, IViewsContainer, OViewVisitOptions, VIEWS} from \"lib/commons/views\";\nimport {Area, IArea, IAreaPointer} from \"lib/commons/areas\";\nimport {ILastDatasBuilder, JLastDatas, LASTDATAS, OLastDatasInit} from \"lib/commons/lastDatas\";\nimport {Resizer} from \"back/commons/widgets/resizer\";\n\n\n/** Config d'un c-blocks-collapsable. */\nexport interface OBlocksCollapsableInit<C> extends OSkinableInit, OLastDatasInit, PickInit<BlocksCollapsable<C>, 'areas' | 'areasContext'> {\n\topenBlocks?: string[]\n\tlastDatas?: JLDBlocksCollapsable\n}\n\nexport interface JLDBlocksCollapsable extends JLastDatas {\n\t/** Liste des codes de block ouverts. Si présent, les blocs non cités sont clos */\n\topen?: string[]\n}\n\nexport class BlocksCollapsable<C = {}> extends BaseElementAsync implements IViewsContainer, ILastDatasBuilder {\n\tprotected _areas?: IArea<C>[];\n\tprotected _areasContext?: C;\n\tprotected _params: OBlocksCollapsableInit<C>;\n\n\tget areasContext(): C {return this._areasContext}\n\n\tset areasContext(val: C) {\n\t\tthis._areasContext = val;\n\t\tthis.refresh();\n\t}\n\n\tget areas(): IArea<C>[] {return this._areas}\n\n\tasync openBlock(block: CollapsableBlockArea<C>, lastDatas?: JLastDatas): Promise<boolean> {\n\t\tawait block.show(lastDatas);\n\t\t//this._blocksCtn.scrollToChild(block);\n\t\treturn true;\n\t}\n\n\tget selectedBlocks(): CollapsableBlockArea<C>[] {\n\t\tlet collapsableBlockAreas = Array.from(this._blocksCtn.childNodes).filter((node) => IS_CollapsableBlockArea(node) && node.opened) as CollapsableBlockArea<C>[];\n\t\treturn collapsableBlockAreas;\n\t}\n\n\tasync addArea(area: IArea<C>, options?: { open?: boolean, position?: number }, initBlock?: OCollapsableBlockInit) {\n\t\tif (this._areas) this._areas.push(area);\n\t\telse this._areas = [area];\n\t\tlet before: Element = null;\n\t\tif (options && (typeof options.position === 'number')) {\n\t\t\tlet collapsableBlockAreas = Array.from(this._blocksCtn.childNodes).filter((node) => IS_CollapsableBlockArea(node) && node.opened) as CollapsableBlockArea<C>[];\n\t\t\tbefore = collapsableBlockAreas[options.position - 1];\n\t\t\tlet p = options.position;\n\t\t\twhile (before && p-- > 0) before = before.nextElementSibling;\n\t\t}\n\t\tconst block = this._newBlock(area, before as CollapsableBlockArea<C>, initBlock);\n\t\tif ((options && options.open) || (this._params && this._params.lastDatas && this._params.lastDatas.open && this._params.lastDatas.open.includes(area.getId())))\n\t\t\tawait this.openBlock(block);\n\t\tthis._refreshUi();\n\t}\n\n\tasync closeBlock(block: CollapsableBlockArea<C>, silently?: boolean, removeFromAreas?: boolean): Promise<boolean> {\n\t\tif (!await block.closeBlockView(silently)) return false;\n\t\tif (removeFromAreas && block.area && this._areas) {\n\t\t\tconst idx = this._areas.indexOf(block.area);\n\t\t\tif (idx >= 0) this._areas.splice(idx, 1);\n\t\t}\n\t\tblock.remove();\n\t\treturn true;\n\t}\n\n\tgetBlockByCode(code: string): CollapsableBlockArea<C> {\n\t\tif (code != null) for (let block = this._blocksCtn.firstElementChild as CollapsableBlockArea<C>; block; block = block.nextElementSibling as CollapsableBlockArea<C>) if (block.code === code) return block;\n\t\treturn null;\n\t}\n\n\thasBlocks(): boolean {return this._blocksCtn.firstElementChild != null}\n\n\tvisitViews(visitor: (view: IView) => any, options?: OViewVisitOptions): any {\n\t\tif (options && options.visible) {\n\t\t\tlet selectedBlocks = this.selectedBlocks;\n\t\t\tif (selectedBlocks)\n\t\t\t\tfor (const block of selectedBlocks) {\n\t\t\t\t\tconst r = block.visitViews(visitor, options);\n\t\t\t\t\tif (r !== undefined) return r;\n\t\t\t\t}\n\t\t} else {\n\t\t\tlet collapsableBlockAreas = Array.from(this._blocksCtn.childNodes).filter((node) => IS_CollapsableBlockArea(node) && node.opened) as CollapsableBlockArea<C>[];\n\t\t\tfor (const block of collapsableBlockAreas) {\n\t\t\t\tconst r = block.visitViews(visitor, options);\n\t\t\t\tif (r !== undefined) return r;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync visitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\tif (options && options.visible) {\n\t\t\tlet selectedBlocks = this.selectedBlocks;\n\t\t\tif (selectedBlocks)\n\t\t\t\tfor (const block of selectedBlocks) {\n\t\t\t\t\tconst r = await block.visitViewsAsync(visitor, options);\n\t\t\t\t\tif (r !== undefined) return r;\n\t\t\t\t}\n\t\t} else {\n\t\t\tlet collapsableBlockAreas = Array.from(this._blocksCtn.childNodes).filter((node) => IS_CollapsableBlockArea(node) && node.opened) as CollapsableBlockArea<C>[];\n\t\t\tfor (const block of collapsableBlockAreas) {\n\t\t\t\tconst r = await block.visitViewsAsync(visitor, options);\n\t\t\t\tif (r !== undefined) return r;\n\t\t\t}\n\t\t}\n\t}\n\n\t_blocksCtn: HTMLDivElement;\n\t_mainSlot: HTMLSlotElement;\n\n\tprotected async _initialize(init: OBlocksCollapsableInit<C>): Promise<void> {\n\t\t//initConfig\n\t\tthis._params = init;\n\t\tthis._areas = init.areas;\n\t\tthis._areasContext = init.areasContext;\n\t\tif (init.lastDatasKey) this.setAttribute('last-datas', init.lastDatasKey);\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.findReg(init).installSkin('c-blocks-collapsable/base', sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tthis._blocksCtn = <div id=\"blocksCtn\"/> as HTMLDivElement;\n\t\t/*new ArrowScrollBox().initialize({\n\t\t\tcbOverflow: undefined,//TODO\n\t\t\tvertical: true,\n\t\t});\n\t\tthis._blocksCtn.addEventListener('focusout', (ev: FocusEvent) => {\n\t\t\t//sur la perte du focus on rescroll sur le block actif.\n\t\t\tif (this.selectedBlocks && ev.relatedTarget instanceof Node && !this._blocksCtn.contains(ev.relatedTarget)) {\n\t\t\t\tthis._blocksCtn.scrollToChild(this.selectedBlocks[0]);\n\t\t\t}\n\t\t});\n\t\t */\n\t\tthis._mainSlot = <slot/> as HTMLSlotElement;\n\n\t\tthis._initShadowRoot();\n\n\t\tthis._initBlocks();\n\t\tif (init.lastDatas && init.lastDatas.open !== undefined) {\n\t\t\tif (init.lastDatas.open !== null) {\n\t\t\t\tPromise.all(init.lastDatas.open.map(async (code: string) => {\n\t\t\t\t\tconst t = this.getBlockByCode(code);\n\t\t\t\t\tif (t) {\n\t\t\t\t\t\tawait this.openBlock(t, init.lastDatas); //bon tab trouvé, on transmet les lastDatas.\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t} else if (init.openBlocks != null) {\n\t\t\tPromise.all(init.openBlocks.map(async (code: string) => {\n\t\t\t\tconst t = this.getBlockByCode(code);\n\t\t\t\tif (t) {\n\t\t\t\t\tawait this.openBlock(t, init.lastDatas); //bon tab trouvé, on transmet les lastDatas.\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tthis._refreshUi();\n\t}\n\n\tbuildInitFromAtts(init?: OBlocksCollapsableInit<C>): OBlocksCollapsableInit<C> {\n\t\tinit = super.buildInitFromAtts(init);\n\t\tconst areas = BASIS.extractAttr(this, 'areas-list');\n\t\tif (areas) init.areas = this.findReg(init).mergeLists<Area<C>>(...areas.split(' '));\n\t\tconst areaCtx = BASIS.extractAttr(this, 'areas-context');\n\t\tif (areas && areaCtx == null) {\n\t\t\t//Une liste d'area est paramétrée en attribut, mais pas de contexte => contexte == le tabs.\n\t\t\tinit.areasContext = this as any as C;\n\t\t} else if (areaCtx) {\n\t\t\tinit.areasContext = this.findReg(init).getSvc<C>(areaCtx);\n\t\t}\n\t\tinit.lastDatas = LASTDATAS.getLastDatas<JLDBlocksCollapsable>(this, this.getAttribute(\"last-datas\"));\n\t\treturn init;\n\t}\n\n\t_initShadowRoot() {\n\t\tconst sr = this.shadowRoot;\n\t\tsr.appendChild(this._blocksCtn);\n\t}\n\n\t_initBlocks() {\n\t\t//Block en \"dur\"\n\t\tfor (const view of this._mainSlot.assignedNodes()) {\n\t\t\tif (view instanceof CollapsableBlockArea) {\n\t\t\t\tthis._initBlock(view);\n\t\t\t\tthis._blocksCtn.appendChild(view);\n\t\t\t} else if (view instanceof HTMLElement) {\n\t\t\t\tconst block = new CollapsableBlockArea<C>().initialize({\n\t\t\t\t\tparentBlockCtn: this,\n\t\t\t\t\tview: view\n\t\t\t\t} as OCollapsableBlockInit);\n\t\t\t\tthis._initBlock(block);\n\t\t\t\tthis.appendChild(<c-resizer c-orient=\"column\"/>);\n\t\t\t\tthis._blocksCtn.appendChild(block);\n\t\t\t}\n\t\t}\n\t\t//Onglets par Area.\n\t\tif (this._areas) this._areas.forEach((area: Area<C>) => {this._newBlock(area)});\n\t}\n\n\tprotected _refreshUi() {\n\t\t// Recalcul de l'état des resizers en fonction de l'ouverture des blocks\n\t\tthis._blocksCtn.childNodes.forEach((node) => {\n\t\t\tif (node instanceof Resizer) {\n\t\t\t\tlet prev = node.previousElementSibling;\n\t\t\t\tlet next = node.nextElementSibling;\n\t\t\t\tDOM.setAttrBool(node, \"disabled\", (prev && next && prev.hasAttribute(\"c-resizable\") && next.hasAttribute(\"c-resizable\")) ? false : true);\n\t\t\t}\n\t\t});\n\t}\n\n\t_newBlock(area: IArea<C>, before?: CollapsableBlockArea<C>, initBlock?: OCollapsableBlockInit): CollapsableBlockArea<C> {\n\t\tconst block = new CollapsableBlockArea<C>().initialize(Object.assign({\n\t\t\tparentBlockCtn: this,\n\t\t\tarea: area,\n\t\t\tareaContext: this.areasContext,\n\t\t} as OCollapsableBlockInit, initBlock));\n\t\tthis._initBlock(block);\n\t\tthis._blocksCtn.insertBefore(block, before);\n\t\tthis._blocksCtn.insertBefore(<c-resizer c-orient=\"column\"/>, block);\n\t\treturn block;\n\t}\n\n\t_initBlock(block: CollapsableBlockArea<C>) {\n\t}\n\n\t/** appelé aprés tout changement d'état ouvert/clos d'un block */\n\t_onChangeBlockState(block: CollapsableBlockArea) {\n\t\tthis._refreshUi();\n\t}\n\n\tbuildLastDatas(p: JLastDatas) {\n\t\tconst k = this.getAttribute(\"last-datas\");\n\t\tif (k) {\n\t\t\tconst d = p[k] = {} as JLDBlocksCollapsable;\n\t\t\tconst blocks = this.selectedBlocks;\n\t\t\tif (blocks) {\n\t\t\t\td.open = [];\n\t\t\t\tblocks.forEach((block) => {\n\t\t\t\t\tif (block.opened) d.open.push(block.code);\n\t\t\t\t\tLASTDATAS.buildLastDatas(d, block.view, true);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _refresh() {\n\t\tlet collapsableBlockAreas = Array.from(this._blocksCtn.childNodes).filter((node) => IS_CollapsableBlockArea(node) && node.opened) as CollapsableBlockArea<C>[];\n\t\tcollapsableBlockAreas.map((entry) => entry.refresh());\n\t}\n}\n\ncustomElements.define('c-blocks-collapsable', BlocksCollapsable);\n\n/** Stylage de base. */\nREG.reg.registerSkin('c-blocks-collapsable/base', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t  min-width: 0;\n\t  flex-direction: column;\n  }\n\n  c-arrow-scroll-box {\n\t  display: flex;\n\t  min-height: 0;\n\t  min-width: 0;\n\t  flex: 1;\n  }\n\n  #blocksCtn {\n\t  display: contents;\n  }\n\n  c-blocks-collapsable-block {\n\t  min-height: var(--blocks-collapsable-header-height, 2rem);\n  }\n\n  c-blocks-collapsable-block[aria-selected] {\n\t  min-height: calc(var(--blocks-collapsable-header-height, 2rem) + 5rem);\n\t}\n\n\tc-blocks-collapsable-block ~ c-blocks-collapsable-block {\n\t\tborder-block-start: 4px solid transparent;\n\t}\n\n`);\n\n\n/**\n * Affichage d'une area das un block titré collapsable\n */\nexport interface OCollapsableBlockInit extends OSkinableInit, PickInit<CollapsableBlockArea<any>, 'view' | 'area' | 'areaContext' | 'parentBlockCtn'> {\n\t/** si true, le bloc est ouvert de façon forcée, sans capacité de close */\n\tlocked?: boolean\n}\n\nfunction IS_CollapsableBlockArea(n: Node): n is CollapsableBlockArea {return n instanceof CollapsableBlockArea}\n\nexport class CollapsableBlockArea<C = {}> extends BaseAreaViewAsync<C> implements IViewContainer, IAreaPointer<C> {\n\n\tarea: IArea<C, any>;\n\n\tareaContext: C;\n\n\tparentBlockCtn: BlocksCollapsable<C>\n\n\tview: IView;\n\n\tget code(): string {return VIEWS.getCode(this.view || this)}\n\n\tget label(): string {return VIEWS.getLabel(this.view || this)}\n\n\tget description(): string {return VIEWS.getDescription(this.view || this)}\n\n\tget icon(): string {return VIEWS.getIcon(this.view || this)}\n\n\tget disabled(): boolean {return !VIEWS.isEnabled(this.view || this)}\n\n\tget hidden(): boolean {return !VIEWS.isVisible(this.view || this)}\n\n\tget opened(): boolean {return this.hasAttribute(\"aria-selected\")}\n\n\tget locked(): boolean {return this.hasAttribute(\"data-locked\")}\n\n\tprotected async _initialize(init: OCollapsableBlockInit) {\n\t\t//init config\n\t\tthis.view = init.view;\n\t\tthis.area = init.area;\n\t\tthis.areaContext = init.areaContext;\n\t\tthis.parentBlockCtn = init.parentBlockCtn ? init.parentBlockCtn : this.parentNode as BlocksCollapsable<C>;\n\t\tif (init.locked) DOM.setAttrBool(this, 'data-locked', true);\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tconst sr = this.shadowRoot;\n\t\tthis.initHeaderNode(sr.appendChild(<div class=\"header\" ondblclick={this.onToggle}>\n\t\t\t<button class=\"toggle\" onclick={this.onToggle}><span class=\"headTi\">{(this as any as BaseAreaView<C>).label}</span></button>\n\t\t</div>));\n\t\tthis.initContentNode(sr.appendChild(<div class=\"content\">\n\t\t\t<slot/>\n\t\t</div>));\n\n\t\tif (init.locked)\n\t\t\tawait this.show();\n\t}\n\n\tbuildInitFromAtts(init?: OCollapsableBlockInit): OCollapsableBlockInit {\n\t\tinit = super.buildInitFromAtts(init);\n\t\treturn init;\n\t}\n\n\tprotected _refreshUi() {\n\t\tif (this.description) DOM.setAttr(this, \"title\", this.description || this.label);\n\t\tDOM.setHidden(this, this.hidden);\n\t\tDOM.setAttrBool(this, \"disabled\", this.disabled);\n\t}\n\n\tvisitViews(visitor: (view: IView) => any, options?: OViewVisitOptions): any {\n\t\tif (this.view) return visitor(this.view);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\treturn this.view ? visitor(this.view) : Promise.resolve(undefined);\n\t}\n\n\tneedAsync(): boolean {return this.area ? this.area.needAsync(this.areaContext) : false}\n\n\t/** Ne doit être appelé que par Blocks. */\n\tasync closeBlockView(silently?: boolean): Promise<boolean> {\n\t\tif (this.view) {\n\t\t\t//la view a été construite.\n\t\t\tif (!await (silently ? VIEWS.canHideViewSilently(this.view, true) : VIEWS.canHideView(this.view, true, () => {this.parentBlockCtn.openBlock(this)}))) return false;\n\t\t\tVIEWS.onViewHidden(this.view, true);\n\t\t\tif (this.view) {\n\t\t\t\tthis.view.remove();\n\t\t\t\tthis.view = null;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/** Ouverture du block */\n\tasync show(lastDatas?: JLastDatas): Promise<void> {\n\t\tif (this.opened) return;\n\t\tDOM.setAttrBool(this, \"aria-selected\", true);\n\t\tDOM.setAttrBool(this, \"c-resizable\", true);\n\t\tthis.parentBlockCtn._onChangeBlockState(this);\n\t\tthis._refreshUi();\n\t\tif (!this.view) {\n\t\t\tif (this.needAsync()) {\n\t\t\t\tthis.view = await this.area.loadBody(this.areaContext, lastDatas) as IView;\n\t\t\t} else {\n\t\t\t\tthis.view = this.area.buildBody(this.areaContext, lastDatas) as IView;\n\t\t\t}\n\t\t\tif (this.view) {\n\t\t\t\tVIEWS.setArea(this.view, this);\n\t\t\t\tif (this.view instanceof BaseElementAsync) await this.view.initializedAsync;\n\t\t\t\tthis.appendChild(this.view);\n\t\t\t}\n\t\t\tthis._refreshUi();\n\t\t}\n\t\tif (this.opened)//RaceCond\n\t\t\tVIEWS.onViewShown(this.view);\n\t}\n\n\t/** Fermeture du block */\n\tasync hide(): Promise<boolean> {\n\t\tif (!this.opened) return true; //déjà masqué.\n\t\tif (!await VIEWS.canHideView(this.view)) return false;\n\t\tDOM.setAttrBool(this, \"aria-selected\", false);\n\t\tDOM.setAttrBool(this, \"c-resizable\", false);\n\t\tthis.parentBlockCtn._onChangeBlockState(this);\n\t\tthis.removeAttribute(\"style\")// raz effet resizer\n\t\tthis._refreshUi();\n\t\tVIEWS.onViewHidden(this.view);\n\t\treturn true;\n\t}\n\n\tprotected initHeaderNode(node: Element) {\n\t\treturn node;\n\t}\n\n\tprotected initContentNode(node: Element) {\n\t\treturn node;\n\t}\n\n\tprivate onToggle(this: HTMLElement, ev?: MouseEvent) {\n\t\tconst me = DOMSH.findHost<CollapsableBlockArea<any>>(this);\n\t\tif (me.locked) return;\n\t\tif (me.opened)\n\t\t\tme.hide()\n\t\telse\n\t\t\tme.show()\n\t}\n}\n\ncustomElements.define('c-blocks-collapsable-block', CollapsableBlockArea);\n\nREG.reg.registerSkin('c-blocks-collapsable-block', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t}\n\n\t:host([hidden]) {\n\t\tdisplay: none;\n\t}\n\n  :host([disabled]){\n\t\topacity: .6;\n\t  pointer-events: none;\n  }\n\n  :host([aria-selected]) {\n\t  flex: 1;\n  }\n\n  .header {\n\t  background-color: var(--tabf-bgcolor);\n\t  color: var(--tabf-color);\n\t  --pressed-bgcolor: var(--inv-pressed-bgcolor);\n\t  font-weight: bold;\n\t  line-height: var(--blocks-collapsable-header-height, 2rem);\n  }\n\n  .toggle {\n\t  background: none;\n\t  border: none;\n\t  color: var(--tabf-color);\n\t  user-select: none;\n\t  cursor: pointer;\n\t  font-size: inherit;\n\t}\n\n\t:host([data-locked]) .toggle {\n\t  pointer-events: none;\n  }\n\n  :host([data-locked]) .toggle::before {\n\t  visibility: hidden;\n  }\n\n  .toggle::before {\n\t  content: \"▼ \";\n  }\n\n  :host(:not([aria-selected])) .toggle::before {\n\t  content: \"▶ \";\n  }\n\n  .content {\n\t  flex: 1;\n\t  display: flex;\n\t  min-height: 0;\n\t  min-width: 0;\n\t  /*border-inline-start: 2px solid var(--tabf-bgcolor);*/\n  }\n\n  :host(:not([aria-selected])) .content {\n\t  display: none;\n  }\n\n`);"]}