{"version":3,"sources":["/@back@/store/plugins/embeddedDepot.tsx"],"names":["REG","BasicUniverse","isDepotUiEnv","UtBrowser","UtBrowserFetcher","AccelKeyMgr","embeddedAppFactory","config","async","initEmbeddedApp","init","depotReg","authReg","reg","setPref","lang","rootUniverseConf","authConf","depotConf","Promise","all","authConfPath","importJs","depotConfPath","createSubReg","parentReg","depotWs","depotUiReg","env","universe","newDepotUiReg","parentNode","utBrowser","initialize","autoCloseReg","fetcher","adminUrlTree","actions","mergeLists","accelKeyMgr","initFromMapActions","mergeListsAsMap","textContent","appendChild"],"mappings":"OAAcA,QAAI;OACVC,kBAAoE;OAC5CC,iBAAa;OAGNC,UAAWC,qBAAiB;OAC3DC,gBAAY;OA4Cd,SAAUC,mBAAmBC,QAClC,OAAOC,eAAeC,gBAAgBC,MACrC,IAAIC;AACJ,IAAKD,KAAKE,QAAS,CAElBZ,IAAIa,IAAIC,QAAQ,OAAQ,GAAIP,OAAOQ;AACnC,IAAId,cAAcM,OAAOS;AACzB,MAAOC,SAAUC,iBAAmBC,QAAQC,IAAI,CAC/Cb,OAAOc,aAAaC,WACpBf,OAAOgB,cAAcD;AACtB,MAAMV,QAAUZ,IAAIwB,aAA+BxB,IAAIa;AACvDI,SAASP,KAAKE,QAASA,QAAQa;AAC/Bd,SAAWX,IAAIwB,aAAwBxB,IAAIa;AAC3CK,UAAUR,KAAKC,SAAUC,QAASL,OAAOmB,UAAY,OAASd,QAAU,UAClE,CAEN,GAAIF,KAAKC,SAAU,CAElBA,SAAWD,KAAKC,aACV,CAENA,SAAWX,IAAIwB,aAAwBxB,IAAIa;AAC3C,MAAMK,gBAAkBX,OAAOgB,cAAcD;AAC7CJ,UAAUR,KAAKC,SAAUD,KAAKE,QAAS,OAGzC,IAAIe,WAAgCzB,aAAaS,SAASiB,KAAOjB,SAAWA,SAASiB,IAAIC,SAASC,cAAcpB,KAAKqB;AAGrH,MAAMC,WAAY,IAAI7B,WAAY8B,WAAW,CAC5CpB,IAAKc,WACLO,aAAcvB,WAAagB,WAC3BQ,QAAS,IAAI/B,iBAAiBO,SAASiB,IAAIC,SAASO,cACpDC,QAAS1B,SAAS2B,WAAW,kCAAmC,yBAChEC,aAAa,IAAIlC,aAA6BmC,mBAAmB7B,SAAS8B,gBAAgB,oCAAqC;AAEhI/B,KAAKqB,WAAWW,YAAc;AAC9BhC,KAAKqB,WAAWY,YAAYX","sourcesContent":["import {IReg, REG} from \"lib/commons/registry\";\nimport {BasicUniverse, ICoreUniverseEnv, IUniverseEnv, OBasicUniverseConfig} from \"lib/core/universe\";\nimport {IDepotEnv, IDepotUiEnv, isDepotUiEnv} from \"lib/store/depot\";\nimport {IEndPoint} from \"lib/commons/io/io\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {IUtBrowserCtx, OUtBrowserInit, UtBrowser, UtBrowserFetcher} from \"back/store/views/utBrowser\";\nimport {AccelKeyMgr} from \"lib/commons/actions\";\n\n/**\n * Paramètres d'initialisation de l'embedded App passé par l'appelant.\n */\nexport interface OEmbeddedDepotInit {\n\t/** Si auth mutualisée avec le contexte appelant. */\n\tauthReg?: IReg<ICoreUniverseEnv>\n\n\t/** Si le dépot est dispo dans le contexte appelant (authReg alors obligatoire). */\n\tdepotReg?: IReg<IDepotEnv>\n\n\t/** Node parent dans lequel insérer l'interface graphique. */\n\tparentNode: HTMLElement\n}\n\n/** Api du module dans el front. */\nexport type embeddedDepotModule = { initEmbeddedApp: (init: OEmbeddedDepotInit) => Promise<void> }\n\n/**\n * Paramètres de configuration de la factory de la fonction d'init de l'embedded App\n * (Paramètres passés par le module du front).\n */\nexport interface OEmbeddedDepotFactoryConfig {\n\t/** Langue utilisée. */\n\tlang: string\n\n\t/** Configuration de l'univers racine porteur de l'auth et de la connexion websocket si gestion autonome de l'auth. */\n\trootUniverseConf: OBasicUniverseConfig\n\n\t/** Path du fichier de config du linker pour la gestion autonome de l'auth. */\n\tauthConfPath: IEndPoint\n\n\t/** Path du module de configuration du dépot si le depotReg n'est pas  fourni par le contexte appelant. */\n\tdepotConfPath: IEndPoint\n\n\t/** Si le dépot et l'auth utilisent le même univers java. */\n\tdepotWs?: 'auth' | null\n}\n\n/**\n * Construit la fonction d'initialisation de l'embedded App que le module front\n * doit exporter avec la clé \"initEmbeddedApp\".\n */\nexport function embeddedAppFactory(config: OEmbeddedDepotFactoryConfig) {\n\treturn async function initEmbeddedApp(init: OEmbeddedDepotInit): Promise<void> {\n\t\tlet depotReg: IReg<IDepotEnv>;\n\t\tif (!init.authReg) {\n\t\t\t//Mode 100% autonome.\n\t\t\tREG.reg.setPref(\"lang\", 21, config.lang);\n\t\t\tnew BasicUniverse(config.rootUniverseConf);\n\t\t\tconst [authConf, depotConf] = await Promise.all([\n\t\t\t\tconfig.authConfPath.importJs() as Promise<{ init: (reg: IReg<ICoreUniverseEnv>, wsReg: IReg<IUniverseEnv>) => void }>,\n\t\t\t\tconfig.depotConfPath.importJs() as Promise<{ init: (reg: IReg<IDepotEnv>, authReg: IReg<ICoreUniverseEnv>, wsReg: IReg<IUniverseEnv>) => void }>]);\n\t\t\tconst authReg = REG.createSubReg<ICoreUniverseEnv>(REG.reg);\n\t\t\tauthConf.init(authReg, authReg.parentReg);\n\t\t\tdepotReg = REG.createSubReg<IDepotEnv>(REG.reg);\n\t\t\tdepotConf.init(depotReg, authReg, config.depotWs === \"auth\" ? authReg : null);\n\t\t} else {\n\t\t\t//auth mutualisée\n\t\t\tif (init.depotReg) {\n\t\t\t\t//depot dispo dans le contexte appelant.\n\t\t\t\tdepotReg = init.depotReg;\n\t\t\t} else {\n\t\t\t\t//Chargement autonome du dépot\n\t\t\t\tdepotReg = REG.createSubReg<IDepotEnv>(REG.reg);\n\t\t\t\tconst depotConf = await config.depotConfPath.importJs() as { init: (reg: IReg<IDepotEnv>, authReg: IReg<ICoreUniverseEnv>, wsReg: IReg<IUniverseEnv>) => void };\n\t\t\t\tdepotConf.init(depotReg, init.authReg, null);\n\t\t\t}\n\t\t}\n\t\tlet depotUiReg: IReg<IDepotUiEnv> = isDepotUiEnv(depotReg.env) ? depotReg : depotReg.env.universe.newDepotUiReg(init.parentNode);\n\t\t//depotReg dispo\n\t\t//TODO auth autonome : injecter bouton c-user-login\n\t\tconst utBrowser = new UtBrowser().initialize({\n\t\t\treg: depotUiReg,\n\t\t\tautoCloseReg: depotReg !== depotUiReg,\n\t\t\tfetcher: new UtBrowserFetcher(depotReg.env.universe.adminUrlTree), //.setFilter(\"usable\"),\n\t\t\tactions: depotReg.mergeLists(\"actions:embeddedDepot:utBrowser\", \"actions:store:resList\"),\n\t\t\taccelKeyMgr: new AccelKeyMgr<IUtBrowserCtx>().initFromMapActions(depotReg.mergeListsAsMap(\"accelkeys:embeddedDepot:utBrowser\", \"accelkeys:store:resList\")),\n\t\t} as OUtBrowserInit);\n\t\tinit.parentNode.textContent = null;\n\t\tinit.parentNode.appendChild(utBrowser);\n\t\t//init.parentNode.appendChild(<div>{JSON.stringify(depotReg.getRegDef())}</div>);\n\t}\n}"]}