{"version":3,"sources":["/@back@/wsp/dialogs/wspsMgr.tsx"],"names":["BASIS","MsgLabel","REG","DOM","JSX","DOMSH","GridSmall","GridColDef","CellBuilderDate","CellBuilderEnum","CellBuilderIconLabel","CellBuilderLabel","CellBuilderString","BarActions","AccelKeyMgr","ACTION","Action","ActionWrapper","GridDataHolderJsonTree","EWspLoadingStatus","Wsp","WSP","CreateDrfWspAction","CreateDrvWspAction","CreateWspFromWspAction","DeletePermanentlyWspsAction","DeleteWspAction","DeleteWspsAction","OpenPermsWspAction","OpenPropsWspAction","OpenPropsWspsAction","RestoreWspsAction","LANG","BaseAreaViewAsync","WSPPACK","EUserAspects","USER","Tabs","AreaAsync","CreateWspAction","ImportWspAction","OpenWsp","POPUP","AppFrameDeskFeat","WspsMgr","[object Object]","init","this","reg","_msg","createElement","addToList","setLabel","setBodyBuilder","ctx","AliveWspsMgr","Ã®","env","universe","config","backEnd","setDescription","TrashedWspsMgr","_tabs","areas-context","areas-list","tabAreasLists","_attach","tagName","close","selectedTab","view","onViewBeforeHide","onViewWaitForHide","visitor","options","visitViews","visitViewsAsync","registerSkin","customElements","define","WspsListMgr","wspsActionsContext","openWspAfterCreate","createSubReg","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","sr","shadowRoot","grid","_onWspLiveStateChange","onWspLiveStateChange","bind","place","wspServer","wspsLive","newPlace","eventsMgr","on","actionRefreshUi","accelKeyMgr","initFromMapActions","mergeListsAsMap","wspsActions","mergeLists","getListAsMap","headerElt","appendChild","id","filterInput","placeholder","type","oninput","onFilterInput","wspsToolbar","initialize","actions","injectSepByGroup","getPref","uiContext","actionContext","disableFullOverlay","dataHolder","initPacksGrid","newInit","wspsGrid","skinScroll","undefined","lineDrawer","selType","emptyBody","skinOver","autoSelOnFocus","defaultAction","SINGLETON","ctxMenuActions","addEventListener","ev","handleKeyboardEvent","wspsMgr","findHost","selectedWsps","getSelectedWsps","regs","length","forEach","wsp","push","refreshContent","uiEvents","row","executeIfAvailable","setAttribute","connectToGrid","refresh","refreshFreeze","super","_refresh","value","fetchState","_lastListWsps","listWsps","sort","w1","w2","title","wspCd","localeCompare","wspInfos","status","notLoaded","isConcernedByWsp","registerWsp","getRowDatasWsp","setDatas","selectByWsp","setSelectedRows","focus","e","rowData","line","setAttrBool","rowDatas","noWsp","level","me","text","pattern","RegExp","escape4RegexpFuzzy","fullArr","getDatas","arr","i","s","v","test","wsps","selectedRows","c","countRows","wspRow","getRow","find","code","getSelectedDatas","entry","initialized","closed","closePlace","initializedAsync","then","onViewHidden","datas","wspEntry","offset","getOffset","infoWsp","infoWspError","isDeleted","updateDatasInTree","Object","assign","invalidateRows","_initialize","ActionWrapperRefreshWspMgr","setOverridenSvc","ActionWrapperOnWspsChanges","setExecute","async","mainApp","desk","getMainApp","_c","_b","_a","equals","isIn","gotoHome","getWrapped","execute","popup","findPopupableParent","defaultWspOpenMode","columnDefs","setDefaultSort","setFlex","setMinWidth","setSortable","setCellBuilder","override","wspTitle","CellBuilderWspModel","adminUsers","hasAspect","rolable","CellBuilderWspSpecifiedRoles","Map","loading","ok","failed","setCellClass","setDescriptionFunc","key","getData","initUi","fields","withWspSrcSpecifiedRoles","srcFields","srcDt","inTrash","addClass","setGroup","setIcon","target","root","redrawCell","wspTypeWarn","removeClass","buildWspTypeTitle","ext","version","lang","desc","join","findReg","cacheHolder","cache","accounts","srcSpecifiedRoles","keys","setTextContent","toString","useUsers","userAccounts","Promise","all","map","account","getUserBatch","users","nickNames","user","getPrimaryName","a","b","toLocaleLowerCase","count","names","specifRolesPending","setAttr","result","getWsp"],"mappings":"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","sourcesContent":["import {BASIS, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridColDef, ICellBuilder, IGridLineDrawer, IRowSortFn} from \"back/commons/widgets/grid-core\";\nimport {CellBuilderDate, CellBuilderEnum, CellBuilderIconLabel, CellBuilderLabel, CellBuilderString, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {BarActions, OBarActionsInit} from \"back/commons/widgets/bars\";\nimport {AccelKeyMgr, ACTION, Action, ActionWrapper, IAction} from \"lib/commons/actions\";\nimport {GridDataHolderJsonTree, GridDataRowJsonTree} from \"back/commons/widgets/tree\";\nimport \"back/wsp/dialogs/dialogs_Perms\";\nimport {IContextMenuActionsPointer} from \"back/commons/actionables\";\nimport {IChainEnv} from \"lib/wsp/chain\";\nimport {EWspLoadingStatus, IWspEnv, IWspPointer, IWspUiEnv, JInfoWsp, JWspInfoInList, Wsp, WSP} from \"lib/wsp/wsp\";\nimport {\n\tCreateDrfWspAction,\n\tCreateDrvWspAction,\n\tCreateWspFromWspAction,\n\tDeletePermanentlyWspsAction,\n\tDeleteWspAction,\n\tDeleteWspsAction,\n\tICreateWspCtx,\n\tIWspActionCtx,\n\tIWspsActionCtx,\n\tOpenPermsWspAction,\n\tOpenPropsWspAction,\n\tOpenPropsWspsAction,\n\tRestoreWspsAction\n} from \"back/wsp/actions/wspActions\";\nimport {LANG} from \"lib/commons/lang\";\nimport {BaseAreaViewAsync, IView, IViewsContainer, OViewVisitOptions} from \"lib/commons/views\";\nimport {IWspsLivePlacePointer} from \"lib/wsp/wspsLive\";\nimport {WSPPACK} from \"lib/wsp/pack\";\nimport {EUserAspects, JUser, USER} from \"lib/core/user\";\nimport {Tabs} from \"back/commons/widgets/tabs\";\nimport {AreaAsync} from \"lib/commons/areas\";\nimport {CreateWspAction, ImportWspAction} from \"back/wsp/actions/chainActions\";\nimport {OpenWsp} from \"back/wsp/views/wspList\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {AppFrameDeskFeat, IApp} from \"back/core/appFrame\";\nimport Reg = REG.Reg;\n\n\nexport interface OWspsMgrInit extends OSkinableInit {\n\treg: IReg<IChainEnv>;\n\ttabAreasLists?: string\n}\n\nexport class WspsMgr<E extends IRegPointer<IChainEnv>> extends BaseAreaViewAsync<E> implements IViewsContainer {\n\treg: IReg<IChainEnv>;\n\t_tabs: Tabs;\n\t_msg: MsgLabel;\n\n\tprotected async _initialize(init: OWspsMgrInit) {\n\t\tthis.reg = init.reg;\n\t\tthis._msg = <MsgLabel/> as MsgLabel;\n\t\tthis.reg.addToList(\"wsps-mgr-tab\", \"alive\", 1, new AreaAsync<OWspsListMgrInit, WspsListMgr<E>>()\n\t\t\t.setLabel(\"Ateliers\")\n\t\t\t.setBodyBuilder((ctx) => {\n\t\t\t\treturn <AliveWspsMgr Ã®={{reg: this.reg} as OWspsListMgrInit}/> as AliveWspsMgr<E>;\n\t\t\t}), 1);\n\t\tif (this.reg.env.universe.config.backEnd === \"odb\") {\n\t\t\tthis.reg.addToList(\"wsps-mgr-tab\", \"trashed\", 1, new AreaAsync<OWspsListMgrInit, WspsListMgr<E>>()\n\t\t\t\t.setLabel(\"Corbeille\")\n\t\t\t\t.setDescription(\"Ateliers supprimÃ©s placÃ©s en corbeille\")\n\t\t\t\t.setBodyBuilder((ctx) => {\n\t\t\t\t\treturn <TrashedWspsMgr Ã®={{reg: this.reg} as OWspsListMgrInit}/> as TrashedWspsMgr<E>;\n\t\t\t\t}), 1);\n\t\t}\n\n\t\tthis._tabs = <Tabs areas-context=\"wsps-mgr-tab-ctxt\" areas-list={init.tabAreasLists || \"wsps-mgr-tab\"}/> as Tabs;\n\n\t\tthis._attach(this.tagName, init, this._tabs);\n\t}\n\n\tonViewBeforeHide(close?: boolean): boolean {\n\t\treturn this._tabs.selectedTab.view.onViewBeforeHide(close);\n\t}\n\n\tasync onViewWaitForHide(close?: boolean): Promise<boolean> {\n\t\treturn this._tabs.selectedTab.view.onViewWaitForHide(close);\n\t}\n\n\tvisitViews(visitor: (view: IView) => any, options?: OViewVisitOptions): any {\n\t\tif (this._tabs) this._tabs.visitViews(visitor, options);\n\t}\n\n\tvisitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\tif (this._tabs)\n\t\t\treturn this._tabs.visitViewsAsync(visitor, options);\n\t}\n\n}\n\nREG.reg.registerSkin('wsps-wspsmgr', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t}\n\n\tc-tabs {\n\t\tflex: 1;\n\t}\n`);\n\ncustomElements.define(\"wsps-wspsmgr\", WspsMgr);\n\n\nexport interface OWspsListGridInit extends OGridSmallInit {\n\t/** Actions associÃ©es aux items sÃ©lectionnÃ©s (menu contextuel et IFocusActionables). */\n\tactions?: IAction<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>[]\n\n\t/** Racourcis claviers Ã  capter sur la sel courante. */\n\taccelKeyMgr?: AccelKeyMgr<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>\n\n\t/** Supprime le lineDrawer par dÃ©faut (avec null) ou customise le lineDrawer. */\n\tlineDrawer?: null | IGridLineDrawer\n\n}\n\nexport interface OWspsListMgrInit extends OSkinableInit {\n\treg: IReg<IChainEnv>\n\t/** Init de la liste des ateliers. */\n\twspsGrid?: OWspsListGridInit\n}\n\nabstract class WspsListMgr<E extends IRegPointer<IChainEnv>> extends BaseAreaViewAsync<E> implements IGridLineDrawer {\n\n\treg: IReg<IChainEnv>;\n\n\tprotected wspsToolbar: BarActions<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>;\n\n\tprotected wspsActions: IAction<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>[];\n\n\tprotected wspsActionsContext: (IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>) & ICreateWspCtx = {\n\t\topenWspAfterCreate: false,\n\t};\n\n\tprotected filterInput: HTMLInputElement;\n\n\tprotected grid: GridSmall & IContextMenuActionsPointer<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>;\n\n\tprotected _lastListWsps: (JWspInfoInList & IWspPointer)[];\n\n\tprotected dataHolder: GridDataHolderJsonTree<JWspInfoInList & IWspPointer>;\n\n\tprotected fetchState: 'pending' | 'done' | 'failed';\n\n\tprotected async _initialize(init: OWspsListMgrInit): Promise<void> {\n\t\tthis.reg = REG.createSubReg(init.reg);\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(\"wsps-list-wspsmgr\", init);\n\t}\n\n\tprotected async initUi(init: OWspsListMgrInit): Promise<void> {\n\t\tconst sr = this.shadowRoot;\n\n\t\tthis.grid = new GridSmall();\n\n\t\tthis._onWspLiveStateChange = this.onWspLiveStateChange.bind(this);\n\t\t// Pour suivi des ateliers **chargÃ©s** uniquement\n\t\t(this.reg.env as IWspsLivePlacePointer).place = this.reg.env.universe.wspServer.wspsLive.newPlace();\n\t\t(this.reg.env as IWspsLivePlacePointer).place.eventsMgr.on(\"wspLiveStateChange\", this._onWspLiveStateChange);\n\n\t\t/** Init les listes du registre **/\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr:toolbar\", \"actionRefreshUi\", 1, actionRefreshUi);\n\n\t\t/** Accelkey **/\n\t\tlet accelKeyMgr = new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:wsps:wspsmgr\"));\n\n\t\t/** Toolbar **/\n\t\tthis.wspsActions = this.reg.mergeLists(\"actions:wsps:wspsmgr:toolbar\", \"actions:wsps:wspsmgr\");\n\t\taccelKeyMgr.initFromMapActions(this.reg.getListAsMap(\"accelkeys:wspApp:global\"));\n\n\t\tlet headerElt = sr.appendChild(<div id=\"header\"/>);\n\t\tthis.filterInput = headerElt.appendChild(<div id=\"search\"/>).appendChild(<input placeholder=\"Filtrer...\" type=\"search\" oninput={this.onFilterInput}/>) as HTMLInputElement;\n\t\tthis.wspsToolbar = headerElt.appendChild(new BarActions<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>().initialize({\n\t\t\treg: this.reg,\n\t\t\tactions: ACTION.injectSepByGroup(this.wspsActions, this.reg.getPref(\"actions.wsps.wspsmgr.groupOrder\", \"wsps * refresh\"), this.wspsActionsContext),\n\t\t\tuiContext: \"bar\",\n\t\t\tactionContext: this.wspsActionsContext,\n\t\t\tdisableFullOverlay: true,\n\t\t} as OBarActionsInit<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>));\n\n\t\t/** Grid **/\n\t\tthis.dataHolder = new GridDataHolderJsonTree<JWspInfoInList>('wsps');\n\n\t\tconst initPacksGrid: OWspsListGridInit = BASIS.newInit(init.wspsGrid, this.reg);\n\t\tif (initPacksGrid.skinScroll === undefined) initPacksGrid.skinScroll = 'scroll/small';\n\t\tif (initPacksGrid.lineDrawer === undefined) initPacksGrid.lineDrawer = this;\n\t\tif (initPacksGrid.accelKeyMgr === undefined) initPacksGrid.accelKeyMgr = accelKeyMgr;\n\t\tinitPacksGrid.dataHolder = this.dataHolder;\n\t\tinitPacksGrid.selType = \"multi\";\n\t\tinitPacksGrid.emptyBody = this.emptyBody.bind(this);\n\t\tinitPacksGrid.skinOver = \"wspsmgr-list-grid\";\n\t\tinitPacksGrid.autoSelOnFocus = 'first';\n\t\tinitPacksGrid.defaultAction = OpenPropsWspAction.SINGLETON;\n\n\t\tthis.grid.initialize(initPacksGrid);\n\n\t\tthis.grid.ctxMenuActions = {\n\t\t\tactions: ACTION.injectSepByGroup(this.reg.mergeLists(\"actions:wsps:wspsmgr:ctxtmenu\", \"actions:wsps:wspsmgr\") as IAction<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>[], this.reg.getPref(\"actions.wsps.wspsmgr.groupOrder\", \"wsps wps * refresh\"), this) as IAction<IWspsActionCtx | IWspActionCtx | IRegPointer<IChainEnv>>[],\n\t\t\tactionContext: this.wspsActionsContext,\n\t\t};\n\n\t\tthis.grid.addEventListener('keydown', (ev: KeyboardEvent) => {\n\t\t\taccelKeyMgr.handleKeyboardEvent(ev, this);\n\t\t});\n\n\t\tthis.grid.addEventListener('grid-select', function (this: GridSmall, ev: Event) {\n\t\t\tconst wspsMgr = DOMSH.findHost<WspsListMgr<any>>(this);\n\t\t\t// Refresh de l'actionContext des actions\n\t\t\tlet selectedWsps = wspsMgr.getSelectedWsps();\n\t\t\t(wspsMgr.wspsActionsContext as IWspActionCtx).reg = (wspsMgr.wspsActionsContext as IWspsActionCtx).regs = undefined;\n\t\t\tif (!selectedWsps || selectedWsps.length == 0) {\n\t\t\t\t(wspsMgr.wspsActionsContext as IWspActionCtx).reg = wspsMgr.reg;\n\t\t\t} else if (selectedWsps.length == 1) {\n\t\t\t\t(wspsMgr.wspsActionsContext as IWspActionCtx).reg = selectedWsps[0].reg;\n\t\t\t} else {\n\t\t\t\t(wspsMgr.wspsActionsContext as IWspActionCtx).reg = wspsMgr.reg;\n\t\t\t\t(wspsMgr.wspsActionsContext as IWspsActionCtx).regs = [];\n\t\t\t\tselectedWsps.forEach((wsp) => {\n\t\t\t\t\t(wspsMgr.wspsActionsContext as IWspsActionCtx).regs.push(wsp.reg);\n\t\t\t\t});\n\t\t\t}\n\t\t\twspsMgr.wspsToolbar.refreshContent();\n\t\t});\n\n\t\tthis.grid.uiEvents.on('rowDblclick', (row: GridDataRowJson<JWspInfoInList> | null, ev: MouseEvent) => {\n\t\t\tOpenPropsWspAction.SINGLETON.executeIfAvailable((this.wspsActionsContext as IWspActionCtx), ev);\n\t\t});\n\n\t\tthis.grid.setAttribute(\"c-resizable\", \"\");\n\t\tsr.appendChild(this.grid);\n\n\t\tthis.dataHolder.connectToGrid(this.grid);\n\n\t\treturn this.refresh();\n\t}\n\n\t/**\n\t * Refresh UI\n\t * Gestion de la rÃ©entrance\n\t */\n\tasync _refresh() {\n\t\tthis.refreshFreeze(1);\n\t\ttry {\n\t\t\tsuper._refresh();\n\t\t\tconst selectedWsps = this.getSelectedWsps();\n\t\t\tthis.filterInput.value = \"\";\n\t\t\tthis.fetchState = \"pending\";\n\t\t\tthis._lastListWsps = await this.listWsps();\n\t\t\tthis._lastListWsps.sort((w1, w2) => (w1.title || w1.wspCd).localeCompare(w2.title || w2.wspCd));\n\t\t\tthis.fetchState = \"done\";\n\t\t\t// On ne suit QUE les ateliers loadÃ©s (besoin : maj des colonnes qui affichent le statut)\n\t\t\tthis._lastListWsps.forEach((wspInfos) => {\n\t\t\t\tif (wspInfos.status !== EWspLoadingStatus.notLoaded && !(this.reg.env as IWspsLivePlacePointer).place.isConcernedByWsp(wspInfos.wspCd))\n\t\t\t\t\t(this.reg.env as IWspsLivePlacePointer).place.registerWsp(this.getRowDatasWsp(wspInfos));\n\t\t\t});\n\n\t\t\tthis.dataHolder.setDatas(this._lastListWsps);\n\t\t\tif (selectedWsps)\n\t\t\t\tthis.selectByWsp(selectedWsps);\n\t\t\telse\n\t\t\t\tthis.grid.setSelectedRows(0);\n\t\t\tthis.grid.focus();\n\t\t} catch (e) {\n\t\t\tthis.fetchState = \"failed\";\n\t\t\tthis._lastListWsps = [];\n\t\t\tthis.dataHolder.setDatas([]);\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tthis.refreshFreeze(-1);\n\t\t}\n\t}\n\n\t/** Retourne l'objet WSP associÃ© Ã  une row */\n\tprotected getRowDatasWsp(rowData: JWspInfoInList & IWspPointer) {\n\t\tif (!rowData.wsp)\n\t\t\trowData.wsp = new Wsp(this.reg.env.universe.wspServer, rowData.wspCd, rowData as JInfoWsp);\n\t\treturn rowData.wsp;\n\t}\n\n\t/** Retourne la liste des ateliers Ã  afficher */\n\tabstract listWsps(): Promise<(JWspInfoInList & IWspPointer)[]>\n\n\t/**\n\t * Tree : affichage explicite des lignes en erreur\n\t * @param row\n\t * @param line\n\t */\n\tredrawLine(row: GridDataRowJson<JWspInfoInList & IWspPointer>, line: HTMLElement): void {\n\t\tDOM.setAttrBool(line, \"data-removed\", row.rowDatas.status==EWspLoadingStatus.noWsp);\n\t}\n\n\t/**\n\t * Tree : fonction retournant le texte Ã  afficher en cas de tree vide\n\t */\n\tprotected emptyBody() {\n\t\tswitch (this.fetchState) {\n\t\tcase \"done\":\n\t\t\treturn <c-msg>Aucun atelier</c-msg>;\n\t\tcase \"failed\":\n\t\t\treturn <c-msg level=\"error\">Ãchec au chargement</c-msg>;\n\t\tdefault:\n\t\t\treturn <c-msg>Chargement en cours...</c-msg>;\n\t\t}\n\t}\n\n\t/**\n\t * Filter\n\t * @param ev\n\t */\n\tprotected onFilterInput(this: HTMLInputElement, ev: Event) {\n\t\tconst me = DOMSH.findHost<WspsListMgr<any>>(this);\n\t\tconst selectedWsps = me.getSelectedWsps();\n\t\tconst text = this.value;\n\t\tif (text) {\n\t\t\tconst pattern = new RegExp(LANG.escape4RegexpFuzzy(text), 'i');\n\t\t\tconst fullArr = me.dataHolder.getDatas();\n\t\t\tconst arr = [] as JWspInfoInList[];\n\t\t\tfor (let i = 0, s = fullArr.length; i < s; i++) {\n\t\t\t\tconst v = fullArr[i];\n\t\t\t\tif (pattern.test(v.title)) arr.push(v);\n\t\t\t}\n\t\t\tme.dataHolder.setDatas(arr);\n\t\t} else {\n\t\t\tme.dataHolder.setDatas(me._lastListWsps);\n\t\t}\n\t\tif (selectedWsps)\n\t\t\tme.selectByWsp(selectedWsps);\n\t}\n\n\t/**\n\t * SÃ©lection des entrÃ©es de l'arbre via une liste de JWspInfoInList sur un tree **chargÃ©**\n\t * Si un itemType demandÃ© n'est pas prÃ©sent dans le tree, aucune erreur n'est remontÃ©e\n\t * @param JWspInfoInList[]\n\t */\n\tselectByWsp(wsps: Wsp[]): void {\n\t\tif (wsps != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst wspRow = this.dataHolder.getRow(i).rowDatas as JWspInfoInList;\n\t\t\t\tif (wspRow && wsps.find(wsp => {\n\t\t\t\t\tif (wsp && wsp.code == wspRow.wspCd)\n\t\t\t\t\t\treturn true;\n\t\t\t\t})) {\n\t\t\t\t\tselectedRows.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.grid.setSelectedRows(selectedRows);\n\t\t}\n\t}\n\n\tgetSelectedWsps(): Wsp[] {\n\t\tconst wsps: Wsp[] = [];\n\t\tif (this.dataHolder) {\n\t\t\tthis.dataHolder.getSelectedDatas().forEach((entry) => {\n\t\t\t\twsps.push(this.getRowDatasWsp(entry));\n\t\t\t});\n\t\t}\n\t\treturn wsps;\n\t}\n\n\tonViewShown() {\n\t\tif (this.initialized) this.refresh();\n\t}\n\n\tonViewBeforeHide(close?: boolean): boolean {\n\t\treturn true;\n\t}\n\n\tonViewHidden(closed?: boolean): void {\n\t\tif (this.initialized) {\n\t\t\tif (closed)\n\t\t\t\t(this.reg.env as IWspsLivePlacePointer).place.closePlace();\n\t\t} else {\n\t\t\tthis.initializedAsync.then(() => this.onViewHidden());\n\t\t}\n\t}\n\n\tprotected _onWspLiveStateChange: () => void;\n\n\tasync onWspLiveStateChange(wsp: Wsp) {\n\t\tlet datas = this.dataHolder.getDatas();\n\t\tlet wspEntry = datas.find((entry) => entry.wspCd === wsp.code);\n\t\tif (wspEntry) {\n\t\t\tconst offset = this.dataHolder.getOffset(wspEntry);\n\t\t\tlet infoWsp = wsp.infoWsp || wsp.infoWspError;\n\t\t\tif (wsp.isDeleted) {\n\t\t\t\tthis.dataHolder.updateDatasInTree(null, offset, 1);\n\t\t\t} else if (infoWsp) {\n\t\t\t\tObject.assign(wspEntry, infoWsp);\n\t\t\t\tthis.grid.invalidateRows(offset, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n}\n\nREG.reg.registerSkin('wsps-list-wspsmgr', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\t#header {\n\t\tdisplay: flex;\n\t\t/*flex-direction: column;*/\n\t}\n\n\tc-bar-shared {\n\t\tflex: unset;\n\t\tmin-height: min-content;\n\t\tmin-width: min-content;\n\t}\n\n\tinput {\n\t\tflex: 1;\n\t  padding: 2px;\n\t  background: none;\n\t  color: var(--form-color);\n\t  border: none;\n\t  font-size: inherit;\n  }\n\n  #search {\n\t  display: flex;\n\t  flex: 1;\n\t  min-height: min-content;\n\t  min-width: min-content;\n\t  background: .1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg) var(--form-search-bgcolor);\n\t  padding-inline-start: 1.2em;\n\t  border-inline-end: 1px solid var(--border-color);\n  }\n\n  input:focus {\n\t  outline: none;\n  }\n\n  input::placeholder {\n\t  color: var(--fade-color);\n\t  letter-spacing: 2px;\n\t  font-size: .8em;\n\t  font-style: italic;\n  }\n\n  input:focus::placeholder {\n\t  color: transparent;\n  }\n`);\n\nREG.reg.registerSkin('wspsmgr-list-grid', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t}\n\n\t.warning {\n\t\tfont-style: italic;\n\t\tcolor: var(--warning-color);\n  }\n\n  .error {\n\t  color: var(--error-color);\n  }\n\n  .trashed {\n\t  text-decoration-line: line-through;\n\t  font-style: italic;\n  }\n\t.line[data-removed]{\n\t  text-decoration:line-through;\n\t}\n\n`);\n\n\n/** Grid des ateliers lives */\nexport class AliveWspsMgr<E extends IRegPointer<IChainEnv>> extends WspsListMgr<E> {\n\tprotected async _initialize(init: OWspsListMgrInit): Promise<void> {\n\t\tawait super._initialize(init);\n\t\tthis._initAndInstallSkin(\"wsps-alive-wspsmgr\", init);\n\n\t\t/** Init les listes du registre **/\n\t\t/** Actions : contexte menu ET toolbar **/\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionCreateWsp\", 1, new ActionWrapperRefreshWspMgr(this).setOverridenSvc(CreateWspAction.SINGLETON), 1);\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionCreateWspFromWsp\", 1, new ActionWrapperRefreshWspMgr(this).setOverridenSvc(CreateWspFromWspAction.SINGLETON), 1);\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionDeleteWsp\", 1, new ActionWrapperOnWspsChanges(this).setOverridenSvc(new ActionWrapper()\n\t\t\t.setExecute(async function (this: ActionWrapper<any>, ctx: IWspActionCtx, ev?) {\n\t\t\t\t// Fermeture de l'atelier Ã©ventuellement ouvert dans le desk\n\t\t\t\tconst mainApp = (desk as AppFrameDeskFeat).getMainApp();\n\t\t\t\tif ((mainApp as IApp<IWspEnv>)?.reg?.env.wsp?.equals(ctx.reg.env.wsp))\n\t\t\t\t\tif (AppFrameDeskFeat.isIn(desk)) await desk.gotoHome();\n\t\t\t\treturn this.getWrapped(ctx).execute(ctx, ev);\n\t\t\t})\n\t\t\t.setOverridenSvc(DeleteWspAction.SINGLETON)\n\t\t));\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionDeleteWsps\", 1, new ActionWrapperOnWspsChanges(this).setOverridenSvc(new ActionWrapper()\n\t\t\t.setExecute(async function (this: ActionWrapper<any>, ctx: IWspsActionCtx, ev?) {\n\t\t\t\t// Fermeture de l'atelier Ã©ventuellement ouvert dans le desk\n\t\t\t\tconst mainApp = (desk as AppFrameDeskFeat).getMainApp();\n\t\t\t\tif (mainApp && ctx.regs?.length) {\n\t\t\t\t\tfor (const reg of ctx.regs) {\n\t\t\t\t\t\tif ((mainApp as IApp<IWspEnv>)?.reg?.env.wsp.equals(reg.env.wsp)) {\n\t\t\t\t\t\t\tif (AppFrameDeskFeat.isIn(desk)) await desk.gotoHome();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.getWrapped(ctx).execute(ctx, ev);\n\t\t\t})\n\t\t\t.setOverridenSvc(DeleteWspsAction.SINGLETON)\n\t\t));\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionOpenPropsWsp\", 1, new ActionWrapperOnWspsChanges(this).setOverridenSvc(OpenPropsWspAction.SINGLETON));\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionOpenPermsWsp\", 1, new ActionWrapperOnWspsChanges(this).setOverridenSvc(OpenPermsWspAction.SINGLETON));\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionPropsWspsModel\", 1, new ActionWrapperOnWspsChanges(this).setOverridenSvc(OpenPropsWspsAction.SINGLETON));\n\n\t\t/** Actions : toolbar\n\t\t * \t\tliste actions:wsps:wspsmgr:toolbar uniquement\n\t\t */\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr:toolbar\", \"actionRefreshUi\", 1, actionRefreshUi);\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr:toolbar\", \"actionImportWsp\", 1, new ActionWrapperRefreshWspMgr(this).setOverridenSvc(ImportWspAction.SINGLETON), 2);\n\n\t\t/** Actions : ctxtmenu\n\t\t * \t\tliste actions:wsps:wspsmgr:ctxtmenu uniquement\n\t\t */\n\t\tconst wspsMgr = this;\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr:ctxtmenu\", \"actionCreateDrfWsp\", 1, new ActionWrapperRefreshWspMgr(this).setOverridenSvc(CreateDrfWspAction.SINGLETON));\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr:ctxtmenu\", \"actionCreateDrvWsp\", 1, new ActionWrapperRefreshWspMgr(this).setOverridenSvc(CreateDrvWspAction.SINGLETON));\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr:ctxtmenu\", \"actionOpenWsp\", 1, new ActionWrapper()\n\t\t\t.setExecute(function (this: ActionWrapper<any>, ctx: IWspActionCtx, ev?) {\n\t\t\t\tconst popup = POPUP.findPopupableParent(wspsMgr);\n\t\t\t\tif (popup) popup.close();\n\t\t\t\treturn this.getWrapped(ctx).execute(ctx, ev);\n\t\t\t})\n\t\t\t.setOverridenSvc(new OpenWsp(WSP.defaultWspOpenMode(this.reg)).setLabel(\"Ouvrir l'atelier...\"))\n\t\t);\n\n\t\tlet columnDefs = [];\n\t\tcolumnDefs.push(\n\t\t\tnew GridColDef('title').setLabel(\"Titre\")\n\t\t\t\t.setDefaultSort(1, 'ascendant')\n\t\t\t\t.setFlex('25em', 1, 1).setMinWidth('8em').setSortable(true)\n\t\t\t\t.setCellBuilder(new CellBuilderString(\"title\").override(\"_getValue\", (row: GridDataRowJson<JWspInfoInList>): any => {\n\t\t\t\t\tif (row.rowDatas.title) return row.rowDatas.title;\n\t\t\t\t\tlet wsp = this.getRowDatasWsp(row.rowDatas);\n\t\t\t\t\treturn wsp.wspTitle || \"[Non titrÃ©]\";\n\t\t\t\t})),\n\t\t\tnew GridColDef('wspCd').setLabel(\"ModÃ¨le\")\n\t\t\t\t.setFlex('15em', 1, 1).setMinWidth('6em').setSortable(true)\n\t\t\t\t.setCellBuilder(new CellBuilderWspModel(\"wspType\"))\n\t\t);\n\t\tif (this.reg.env.universe.adminUsers?.hasAspect(EUserAspects.rolable)) {\n\t\t\tcolumnDefs.push(new GridColDef('wspSetPerms').setLabel(\"Permissions affectÃ©es\").setDescription(\"Permissions affectÃ©es sur l'atelier\")\n\t\t\t\t.setFlex('10em', 1, 1).setMinWidth('6em').setSortable(true)\n\t\t\t\t.setCellBuilder(new CellBuilderWspSpecifiedRoles()));\n\t\t}\n\t\tcolumnDefs.push(new GridColDef('status').setLabel(\"Statut\")\n\t\t\t.setFlex('5em', 1, 1).setMinWidth('4em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderEnum('status', new Map([[EWspLoadingStatus.notLoaded, \"\"], [EWspLoadingStatus.loading, \"Chargement en cours...\"], [EWspLoadingStatus.noWsp, \"SupprimÃ©\"], [EWspLoadingStatus.ok, \"OpÃ©rationnel\"], [EWspLoadingStatus.failed, \"Non accessible\"]]))\n\t\t\t\t.setCellClass(\"center\")\n\t\t\t\t.setDescriptionFunc((row: GridDataRowJson<JWspInfoInList>) => {\n\t\t\t\t\tconst key = row.getData(\"status\") || \"\";\n\t\t\t\t\treturn key === EWspLoadingStatus.notLoaded ? \"Information non disponible\" : \"\";\n\t\t\t\t})));\n\n\t\tif (!init.wspsGrid) init.wspsGrid = [] as OWspsListGridInit;\n\t\tif (init.wspsGrid.columnDefs === undefined) init.wspsGrid.columnDefs = columnDefs;\n\n\t\treturn this.initUi(init);\n\t}\n\n\tasync listWsps(): Promise<JWspInfoInList[]> {\n\t\treturn (await WSP.listWsps(this.reg.env.universe.wspServer, {fields: [\"srcRoles\", \"srcRi\"], withWspSrcSpecifiedRoles: true})).wsps;\n\t}\n\n}\n\ncustomElements.define(\"wsps-alive-wspsmgr\", AliveWspsMgr);\nREG.reg.registerSkin('wsps-alive-wspsmgr', 1, /* language=CSS */ `\n\n`);\n\n/** Grid des ateliers en corbeille */\nexport class TrashedWspsMgr<E extends IRegPointer<IChainEnv>> extends WspsListMgr<E> {\n\tprotected async _initialize(init: OWspsListMgrInit): Promise<void> {\n\t\tawait super._initialize(init);\n\t\tthis._initAndInstallSkin(\"wsps-trashed-wspsmgr\", init);\n\n\t\t/** Init les listes du registre **/\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionDeletePermanentlyWsps\", 1, new ActionWrapperRefreshWspMgr(this).setOverridenSvc(DeletePermanentlyWspsAction.SINGLETON));\n\t\tthis.reg.addToList(\"actions:wsps:wspsmgr\", \"actionRestoreWsps\", 1, new ActionWrapperRefreshWspMgr(this).setOverridenSvc(RestoreWspsAction.SINGLETON));\n\n\t\tlet columnDefs = [];\n\t\tcolumnDefs.push(\n\t\t\tnew GridColDef('title').setLabel(\"Titre\")\n\t\t\t\t.setDefaultSort(1, 'ascendant')\n\t\t\t\t.setFlex('25em', 1, 1).setMinWidth('8em').setSortable(true)\n\t\t\t\t.setCellBuilder(new CellBuilderIconLabel(\"title\").override(\"_getValue\", (row: GridDataRowJson<JWspInfoInList>): any => {\n\t\t\t\t\tif (row.rowDatas.title) return row.rowDatas.title;\n\t\t\t\t\tlet wsp = this.getRowDatasWsp(row.rowDatas);\n\t\t\t\t\treturn wsp.wspTitle || \"[Non titrÃ©]\";\n\t\t\t\t}).override(\"_getIcon\", (row: GridDataRowJsonTree<JUser>) => {\n\t\t\t\t\treturn \"/@skin@/wsp/objects/wsp/wspTrashed.svg\";\n\t\t\t\t})),\n\t\t\tnew GridColDef('dt')\n\t\t\t\t.setLabel(\"Date de suppression\").setSortable(true)\n\t\t\t\t.setFlex('6em', 1, 1).setMinWidth('2em').setSortable(true)\n\t\t\t\t.setCellBuilder(new CellBuilderDate('srcDt').setCellClass(\"center\").override(\"_getValue\", (row: GridDataRowJson<JWspInfoInList>): any => (row.rowDatas.srcFields as any).srcDt))\n\t\t)\n\n\t\tif (!init.wspsGrid) init.wspsGrid = [] as OWspsListGridInit;\n\t\tif (init.wspsGrid.columnDefs === undefined) init.wspsGrid.columnDefs = columnDefs;\n\n\t\treturn this.initUi(init);\n\t}\n\n\tasync listWsps(): Promise<JWspInfoInList[]> {\n\t\treturn (await WSP.listWsps(this.reg.env.universe.wspServer, {inTrash: true, fields: [\"srcDt\", \"srcRoles\", \"srcRi\"]})).wsps;\n\t}\n\n\tredrawLine(row: GridDataRowJson<JWspInfoInList>, line: HTMLElement): void {\n\t\tDOM.addClass(line, \"trashed\");\n\t}\n\n\tprotected emptyBody() {\n\t\tswitch (this.fetchState) {\n\t\tcase \"done\":\n\t\t\treturn <c-msg>Aucun atelier en corbeille</c-msg>;\n\t\tdefault:\n\t\t\treturn super.emptyBody();\n\t\t}\n\t}\n}\n\ncustomElements.define(\"wsps-trashed-wspsmgr\", TrashedWspsMgr);\nREG.reg.registerSkin('wsps-trashed-wspsmgr', 1, /* language=CSS */ `\n\n`);\n\n/** Actions **/\n\n/**\n * Refresh UI\n */\nconst actionRefreshUi = new Action<any>(\"refreshUi\")\n\t.setLabel(\"Rafraichir\")\n\t.setGroup(\"refresh\")\n\t.setIcon(\"/@skin@/commons/icons/refresh.svg\")\n\t.setExecute(async function (this: Action<any>, ctx: any, ev: Event) {\n\t\t\tconst me = DOMSH.findHost<WspsListMgr<any>>(ev.target as Node);\n\t\t\tawait me.refresh();\n\t\t}\n\t);\n\n\n/** CellBuilder **/\n\n/**  Colonne de titre du wsp pack */\nclass CellBuilderWspModel extends CellBuilderLabel {\n\n\tredrawCell(row: GridDataRowJson<JWspInfoInList>, root: HTMLElement): void {\n\t\tsuper.redrawCell(row, root);\n\t\tif (row.rowDatas.wspTypeWarn) {\n\t\t\tDOM.addClass(root, \"warning\");\n\t\t} else\n\t\t\tDOM.removeClass(root, \"warning\");\n\t}\n\n\tprotected _getValue(row: GridDataRowJson<JWspInfoInList>): any {\n\t\treturn WSPPACK.buildWspTypeTitle(row.rowDatas, {ext: null, version: true, lang: true}) || (row.rowDatas.wspTypeWarn === 'unknown' ? \"Inconnu\" : \"\");\n\t}\n\n\tprotected _getDescription(row: GridDataRowJson<JWspInfoInList>): any {\n\t\tlet desc = [];\n\t\tif (row.rowDatas.wspTypeWarn === 'unknown') desc.push(\"ModÃ¨le documentaire inconnu\");\n\t\tdesc.push(WSPPACK.buildWspTypeTitle(row.rowDatas, {ext: true, version: true, lang: true}));\n\t\treturn desc.join(\"\\n\");\n\t}\n}\n\n/**  Colonne des permissions locales */\nclass CellBuilderWspSpecifiedRoles implements ICellBuilder {\n\n\tredrawCell(row: GridDataRowJson<JWspInfoInList>, root: HTMLElement) {\n\t\tconst reg: Reg<IWspUiEnv> = REG.findReg(root) as Reg<IWspUiEnv>;\n\t\tDOM.addClass(root, \"center\");\n\t\t// FIXME : contournement du fait que la row peut Ã©voluer.\n\t\tconst cacheHolder = row.cacheHolder;\n\t\tlet cache: string | Promise<void> = cacheHolder[\"specifRolesBody\"];\n\t\tif (cache == null) {\n\t\t\t//1Ã¨r redraw pour cette row.\n\t\t\tlet accounts: string[];\n\t\t\tif (row.rowDatas.srcSpecifiedRoles && (accounts = Object.keys(row.rowDatas.srcSpecifiedRoles)).length > 0) {\n\t\t\t\t// Affichage des users en async\n\t\t\t\tDOM.setTextContent(root, accounts.length.toString());\n\t\t\t\tconst useUsers = reg.env.universe.useUsers;\n\t\t\t\tconst userAccounts = Object.keys(row.rowDatas.srcSpecifiedRoles);\n\t\t\t\tcacheHolder[\"specifRolesBody\"] = cache = Promise.all(userAccounts.map((account) => useUsers.getUserBatch(account))).then((users: JUser[]) => {\n\t\t\t\t\tif (cacheHolder[\"specifRolesBody\"] !== cache) return; //raceCond : les donnÃ©es de cette row ont Ã©voluÃ©es.\n\t\t\t\t\tconst nickNames: string[] = [];\n\t\t\t\t\tfor (let i = 0; i < userAccounts.length; i++) {\n\t\t\t\t\t\tconst user = users[i];\n\t\t\t\t\t\tnickNames.push(user ? USER.getPrimaryName(user) : userAccounts[i]);\n\t\t\t\t\t}\n\t\t\t\t\tnickNames.sort((a, b) => a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase()));\n\t\t\t\t\tcacheHolder[\"specifRolesTitle\"] = nickNames.join(\"\\n\");\n\t\t\t\t\tconst count = nickNames.length;\n\t\t\t\t\tif (count > 5) {\n\t\t\t\t\t\tcacheHolder[\"specifRolesBody\"] = count.toString();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst names = nickNames.join(\", \");\n\t\t\t\t\t\tcacheHolder[\"specifRolesBody\"] = `${count} (${names})`;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//Pas de SpecifiedRoles\n\t\t\t\tcache = cacheHolder[\"specifRolesBody\"] = \"-\";\n\t\t\t}\n\t\t}\n\t\tif (cache instanceof Promise) {\n\t\t\t//cache non resetÃ© mais calcul en cours, on attend, on rÃ©affiche le nombre en attendant.\n\t\t\tDOM.setTextContent(root, Object.keys(row.rowDatas.srcSpecifiedRoles).length.toString());\n\t\t\t(root as any).specifRolesPending = cache; //raceCond pour refresh async de la line HTML.\n\t\t\tcache.then(() => {\n\t\t\t\tif ((root as any).specifRolesPending !== cache) return; //raceCond : cette line HTML a Ã©tÃ© redessinÃ©e\n\t\t\t\t(root as any).specifRolesPending = null; //cleanup\n\t\t\t\tDOM.setTextContent(root, cacheHolder[\"specifRolesBody\"]);\n\t\t\t\tDOM.setAttr(root, \"title\", cacheHolder[\"specifRolesTitle\"]);\n\t\t\t});\n\t\t} else {\n\t\t\t(root as any).specifRolesPending = null; //raceCond pour refresh async de la line HTML.\n\t\t\tDOM.setTextContent(root, cache);\n\t\t\tDOM.setAttr(root, \"title\", cache === \"-\" ? null : cacheHolder[\"specifRolesTitle\"]);\n\t\t}\n\t}\n\n\tprotected _getValue(row: GridDataRowJson<JWspInfoInList>): any {\n\t\treturn WSPPACK.buildWspTypeTitle(row.rowDatas, {ext: null, version: true, lang: true}) || (row.rowDatas.wspTypeWarn === 'unknown' ? \"Inconnu\" : \"\");\n\t}\n\n\tgetColSortFn(): IRowSortFn | null {\n\t\treturn undefined;\n\t}\n\n}\n\n/**\n * Wrapper d'une action qui dÃ©clenche un refresh du tree\n */\nclass ActionWrapperRefreshWspMgr<C> extends ActionWrapper<C> {\n\tconstructor(public wspsMgr: WspsListMgr<any>) {\n\t\tsuper();\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<any> {\n\t\tlet result = await super.execute(ctx, ev);\n\t\tawait this.wspsMgr._refresh();\n\t\tif (typeof result === \"object\") {\n\t\t\tlet wsp = result as Wsp;\n\t\t\tthis.wspsMgr.selectByWsp([wsp]);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n\n/**\n * Wrapper d'une action qui dÃ©clenche le suivi des modifs de ce(s) ateliers, et refresh UI de ces ateliers\n */\nclass ActionWrapperOnWspsChanges<C extends IWspActionCtx & IWspsActionCtx> extends ActionWrapper<C> {\n\tconstructor(public wspsMgr: WspsListMgr<any>) {\n\t\tsuper();\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<any> {\n\t\tif (ctx.regs) {\n\t\t\tctx.regs.forEach((entry) => {\n\t\t\t\tif (entry.env.wsp && !(this.wspsMgr.reg.env as IWspsLivePlacePointer).place.getWsp(entry.env.wsp.code)) (this.wspsMgr.reg.env as IWspsLivePlacePointer).place.registerWsp(entry.env.wsp);\n\t\t\t});\n\t\t} else if (ctx.reg?.env.wsp && !(this.wspsMgr.reg.env as IWspsLivePlacePointer).place.getWsp(ctx.reg.env.wsp.code))\n\t\t\t(this.wspsMgr.reg.env as IWspsLivePlacePointer).place.registerWsp(ctx.reg.env.wsp);\n\n\t\tawait super.execute(ctx, ev);\n\t\t/*if(ctx.regs){\n\t\t\tctx.regs.forEach((entry)=>{\n\t\t\t\tif(entry.env.wsp)\n\t\t\t\t\tentry.env.wsp.forceReload().then((wsp)=>{\n\t\t\t\t\t\tthis.wspsMgr.onWspLiveStateChange(wsp);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}else if(ctx.reg && ctx.reg.env.wsp)\n\t\t\tctx.reg.env.wsp.forceReload().then((wsp)=>{\n\t\t\t\tthis.wspsMgr.onWspLiveStateChange(wsp);\n\t\t\t});\n\t\t*/\n\n\n\t}\n}"]}