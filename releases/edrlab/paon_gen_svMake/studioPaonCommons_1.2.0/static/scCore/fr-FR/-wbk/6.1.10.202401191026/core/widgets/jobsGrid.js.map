{"version":3,"sources":["/@back@/core/widgets/jobsGrid.tsx"],"names":["BASIS","CellBuilderString","GridDataHolderJsonArray","Grid","GridArrayToTree","GridDataHolderJsonTree","REG","ACTION","ActionBtn","GridColDef","JobsGrid","categorizer","this","_treeView","[object Object]","target","setProvider","jobsGridDatas","setCategorizer","dataHolder","init","config","reg","findReg","JobGridDatas","selType","columnDefs","getDefaultColumnDefs","defaultActionCtx","lineDrawer","super","_initialize","localName","installSkin","shadowRoot","addEventListener","ev","jobs","getSelectedDatas","matches","dispatchEvent","CustomEvent","detail","bubbles","composed","selectAction","executeIfAvailable","actions","injectSepByGroup","getPref","accelKeyMgr","handleKeyboardEvent","setDefaultSort","setFlex","setMinWidth","setSortable","setCellBuilder","buildInitFromAtts","hasAttribute","mergeLists","extractAttr","split","id","_selectRowKey","findRowKeyByJobId","rowKey","getId","getTargetEntryById","offset","getOffset","setSelectedRows","ensureRowVisible","row","line","getRow","getSelectedRow","rowDatas","countRows","selectedRows","i","c","jobRow","find","job","push","length","clearSel","focusActionables","_focusActionables","buildButtons","ctxMenuActions","actionContext","rect","getSelRect","me","registerSkin","customElements","define","d","_datas","jobIndex","findIndex","updateDatas","newFields","onWillUpdate","idx","Object","assign","create","k","undefined","grid","invalidateRows"],"mappings":"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","sourcesContent":["import {BASIS} from \"back/commons/basis\";\nimport {CellBuilderString, GridDataHolderBase, GridDataHolderJsonArray} from \"back/commons/widgets/grid-libs\";\nimport {Grid, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridArrayToTree, GridDataHolderJsonTree, IGridCategorizer} from \"back/commons/widgets/tree\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {AccelKeyMgr, ACTION, IAction} from \"lib/commons/actions\";\nimport {IActionable, IContextMenuActionsPointer, IFocusActionables} from \"back/commons/actionables\";\nimport {ActionBtn} from \"back/commons/widgets/buttons\";\nimport {IExecutorInUniversePointer, IJobsCtx, JJobBase} from \"lib/core/executor\";\nimport {GridColDef, IGridDataRow, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\n\n/**\n * Widget d'affichage d'une liste de jobs\n */\nexport interface JobsGrid extends Grid {\n\tinitialize(init?: OJobsGridInit<IJobGridCtx>): this\n}\n\nexport interface OJobsGridInit<E extends IJobGridCtx> extends OGridSmallInit {\n\treg?: IReg<IExecutorInUniversePointer>\n\n\t/** Actions associées aux items sélectionnés (menu contextuel et IFocusActionables). */\n\tactions?: IAction<IJobGridCtx>[]\n\n\t/** Action exécutée au double-click ou sur les frappes entrée ou espace. */\n\tdefaultAction?: IAction<IJobGridCtx>\n\n\tselectAction?: IAction<IJobGridCtx>\n\n\t/** Racourcis claviers à capter sur la sel courante. */\n\taccelKeyMgr?: AccelKeyMgr<IJobGridCtx>\n\n\tdataHolder?: IJobGridDatas\n}\n\n\n/**\n *\n */\n\nexport class JobsGrid extends Grid implements IJobGridCtx, IFocusActionables<IJobGridCtx>, IContextMenuActionsPointer<IJobGridCtx>, IGridLineDrawer {\n\n\treg: IReg<IExecutorInUniversePointer>;\n\n\tconfig: OJobsGridInit<IJobGridCtx>;\n\n\taccelKeyMgr: AccelKeyMgr<IJobGridCtx>;\n\n\t/** Mémoire des actions pour le menuContextuel. */\n\tactions?: IAction<IJobGridCtx>[];\n\n\t/** Fournisseur des données courantes (srcGridDatas ou celui issu du categorizer). */\n\t\t// @ts-ignore\n\tdataHolder: GridDataHolderBase<JJobBase>;\n\n\t/**\n\t * Datas à plat, provider pour un Categorizer ou dataHolder direct pour ce grid.\n\t * A utiliser pour les mises à jour des donnnées (et pas dataHolder).\n\t */\n\tjobsGridDatas: IJobGridDatas;\n\n\t/** API IJobGridCtx */\n\tjobs: JJobBase[];\n\n\tprotected _treeView: GridArrayToTree<unknown, JJobBase>;\n\n\t/** Categorizer */\n\tget categorizer(): IGridCategorizer<JJobBase, JJobBase> {\n\t\treturn this._treeView ? this._treeView.categorizer : null;\n\t}\n\n\tsetCategorizer(categorizer: IGridCategorizer<JJobBase, JJobBase>, target?: GridDataHolderJsonTree<JJobBase>) {\n\t\tif (categorizer) {\n\t\t\tif (!this._treeView) this._treeView = new GridArrayToTree(target).setProvider(this.jobsGridDatas);\n\t\t\tthis._treeView.setCategorizer(categorizer);\n\t\t\tthis.dataHolder = this._treeView.target;\n\t\t} else if (this._treeView) {\n\t\t\t//On supprime le categorizer\n\t\t\tthis._treeView.setProvider(null);\n\t\t\tthis._treeView = null;\n\t\t\tthis.dataHolder = this.jobsGridDatas;\n\t\t}\n\t}\n\n\tprotected async _initialize(init: OJobsGridInit<IJobGridCtx>): Promise<void> {\n\t\tthis.config = init || {};\n\t\tthis.reg = this.findReg(init);\n\n\t\t// Valeur par défaut des params\n\t\tif (!init.dataHolder) init.dataHolder = new JobGridDatas();\n\n\t\tthis.dataHolder = new GridDataHolderJsonTree<JJobBase>('children');\n\t\tif (!init.selType) init.selType = 'multi';\n\t\tif (!init.columnDefs) init.columnDefs = this.getDefaultColumnDefs();\n\t\tinit.defaultActionCtx = this;\n\t\tif (!('lineDrawer' in init)) init.lineDrawer = this;\n\t\tthis.jobsGridDatas = init.dataHolder;\n\n\t\tsuper._initialize(init);\n\n\t\tif (this.localName !== 'server-jobs-grid') this.findReg(init).installSkin('server-jobs-grid', this.shadowRoot);\n\n\t\tthis.addEventListener('grid-select', function (this: JobsGrid, ev: Event) {\n\t\t\tthis.jobs = this.dataHolder.getSelectedDatas();\n\t\t\t//console.log(\"jobs::::\", this.jobs);\n\t\t\tif (this.matches(':focus')) this.dispatchEvent(new CustomEvent<IFocusActionables<IJobGridCtx>>('c-focus-actions', {detail: this, bubbles: true, composed: true}));\n\t\t\tif (init.selectAction) init.selectAction.executeIfAvailable(this);\n\t\t});\n\n\t\tif (init.actions) this.actions = ACTION.injectSepByGroup(init.actions, this.reg.getPref(\"groupOrder.jobs\", \"\"), this);\n\t\tif (init.accelKeyMgr) {\n\t\t\tthis.accelKeyMgr = init.accelKeyMgr;\n\t\t\tthis.addEventListener('keydown', (ev: KeyboardEvent) => {\n\t\t\t\tthis.accelKeyMgr.handleKeyboardEvent(ev, this);\n\t\t\t});\n\t\t}\n\n\t}\n\n\tgetDefaultColumnDefs() {\n\t\treturn [new GridColDef('id')\n\t\t\t.setDefaultSort(1, 'ascendant')\n\t\t\t.setFlex('1rem', 1, 1).setMinWidth('8em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderString(\"id\"))\n\t\t];\n\t}\n\n\tbuildInitFromAtts(init?: any): any {\n\t\tinit = super.buildInitFromAtts(init);\n\t\tif (this.hasAttribute(\"actions\")) init.actions = this.reg.mergeLists(...BASIS.extractAttr(this, 'actions').split(' '));\n\t\treturn init;\n\t}\n\n\tselectJobId(id: string): boolean {\n\t\treturn this._selectRowKey(this.jobsGridDatas.findRowKeyByJobId(id));\n\t}\n\n\tprivate _selectRowKey(rowKey: JJobBase): boolean {\n\t\tif (!rowKey) return false;\n\t\tif (this._treeView && this._treeView.categorizer) {\n\t\t\tconst id = this._treeView.categorizer.getId(rowKey);\n\t\t\trowKey = this._treeView.getTargetEntryById(id);\n\t\t}\n\t\tconst offset = this.dataHolder.getOffset(rowKey);\n\t\tif (offset < 0) return false;\n\t\tthis.setSelectedRows(offset);\n\t\treturn true;\n\t}\n\n\tensureRowVisibleByJobId(id: string): boolean {\n\t\tconst rowKey = this.jobsGridDatas.findRowKeyByJobId(id);\n\t\tif (rowKey) this.ensureRowVisible(this.dataHolder.getOffset(rowKey));\n\t\treturn rowKey != null;\n\t}\n\n\n\tredrawLine(row: IGridDataRow, line: HTMLElement): void {\n\t}\n\n\tgetSelectedJob(): JJobBase | null {\n\t\tif (this.dataHolder) {\n\t\t\tconst row = this.dataHolder.getRow(this.getSelectedRow());\n\t\t\tif (!row) return null;\n\t\t\treturn row.rowDatas;\n\t\t}\n\t}\n\n\tgetSelectedJobs(): JJobBase[] {\n\t\treturn (this.dataHolder && this.dataHolder.countRows() > 0) ? this.dataHolder.getSelectedDatas() as JJobBase[] : [];\n\t}\n\n\t/**\n\t * Sélection des entrées de l'arbre via une liste de JJobBase sur un tree **chargé**\n\t * Si une netrée demandée n'est pas présent dans le tree, aucune erreur n'est remontée\n\t * @param JJobBase[]\n\t */\n\tselectByJob(jobs: JJobBase[]): void {\n\t\tif (jobs != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst jobRow = this.dataHolder.getRow(i).rowDatas as JJobBase;\n\t\t\t\tif (jobRow && jobs.find(job => {\n\t\t\t\t\tif (job && job.id == jobRow.id)\n\t\t\t\t\t\treturn true;\n\t\t\t\t})) {\n\t\t\t\t\tselectedRows.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedRows.length > 0)\n\t\t\t\tthis.setSelectedRows(selectedRows);\n\t\t\telse\n\t\t\t\tthis.clearSel();\n\t\t}\n\t}\n\n\t/** boutons à afficher dans la focusToolbar. */\n\tprotected _focusActionables: IActionable<IJobGridCtx>[];\n\tget focusActionables(): IActionable<IJobGridCtx>[] {\n\t\tif (!this._focusActionables && this.actions) this._focusActionables = ActionBtn.buildButtons<IJobGridCtx>(this.actions, this, 'bar');\n\t\treturn this._focusActionables;\n\t};\n\n\tget ctxMenuActions() {return {actions: this.actions, actionContext: this, rect: this.getSelRect()}}\n\n\t//*** API IJobsGridCtx / IShortDescCtx ***\n\n\tget me() {return this} // Astuce pour retrouver le SpaceTree quand l'actionContext a été surchargé.\n\n\n}\n\nREG.reg.registerSkin('server-jobs-grid', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t  min-height: 0;\n\t  min-width: 0;\n\t  flex-direction: column;\n  }\n\n  :focus-visible {\n\t  outline: var(--focus-outline);\n  }\n\n  #head {\n\t  border-bottom: 1px solid var(--border-color);\n  }\n\n  #filter {\n\t  background: .1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg);\n\t  padding-block: 2px;\n\t  padding-inline: 1.2em 2px;\n\t  display: flex;\n\t  min-width: 0;\n\t  min-height: 0;\n\t  align-items: center;\n\t  overflow: hidden;\n\t  flex-wrap: wrap;\n  }\n\n  #filter > * {\n\t  margin-block: 0;\n\t  margin-inline: .3rem 0;\n  }\n\n  #filter > select {\n\t  border: none;\n  }\n\n  #filter > input {\n\t  min-width: 10em;\n\t  flex: 1;\n\t  background-color: var(--form-search-bgcolor);\n\t  color: var(--form-color);\n\t  border: 1px solid var(--border-color);\n\t  font-size: inherit;\n  }\n\n  #filterType {\n\t  background-image: url(\"/@skin@/core/objects/userGroup.svg\");\n\t  background-color: var(--form-bgcolor);\n\t  background-repeat: no-repeat;\n\t  background-size: auto 13px;\n\t  background-position-y: center;\n\t  background-position-x: 3px;\n\t  min-width: 37px;\n\t  max-width: 37px;\n\t  padding-inline-start: 37px;\n  }\n\n  #filterType[data-value=group] {\n\t  background-image: url(\"/@skin@/core/objects/group.svg\");\n  }\n\n  #filterType[data-value=user] {\n\t  background-image: url(\"/@skin@/core/objects/user.svg\");\n  }\n\n  #filterGroup {\n\t  min-width: 0;\n  }\n\n  c-input-users-panel {\n\t  min-width: 12rem;\n  }\n\n  #msg {\n\t  font-size: .8rem;\n\t  color: var(--info-color);\n\t  text-align: end;\n\t  margin-inline-end: .5rem;\n\t  font-style: italic;\n  }\n\n  c-grid {\n\t  flex: 1;\n\t  border: none;\n\t  background-color: var(--row-bgcolor);\n  }\n`);\n\ncustomElements.define(\"server-jobs-grid\", JobsGrid);\n\n\n/**\n * Contexte pour les actions du JobsGrid.\n * Abstraction de JobsGrid pour être utilisé en contexte d'actions wrappées/surchagées.\n */\nexport interface IJobGridCtx extends IJobsCtx {\n\tme: JobsGrid,\n}\n\n/** Api de la source de données poyr un JobGrid. */\ninterface IJobGridDatas extends GridDataHolderJsonArray<JJobBase> {\n\tfindRowKeyByJobId(id: string): JJobBase;\n\n\tremoveByJobId(id: string): void;\n\n\trefreshFields(rowKey: JJobBase, newFields: JJobBase): void;\n}\n\nexport class JobGridDatas extends GridDataHolderJsonArray<JJobBase> implements IJobGridDatas {\n\n\tuseLiveSrcUri: boolean;\n\n\tconstructor(/*reg: IReg<IWspUiEnv>, srcFilter?: (data: JJobBase) => boolean*/) {\n\t\tsuper();\n\t}\n\n\tfindRowKeyByJobId(id: string): JJobBase {\n\t\tfor (const d of this._datas) if (d.id === id) return d;\n\t\treturn null;\n\t}\n\n\tremoveByJobId(id: string) {\n\t\tlet jobIndex = this._datas.findIndex((job) => job.id === id);\n\t\tthis.updateDatas(jobIndex, 1);\n\t}\n\n\trefreshFields(rowKey: JJobBase, newFields: JJobBase) {\n\t\tif (this.onWillUpdate) {\n\t\t\t//listeners déclarés, on passe par l'api pour le dispatch et un remplacement strict de l'objet pour éviter tout effet de bord.\n\t\t\tconst idx = this.getOffset(rowKey);\n\t\t\tif (idx >= 0) this.updateDatas(idx, 1, Object.assign(Object.create(null), newFields));\n\t\t} else {\n\t\t\t//version optimisée XXX A mesurer...\n\t\t\tfor (const k in rowKey) (rowKey as Dict<any>)[k] = undefined;\n\t\t\tObject.assign(rowKey, newFields);\n\t\t\tconst grid = this.grid;\n\t\t\tif (grid) grid.invalidateRows();\n\t\t}\n\t}\n\n\n}"]}