{"version":3,"sources":["/@back@/core/dialogs/notifUsers.tsx"],"names":["REG","BaseElement","MsgLabel","Button","JSX","ShadowJsx","POPUP","DOMSH","IO","CDM","ERROR","openNotifUsers","regs","showDialog","NotifUsers","initialize","document","body","titleBar","barLabel","label","resizer","msgInput","this","shadowRoot","getElementById","timeInput","sendBtn","infoArea","[object Object]","init","reg","_attach","localName","createElement","î","uiContext","onclick","onShowUsers","class","for","id","type","value","onMsgType","send","hidden","style","icon","title","onMtncState","map","r","env","universe","config","name","setMaintenanceOn","setMaintenanceOff","installSkin","refreshMtncState","me","findHost","lists","Promise","all","liaiseUrl","fetchJson","qs","users","Set","forEach","entry","u","add","account","count","size","Array","from","join","async","resp","maintenanceUrl","fetchText","msg","textContent","JSON","parse","className","getAttribute","previousType","undefined","tm","valueAsNumber","time","dt","Date","setHours","setTime","getTime","Intl","DateTimeFormat","timeStyle","format","setCustomMsg","disabled","setTimeout","until","now","m","svc","opType","fetchVoid","stringify","method","e","console","log","popup","skin","input","showNotifError","setMaintenance","close","report","txt","registerSkin","customElements","define"],"mappings":"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","sourcesContent":["import {IReg, REG} from \"lib/commons/registry\";\nimport {IUniverseEnv} from \"lib/core/universe\";\nimport {BaseElement, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {Button, OButtonInit} from \"back/commons/widgets/buttons\";\nimport {JSX, ShadowJsx} from \"lib/commons/xml/dom\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IO} from \"lib/commons/io/io\";\nimport {CDM} from \"lib/commons/utils/cdm\";\nimport {JMaintenanceMsg} from \"back/core/appFrame\";\nimport {ERROR} from \"lib/core/errorReport\";\n\nexport function openNotifUsers(regs: IReg<IUniverseEnv>[]) {\n\tPOPUP.showDialog(new NotifUsers().initialize({regs: regs}), document.body, {titleBar: {barLabel: {label: \"Notification aux utilisateurs connectés\"}}, resizer: {}});\n}\n\n\n/**\n * Écran de modifification du profile d'un utilisateur\n */\nexport interface NotifUsers extends BaseElement {\n\tinitialize(init: ONotifUsersInit): this\n}\n\n\nexport interface ONotifUsersInit extends OSkinableInit {\n\tregs: IReg<IUniverseEnv>[]\n}\n\n\nexport class NotifUsers extends BaseElement {\n\n\tregs: IReg<IUniverseEnv>[];\n\n\tget msgInput() {return this.shadowRoot.getElementById(\"msg\") as HTMLInputElement}\n\n\tget timeInput() {return this.shadowRoot.getElementById(\"time\") as HTMLInputElement}\n\n\tget sendBtn() {return this.shadowRoot.getElementById(\"send\") as Button}\n\n\tget infoArea() {return this.shadowRoot.getElementById(\"info\") as MsgLabel}\n\n\tprotected async _initialize(init: ONotifUsersInit) {\n\t\tthis.regs = init.regs;\n\t\tconst reg = this.regs[0];\n\t\tif (!init.reg) init.reg = reg;\n\t\tthis._attach(this.localName, init,\n\t\t\t<Button î={{reg, label: \"Voir les utilisateurs connectés...\", uiContext: \"dialog\"}} onclick={this.onShowUsers}/>,\n\t\t\t<div class=\"tiArea\">Envoyer un message à tous les utilisateurs connectés :</div>,\n\t\t\t<div class=\"area\">\n\t\t\t\t<div><label class=\"label\" for=\"time\">Heure prévue</label><input id=\"time\" type=\"time\"/></div>\n\t\t\t\t<div id=\"msgTypes\">\n\t\t\t\t\t<label class=\"label\">Message type</label>\n\t\t\t\t\t<Button î={{reg, label: \"Mise à jour\", uiContext: \"dialog\"}} value=\"update\" onclick={this.onMsgType}/>\n\t\t\t\t\t<Button î={{reg, label: \"Redémarrage\", uiContext: \"dialog\"}} value=\"restart\" onclick={this.onMsgType}/>\n\t\t\t\t\t<Button î={{reg, label: \"Arrêt\", uiContext: \"dialog\"}} value=\"shutdown\" onclick={this.onMsgType}/>\n\t\t\t\t</div>\n\t\t\t\t<label for=\"msg\">Message à envoyer</label>\n\t\t\t\t<input id=\"msg\"/>\n\t\t\t\t<div class=\"footer\">\n\t\t\t\t\t<Button id=\"send\" î={{reg, label: \"Envoyer\", uiContext: \"dialog\"} as OButtonInit} onclick={this.send}/>\n\t\t\t\t\t<MsgLabel id=\"info\" hidden=\"\"/>\n\t\t\t\t</div>\n\t\t\t</div>,\n\t\t\t<div class=\"tiArea\">Mode maintenance :</div>,\n\t\t\t<div class=\"area\">\n\t\t\t\t<div style=\"display:flex\">État(s) du mode maintenance<Button î={{reg, icon: \"/@skin@/commons/icons/refresh.svg\", title: \"Rafraîchir l'état du mode maintenance\"} as OButtonInit} onclick={this.onMtncState}/></div>\n\t\t\t\t<ul id=\"mtncStates\">\n\t\t\t\t\t{this.regs.map((r: IReg<IUniverseEnv>) => <li><span>{r.env.universe.config.name}</span> : <span id={`mtncSt_${r.env.universe.config.id}`}></span></li>)}\n\t\t\t\t</ul>\n\t\t\t\t<div class=\"footer\">\n\t\t\t\t\t<Button id=\"send\" î={{reg, label: \"Activer la maintenance...\", uiContext: \"dialog\"} as OButtonInit} onclick={this.setMaintenanceOn}/>\n\t\t\t\t\t<Button id=\"send\" î={{reg, label: \"Désactiver la maintenance\", uiContext: \"dialog\"} as OButtonInit} onclick={this.setMaintenanceOff}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t\treg.installSkin(\"webzone:panel\", this.shadowRoot);\n\t\treg.installSkin(\"form-control-areas\", this.shadowRoot);\n\t\tthis.refreshMtncState();\n\t}\n\n\tasync onShowUsers(this: HTMLSelectElement) {\n\t\tconst me = DOMSH.findHost<NotifUsers>(this);\n\t\tconst lists = await Promise.all(me.regs.map((reg) => reg.env.universe.config.liaiseUrl.fetchJson<{ account: string, clId: string }[]>(IO.qs(\"cdaction\", \"ListClients\", \"datas\", \"(community'all')\"))));\n\t\tconst users = new Set<string>();\n\t\tlists.forEach((entry: { account: string, clId: string }[]) => {\n\t\t\tentry.forEach((u: { account: string, clId: string }) => {\n\t\t\t\tusers.add(u.account);\n\t\t\t})\n\t\t});\n\t\tconst count = users.size;\n\n\t\tPOPUP.showDialog(<p style=\"margin: .5em\">{Array.from(users).join(\"\\n\")}</p>, this, {titleBar: {barLabel: {label: `${count} utilisateur(s) connecté(s)`}}});\n\t\t//console.log(\"lists:::::::\",lists, users);\n\t}\n\n\tonMtncState() {\n\t\tDOMSH.findHost<NotifUsers>(this).refreshMtncState();\n\t}\n\n\trefreshMtncState() {\n\t\tthis.regs.forEach(async (reg: IReg<IUniverseEnv>) => {\n\t\t\tconst resp = await reg.env.universe.config.maintenanceUrl.fetchText();\n\t\t\tconst msg = this.shadowRoot.getElementById(`mtncSt_${reg.env.universe.config.id}`);\n\t\t\tif (resp) {\n\t\t\t\tmsg.textContent = \"Maintenance en cours\";\n\t\t\t\tmsg.title = (JSON.parse(resp) as JMaintenanceResp).msg[0].label;\n\t\t\t\tmsg.className = \"mtncOn\";\n\t\t\t} else {\n\t\t\t\tmsg.textContent = \"-\";\n\t\t\t\tmsg.title = \"Pas de maintenance en cours\";\n\t\t\t\tmsg.className = \"mtncOff\";\n\t\t\t}\n\t\t});\n\t}\n\n\tpreviousType?: \"update\" | \"shutdown\" | \"restart\" //Compat old Client Xul\n\n\tonMsgType(this: Button) {\n\t\tconst me = DOMSH.findHost<NotifUsers>(this);\n\t\tconst type = this.getAttribute(\"value\");\n\t\tme.previousType = type as any || undefined;\n\t\tif (!type) return;\n\t\tconst tm = me.timeInput.valueAsNumber;\n\t\tlet time: string;\n\t\tif (tm >= 0) {\n\t\t\tconst dt = new Date();\n\t\t\tdt.setHours(0, 0, 0, 0);\n\t\t\tdt.setTime(dt.getTime() + tm);\n\t\t\ttime = new Intl.DateTimeFormat(\"fr\", {timeStyle: \"short\"} as any/*TS3.7 timeStyle indéfini*/).format(dt);\n\t\t}\n\t\tswitch (type) {\n\t\tcase \"update\":\n\t\t\tme.msgInput.value = time ? `Attention, une mise à jour du serveur est prévue vers ${time}` : \"Attention, une mise à jour du serveur est imminente\";\n\t\t\tbreak;\n\t\tcase \"shutdown\":\n\t\t\tme.msgInput.value = time ? `Attention, un arrêt du serveur est prévu vers ${time}` : \"Attention, l'arrêt du serveur est imminent\";\n\t\t\tbreak;\n\t\tcase \"restart\":\n\t\t\tme.msgInput.value = time ? `Attention, un redémarrage du serveur est prévu vers ${time}` : \"Attention, le redémarrage du serveur est imminent\";\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tsend(this: Button) {\n\t\tconst me = DOMSH.findHost<NotifUsers>(this);\n\t\tconst msg = me.msgInput.value;\n\t\tif (!msg) {\n\t\t\tme.infoArea.setCustomMsg(\"Saisissez un message\", \"error\");\n\t\t\treturn;\n\t\t}\n\t\tme.sendBtn.disabled = true;\n\t\tsetTimeout(() => {\n\t\t\tme.sendBtn.disabled = false;\n\t\t\tme.infoArea.setCustomMsg(null);\n\t\t}, 5000);\n\t\tconst tm = me.timeInput.valueAsNumber;\n\t\tlet until: number;\n\t\tif (tm >= 0) {\n\t\t\tconst now = Date.now();\n\t\t\tconst dt = new Date(now);\n\t\t\tdt.setHours(0, 0, 0, 0);\n\t\t\tdt.setTime(dt.getTime() + tm);\n\t\t\tuntil = now > dt.getTime() ? dt.getTime() + 86400000 : dt.getTime();\n\t\t}\n\t\ttry {\n\t\t\tfor (let reg of me.regs) {\n\t\t\t\tconst m: JMaintenanceMsg = {\n\t\t\t\t\tsvc: \"liaise\",\n\t\t\t\t\ttype: \"maintenance\",\n\t\t\t\t\topType: me.previousType, //compat ancien client Xul\n\t\t\t\t\tmsg,\n\t\t\t\t\tuntil: until\n\t\t\t\t};\n\t\t\t\treg.env.universe.config.liaiseUrl.fetchVoid(IO.qs(\"cdaction\", \"DispatchMsg\", \"datas\", CDM.stringify(m)), {method: \"POST\"});\n\t\t\t}\n\t\t\tme.infoArea.setCustomMsg(\"Le message a été envoyé\", \"info\");\n\t\t} catch (e) {\n\t\t\tme.infoArea.setCustomMsg(\"Envoi du message en échec\", \"error\");\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n\n\tsetMaintenanceOn(this: Button) {\n\t\tconst me = DOMSH.findHost<NotifUsers>(this);\n\t\tconst popup = POPUP.showDialog(<div style=\"margin:.5em\"><ShadowJsx skin=\"webzone:panel\">\n\t\t\t<div>Message de maintenance aux utilisateurs :</div>\n\t\t\t<input id=\"txt\" style=\"width:40em; font-size:inherit;\" value=\"Le serveur est actuellement en maintenance, remise en service prévue vers XXXX.\"/>\n\t\t\t<Button î={{reg: me.regs[0], label: \"Entrer en maintenance\", uiContext: \"dialog\"} as OButtonInit} onclick={async function (this: Button) {\n\t\t\t\tthis.disabled = true;\n\t\t\t\ttry {\n\t\t\t\t\tconst input = DOMSH.findHost(this).shadowRoot.getElementById(\"txt\") as HTMLInputElement;\n\t\t\t\t\tif (!input.value) POPUP.showNotifError(\"Saisissez un message de maintenance\", this);\n\t\t\t\t\telse {\n\t\t\t\t\t\tawait me.setMaintenance(input.value);\n\t\t\t\t\t\tpopup.close();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.disabled = false;\n\t\t\t\t\tERROR.report(\"Set maintenance mode failed\", e);\n\t\t\t\t}\n\t\t\t}}/>\n\t\t</ShadowJsx></div>, me, {titleBar: {barLabel: {label: \"Mode maintenance\"}}})\n\t}\n\n\tsetMaintenanceOff(this: Button) {\n\t\tDOMSH.findHost<NotifUsers>(this).setMaintenance();\n\t}\n\n\tasync setMaintenance(txt?: string) {\n\t\tawait Promise.all(this.regs.map((reg: IReg<IUniverseEnv>) => {\n\t\t\treturn reg.env.universe.config.maintenanceUrl.fetchVoid(IO.qs(\"cdaction\", \"SetMaintenanceMode\", \"param\", txt), {method: \"POST\"});\n\t\t}));\n\t\tthis.refreshMtncState();\n\t}\n}\n\n\nREG.reg.registerSkin('c-notif-users', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-width: 40em;\n\t}\n\n\t.tiArea {\n\t\tmargin: .5em;\n\t}\n\n\t.area {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: .5em;\n\t\tborder: 1px solid var(--border-color);\n\t\tmargin: .5em;\n\t}\n\n\t#msgTypes {\n\t\tdisplay: flex;\n\t}\n\n\t#time {\n\t\tmargin: .5em;\n\t}\n\n\n\t#msg {\n\t\tpadding: .5em;\n\t\tfont-weight: bold;\n\t}\n\n\t.footer {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.label {\n\t\tdisplay: inline-block;\n\t\tmin-width: 9em;\n\t\tmargin: .5em 0;\n\t}\n\n\t.mtncOff {\n\t\tcolor: var(--fade-color);\n\t}\n\n\t.mtncOn {\n\t\tcolor: var(--warning-color);\n\t}\n`);\n\ncustomElements.define('c-notif-users', NotifUsers);\n\ninterface JMaintenanceResp {\n\tmsg: { lang: string, label: string }[]\n}"]}