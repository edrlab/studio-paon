{"version":3,"sources":["/@back@/store/areas/resViewAreas.tsx"],"names":["Area","AreaAsync","isArea","IO","REG","JSX","LOCALE","UtBrowserFetcher","ResLayoutView","BarActions","InfoFocusRes","ResVersionsView","AccelKeyMgr","TemplateResult","render","FORMS","Tabs","ResLayoutArea","[object Object]","id","super","this","requireLib","asEndPoint","body","scroll","ctx","lastDatas","reg","isClosed","init","area","areaContext","skin","getSkin","skinOver","getSkinOver","createElement","Ã®","ResInfoArea","lines","push","RESINFO","path","url","status","deploy","prc","ResAncArea","ResVersionsArea","ResChildrenArea","iniLibs","depotActions","_modules","resActions","asSelect","Object","create","noEdit","actions","asConsult","ResTreeArea","showMode","getSvc","asResTreeArea","loadBody","filter","actionsBar","getActionsBar","undefined","AddByImport","AddFolder","actionContext","uiContext","disableFullOverlay","ch","lastDatasKey","pathRoot","env","nodeInfos","permaPath","fetcher","universe","adminUrlTree","setFilter","infoBroker","defaultAction","FocusLiveRes","actionsStart","grid","skinScroll","mergeLists","accelKeyMgr","initFromMapActions","mergeListsAsMap","resHandlingMode","ResTabsArea","tabs","some","t","needAsync","Promise","all","map","loadLibs","isVisible","length","class","areas","areasContext","buildBody","registerSkin","ResContentArea","actionLists","ResNoContentArea","bar","getId","ResFrameArea","subPath","treeSrv","ResImgArea","show","checkboard","ResAudioArea","ResVideoArea","ResBarActionsArea","_a","nodeInfosChange","on","refreshContent","ResMainArea","_skinOver","contentView","contentViews","headerTag","tag","children","titleArea","_selectArea","cv","asSelectArea","headerSelectTag","_consultArea","asConsultArea","ancArea","actionsArea","titleLine","parent","ni","resType","getList","versions","prcVersionning","hist","succ","getPref","name","resName","versionInTi","showDate","onlyChangedContent","flagInTi","trashed","title","resTypes","visStateDescription","unlisted","appendChild","src","resIcon","infosArea","resView","addInfosMain","view","installSkin","shadowRoot","then","setSkin","setLines","ResHoverArea","preview","ResFormMetasArea","promises","fieldset","document","v","buildSrcView","ResTemplatesArea","_label","requireVisiblePerm","config","assign","publicUrl","href","target","metas","dt","m","deployDate","by","deployedBy","formatDateDigitsToSec","format","Date","nickOrAccount","visStateMenuLabel","style","visStateLabel","prcLabel","moved","movedPath","onclick","ev","dispatchInfo","debug","JSON","stringify","textContent","getRenderings","datas","SimpleMeta","metaLabel","metaName","BasicResLine","label","values","value","visible","labelCtn","valuesCtn","forEach","valueEntry","createTextNode","ResFormAreaLine","onlyIfHasContent","elt","buildControlLabel","jsonToForm","ResIdentFieldSetArea","customInputs","pathBuilder","noFolderSelector","noResNameField"],"mappings":"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","sourcesContent":["import {Area, AreaAsync, IArea, IControlLabelContext, isArea} from \"lib/commons/areas\";\nimport {IO} from \"lib/commons/io/io\";\nimport {JLastDatas} from \"lib/commons/lastDatas\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {IDepotResUiEnv, IDepotShortResUiEnv} from \"lib/store/depot\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {IResInfosLineDrawer, OResInfoViewInit, ResInfoView} from \"back/store/views/resInfosView\";\nimport {LOCALE} from \"lib/commons/lang\";\nimport {OUserRefInit} from \"back/core/widgets/userRef\";\nimport {IUtBrowserCtx, OUtBrowserInit, UtBrowser, UtBrowserFetcher} from \"back/store/views/utBrowser\";\nimport {IView} from \"lib/commons/views\";\nimport {IJsTag, OResLayoutViewInit, ResLayoutView} from \"back/store/views/resLayoutView\";\nimport {OResAncViewInit, ResAncView} from \"back/store/views/resAncView\";\nimport {BarActions, OBarActionsInit} from \"back/commons/widgets/bars\";\nimport {OResAudioViewInit, OResChildrenViewInit, OResFrameViewInit, OResImgViewInit, OResVideoViewInit, ResAudioView, ResFrameView, ResImgView, ResVideoView} from \"back/store/views/resContentView\";\nimport {InfoFocusRes, IResFormCtx, IResFormIdentCtx, JCidMetas} from \"lib/store/res\";\nimport {OResVersionsViewInit, ResVersionsView} from \"back/store/views/resVersionsView\";\nimport {AccelKeyMgr, IAction} from \"lib/commons/actions\";\nimport {ResBodyView} from \"back/store/views/resViewer\";\nimport {TemplateResult} from \"res/litHtml/lib/template-result\";\nimport {render} from \"res/litHtml/lit-html\";\nimport {FORMS, IField} from \"lib/commons/forms\";\nimport {OResIdentFieldSetInit, ResIdentFieldSet} from \"back/store/widgets/resInputs\";\nimport {OTabsInit, Tabs} from \"back/commons/widgets/tabs\";\nimport {OResTemplatesViewInit, ResTemplatesView} from \"back/store/views/resTemplatesView\";\nimport \"back/store/areas/areas_Perms\";\n\n\n/**\n * Transforme une Area pour Ãªtr exploitÃ© dans un autre contexte.\n */\nexport interface IResAreaAdapter {\n\t/** Transforme cette area (issu de la view \"main\") pour un usage de type sÃ©lection de ressource (view \"select\"). */\n\tasSelectArea?(): IArea<IRegPointer<IDepotResUiEnv>>\n\n\t/** */\n\tasConsultArea?(): IArea<IRegPointer<IDepotResUiEnv>>\n}\n\n/**\n * Area construisant un ensemble d'autres views d'une ressource.\n */\nexport class ResLayoutArea extends AreaAsync<IRegPointer<IDepotResUiEnv>, ResLayoutView> {\n\n\tscroll?: 'small' | 'large'\n\n\tbody: (IArea<IRegPointer<IDepotResUiEnv>, IView> | IJsTag | string)[]\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'resLayout');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resLayoutView.js\"));\n\t}\n\n\tsetBody(...body: (IArea<IRegPointer<IDepotResUiEnv>, IView> | IJsTag | string)[]): this {\n\t\tthis.body = body;\n\t\treturn this;\n\t}\n\n\tsetScroll(scroll: 'small' | 'large' | null): this {\n\t\tthis.scroll = scroll;\n\t\treturn this;\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResLayoutView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResLayoutViewInit = {\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\treg: ctx.reg,\n\t\t\tlastDatas: lastDatas,\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tbody: this.body,\n\t\t\tscroll: this.scroll\n\t\t};\n\t\treturn <store-res-layout Ã®={init}/> as ResLayoutView;\n\t}\n}\n\n/**\n * Area construisant la view des infos d'une ressource.\n */\nexport class ResInfoArea extends AreaAsync<IRegPointer<IDepotResUiEnv>, ResInfoView> {\n\n\tlines: IResInfosLineDrawer[]\n\n\tconstructor() {\n\t\tsuper('resInfo');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resInfosView.js\"));\n\t}\n\n\tsetLines(...lines: IResInfosLineDrawer[]): this {\n\t\tthis.lines = lines;\n\t\treturn this;\n\t}\n\n\taddDefaultLines(): this {\n\t\tif (!this.lines) this.lines = [];\n\t\tthis.lines.push(RESINFO.path, RESINFO.url, RESINFO.status, RESINFO.deploy, RESINFO.prc); /*, RESINFO.debug , RESINFO.moved A REVOIR : si en tooltip, fermer le tooltip container ? */\n\t\treturn this;\n\t}\n\n\taddLines(...lines: IResInfosLineDrawer[]): this {\n\t\tif (!this.lines) this.lines = [];\n\t\tif (lines) this.lines.push(...lines);\n\t\treturn this;\n\t}\n\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResInfoView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResInfoViewInit = {\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\treg: ctx.reg,\n\t\t\tlastDatas: lastDatas,\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tlines: this.lines\n\t\t};\n\t\treturn <store-res-infos Ã®={init}/> as ResInfoView;\n\t}\n}\n\n\n/**\n * Area construisant la view des ancÃªtres d'une ressource.\n */\nexport class ResAncArea extends AreaAsync<IRegPointer<IDepotResUiEnv>, ResAncView> {\n\n\tconstructor() {\n\t\tsuper('resAnc');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resAncView.js\"));\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResAncView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResAncViewInit = {\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\treg: ctx.reg,\n\t\t\tlastDatas: lastDatas,\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx)\n\t\t};\n\t\treturn <store-res-anc Ã®={init}/> as ResAncView;\n\t}\n}\n\n\n/**\n * Area construisant la view des versions d'une ressource.\n */\nexport class ResVersionsArea extends AreaAsync<IRegPointer<IDepotResUiEnv>, ResVersionsView> {\n\n\tconstructor() {\n\t\tsuper('resVersions');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resVersionsView.js\"));\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResVersionsView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResVersionsViewInit = {\n\t\t\treg: ctx.reg,\n\t\t\t// lastDatas: lastDatas,\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx)\n\t\t};\n\t\treturn <store-res-versions Ã®={init}/> as ResVersionsView;\n\t}\n}\n\n\n/**\n * Area pour les noeuds de type folder affichant la liste des noeuds fils.\n */\nexport class ResChildrenArea extends AreaAsync<IRegPointer<IDepotResUiEnv>, HTMLElement> implements IResAreaAdapter {\n\n\tactions?: IAction<IRegPointer<IDepotResUiEnv>>[];\n\n\tnoEdit?: 'strict' | 'addFolder';\n\n\t/**\n\t * Filre pour lister les fils et la recherche.\n\t * Exemples :\n\t * - \"isFolder\"\n\t * - \"isFolder & !inTrash & !unlisted &!moved\"\n\t * - \"usable\" ( = !inTrash & !unlisted &!moved)\n\t * - \"regexpPrc(img.*) & !inTrash\"\n\t * - \"prc(image,audio,video) & !inTrash\"\n\t * - \"\" : pas de filtre mais forcera le mode un seul dossier virtuel lors du listing des fils via le utBrowser.\n\t * - null : pas de filtre\n\t *\n\t * @see eu.scenari.urltree.util.UrlTreeNodePredicates\n\t */\n\tfilter?: string\n\n\tget depotActions(): typeof import('back/store/actions/depotActions') {return this._modules[0]}\n\n\tget resActions(): typeof import('back/store/actions/resActions') {return this._modules[1]}\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'resChildren');\n\t\tthis.iniLibs();\n\t}\n\n\tiniLibs() {\n\t\tthis.requireLib(\n\t\t\tIO.asEndPoint(\"/@back@/store/actions/depotActions.js\"),\n\t\t\tIO.asEndPoint(\"/@back@/store/actions/resActions.js\"),\n\t\t\tIO.asEndPoint(\"/@back@/store/views/resContentView.js\")\n\t\t);\n\t}\n\n\tasSelectArea(): IArea<IRegPointer<IDepotResUiEnv>> {\n\t\tif (!this.asSelect) {\n\t\t\tthis.asSelect = Object.create(this);\n\t\t\tthis.asSelect.noEdit = 'addFolder';\n\t\t\tthis.asSelect.actions = null;\n\t\t}\n\t\treturn this.asSelect;\n\t}\n\n\tasSelect: ResChildrenArea;\n\n\tasConsultArea(): IArea<IRegPointer<IDepotResUiEnv>> {\n\t\tif (!this.asConsult) {\n\t\t\tthis.asConsult = Object.create(this);\n\t\t\tthis.asConsult.noEdit = 'strict';\n\t\t\tthis.asConsult.actions = null;\n\t\t}\n\t\treturn this.asConsult;\n\t}\n\n\tasConsult: ResChildrenArea;\n\n\t/** Retourne l'area pour construire la vue fondÃ©e sur utBrowser lorsque le dossier contient trop de fils. */\n\tasResTreeArea(): ResTreeArea {\n\t\tconst area = new ResTreeArea();\n\t\tarea.noEdit = this.noEdit;\n\t\tarea.actions = this.actions;\n\t\treturn area;\n\t}\n\n\tasync loadBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): Promise<HTMLElement> {\n\t\tif (!(this instanceof ResTreeArea)) {\n\t\t\tconst showMode = ctx.reg.getSvc<IResChildrenShowModeSvc>(\"storeResChildrenShowMode\");\n\t\t\tif (typeof showMode === \"function\" && showMode() === 'tree') {\n\t\t\t\treturn this.asResTreeArea().loadBody(ctx, lastDatas);\n\t\t\t}\n\t\t}\n\t\treturn super.loadBody(ctx, lastDatas);\n\t}\n\n\t/** Force Ã  true pour toujours passer par le switch dynamique IResChildrenShowModeSvc. */\n\tneedAsync(ctx: IRegPointer<IDepotResUiEnv>): boolean {return true}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): HTMLElement {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\t//actionsStart\n\t\treturn <store-res-children Ã®={{\n\t\t\treg: ctx.reg,\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\tfilter: this.filter,\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tactionsBar: this.getActionsBar(ctx)\n\t\t} as OResChildrenViewInit}/>;\n\t}\n\n\tprotected getActionsBar(ctx: IRegPointer<IDepotResUiEnv>): OBarActionsInit<IRegPointer<IDepotResUiEnv>> | null {\n\t\tlet actions = this.actions;\n\t\tif (actions === undefined) {\n\t\t\tif (this.noEdit === \"strict\") return null;\n\t\t\tactions = [];\n\t\t\tif (this.noEdit !== \"addFolder\") actions.push(new this.resActions.AddByImport());\n\t\t\tactions.push(new this.resActions.AddFolder());\n\t\t}\n\t\treturn actions ? {\n\t\t\treg: ctx.reg,\n\t\t\tactions,\n\t\t\tactionContext: ctx,\n\t\t\tuiContext: \"dialog\",\n\t\t\tdisableFullOverlay: true\n\t\t} : null;\n\t}\n}\n\n/**\n * Svc \"storeResChildrenShowMode\" permettant de forcer Ã  l'init le choix entre ResChildrenArea et ResTreeArea.\n */\nexport type IResChildrenShowModeSvc = () => 'children' | 'tree'\n\n\n/**\n * Area pour les noeuds de type folder affichant le sous-arbre des descendants.\n */\nexport class ResTreeArea extends ResChildrenArea {\n\n\tconstructor() {super('resTree');}\n\n\tiniLibs() {\n\t\tthis.requireLib(\n\t\t\tIO.asEndPoint(\"/@back@/store/actions/depotActions.js\"),\n\t\t\tIO.asEndPoint(\"/@back@/store/actions/resActions.js\"),\n\t\t\tIO.asEndPoint(\"/@back@/store/views/utBrowser.js\")\n\t\t);\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): UtBrowser {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\t//actionsStart\n\t\tconst init: OUtBrowserInit = {\n\t\t\treg: ctx.reg,\n\t\t\tlastDatas: lastDatas?.ch,\n\t\t\tlastDatasKey: \"ch\",\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tpathRoot: ctx.reg.env.nodeInfos.permaPath,\n\t\t\tfetcher: new UtBrowserFetcher(ctx.reg.env.universe.adminUrlTree).setFilter(this.filter),\n\t\t\tinfoBroker: ctx.reg.env.infoBroker,\n\t\t\tdefaultAction: new this.depotActions.FocusLiveRes(),\n\t\t\tactionsStart: this.getActionsBar(ctx),\n\t\t\tgrid: {skinScroll: \"scroll/large\"},\n\t\t\tactions: ctx.reg.mergeLists(\"actions:store:ResTreeView\", \"actions:store:resList\"),\n\t\t\taccelKeyMgr: new AccelKeyMgr<IUtBrowserCtx>().initFromMapActions(ctx.reg.mergeListsAsMap(\"accelkeys:store:ResTreeView\", \"accelkeys:store:resList\"))\n\t\t};\n\t\tif (this.noEdit) init.resHandlingMode = \"sel\";\n\t\treturn <store-ut-browser Ã®={init}/> as UtBrowser;\n\t}\n}\n\n/**\n * Onglets pour multi-vues du contenu de la res.\n * Si une seule view est effectivement visible (restriction via perms), le widget des onglets est Ã©liminÃ©.\n * Peut donc aussi Ãªtre utilisÃ© pour offrir un switch entre diffÃ©rentes vues en fonction des perms des users.\n */\nexport class ResTabsArea extends Area<IRegPointer<IDepotResUiEnv>, HTMLElement> {\n\n\ttabs: IArea<IRegPointer<IDepotResUiEnv>, IView>[]\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'resTabs');\n\t}\n\n\tsetTabs(...tabs: IArea<IRegPointer<IDepotResUiEnv>, IView>[]): this {\n\t\tthis.tabs = tabs;\n\t\treturn this;\n\t}\n\n\tneedAsync(ctx: IRegPointer<IDepotResUiEnv>): boolean {\n\t\treturn this.tabs.some(t => t.needAsync(ctx));\n\t}\n\n\tasync loadLibs(ctx: IRegPointer<IDepotResUiEnv>): Promise<void> {\n\t\tawait Promise.all(this.tabs.filter(t => t.needAsync(ctx)).map(t => t.loadLibs(ctx)));\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): HTMLElement {\n\t\tconst tabs = this.tabs.filter((t) => t.isVisible(ctx));\n\t\tif (tabs.length > 1) {\n\t\t\treturn <Tabs class=\"noBorder\" Ã®={{\n\t\t\t\treg: ctx.reg,\n\t\t\t\tareas: tabs,\n\t\t\t\tareasContext: ctx,\n\t\t\t\tskinOver: \"store-res-bodytabs\"\n\t\t\t\t//lastDatas\n\t\t\t} as OTabsInit<IRegPointer<IDepotResUiEnv>>}/>;\n\t\t} else if (tabs.length === 1) {\n\t\t\treturn tabs[0].buildBody(ctx, lastDatas);\n\t\t}\n\t\treturn null;\n\t}\n}\n\n\nREG.reg.registerSkin(\"store-res-bodytabs\", 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t}\n\n\tc-tab {\n\t\tflex: 1;\n\t\tborder-width: 3px !important;\n\t\tpadding: .5em !important;\n\t\tfont-weight: bold !important;\n\t\tcolor: var(--fade-color);\n\t}\n`);\n\n\nabstract class ResContentArea extends AreaAsync<IRegPointer<IDepotResUiEnv>, HTMLElement> {\n\tactionLists: string[]\n\n\tsetActionsLists(actionLists: string[]): this {\n\t\tthis.actionLists = actionLists;\n\t\treturn this;\n\t}\n\n\tprotected getActionsBar(ctx: IRegPointer<IDepotResUiEnv>): OBarActionsInit<IRegPointer<IDepotResUiEnv>> | null {\n\t\treturn this.actionLists ? {\n\t\t\treg: ctx.reg,\n\t\t\tactions: ctx.reg.mergeLists(...this.actionLists),\n\t\t\tactionContext: ctx,\n\t\t\tuiContext: \"dialog\",\n\t\t\tdisableFullOverlay: true\n\t\t} : null;\n\t}\n}\n\n/**\n * Area pour afficher une res sans contenu\n */\nexport class ResNoContentArea extends ResContentArea {\n\n\tconstructor() {\n\t\tsuper('resNoContent');\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): BarActions<IRegPointer<IDepotResUiEnv>> {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst bar = <BarActions id={this.getId()}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tÃ®={this.getActionsBar(ctx)}/> as BarActions<IRegPointer<IDepotResUiEnv>>;\n\t\treturn bar;\n\t}\n}\n\n/**\n * Area pour afficher le contenu d'une res via une iframe.\n */\nexport class ResFrameArea extends ResContentArea {\n\n\tconstructor(public subPath?: string, public treeSrv?: 'adminUrlTree' | 'urlTree') {\n\t\tsuper('resFrame');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resContentView.js\"));\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResFrameView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResFrameViewInit = {\n\t\t\treg: ctx.reg,\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\t// lastDatas: lastDatas?.ch,\n\t\t\t// lastDatasKey: \"ch\",\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tsubPath: this.subPath,\n\t\t\ttreeSrv: ctx.reg.env.universe[this.treeSrv || 'urlTree'],\n\t\t\tactionsBar: this.getActionsBar(ctx)\n\t\t};\n\t\treturn <store-res-frame Ã®={init}/> as ResFrameView;\n\t}\n}\n\n/**\n * Area pour afficher le contenu d'une res via une img.\n */\nexport class ResImgArea extends ResContentArea {\n\n\tcheckboard: boolean;\n\n\tconstructor(public subPath: string, public treeSrv?: 'adminUrlTree' | 'urlTree') {\n\t\tsuper('resImg');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resContentView.js\"));\n\t}\n\n\tshowCheckboard(show: boolean): this {\n\t\tthis.checkboard = show;\n\t\treturn this;\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResImgView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResImgViewInit = {\n\t\t\treg: ctx.reg,\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\t// lastDatas: lastDatas?.ch,\n\t\t\t// lastDatasKey: \"ch\",\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tsubPath: this.subPath,\n\t\t\ttreeSrv: ctx.reg.env.universe[this.treeSrv || 'urlTree'],\n\t\t\tcheckboard: this.checkboard,\n\t\t\tactionsBar: this.getActionsBar(ctx)\n\t\t};\n\t\treturn <store-res-img Ã®={init}/> as ResImgView;\n\t}\n}\n\n/**\n * Area pour afficher le contenu d'une res audio.\n */\nexport class ResAudioArea extends ResContentArea {\n\n\tcheckboard: boolean;\n\n\tconstructor(public subPath: string, public treeSrv?: 'adminUrlTree' | 'urlTree') {\n\t\tsuper('resAudio');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resContentView.js\"));\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResAudioView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResAudioViewInit = {\n\t\t\treg: ctx.reg,\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\t// lastDatas: lastDatas?.ch,\n\t\t\t// lastDatasKey: \"ch\",\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tsubPath: this.subPath,\n\t\t\ttreeSrv: ctx.reg.env.universe[this.treeSrv || 'urlTree'],\n\t\t\tactionsBar: this.getActionsBar(ctx)\n\t\t};\n\t\treturn <store-res-audio Ã®={init}/> as ResAudioView;\n\t}\n}\n\n/**\n * Area pour afficher le contenu d'une res vidÃ©o\n */\nexport class ResVideoArea extends ResContentArea {\n\n\tconstructor(public subPath: string, public treeSrv?: 'adminUrlTree' | 'urlTree') {\n\t\tsuper('resAudio');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resContentView.js\"));\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResVideoView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResVideoViewInit = {\n\t\t\treg: ctx.reg,\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\t// lastDatas: lastDatas?.ch,\n\t\t\t// lastDatasKey: \"ch\",\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tsubPath: this.subPath,\n\t\t\ttreeSrv: ctx.reg.env.universe[this.treeSrv || 'urlTree'],\n\t\t\tactionsBar: this.getActionsBar(ctx)\n\t\t};\n\t\treturn <store-res-video Ã®={init}/> as ResVideoView;\n\t}\n}\n\nexport class ResBarActionsArea extends Area<IReg<IDepotResUiEnv>, BarActions<IRegPointer<IDepotResUiEnv>>> {\n\n\tconstructor(public actionLists: string[], id?: string) {\n\t\tsuper(id || \"resBarActions\");\n\t}\n\n\tbuildBody(ctx: IReg<IDepotResUiEnv>, lastDatas?: JLastDatas): BarActions<IRegPointer<IDepotResUiEnv>> {\n\t\tconst bar = <BarActions id={this.getId()}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tÃ®={{reg: ctx, actions: ctx.mergeLists(...this.actionLists), actionContext: ctx, disableFullOverlay: true} as OBarActionsInit<IRegPointer<IDepotResUiEnv>>}/> as BarActions<IRegPointer<IDepotResUiEnv>>;\n\t\tctx.env.nodeInfosChange?.on(\"histChange\", () => {bar.refreshContent()});\n\t\treturn bar;\n\t}\n}\n\n\n/**\n * Area construisant la main view standard.\n */\nexport class ResMainArea extends ResLayoutArea implements IResAreaAdapter {\n\n\tcontentViews: (IArea<IRegPointer<IDepotResUiEnv>, IView> | IJsTag | string)[]\n\n\tstatic ancArea = new ResAncArea();\n\tstatic actionsArea = new ResBarActionsArea([\"actions:depot:resMainView:edit\"], \"resEdit\");\n\tstatic headerTag = {tag: 'header', children: [ResMainArea.ancArea, ResMainArea.actionsArea]};\n\tstatic headerSelectTag = {tag: 'header', children: [ResMainArea.ancArea]};\n\n\t/** header standard dans le views main, select...*/\n\tstatic titleLine: IResInfosLineDrawer = {\n\t\tdrawLine(reg: IReg<IDepotResUiEnv>, parent: Node) {\n\t\t\tconst ni = reg.env.nodeInfos;\n\t\t\tconst resType = reg.env.resType;\n\t\t\tconst actions = <c-bar-actions Ã®={{reg, actionContext: reg, actions: reg.getList(\"actions:depot:resMainView:infos\")} as OBarActionsInit<IRegPointer<IDepotResUiEnv>>}/> as BarActions<IRegPointer<IDepotResUiEnv>>;\n\t\t\tconst versions = (ni.t !== \"moved\" ? resType.prcVersionning === \"VCS\" : ni.hist || ni.succ) && reg.getPref(\"depot.showVersions\", true);\n\t\t\t//console.log(\"resType.prcVersionning:::\",resType.prcVersionning);\n\t\t\tconst name = <span class=\"name\">{resType.resName(ni)}</span>;\n\t\t\tconst versionInTi = !versions && resType.prcVersionning === \"VCB\" ? <span id=\"versionInTi\">@<ResVersionsView Ã®={{reg, showDate: false, onlyChangedContent: true} as OResVersionsViewInit}/></span> : undefined;\n\t\t\tlet flagInTi: Element | undefined;\n\t\t\tif (ni.trashed) {\n\t\t\t\tflagInTi = <span class=\"trashed\" title={reg.env.resTypes.visStateDescription(ni)}/>\n\t\t\t} else\tif (ni.unlisted) {\n\t\t\t\tflagInTi = <span class=\"unlisted\" title={reg.env.resTypes.visStateDescription(ni)}/>\n\t\t\t}\n\t\t\tparent.appendChild(<div id=\"title\">\n\t\t\t\t<img class=\"icon\" src={resType.resIcon(ni)}/>\n\t\t\t\t<span id=\"nameCtn\">{name}{versionInTi}{flagInTi}</span>\n\t\t\t\t{versions ? undefined : actions}\n\t\t\t</div>);\n\t\t\tif (versions) {\n\t\t\t\tparent.appendChild(<div id=\"version\">\n\t\t\t\t\t<ResVersionsView Ã®={{reg, showDate: true, onlyChangedContent: true} as OResVersionsViewInit}/>\n\t\t\t\t\t{actions}\n\t\t\t\t</div>);\n\t\t\t}\n\t\t\tconst infosArea = resType.resView(\"infosMain\");\n\t\t\tif (infosArea) {\n\t\t\t\tfunction addInfosMain(view: HTMLElement) {\n\t\t\t\t\tif (!view) return;\n\t\t\t\t\tview.id = \"infosMain\";\n\t\t\t\t\treg.installSkin(\"store-res-infosMain\", view.shadowRoot);\n\t\t\t\t\tparent.appendChild(view);\n\t\t\t\t}\n\n\t\t\t\tif (infosArea.needAsync(reg)) {\n\t\t\t\t\tinfosArea.loadBody(reg).then(addInfosMain);\n\t\t\t\t} else {\n\t\t\t\t\taddInfosMain(infosArea.buildBody(reg));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic titleArea = new ResInfoArea().setSkin(\"store-res-titlebar\").setLines(ResMainArea.titleLine);\n\n\tconstructor() {\n\t\tsuper('resMain');\n\t\tthis._skinOver = \"store-res-main\";\n\t\tthis.scroll = \"large\";\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resMainView.js\"));\n\t}\n\n\tsetContent(...contentView: (IArea<IRegPointer<IDepotResUiEnv>, IView> | IJsTag | string)[]): this {\n\t\tthis.contentViews = contentView;\n\t\tthis.body = [\n\t\t\tResMainArea.headerTag,\n\t\t\t{tag: 'main', children: [ResMainArea.titleArea, ...contentView]}\n\t\t]\n\t\treturn this;\n\t}\n\n\tasSelectArea(): IArea<IRegPointer<IDepotResUiEnv>> {\n\t\tif (!this._selectArea) {\n\t\t\t//suppr le ResBarActionsArea ?\n\t\t\tthis._selectArea = new ResMainArea();\n\t\t\tthis._selectArea.contentViews = this.contentViews.map((cv) => (cv as IResAreaAdapter)?.asSelectArea ? (cv as IResAreaAdapter).asSelectArea() : cv);\n\t\t\tthis._selectArea.body = [\n\t\t\t\tResMainArea.headerSelectTag,\n\t\t\t\t{tag: 'main', children: [ResMainArea.titleArea, ...this._selectArea.contentViews]}\n\t\t\t]\n\t\t}\n\t\treturn this._selectArea;\n\t}\n\n\t_selectArea: ResMainArea\n\n\tasConsultArea(): IArea<IRegPointer<IDepotResUiEnv>> {\n\t\tif (!this._consultArea) {\n\t\t\t//suppr le ResBarActionsArea ?\n\t\t\tthis._consultArea = new ResMainArea();\n\t\t\tthis._consultArea.contentViews = this.contentViews.map((cv) => (cv as IResAreaAdapter)?.asConsultArea ? (cv as IResAreaAdapter).asConsultArea() : cv);\n\t\t\tthis._consultArea.body = [\n\t\t\t\t{tag: 'main', children: [ResMainArea.titleArea, ...this._consultArea.contentViews]}\n\t\t\t]\n\t\t}\n\t\treturn this._consultArea;\n\t}\n\n\t_consultArea: ResMainArea\n}\n\n\nREG.reg.registerSkin('store-res-infosMain', 1, /* language=CSS */ `\n\t:host {\n\t\tpadding: 0 0 .5em 0;\n\t}\n\n\t.label, .lbl {\n\t\tjustify-content: flex-start;\n\t\tfont-variant: all-small-caps;\n\t\tcolor: var(--fade-color);\n\t}\n`);\n\n\n/**\n * Area construisant le tooltip standard.\n */\nexport class ResHoverArea extends ResLayoutArea {\n\tconstructor() {\n\t\tsuper('resHover');\n\t\tthis._skinOver = \"store-res-hover\";\n\t}\n\n\tsetPreview(...preview: (IArea<IReg<IDepotResUiEnv | IDepotShortResUiEnv>, IView> | IJsTag | string)[]): this {\n\t\tthis.body = [\n\t\t\tnew ResInfoArea().setLines(RESINFO.path, RESINFO.url, RESINFO.status, RESINFO.prc),\n\t\t\t...preview\n\t\t]\n\t\treturn this;\n\t}\n}\n\nREG.reg.registerSkin('store-res-hover', 1, /* language=CSS */ `\n\t:host {\n\t\tmax-width: 25rem;\n\t\tmin-width: 20rem;\n\t}\n`);\n\n\n/**\n * Area construisant un fieldSet d'Ã©dition des metas.\n */\nexport class ResFormMetasArea extends AreaAsync<IResFormCtx, HTMLFieldSetElement> {\n\n\tbody: (IArea<IResFormCtx, IView> | IJsTag | string)[]\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'formMetas');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resLayoutView.js\"));\n\t}\n\n\tsetBody(...body: (IArea<IResFormCtx, IView> | IJsTag | string)[]): this {\n\t\tthis.body = body;\n\t\treturn this;\n\t}\n\n\tasync loadLibs(ctx: IResFormCtx): Promise<void> {\n\t\tawait super.loadLibs(ctx);\n\t\tconst promises: Promise<any>[] = [];\n\t\tResLayoutView.loadLibs(this.body, ctx, promises);\n\t\treturn Promise.all(promises) as Promise<any>;\n\t}\n\n\tbuildBody(ctx: IResFormCtx, lastDatas?: JLastDatas): HTMLFieldSetElement {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst fieldset = document.createElement(\"fieldset\") as HTMLFieldSetElement;\n\t\tfor (const v of this.body) {\n\t\t\tResLayoutView.buildSrcView(v, fieldset, ctx, null);\n\t\t}\n\t\treturn fieldset;\n\t}\n}\n\n\n/**\n * Area construisant l'Ã©cran de gestion des gabarits (accueil dynamiques, 404 not found...).\n */\nexport class ResTemplatesArea extends AreaAsync<IRegPointer<IDepotResUiEnv>, ResTemplatesView> {\n\n\tconfig?: OResTemplatesViewInit;\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'resTemplates');\n\t\tthis._label = \"Gabarits\";\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/views/resTemplatesView.js\"));\n\t\tthis.requireVisiblePerm(\"ui.store.area.resTemplates\");\n\t}\n\n\tsetTemplatesConfig(config: OResTemplatesViewInit): this {\n\t\tthis.config = config;\n\t\treturn this;\n\t}\n\n\tbuildBody(ctx: IRegPointer<IDepotResUiEnv>, lastDatas?: JLastDatas): ResTemplatesView {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResTemplatesViewInit = Object.assign({\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\treg: ctx.reg,\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx)\n\t\t}, this.config);\n\t\treturn <store-res-templates Ã®={init}/> as ResTemplatesView;\n\t}\n}\n\n\n/** Constructeurs des lignes des resInfo. */\nexport namespace RESINFO {\n\n\texport const path: IResInfosLineDrawer = {\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tparent.appendChild(<div class=\"line\"><span class=\"label\">Chemin</span><span class=\"value\">{ctx.reg.env.nodeInfos.permaPath || \"/\"}</span></div>);\n\t\t}\n\t}\n\n\texport const url: IResInfosLineDrawer = {\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tconst url = (ctx.reg.env as IDepotResUiEnv).nodeInfos.publicUrl;\n\t\t\tif (url) parent.appendChild(<div class=\"line\"><span class=\"label\">URL</span><a class=\"value\" href={url} target=\"_blank\">{url}</a></div>);\n\t\t}\n\t}\n\n\texport const deploy: IResInfosLineDrawer = {\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tconst metas = (ctx.reg.env as IDepotResUiEnv).nodeInfos.metas;\n\t\t\tif (!metas) return;\n\t\t\tconst dt = ctx.reg.env.nodeInfos.m || metas.deployDate; //ctx.reg.env.nodeInfos.m pour cohÃ©rence (Ã  la seconde prÃ¨s) avec affichage des versions\n\t\t\tif (!dt) return;\n\t\t\tconst by = metas.deployedBy;\n\t\t\tparent.appendChild(<div class=\"line\"><span class=\"label\">Modification</span><span class=\"value\">\n\t\t\t\t{LOCALE.formatDateDigitsToSec.format(new Date(dt))}\n\t\t\t\t{by ? <span> par <c-userref class=\"inline\" Ã®={{reg: ctx.reg, nickOrAccount: by} as OUserRefInit}/></span> : undefined}\n\t\t\t</span></div>);\n\t\t}\n\t}\n\n\texport const status: IResInfosLineDrawer = {\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tconst ni = (ctx.reg.env as IDepotResUiEnv).nodeInfos;\n\t\t\tctx.reg.env.resTypes.visStateMenuLabel\n\t\t\tif (ni.trashed || ni.unlisted) {\n\t\t\t\tparent.appendChild(<div class=\"line\"><span class=\"label\">{ctx.reg.env.resTypes.visStateMenuLabel}</span><span class=\"value\" title={ctx.reg.env.resTypes.visStateDescription(ni)}>\n\t\t\t\t\t<img style=\"height:.7em; vertical-align:center; margin-inline-end:.3em\" src={ni.trashed ? \"/@skin@/store/states/invisible.svg\" : \"/@skin@/store/states/limited.svg\"}/>\n\t\t\t\t\t{ctx.reg.env.resTypes.visStateLabel(ni)}\n\t\t\t\t</span></div>);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const prc: IResInfosLineDrawer = {\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tparent.appendChild(<div class=\"line\"><span class=\"label\">Traitement</span><span class=\"value\">{ctx.reg.env.resType.prcLabel}</span></div>);\n\t\t}\n\t}\n\n\texport const moved: IResInfosLineDrawer = {\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tconst movedPath = ctx.reg.env.nodeInfos.movedPath;\n\t\t\tif (movedPath) {\n\t\t\t\tparent.appendChild(<div class=\"line\"><span class=\"label\">DÃ©placÃ© vers</span><a href=\"javascript:void(0)\" class=\"value\" onclick={(ev: Event) => {\n\t\t\t\t\tctx.reg.env.infoBroker?.dispatchInfo(new InfoFocusRes(movedPath), view);\n\t\t\t\t}}>{movedPath}</a></div>);\n\t\t\t}\n\t\t}\n\t}\n\n\texport const debug: IResInfosLineDrawer = {\n\t\tasync drawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tparent.appendChild(<div class=\"line\"><span class=\"label\">nodeInfos:::</span><span class=\"value\">{JSON.stringify(ctx.reg.env.nodeInfos)}</span></div>);\n\t\t\tconst render = <span class=\"value\">loading...</span>;\n\t\t\tparent.appendChild(<div class=\"line\"><span class=\"label\">renderings:::</span>{render}</div>);\n\t\t\trender.textContent = JSON.stringify((await ctx.reg.env.universe.getRenderings(ctx.reg)).datas);\n\t\t}\n\t}\n\n\texport class SimpleMeta implements IResInfosLineDrawer {\n\n\t\tconstructor(public metaLabel: string, public metaName: string) {}\n\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tconst metas = (ctx.reg.env as IDepotResUiEnv).nodeInfos.metas;\n\t\t\tif (metas && this.metaName in metas) parent.appendChild(<div class=\"line\"><span class=\"label\">{this.metaLabel}</span><span class=\"value\">{metas[this.metaName]}</span></div>);\n\t\t}\n\t}\n\n\t/**\n\t * Classe de base dÃ©clarant une ligne\n\t */\n\texport class BasicResLine implements IResInfosLineDrawer {\n\n\t\tprotected label: string | TemplateResult | Node | ((ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>) => Node)\n\n\t\tprotected values: (string | TemplateResult | Node | ((ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>) => Node) | IArea<IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, IView>)[]\n\n\t\tprotected visible: boolean | ((ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>) => boolean)\n\n\t\tsetLabel(label: string | TemplateResult | Node | ((ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>) => Node)): this {\n\t\t\tthis.label = label;\n\t\t\treturn this;\n\t\t}\n\n\t\tsetValues(...values: (string | TemplateResult | Node | ((ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>) => Node) | IArea<IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, IView>)[]): this {\n\t\t\tthis.values = values;\n\t\t\treturn this;\n\t\t}\n\n\t\tappendValues(...values: (string | TemplateResult | Node | ((ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>) => Node) | IArea<IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, IView>)[]): this {\n\t\t\tif (!this.values) this.values = [];\n\t\t\tif (values) this.values.push(...values);\n\t\t\treturn this;\n\t\t}\n\n\t\tisVisible(value: boolean | ((ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>) => boolean)): this {\n\t\t\tthis.visible = value;\n\t\t\treturn this;\n\t\t}\n\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tconst visible = typeof this.visible === 'function' ? this.visible(ctx) : this.visible;\n\t\t\tif (visible !== false) {\n\t\t\t\tlet label = typeof this.label === 'function' ? this.label(ctx) : this.label;\n\t\t\t\tlet labelCtn;\n\t\t\t\tif (label instanceof TemplateResult) {\n\t\t\t\t\tlabelCtn = <span class=\"value\"/>;\n\t\t\t\t\trender(label, labelCtn);\n\t\t\t\t} else\n\t\t\t\t\tlabelCtn = <span class=\"label\">{label}</span>;\n\n\t\t\t\tlet valuesCtn = <span class=\"value\"/>;\n\t\t\t\tif (this.values) {\n\t\t\t\t\tthis.values.forEach((value) => {\n\t\t\t\t\t\tconst valueEntry = valuesCtn.appendChild(<span class=\"valueEntry\"/>);\n\t\t\t\t\t\tif (typeof value === 'function')\n\t\t\t\t\t\t\tvalue = value(ctx);\n\t\t\t\t\t\tif (value instanceof TemplateResult) {\n\t\t\t\t\t\t\trender(value, valueEntry);\n\t\t\t\t\t\t} else if (isArea(value)) {\n\t\t\t\t\t\t\tvalueEntry.appendChild(value.buildBody(ctx, view));\n\t\t\t\t\t\t} else if (typeof value === 'string')\n\t\t\t\t\t\t\tvalueEntry.appendChild(document.createTextNode(value));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow \"unknown type : \" + typeof value\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tparent.appendChild(<div class=\"line\">{labelCtn}{valuesCtn}</div>);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Classe de base dÃ©clarant une ligne Ã  partir d'une area \"ResForm\"\n\t */\n\texport class ResFormAreaLine implements IResInfosLineDrawer {\n\n\t\tconstructor(public metaName: string, protected area?: IArea<IResFormCtx, IView>, protected onlyIfHasContent = false) { }\n\n\t\tsetArea(area: IArea<IResFormCtx, IView>): this {\n\t\t\tthis.area = area;\n\t\t\treturn this;\n\t\t}\n\n\t\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView) {\n\t\t\tconst metas = (ctx.reg.env as IDepotResUiEnv).nodeInfos.metas;\n\t\t\tif (!this.onlyIfHasContent || (metas && this.metaName in metas)) {\n\t\t\t\tconst elt = parent.appendChild(this.area.buildBody(Object.assign({buildControlLabel: true} as IControlLabelContext, ctx), null));\n\t\t\t\tFORMS.jsonToForm(metas || {}, elt);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// PB: load lib...\n\t// export class ResPreviewLine implements IResInfosLineDrawer {\n\t//\n\t// \tconstructor(public tag: 'store-res-img' | 'store-res-frame' | string, public init: OResImgViewInit | OResFrameViewInit | any) {}\n\t//\n\t// \tdrawLine(reg: IReg<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node) {\n\t// \t\tparent.appendChild(<div class=\"lineMerged\">{(document.createElement(this.tag) as IEltInitable).initialize(this.init)}</div>);\n\t// \t}\n\t// }\n}\n\n\n/**\n * Area construisant les champs d'Ã©dition des metas identificatoires d'un res.\n */\nexport class ResIdentFieldSetArea extends AreaAsync<IResFormIdentCtx, IField & HTMLElement> {\n\n\t/** Affiche le widget standard de sÃ©lection du dossier parent. Si true, pathBuilder est obligatoire. */\n\tnoFolderSelector?: boolean\n\n\t/** Affiche le widget standard de saisie du nom de la ressource. Si true, pathBuilder est obligatoire. */\n\tnoResNameField?: boolean\n\n\t/** Areas de construction des champs identificatoires customs. */\n\tcustomInputs?: IArea<IResFormIdentCtx>[];\n\n\t/**\n\t * Fonction de construction du path (versionnÃ© si VCB).\n\t * Ce path construit doit Ãªtre affectÃ© dans metasInOut.path.\n\t *\n\t * Cette fonction est appelÃ©e aprÃ¨s l'appel Ã  FORMS.formToJson() sur chaque champs construits par les customInputs\n\t * et a complÃ©tÃ© ainsi metasInOut.\n\t *\n\t * resIdentField permet d'obtenir le dossier parent et le nom de la res si les widgets standards sont utilisÃ©s.\n\t */\n\tpathBuilder?: (metasInOut: JCidMetas, resIdentField: ResIdentFieldSet) => void\n\n\tconstructor() {\n\t\tsuper('ResIdentFieldSet');\n\t\tthis.requireLib(IO.asEndPoint(\"/@back@/store/widgets/resInputs.js\"));\n\t}\n\n\t/** Configuration custom des metas identificatoires. */\n\tsetCustomFields(customInputs: IArea<IResFormIdentCtx>[],\n\t\t\t\t\t\t\t\t\tpathBuilder: (metasInOut: JCidMetas, resIdentFields: ResIdentFieldSet) => void,\n\t\t\t\t\t\t\t\t\tnoFolderSelector?: boolean,\n\t\t\t\t\t\t\t\t\tnoResNameField?: boolean): this {\n\t\tthis.customInputs = customInputs;\n\t\tthis.pathBuilder = pathBuilder;\n\t\tthis.noFolderSelector = noFolderSelector;\n\t\tthis.noResNameField = noResNameField;\n\t\treturn this;\n\t}\n\n\tbuildBody(ctx: IResFormIdentCtx): ResIdentFieldSet {\n\t\tif (ctx.reg.isClosed) return null; //raceCond\n\t\tconst init: OResIdentFieldSetInit = Object.create(ctx);\n\t\tinit.area = this;\n\t\tinit.skin = this.getSkin(ctx);\n\t\tinit.skinOver = this.getSkinOver(ctx);\n\t\treturn <store-res-ident-fieldset Ã®={init}/> as ResIdentFieldSet;\n\t}\n}"]}