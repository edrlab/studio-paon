{"version":3,"sources":["/@back@/store/widgets/resInputs.tsx"],"names":["FORMS","MxFormElement","BaseElement","BaseElementAsync","REG","DOM","JSX","DOMSH","Button","UtSelector","UtBrowserFetcher","POPUP","URLTREE","AREAS","ResIdentFieldSet","[object Object]","init","this","config","sr","attachShadow","SHADOWDOM_INIT","reg","installSkin","_initAndInstallSkin","localName","area","noFolderSelector","folderUi","folderInput","createElement","ResParentPathInput","id","î","folderPath","disabled","addEventListener","onInputChange","appendChild","buildControlLabel","noResNameField","leafUi","readOnly","leafNameInput","type","value","leafName","undefined","required","initDefaultCaretInputName","anchor","tabIndex","_initializeForm","customInputs","refreshValidity","wait","push","loadBody","Promise","all","forEach","elt","pos","indexOf","setSelectionRange","length","_a","getParentPath","version","resName","folder","appendToPath","setValidity","addPendingValidity","callback","identState","parent","path","parentPath","extractParentPath","setParentPath","extractUnversionedLeafName","jsonToForm","root","formToJson","pathBuilder","validity","badInput","checkAsyncValidity","meta","fillJson","targetPath","targetState","env","universe","adminUrlTree","nodeInfos","then","ni","trashed","resUpdatable","setMsg","msg","level","customError","super","_refresh","findHost","st","isValidResName","planRevalid","registerSkin","customElements","define","findReg","_parentPath","pathField","pathBtn","label","title","uiContext","onclick","onClickSel","_attach","DEFAULT_PATH_ROOT","dispatchEvent","CustomEvent","cancelable","bubbles","refresh","ev","me","ct","initialize","initialPath","utBrowser","fetcher","setFilter","parentNode","showMenuFromEvent","initWidth","onNextClose","permaPath","setTextContent","resTypes","humanPath"],"mappings":"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","sourcesContent":["import {FORMS, IPendingValidity, MxFormElement, OFormElementInit} from \"lib/commons/forms\";\nimport {BaseElement, BaseElementAsync, OSkinableInit} from \"back/commons/basis\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {IDepotResUiEnv} from \"lib/store/depot\";\nimport {IResFormIdentCtx, JCidMetas, resPath} from \"lib/store/res\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {Button, OButtonInit} from \"back/commons/widgets/buttons\";\nimport {UtSelector} from \"back/store/dialogs/utSelector\";\nimport {UtBrowserFetcher} from \"back/store/views/utBrowser\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {JNodeShortProps, URLTREE} from \"lib/store/urlTree\";\nimport {ResIdentFieldSetArea} from \"back/store/areas/resViewAreas\";\nimport {AREAS} from \"lib/commons/areas\";\n\n\n/**\n * Widget racine d'édition des champs identificatoires avec contruction de deux champs\n * standard.\n */\nexport interface ResIdentFieldSet {\n\tinitialize(init: OResIdentFieldSetInit): this;\n}\n\nexport interface OResIdentFieldSetInit extends IResFormIdentCtx, OSkinableInit {\n\treg: IReg<IDepotResUiEnv>\n\tarea: ResIdentFieldSetArea\n}\n\nexport class ResIdentFieldSet extends MxFormElement(BaseElementAsync) implements IPendingValidity {\n\n\tconfig: OResIdentFieldSetInit;\n\n\tfolderInput?: ResParentPathInput;\n\tleafNameInput?: HTMLInputElement;\n\tanchor?: HTMLElement;\n\n\ttargetPath: resPath | undefined;\n\ttargetState: Promise<void> | 'exist' | 'free' | 'inTrash' | undefined;\n\n\tprotected async _initialize(init: OResIdentFieldSetInit) {\n\t\tthis.config = init;\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tinit.reg.installSkin(\"form-control-areas\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tif (!init.area.noFolderSelector && init.folderUi !== \"hidden\") {\n\t\t\tthis.folderInput = <ResParentPathInput id=\"folderInput\" î={{\n\t\t\t\treg: init.reg,\n\t\t\t\tfolderPath: init.folderPath,\n\t\t\t\tdisabled: init.folderUi === \"readOnly\"\n\t\t\t} as OResParentPathInputInit}/> as ResParentPathInput;\n\t\t\tthis.folderInput.addEventListener(\"change\", this.onInputChange);\n\t\t\tsr.appendChild(init.buildControlLabel ? AREAS.buildControlLabel(this.folderInput, \"folder\", \"Dossier\") : this.folderInput);\n\t\t}\n\n\t\tif (!init.area.noResNameField && init.leafUi !== \"hidden\") {\n\t\t\tconst readOnly = init.leafUi === \"readOnly\";\n\t\t\tthis.leafNameInput = <input id=\"nameInput\" type=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={init.leafName || \"\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={readOnly ? true : undefined}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired/> as HTMLInputElement;\n\t\t\tthis.leafNameInput.addEventListener(\"input\", this.onInputChange);\n\t\t\tsr.appendChild(init.buildControlLabel ? AREAS.buildControlLabel(this.leafNameInput, \"resName\", \"Nom\") : this.leafNameInput);\n\t\t\tthis.initDefaultCaretInputName();\n\t\t}\n\t\tthis.anchor = this.leafNameInput || this.folderInput;\n\t\tif (!this.anchor) this.tabIndex = -1;\n\n\t\tsr.appendChild(<slot/>);\n\n\t\tthis._initializeForm(init);\n\n\t\tif (init.area.customInputs) {\n\t\t\tthis.addEventListener(\"change\", this.refreshValidity);\n\t\t\tthis.addEventListener(\"input\", this.refreshValidity);\n\t\t\tconst wait: Promise<any>[] = [];\n\t\t\tfor (let area of init.area.customInputs) {\n\t\t\t\twait.push(area.loadBody(init));\n\t\t\t}\n\t\t\t(await Promise.all(wait)).forEach((elt) => this.appendChild(elt));\n\t\t}\n\t}\n\n\tprotected initDefaultCaretInputName() {\n\t\tif (!this.leafNameInput.disabled) {\n\t\t\tconst pos = this.leafNameInput.value.indexOf('.'); //On essaye de se placer avant le 1er '.'\n\t\t\tthis.leafNameInput.setSelectionRange(0, pos >= 0 ? pos : this.leafNameInput.value.length);\n\t\t}\n\t}\n\n\t/** Nom de la res issu du widget standard (si pas éliminé via init.area.noResNameField) */\n\tresName(): string | undefined {\n\t\treturn this.leafNameInput?.value || this.config.leafName;\n\t}\n\n\t/** resPath du dossier parent issu du widget standard (si pas éliminé via init.area.noFolderSelector) */\n\tfolderPath(): resPath | undefined {\n\t\treturn this.folderInput?.getParentPath() || this.config.folderPath;\n\t}\n\n\t/** Appelable par les widgets fils pour reconstruire le path (lors de fillJson() notamment). */\n\tbuildVersionedPath(version: string, resName?: string, folder?: resPath | null) {\n\t\treturn URLTREE.appendToPath(folder !== undefined ? folder : this.folderPath(), resName || this.resName()) + '@' + version;\n\t}\n\n\t/** Appelable par les widgets fils pour déclencher une éventuelle reeval de la dispo de la cible par le widget parent. */\n\tplanRevalid() {\n\t\tthis.setValidity(null);\n\t\tthis.addPendingValidity(this);\n\t\tthis.config.callback?.identState(\"pending\");\n\t}\n\n\textractJson(parent: JCidMetas): boolean {\n\t\tif (parent.path) {\n\t\t\tif (this.folderInput) {\n\t\t\t\tconst parentPath = URLTREE.extractParentPath(parent.path);\n\t\t\t\tif (parentPath != null) this.folderInput.setParentPath(parentPath);\n\t\t\t}\n\t\t\tif (this.leafNameInput) {\n\t\t\t\tconst leafName = URLTREE.extractUnversionedLeafName(parent.path);\n\t\t\t\tif (leafName != null) {\n\t\t\t\t\tthis.leafNameInput.value = leafName;\n\t\t\t\t\tthis.initDefaultCaretInputName();\n\t\t\t\t\tthis.refreshValidity();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFORMS.jsonToForm(parent, this);\n\t\treturn false;\n\t}\n\n\tfillJson(parent: JCidMetas, root: Jsonisable) {\n\t\t//Champs customs\n\t\tFORMS.formToJson(this, parent, root);\n\t\t//Construction du path\n\t\tif (this.config.area.pathBuilder) {\n\t\t\tthis.config.area.pathBuilder(parent, this);\n\t\t} else {\n\t\t\t//Note: si pas pathBuilder, les widgets standards sont obligatoires, pas de version.\n\t\t\tparent.path = URLTREE.appendToPath(this.folderPath(), this.resName());\n\t\t}\n\t}\n\n\tasync computeValidity(): Promise<any> {\n\t\tif (this.validity.badInput) return; //erreur synchrone\n\t\tif (await FORMS.checkAsyncValidity(this, true)) {\n\t\t\t//Les chamsp custom sont OK.\n\t\t\tif (this.validity.badInput) return; //racecond erreur synchrone\n\t\t\tconst meta: JCidMetas = {};\n\t\t\tthis.fillJson(meta, meta);\n\t\t\tthis.targetPath = meta.path;\n\t\t\tif (meta.path != null) {\n\t\t\t\t//console.log(\"computeValidity for:::\",this.targetPath);\n\t\t\t\tthis.targetState = this.config.reg.env.universe.adminUrlTree.nodeInfos(meta.path, \"&excludeAll&props=n*trashed\").then((ni) => {\n\t\t\t\t\tif (meta.path !== this.targetPath) return; //racecond\n\t\t\t\t\tif (this.validity.badInput) return; //racecond erreur synchrone\n\t\t\t\t\tthis.targetState = ni ? ni.trashed ? 'inTrash' : 'exist' : 'free';\n\t\t\t\t\t//console.log(\"this.targetState:::\", this.targetState, ni);\n\t\t\t\t\tswitch (this.targetState) {\n\t\t\t\t\tcase \"exist\":\n\t\t\t\t\t\tif (this.config.resUpdatable !== \"always\") {\n\t\t\t\t\t\t\tthis.setMsg(\"Un contenu existe déjà à cet emplacement, changez de dossier ou de nom.\", 'warning');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.setMsg(\"Un contenu existe à cet emplacement, il va être remplacé.\", 'info');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"inTrash\":\n\t\t\t\t\t\tif (this.config.resUpdatable === \"never\") {\n\t\t\t\t\t\t\tthis.setMsg(\"Un contenu existe déjà à cet emplacement (en état supprimé), changez de dossier ou de nom.\", 'warning');\n\t\t\t\t\t\t} else if (this.config.resUpdatable === \"ifInTrash\") {\n\t\t\t\t\t\t\tthis.setMsg(\"Un contenu en état supprimé existe à cet emplacement, il va être remplacé.\", 'info');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"free\":\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn this.targetState;\n\t\t\t} else {\n\t\t\t\t//Ne devrait jamais arriver...\n\t\t\t\tthis.targetState = undefined;\n\t\t\t\tthis.setMsg(\"Impossible de définir l'identité de la ressource\", 'error');\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected setMsg(msg: string, level: 'info' | 'warning' | 'error') {\n\t\t//customError = erreur Asynchrone\n\t\tif (level !== 'info') this.setValidity({customError: true}, msg, this.anchor);\n\t\tif (this.config.callback) {\n\t\t\tif (this.targetState instanceof Promise) {\n\t\t\t\tthis.config.callback.identState('pending');\n\t\t\t} else if (level === 'error' || this.targetState == null) {\n\t\t\t\tthis.config.callback.identState(\"invalid\", null, msg, level);\n\t\t\t} else {\n\t\t\t\tthis.config.callback.identState(this.targetState, this.targetPath, msg, level);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _refresh() {\n\t\tsuper._refresh();\n\t\tthis.refreshValidity();\n\t}\n\n\tonInputChange(this: HTMLElement) {\n\t\tDOMSH.findHost<ResIdentFieldSet>(this).refreshValidity();\n\t}\n\n\trefreshValidity() {\n\t\tif (this.leafNameInput) {\n\t\t\tconst st = URLTREE.isValidResName(this.leafNameInput.value);\n\t\t\tif (st === true) {\n\t\t\t\tthis.planRevalid();\n\t\t\t} else {\n\t\t\t\t//badInput = erreur synchrone\n\t\t\t\tthis.setValidity({badInput: true}, st, this.leafNameInput);\n\t\t\t\tthis.config.callback?.identState(\"invalid\", null, st, 'warning');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.planRevalid();\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('store-res-ident-fieldset', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: fit-content;\n\t\tflex-direction: column;\n\t}\n\n\t:host(:focus) {\n\t\toutline: none !important;\n\t}\n\n  :focus-visible {\n\t\toutline: var(--focus-outline);\n\t}\n\n\t#folderInput {\n\t\tmargin-bottom: .5em;\n\t}\n\n\t#nameInput:disabled {\n\t\tbackground-color: transparent;\n\t\tborder: none;\n\t}\n\n`);\n\ncustomElements.define('store-res-ident-fieldset', ResIdentFieldSet);\n\n\n// /**\n//  *\n//  */\n// export interface ResNameInput {\n// \tinitialize(init: OResNameInputInit): this;\n// }\n//\n// export interface OResNameInputInit extends OFormElementInit {\n//\n// \treg?: IReg<IDepotResUiEnv>\n//\n// \t/** Nom de la res à utiliser avec son extension. */\n// \tleafName?: string\n//\n// \t/** Si une res avec le path cible existe déjà dans le dépot, autorise-t-on sa modif. Valeur par défaut : never */\n// \tresUpdatable?: 'always' | 'ifInTrash' | 'never'\n// }\n//\n// export class ResNameInput extends MxFormElement(BaseElement) {\n//\n// \tprotected _initialize(init: OResNameInputInit) {\n// \t\tthis._attach(this.localName, init,\n// \t\t\t<input type=\"text\" value={init.leafName || \"\"}/>\n// \t\t);\n// \t\tthis._initializeForm(init);\n// \t}\n// }\n//\n// // REG.reg.registerSkin('store-res-name-input', 1, /* language=CSS */ `\n// // \t:host {\n// // \t\tflex: 1;\n// // \t\tdisplay: flex;\n// // \t\tmin-width: 0;\n// // \t\tmin-height: 0;\n// // \t\tflex-direction: column;\n// // \t}\n// // `);\n//\n// customElements.define('store-res-name-input', ResNameInput);\n\n\n/**\n *\n */\nexport interface ResParentPathInput {\n\tinitialize(init: OResParentPathInputInit): this;\n}\n\nexport interface OResParentPathInputInit extends OFormElementInit {\n\n\treg?: IReg<IDepotResUiEnv>\n\n\t/**\n\t * Path du dossier parent de la res.\n\t */\n\tfolderPath?: resPath\n}\n\nexport class ResParentPathInput extends MxFormElement(BaseElement) {\n\n\treg: IReg<IDepotResUiEnv>;\n\n\tprotected _parentPath: resPath;\n\n\tpathField: HTMLElement;\n\tpathBtn: Button;\n\n\tprotected _initialize(init: OResParentPathInputInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tthis._parentPath = init.folderPath || \"\";\n\t\tthis.pathField = <span id=\"folder\"/>;\n\t\tthis.pathBtn = <Button id=\"folderBtn\" î={{\n\t\t\treg: this.reg,\n\t\t\tlabel: \"...\",\n\t\t\ttitle: \"Sélectionner un dossier...\",\n\t\t\tuiContext: \"dialog\",\n\t\t} as OButtonInit} onclick={this.onClickSel}/> as Button;\n\t\tthis._attach(this.localName, init, this.pathField, this.pathBtn);\n\t\tthis._initializeForm(init);\n\t}\n\n\tgetParentPath(): resPath {\n\t\treturn this._parentPath || URLTREE.DEFAULT_PATH_ROOT;\n\t}\n\n\tsetParentPath(path: resPath) {\n\t\tif (this._parentPath !== path && this.dispatchEvent(new CustomEvent(\"change\", {cancelable: true, bubbles: true}))) {\n\t\t\tthis._parentPath = path;\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\tasync onClickSel(this: Button, ev: Event) {\n\t\tif (this.disabled) return;\n\t\tconst me = DOMSH.findHost<ResParentPathInput>(this);\n\t\tconst ct = new UtSelector().initialize({\n\t\t\treg: me.reg,\n\t\t\tinitialPath: me._parentPath,\n\t\t\tutBrowser: {\n\t\t\t\tfetcher: new UtBrowserFetcher(me.reg.env.universe.adminUrlTree).setFilter(\"isFolder\"),\n\t\t\t}\n\t\t});\n\t\tconst parentNode = await POPUP.showMenuFromEvent<JNodeShortProps>(ct, ev, me, null, {initWidth: '25em'}).onNextClose();\n\t\tif (parentNode) me.setParentPath(parentNode.permaPath);\n\t}\n\n\tprotected _refresh() {\n\t\tsuper._refresh();\n\t\tDOM.setTextContent(this.pathField, this.reg.env.resTypes.humanPath(this._parentPath));\n\t\tthis.pathBtn.disabled = this.disabled;\n\t}\n}\n\nREG.reg.registerSkin('store-res-parentpath-input', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t}\n\n\t#folder {\n\t\tflex: 1;\n\t}\n\n\t#folderBtn {\n\t\tmargin: 0;\n\t}\n`);\n\ncustomElements.define('store-res-parentpath-input', ResParentPathInput);"]}