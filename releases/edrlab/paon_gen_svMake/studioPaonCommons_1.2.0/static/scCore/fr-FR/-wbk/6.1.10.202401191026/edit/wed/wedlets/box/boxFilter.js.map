{"version":3,"sources":["/@back@/edit/wed/wedlets/box/boxFilter.ts"],"names":["WED","BOX_NS","BoxModel","BoxWedlet","EWedletEditMode","WEDLET","DOM","JML","XA","BoxFilterModel","[object Object]","cnf","super","initModel","this","wedletClass","BoxFilterWedlet","entryName","getAttributeNS","dict","findNext","e","Element","v","getAttribute","push","registerWedletModel","values","root","createElement","editMode","write","element","addEventListener","ev","input","composedPath","val","xa","freeze","wedAnchor","checked","batch","wedMgr","docHolder","newBatch","jml","","model","isVirtual","insertDatasFromDisplay","insertJml","append","length","doBatch","offset","indexOf","xaAnc","wedParent","onChildEmptied","subXa","last","xaPart","deleteSequence","newRangeAround","lastOffset","lastIndexOf","classList","toggle","wasReal","bindAsVirtual","shadowRoot","hasAttribute","index","node","children","insertBefore","redrawFull","jmlNode2name","splice","xInsertChildWedlet","xaOffest","count","i","deleteChildNodes","customAdjust","emit","isEmpty","old","refreshEditMode","setDisabled","disabled","HTMLInputElement","annot","xaTarget","_a","diffLib","isDiffAnnot","diffSession","getDiffSession","type","setDiff","anchorNode","textContent","otherValue","foreignNode","diffFilters","SetClassFromFilters","xpath","nsMap","prefixClass","upTo","XPathEvaluator","createExpression","classes","map","wedlet","parent","slotName","caller","document","res","result","evaluate","content","XPathResult","ORDERED_NODE_ITERATOR_TYPE","excludes","Set","n","iterateNext","add","target","parentElement","has","prefix"],"mappings":"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","sourcesContent":["import {IWedChildrenElt, WED} from \"back/edit/wed/wedCore\";\nimport {BOX_NS, BoxFreeDomWedlet, BoxModel, BoxWedlet, IBoxFreeDomDrawer} from \"back/edit/wed/wedlets/box/box\";\nimport {EWedletEditMode, ISkAnnotListener, WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {DOM} from \"lib/commons/xml/dom\";\nimport {IJmlNode, IJmlSubSet, JML} from \"lib/commons/xml/jml\";\nimport {IXAddr, XA} from \"lib/commons/xml/xAddr\";\nimport {ISkAnnot} from \"lib/edit/schema/schemaAnnots\";\nimport {IDiffAnnotForeign, IDiffAnnotMark, IDiffAnnotValue} from \"lib/edit/schema/diff\";\n\n/**\n * Les valeurs du filtre sont définies par tous les éléments descendant du bind possédant un attribut 'value'.\n * Chacun de ces éléments doivent réagir à une affectation booléenne d'une propriété 'checked',\n * comme un tag input de type checkbox.\n *\n * <wed:bind eltName=\"x:filter\" wedlet=\"BoxFilter\" label=\"\" box:entryName=\"sp:exclude\" >\n *  <box-static class=\"h\">\n *    <style>...</style>\n *    <input type=\"checkbox\" value=\"standard\" title=\"\"/>\n *    <input type=\"checkbox\" value=\"short\" title=\"\"/>\n *    <wed:children/> <!-- pour les struct inconnues -->\n *  </box-static>\n * </wed:bind>\n */\nclass BoxFilterModel extends BoxModel {\n\tentryName: string;\n\tdict: string[];\n\n\tinitModel(cnf: Element) {\n\t\tsuper.initModel(cnf);\n\t\tthis.wedletClass = BoxFilterWedlet;\n\t\tthis.entryName = cnf.getAttributeNS(BOX_NS, 'entryName');\n\t\t//Construction de la liste des valeurs connues.\n\t\tthis.dict = [];\n\t\tDOM.findNext(cnf, cnf, (e: Node): e is Node => {\n\t\t\tif (e instanceof Element) {\n\t\t\t\tconst v = e.getAttribute('value');\n\t\t\t\tif (v) this.dict.push(v);\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n}\n\nWED.registerWedletModel(\"BoxFilter\", BoxFilterModel);\n\nclass BoxFilterWedlet extends BoxWedlet implements ISkAnnotListener {\n\n\tmodel: BoxFilterModel;\n\n\tvalues: string[] = [];\n\n\tprotected createElement(root: Element) {\n\t\tsuper.createElement(root);\n\t\tthis.editMode = EWedletEditMode.write; //pour init correct ensuite dans refreshEditMode()\n\t\tthis.element.addEventListener('click', (ev: MouseEvent) => {\n\t\t\tconst input = ev.composedPath()[0] as HTMLInputElement;\n\t\t\tconst val = input.getAttribute('value');\n\t\t\tif (!val) return;\n\t\t\tconst xa = XA.freeze(this.wedAnchor);\n\t\t\tif (input.checked) {\n\t\t\t\t//on ajoute\n\t\t\t\tconst batch = this.wedMgr.docHolder.newBatch();//(XA.newRangeAround(xa));\n\t\t\t\tconst jml = [{'': this.model.entryName}, [val]];\n\t\t\t\tif (this.isVirtual()) {\n\t\t\t\t\tWEDLET.insertDatasFromDisplay(this, batch, jml);\n\t\t\t\t} else {\n\t\t\t\t\tbatch.insertJml(XA.append(xa, this.values.length), jml);\n\t\t\t\t}\n\t\t\t\tbatch.doBatch();\n\t\t\t} else {\n\t\t\t\t//on supprime\n\t\t\t\tconst offset = this.values.indexOf(val);\n\t\t\t\tif (offset >= 0) {\n\t\t\t\t\tconst xaAnc = this.values.length === 1 ? this.wedParent.onChildEmptied((subXa: IXAddr) => XA.last(subXa) === this.xaPart) : null;\n\t\t\t\t\tif (xaAnc) {\n\t\t\t\t\t\t//dernier élément du filtre supprimé, on élimine un ancêtre.\n\t\t\t\t\t\tthis.wedMgr.docHolder.newBatch().deleteSequence(xaAnc, 1).doBatch();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst batch = this.wedMgr.docHolder.newBatch(XA.newRangeAround(xa));\n\t\t\t\t\t\tlet lastOffset = this.values.lastIndexOf(val);\n\t\t\t\t\t\twhile (lastOffset > offset) {\n\t\t\t\t\t\t\t//Au cas où le contenu XML est en erreur avec plusieurs fois la même valeur.\n\t\t\t\t\t\t\tbatch.deleteSequence(XA.append(xa, lastOffset), 1);\n\t\t\t\t\t\t\tlastOffset = this.values.lastIndexOf(val, lastOffset - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbatch.deleteSequence(XA.append(xa, offset), 1);\n\t\t\t\t\t\tbatch.doBatch();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tinput.classList.toggle(\"diff\", false); //clean diff\n\t\t});\n\t}\n\n\tbindAsVirtual() {\n\t\tconst wasReal = !this.isVirtual();\n\t\tsuper.bindAsVirtual();\n\t\tif (wasReal) {\n\t\t\t//reset.\n\t\t\tthis.values.length = 0;\n\t\t\tconst root = this.element.shadowRoot;\n\t\t\tDOM.findNext(root, root, (e: Node): e is Node => {\n\t\t\t\tif (e instanceof Element && e.hasAttribute('value')) (e as HTMLInputElement).checked = false;\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected xInsertChildWedlet(index: number, node: IJmlNode | number, children: IJmlSubSet, insertBefore?: Element): void | Promise<void> {\n\t\tif (typeof node === 'number' || (children && typeof children[0] === 'number')) {//subset\n\t\t\tthis.redrawFull();\n\t\t} else {\n\t\t\tconst val = children && children[0];\n\t\t\tif (JML.jmlNode2name(node) === this.model.entryName && typeof val === 'string' && this.model.dict.indexOf(val) >= 0) {\n\t\t\t\tthis.values.splice(index, 0, val);\n\t\t\t\tconst root = this.element.shadowRoot;\n\t\t\t\tDOM.findNext(root, root, (e: Node): e is Node => {\n\t\t\t\t\tif (e instanceof Element && e.getAttribute('value') === val) {\n\t\t\t\t\t\t(e as HTMLInputElement).checked = true;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//noeud non reconnu, insertion standard (affichage erreur)\n\t\t\t\tthis.values.splice(index, 0, null);\n\t\t\t\tsuper.xInsertChildWedlet(index, node, children, insertBefore);\n\t\t\t}\n\t\t}\n\t}\n\n\tdeleteChildNodes(xaOffest: number, count: number) {\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst val = this.values[xaOffest];\n\t\t\tthis.values.splice(xaOffest, 1);\n\t\t\tif (val != null) {\n\t\t\t\t//suppr struct reconnue\n\t\t\t\tconst root = this.element.shadowRoot;\n\t\t\t\tDOM.findNext(root, root, (e: Node): e is Node => {\n\t\t\t\t\tif (e instanceof Element && e.getAttribute('value') === val) {\n\t\t\t\t\t\t(e as HTMLInputElement).checked = false;\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//suppr struct inconnue\n\t\t\t\tsuper.deleteChildNodes(xaOffest, 1);\n\t\t\t}\n\t\t}\n\t\tif (this.customAdjust) this.customAdjust.emit(this);\n\t}\n\n\tisEmpty() {\n\t\treturn this.values.length === 0 && super.isEmpty(); //super.isEmpty() en cas d'attribut inocnnu par ex.\n\t}\n\n\trefreshEditMode() {\n\t\tconst old = this.editMode;\n\t\tsuper.refreshEditMode();\n\t\tif (old === this.editMode) return;\n\t\tthis.setDisabled(this.editMode !== EWedletEditMode.write);\n\t}\n\n\tsetDisabled(disabled: boolean) {\n\t\tconst root = this.element.shadowRoot;\n\t\tDOM.findNext(root, root, (e: Node): e is Node => {\n\t\t\tif (e instanceof HTMLInputElement) e.disabled = disabled;\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tonAddedSkAnnot(annot: ISkAnnot, xaTarget: IXAddr): void {\n\t\t//console.log(\":::onAddedSkAnnot:::\", annot);\n\t\tif (WEDLET.diffLib?.isDiffAnnot(annot) && annot.diffSession === this.wedMgr.docHolder.getDiffSession()) {\n\t\t\tif (annot.type === \"diffValue\") {\n\t\t\t\tthis.setDiff((annot as IDiffAnnotValue).anchorNode.textContent);\n\t\t\t\tthis.setDiff((annot as IDiffAnnotValue).otherValue);\n\t\t\t} else if (annot.type === \"diffMark\") {\n\t\t\t\tthis.setDiff((annot as IDiffAnnotMark).anchorNode.textContent);\n\t\t\t} else if (annot.type === \"diffForeign\") {\n\t\t\t\tthis.setDiff((annot as IDiffAnnotForeign).foreignNode.textContent);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRemovedSkAnnot(annot: ISkAnnot, xaTarget: IXAddr): void {\n\t\t//console.log(\":::onRemovedSkAnnot:::\",annot);\n\t\tif (WEDLET.diffLib?.isDiffAnnot(annot) && annot.diffSession === this.wedMgr.docHolder.getDiffSession()) {\n\t\t\tif (this.diffFilters) {\n\t\t\t\tconst root = this.element.shadowRoot;\n\t\t\t\tDOM.findNext(root, root, (e: Node): e is Node => {\n\t\t\t\t\tif (e instanceof Element && e.hasAttribute('value')) e.classList.toggle(\"diff\", false);\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t\tthis.diffFilters = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected diffFilters: string[];\n\n\tsetDiff(val: string) {\n\t\tconst root = this.element.shadowRoot;\n\t\tDOM.findNext(root, root, (e: Node): e is Node => {\n\t\t\tif (e instanceof Element && e.getAttribute('value') === val) {\n\t\t\t\te.classList.toggle(\"diff\", true);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\t(this.diffFilters || (this.diffFilters = [])).push(val);\n\t}\n\n\tfocusSkAnnot(annot: ISkAnnot): boolean {\n\t\treturn false;\n\t}\n}\n\n\n/**\n * Drawer pour le BoxFreeDom wedlet à utiliser en preview sur les binds du modèle filter.\n * Affecte des classes à un container ancêtre de filter.\n */\nexport class SetClassFromFilters implements IBoxFreeDomDrawer {\n\n\tpublic xpath: XPathExpression;\n\tpublic result: XPathResult;\n\tpublic classes: string[];\n\n\tconstructor(xpath: string, public nsMap: Dict<string>, public prefixClass: string, public values: string[], public upTo: number) {\n\t\tthis.xpath = new XPathEvaluator().createExpression(xpath, this);\n\t\tthis.classes = values.map((v) => prefixClass + v);\n\t}\n\n\tcreateElement(wedlet: BoxFreeDomWedlet, parent: Element, insertBefore?: Node, slotName?: string, caller?: IWedChildrenElt): HTMLElement {\n\t\treturn document.createElement(\"x-filter\");\n\t}\n\n\trefreshContent(wedlet: BoxFreeDomWedlet): void {\n\t\tconst res = this.result = this.xpath.evaluate(wedlet.content, XPathResult.ORDERED_NODE_ITERATOR_TYPE, this.result);\n\n\t\tconst excludes = new Set<string>();\n\t\tfor (let n = res.iterateNext(); n; n = res.iterateNext()) excludes.add(n.textContent);\n\t\t//console.log(\"refreshContent::::\", excludes);\n\n\t\tlet target = wedlet.element as HTMLElement;\n\t\tfor (let i = 0; i < this.upTo; i++) target = target.parentElement;\n\n\t\tfor (let i = 0; i < this.classes.length; i++) target.classList.toggle(this.classes[i], excludes.has(this.values[i]));\n\t}\n\n\tonDelete(wedlet: BoxFreeDomWedlet): void {\n\t\tlet target = wedlet.element as HTMLElement;\n\t\tfor (let i = 0; i < this.upTo; i++) target = target.parentElement;\n\t\tfor (let i = 0; i < this.classes.length; i++) target.classList.toggle(this.classes[i], false);\n\t\t//console.log(\"onDelete::::\", wedlet);\n\t}\n\n\tlookupNamespaceURI(prefix: string): string {\n\t\treturn this.nsMap[prefix];\n\t}\n}\n"]}