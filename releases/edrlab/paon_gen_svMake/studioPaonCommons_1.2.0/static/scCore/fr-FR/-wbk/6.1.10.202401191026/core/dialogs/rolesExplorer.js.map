{"version":3,"sources":["/@back@/core/dialogs/rolesExplorer.tsx"],"names":["Box","MsgOver","REG","DOM","JSX","ShadowJsx","DOMSH","GridColDef","AccelKeyMgr","ACTION","Action","ActionWrapper","CellBuilderFlagIcon","CellBuilderIconLabel","BaseAreaViewAsync","GridColTreeDef","GridDataHolderJsonTree","Grid","BarActions","Tabs","ROLES","InputUserPanel","LANG","UserRef","ActionBtn","RolesExplorer","[object Object]","init","this","reg","createSubReg","findReg","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","areas","mergeLists","filter","entry","isVisible","areasContext","length","views","appendChild","createElement","id","Ã®","skinOver","loadBody","customElements","define","registerSkin","RolesExplorerTabBase","params","usersSrv","env","universe","adminUsers","installSkin","contentElt","c-resizable","gridContentElt","headElt","filterFormElt","filterTxt","type","name","spellcheck","autocomplete","placeholder","filterTxtPlaceholder","oninput","onApplyFilter","onkeydown","onKeyPress","focus","filterAccounts","initialize","Object","assign","emptySelectionMsg","userCard","usersGridInit","filterType","filterTypeInputVisibility","normalizeList","array","filterTxtRegExp","_a","_lastUnknownUsers","forEach","unknownUser","account","match","find","push","sort","a","b","localeCompare","filterAccountsInputInit","initializedAsync","addClass","addEventListener","async","evt","call","title","razFilterBtn","buildButton","actionRazFilters","actionContext","addToList","actionRefreshUi","toolbarsBox","toolbarTop","actions","injectSepByGroup","getPref","uiContext","disableFullOverlay","setAttribute","dataHolder","accelKeyMgr","initFromMapActions","mergeListsAsMap","grid","gridInit","selType","hideHeaders","columnDefs","colsDefBase","skinScroll","lineDrawer","autoSelOnFocus","hideSortBtns","noResizableCol","emptyBody","ev","refreshContent","showDetails","getSelectedDatas","uiEvents","on","row","rowDatas","value","refreshUi","MutationObserver","entries","attributeName","observe","attributes","_detailsBoxElt","hidden","razFilters","refresh","rolesExplorer","refreshFreeze","super","_refresh","withFetchDatas","selectedRows","_lastFetchDatas","setCustomMsg","showMsgOver","waitFor","doFetchDatas","freeze","Set","roles","findRolesIn","level","denied","role","add","_b","allowed","userUnknown","isUnknown","ch","setDatas","updateRolesColsDef","filterTxtPattern","RegExp","escape4RegexpFuzzy","filterAccountsExtended","users","getUserMap","flattenedGroups","grp","disabledRoles","_c","getAttribute","split","filterRolesWhiteList","col","GridColDefRole","indexOf","roleDef","shadowRoot","querySelectorAll","elt","setAttrBool","vWithFilter","size","classList","toggle","filteredDatas","filterTreeDataHolderChiltren","JSON","parse","stringify","setDefaultOpenState","defaultOpened","selectTreeByDatas","removeAttribute","isFiltered","contains","treeDataEntries","ensureRowVisible","i","c","countRows","getRow","uid","setSelectedRows","clearSel","Promise","all","UI_ROLES_LIST","roleUiHandler","whiteListLevelsUid","white","startsWith","setFlex","setMinWidth","setLabel","setCellBuilder","CellBuilderMainRoleLevelEntry","usedRoles","colsDef","roleUiCtx","rolesUiHandlers","resultRoles","resolveRolesList","Array","from","roleUi","roleCode","key","tree","findHost","getSelectedRow","undefined","me","_applyFilterWaiter","clearTimeout","setTimeout","filterTxtPatternMatch","test","structLevel","has","_d","line","setAttr","setHidden","innerHTML","result","buildRowDetails","setDescription","CellBuilderRole","setMaxWidth","root","gridDisabledRoles","headerDiv","parentElement","childNodes","cell","forcedDisabled","forcedDisabledOnOtherCols","cellNewSateIsDisabled","isFlagDisabledCol","delete","join","rootHeader","roleGrp","extractGroupFromRole","grpDef","findGroupDef","label","grpElt","class","color","style","backgroundColor","btn","getLabel","ui-context","onclick","ctrlKey","setFlagDisabledCol","hasOtherFlagDisabledCol","stopPropagation","redrawCell","isRolesUiHandlerUsable","isRolesUiHandlerUsableFor","dataKey","iconWidth","span","firstElementChild","userRef","nextElementSibling","withIcon","nickOrAccount","getData","setGroup","setIcon","setEnabled","ctx","setExecute","ActionWrapperRefresRolesExplorer","isEnabled","execute"],"mappings":"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","sourcesContent":["import {Box, MsgOver, OSkinableInit} from \"back/commons/basis\";\nimport {IReg, IRegPointer, IUiEnv, REG} from \"lib/commons/registry\";\nimport {DOM, JSX, ShadowJsx} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {GridCol, GridColDef, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {ICoreUniverseEnv} from \"lib/core/universe\";\nimport {JUser, UsersSrv} from \"lib/core/user\";\nimport {AccelKeyMgr, ACTION, Action, ActionWrapper, IAction} from \"lib/commons/actions\";\nimport {CellBuilderFlagIcon, CellBuilderIconLabel, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {BaseAreaViewAsync, IView} from \"lib/commons/views\";\nimport \"back/core/dialogs/dialogs_Perms\";\nimport {GridColTreeDef, GridDataHolderJsonTree} from \"back/commons/widgets/tree\";\nimport {Grid, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {IContextMenuActionsPointer} from \"back/commons/actionables\";\nimport {BarActions, OBarActionsInit} from \"back/commons/widgets/bars\";\nimport {OTabsInit, Tabs} from \"back/commons/widgets/tabs\";\nimport {IArea} from \"lib/commons/areas\";\nimport {IRoleEditUiHandlerContext, RoleEditUiHandler, ROLES} from \"lib/commons/roles\";\nimport {InputUserPanel, OInputUserInit} from \"back/core/widgets/inputs\";\nimport {LANG} from \"lib/commons/lang\";\nimport {OUserRefInit, UserRef} from \"back/core/widgets/userRef\";\nimport {ActionBtn, Button} from \"back/commons/widgets/buttons\";\n\n\nexport interface RoleUiHandlerContextUsed {\n\twhiteListLevelsUid?: string[];\n}\n\nexport interface ORolesExplorerInit extends OSkinableInit {\n\treg: IReg<ICoreUniverseEnv>\n\tgridInit?: OGridSmallInit\n\tuiContext?: \"popup\" | undefined\n}\n\nexport class RolesExplorer<E extends IRegPointer<ICoreUniverseEnv & IUiEnv>> extends BaseAreaViewAsync<E> implements IRegPointer<ICoreUniverseEnv & IUiEnv> {\n\treg: IReg<ICoreUniverseEnv & IUiEnv>;\n\n\tprotected views: IView;\n\n\tprotected async _initialize(init: ORolesExplorerInit): Promise<void> {\n\t\tif (!this.reg) this.reg = REG.createSubReg(this.findReg(init));\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tconst areas = (this.reg.mergeLists(\"rolesExplorer:tabs\") as IArea<IRegPointer<ICoreUniverseEnv & IUiEnv>>[]).filter(entry => {return entry.isVisible(this)});\n\t\tconst areasContext = {reg: this.reg};\n\n\t\tif (areas.length > 1) {\n\t\t\tthis.views = sr.appendChild(<Tabs id=\"tabs\" Ã®={{\n\t\t\t\treg: this.reg,\n\t\t\t\tareasContext: areasContext,\n\t\t\t\tareas,\n\t\t\t\tskinOver: \"rolesExplorer/tabs\"\n\t\t\t} as OTabsInit<E>}/>) as Tabs<E>;\n\t\t} else\n\t\t\tthis.views = sr.appendChild(await areas[0].loadBody(areasContext));\n\n\t}\n}\n\ncustomElements.define(\"c-rolesexplorer\", RolesExplorer);\n\nREG.reg.registerSkin('c-rolesexplorer', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tflex-direction: column;\n\t\toverflow: hidden;\n\t}\n\n\tc-tabs {\n\t\tflex: 1;\n\t}\n`);\n\nexport interface JRoleExpEntry {\n\t/** Identifiant unique du StructLevel (fullUri, ...) */\n\tuid: string\n}\n\nexport interface JRoleExpEntrySetAccount extends JRoleExpEntry {\n\taccount: string\n\tallowed?: string[]\n\tdenied?: string[]\n\tuserUnknown?: true | undefined\n}\n\nexport interface JRoleExpEntryStructLevel<R extends JRoleExpEntryStructLevel<R> | JRoleExpEntrySetAccount> extends JRoleExpEntry {\n\tstructLevel: 'roles' | string\n\ttitle: string\n\tch?: R[]\n}\n\n\n/**\n * Contexte des actions associÃ©es Ã  une affectation de rÃ´les {user,entry}\n */\nexport interface IUsersRolesActionCtx<E extends IRegPointer<ICoreUniverseEnv & IUiEnv>, R extends (JRoleExpEntryStructLevel<R> | JRoleExpEntrySetAccount), CTX extends IUsersRolesActionCtx<E, R, CTX>> extends IRegPointer<ICoreUniverseEnv> {\n\trolesExplorer: RolesExplorerTabBase<E, R, CTX>\n}\n\nexport interface ORolesExplorerTabInit extends OSkinableInit {\n\treg: IReg<ICoreUniverseEnv>\n\tgridInit?: OGridSmallInit\n\tuiContext?: \"popup\" | undefined\n\t/** Filtre TXT : valeur de recherche initiale */\n\tfilterTxt?: string\n\tfilterTxtPlaceholder?: string\n\t/** Filtre account : valeur de recherche initiale */\n\tfilterAccounts?: string[]\n\tfilterAccountsInputInit: OInputUserInit<any>\n}\n\nexport abstract class RolesExplorerTabBase<E extends IRegPointer<ICoreUniverseEnv & IUiEnv>, R extends (JRoleExpEntryStructLevel<R> | JRoleExpEntrySetAccount), CTX extends IUsersRolesActionCtx<E, R, CTX>> extends BaseAreaViewAsync<E> implements IGridLineDrawer {\n\treg: IReg<ICoreUniverseEnv & IUiEnv>;\n\n\tprotected params: ORolesExplorerTabInit;\n\n\t// Filtres\n\tprotected filterTxt: HTMLInputElement;\n\n\tprotected filterAccounts: InputUserPanel<any>;\n\n\tprotected usersSrv: UsersSrv;\n\n\tdataHolder: GridDataHolderJsonTree<R>;\n\n\tprotected toolbarTop: BarActions<CTX>;\n\n\tgrid: Grid & IContextMenuActionsPointer<E>;\n\n\tprotected _detailsBoxElt: HTMLDivElement;\n\n\tprotected filterFormElt: HTMLFormElement;\n\n\tprotected razFilterBtn: ActionBtn<IUsersRolesActionCtx<E, R, CTX>>;\n\n\tprotected async _initialize(init: ORolesExplorerTabInit): Promise<void> {\n\t\tthis.params = init;\n\t\tif (!this.reg) this.reg = REG.createSubReg(this.findReg(init));\n\t\tthis.usersSrv = this.reg.env.universe.adminUsers;\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin(\"webzone:panel\", sr);\n\t\tthis.reg.installSkin(\"form-control-areas\", sr);\n\t\tthis.reg.installSkin(\"rolesexplorer-core\", sr);\n\t\tthis.reg.installSkin(\"c-rolesexplorer-core-widgets\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tlet contentElt = sr.appendChild(<div id=\"content\" c-resizable/>) as HTMLDivElement;\n\n\t\tlet gridContentElt = contentElt.appendChild(<div id=\"gridContent\"/>) as HTMLDivElement;\n\n\t\t// - Filtres\n\t\tlet headElt = gridContentElt.appendChild(<div id=\"head\"/>) as HTMLDivElement;\n\t\tthis.filterFormElt = headElt.appendChild(<form id=\"filter\">\n\t\t</form>) as HTMLFormElement;\n\n\t\tthis.filterTxt = this.filterFormElt.appendChild(<input type=\"search\" id=\"filterTxt\" name=\"filterTxt\" spellcheck=\"false\" autocomplete=\"off\" placeholder={this.params.filterTxtPlaceholder || \"Filtrer...\"} oninput={this.onApplyFilter}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t onkeydown={this.onKeyPress}/>) as HTMLInputElement;\n\t\tthis.filterTxt.focus();\n\n\t\tthis.filterAccounts = this.filterFormElt.appendChild(new InputUserPanel().initialize(Object.assign({\n\t\t\tname: \"filterAccounts\",\n\t\t\treg: this.reg,\n\t\t\temptySelectionMsg: \"Utilisateurs/groupes...\",\n\t\t\tuserCard: \"single\",\n\t\t\tusersGridInit: {\n\t\t\t\tusersSrv: this.usersSrv,\n\t\t\t\tfilterType: null,\n\t\t\t\tfilterTypeInputVisibility: true,\n\t\t\t\tnormalizeList: (array, filterTxtRegExp) => {\n\t\t\t\t\tthis._lastUnknownUsers?.forEach(unknownUser => {\n\t\t\t\t\t\tif ((!filterTxtRegExp || unknownUser.account.match(filterTxtRegExp)) && !array.find(entry => entry.account === unknownUser.account))\n\t\t\t\t\t\t\tarray.push(unknownUser);\n\t\t\t\t\t\tarray.sort((a, b) => a.account.localeCompare(b.account));\n\t\t\t\t\t});\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\t\t\t},\n\t\t} as OInputUserInit<E>, this.params.filterAccountsInputInit))) as InputUserPanel<E>;\n\t\tawait this.filterAccounts.initializedAsync;\n\t\tDOM.addClass(this.filterAccounts, \"formElt\");\n\t\tthis.filterAccounts.addEventListener(\"change\", async (evt) => {\n\t\t\tthis.onApplyFilter.call(this.filterAccounts, evt);\n\t\t});\n\t\tthis.filterAccounts.title = \"Filtre utilisateurs/groupes\";\n\n\t\tthis.razFilterBtn = this.filterFormElt.appendChild(ActionBtn.buildButton(actionRazFilters, this.actionContext, \"bar\")) as ActionBtn<IUsersRolesActionCtx<E, R, CTX>>;\n\n\t\t// - Toolbar\n\t\tthis.reg.addToList(\"actions:rolesexplorer:show:toolbar:top\", \"actionRefreshUi\", 1, actionRefreshUi);\n\n\t\tlet toolbarsBox = contentElt.appendChild(<div id=\"toolbarsBox\"/>);\n\t\tthis.toolbarTop = toolbarsBox.appendChild(new BarActions<CTX>().initialize({\n\t\t\treg: this.reg,\n\t\t\tactions: ACTION.injectSepByGroup(\n\t\t\t\tthis.reg.mergeLists(\"actions:rolesexplorer\", \"actions:rolesexplorer:show:toolbar:top\", \"actions:rolesexplorer:show:toolbar:top:\" + this.id, \"actions:rolesexplorer:\" + this.id),\n\t\t\t\tthis.reg.getPref(\"actions.rolesexplorer.groupOrder\", \"refresh *\"), this.actionContext) as IAction<CTX>[],\n\t\t\tuiContext: \"bar\",\n\t\t\tactionContext: this.actionContext,\n\t\t\tdisableFullOverlay: true,\n\t\t} as OBarActionsInit<CTX>)) as BarActions<CTX>;\n\t\tthis.toolbarTop.setAttribute(\"class\", \"showToolbarTop\");\n\n\t\t// - Tree\n\t\tthis.dataHolder = new GridDataHolderJsonTree<R>('ch');\n\n\t\tlet accelKeyMgr = new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:rolesexplorer\", \"accelkeys:rolesexplorer:\" + this.id));\n\t\taccelKeyMgr.initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:rolesexplorer\", \"accelkeys:rolesexplorer:\" + this.id));\n\n\t\tthis.grid = gridContentElt.appendChild(new Grid().initialize(Object.assign(init.gridInit || {}, {\n\t\t\tselType: \"mono\",\n\t\t\thideHeaders: false,\n\t\t\tcolumnDefs: this.colsDefBase(),\n\t\t\tskinOver: `rolesexplorer-core-tree c-rolesexplorer-core-widgets ${this.localName}-tree`,\n\t\t\tskinScroll: \"scroll/small\",\n\t\t\tlineDrawer: this,\n\t\t\tautoSelOnFocus: 'first',\n\t\t\tdataHolder: this.dataHolder,\n\t\t\thideSortBtns: true,\n\t\t\tnoResizableCol: true,\n\t\t\temptyBody: () => <c-msg>Tous les rÃ´les affectÃ©s ont Ã©tÃ© filtrÃ©s</c-msg>,\n\t\t\t//defaultAction: init.defaultAction,\n\t\t\t//defaultActionCtx: this,\n\t\t} as OGridSmallInit)));\n\n\t\tthis.grid.addEventListener('grid-select', async (ev: Event) => {\n\t\t\tthis.toolbarTop.refreshContent();\n\t\t\tawait this.showDetails(this.dataHolder.getSelectedDatas());\n\t\t});\n\n\t\tthis.grid.uiEvents.on('rowDblclick', (row: GridDataRowJson<R> | null, ev: MouseEvent) => {\n\t\t\tif ((row?.rowDatas as JRoleExpEntrySetAccount).account) {\n\t\t\t\tthis.filterAccounts.value = [(row.rowDatas as JRoleExpEntrySetAccount).account];\n\t\t\t\tthis.refreshUi();\n\t\t\t}\n\t\t});\n\n\t\tnew MutationObserver((entries) => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.type == \"attributes\" && entry.attributeName == \"data-roles-disabled\") {\n\t\t\t\t\tthis.refreshUi();\n\t\t\t\t}\n\t\t\t}\n\t\t}).observe(this.grid, {attributes: true});\n\n\t\t// - Details\n\t\tsr.appendChild(<c-resizer/>);\n\t\tthis._detailsBoxElt = sr.appendChild(<div id=\"details\" c-resizable hidden/>) as HTMLDivElement;\n\n\t\tthis.razFilters();\n\t\treturn this.refresh();\n\t}\n\n\tget actionContext(): IUsersRolesActionCtx<E, R, CTX> {\n\t\treturn {\n\t\t\trolesExplorer: this,\n\t\t}\n\t}\n\n\tasync _refresh() {\n\t\tthis.refreshFreeze(1);\n\t\ttry {\n\t\t\tsuper._refresh();\n\t\t\tawait this.refreshUi(true);\n\t\t} finally {\n\t\t\tthis.refreshFreeze(-1);\n\t\t}\n\t}\n\n\tprivate _lastFetchDatas: R[];\n\n\tprivate _lastUnknownUsers: Set<JUser>;\n\n\t/** Refresh UI */\n\tprivate async refreshUi(withFetchDatas = false) {\n\t\tconst selectedRows = this.dataHolder.getSelectedDatas();\n\n\t\tif (withFetchDatas || !this._lastFetchDatas) {\n\t\t\tthis._lastFetchDatas = await new MsgOver().setCustomMsg(\"Veuillez patienter...\", \"info\").showMsgOver(this).waitFor(\n\t\t\t\tthis.doFetchDatas()\n\t\t\t);\n\t\t\tObject.freeze(this._lastFetchDatas);\n\t\t\tthis._lastUnknownUsers = new Set<JUser>();\n\n\t\t\t// Re-calcul des colonnes de rÃ´les\n\t\t\tconst roles: Set<string> = new Set<string>();\n\n\t\t\tconst findRolesIn = (level: R[]) => {\n\t\t\t\tif (level) {\n\t\t\t\t\tlevel.forEach((entry) => {\n\t\t\t\t\t\t(entry as JRoleExpEntrySetAccount).denied?.forEach(role => roles.add(role));\n\t\t\t\t\t\t(entry as JRoleExpEntrySetAccount).allowed?.forEach(role => roles.add(role));\n\t\t\t\t\t\tif ((entry as JRoleExpEntrySetAccount).userUnknown) this._lastUnknownUsers.add({account: (entry as JRoleExpEntrySetAccount).account, isUnknown: true});\n\t\t\t\t\t\tfindRolesIn((entry as JRoleExpEntryStructLevel<R>).ch);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfindRolesIn(this._lastFetchDatas);\n\t\t\tthis.dataHolder.setDatas([]);//Optimisation pour ne pas forcer le grid Ã  se recalculer avec les datas actuelles qui seront actualisÃ©es dans qq lignes ?\n\t\t\tawait this.updateRolesColsDef(roles);\n\n\t\t\t// Actualisation de la liste des users inconnus\n\t\t\t//TODO this.filterAccounts.forcedIniUsers = Array.from(unknownUsers);\n\t\t}\n\n\t\t// # Application des filtres\n\t\tconst filterTxt = this.filterTxt.value;\n\t\tconst filterTxtPattern = filterTxt ? new RegExp(LANG.escape4RegexpFuzzy(filterTxt), 'i') : null;\n\t\tlet filterAccountsExtended: Set<string>;\n\t\tif (this.filterAccounts.value.length) {\n\t\t\t// on Ã©tend aux groupes d'appartenance\n\t\t\tconst users = await this.usersSrv.getUserMap(this.filterAccounts.value, [\"flattenedGroups\"]);\n\t\t\tfilterAccountsExtended = new Set();\n\t\t\tfor (const account in users) {\n\t\t\t\tfilterAccountsExtended.add(account);\n\t\t\t\t(users[account]?.flattenedGroups as string[])?.forEach(grp => filterAccountsExtended.add(grp));\n\t\t\t}\n\t\t}\n\n\t\tconst disabledRoles = this.grid.getAttribute(\"data-roles-disabled\")?.split(\" \").filter(entry => entry ? true : false);\n\t\tlet filterRolesWhiteList: Set<string>;\n\t\tif (disabledRoles?.length) {\n\t\t\tfilterRolesWhiteList = new Set();\n\t\t\tthis.grid.columnDefs.forEach((col) => {\n\t\t\t\tif (col instanceof GridColDefRole) {\n\t\t\t\t\t// CrÃ©ation du filtre\n\t\t\t\t\tif (disabledRoles.indexOf(col.roleDef.role) == -1) filterRolesWhiteList.add(col.roleDef.role);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t// Maj UI du style \"disabled\" des colonnes\n\t\tthis.grid.shadowRoot.querySelectorAll(\"#headers > .colH[data-role]\").forEach((elt) => {\n\t\t\tconst role = elt.getAttribute(\"data-role\");\n\t\t\tDOM.setAttrBool(elt, \"disabled\", disabledRoles ? disabledRoles.indexOf(role) != -1 : false);\n\t\t});\n\n\t\tconst vWithFilter = (filterTxt || filterAccountsExtended?.size || filterRolesWhiteList?.size) ? true : false;\n\t\tthis.grid.classList.toggle(\"filtered\", vWithFilter);\n\t\tif (vWithFilter) {\n\t\t\tlet filteredDatas: R[] = this.filterTreeDataHolderChiltren(JSON.parse(JSON.stringify(this._lastFetchDatas)), filterTxtPattern, filterAccountsExtended, filterRolesWhiteList);\n\t\t\tthis.dataHolder.setDefaultOpenState(GridDataHolderJsonTree.defaultOpened as any);\n\t\t\tthis.dataHolder.setDatas(filteredDatas);\n\t\t} else {\n\t\t\tthis.dataHolder.setDefaultOpenState(GridDataHolderJsonTree.defaultOpened as any);\n\t\t\tthis.dataHolder.setDatas(this._lastFetchDatas);\n\t\t}\n\n\t\t//ResÃ©lection des row sÃ©lectionnÃ©es avant refresh\n\t\tthis.selectTreeByDatas(selectedRows, true);\n\n\t\tthis.toolbarTop.refreshContent();\n\t\tthis.razFilterBtn.refresh();\n\t}\n\n\t/** RÃ©initialisation des diffÃ©rentes zones de filtre */\n\tpublic razFilters(): void {\n\t\tthis.filterTxt.value = this.params.filterTxt || \"\";\n\t\tthis.filterAccounts.value = this.params.filterAccounts || [];\n\t\tthis.grid.removeAttribute(\"data-roles-disabled\");\n\t\tthis.refresh();\n\t}\n\n\tget isFiltered(): boolean {return this.grid ? this.grid.classList.contains(\"filtered\") : false}\n\n\n\t/** Reconstruction des datas du tree */\n\tabstract doFetchDatas(): Promise<R[]>\n\n\t/**\n\t * SÃ©lection des entrÃ©es de l'arbre via une liste de R sur un tree **chargÃ©**\n\t * Si une entrÃ©e demandÃ©e n'est pas prÃ©sent dans le tree, aucune erreur n'est remontÃ©e\n\t */\n\tselectTreeByDatas(treeDataEntries: R[], ensureRowVisible = false): void {\n\t\tif (treeDataEntries != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst row = this.dataHolder.getRow(i).rowDatas as R;\n\t\t\t\tif (row && treeDataEntries.find(entry => {\n\t\t\t\t\treturn entry && entry.uid == row.uid;\n\t\t\t\t})) {\n\t\t\t\t\tselectedRows.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedRows.length > 0) {\n\t\t\t\tthis.grid.setSelectedRows(selectedRows);\n\t\t\t\tif (ensureRowVisible) this.grid.ensureRowVisible(selectedRows[0]);\n\t\t\t} else\n\t\t\t\tthis.grid.clearSel();\n\t\t}\n\t}\n\n\tprotected rolesUiHandlers(): Promise<(RoleEditUiHandler<IRoleEditUiHandlerContext> & RoleUiHandlerContextUsed)[]> {\n\t\treturn Promise.all(this.reg.mergeLists(ROLES.UI_ROLES_LIST)) as Promise<RoleEditUiHandler<IRoleEditUiHandlerContext>[]>;\n\t}\n\n\tstatic isRolesUiHandlerUsableFor(roleUiHandler: RoleEditUiHandler<IRoleEditUiHandlerContext> & RoleUiHandlerContextUsed, entry: JRoleExpEntry): boolean {\n\t\tif (roleUiHandler?.whiteListLevelsUid?.length && entry.uid)\n\t\t\treturn roleUiHandler.whiteListLevelsUid.find(white => entry.uid.startsWith(white)) ? true : false;\n\t\treturn true;\n\t}\n\n\t/** Construction des colonnes de base */\n\tprotected colsDefBase(): GridColDef[] {\n\t\treturn [\n\t\t\tnew GridColTreeDef('tree')\n\t\t\t\t.setFlex('20rem', 1, 1).setMinWidth('20rem')\n\t\t\t\t.setLabel(\"\")\n\t\t\t\t.setCellBuilder(new CellBuilderMainRoleLevelEntry(this.reg, \"title\")),\n\t\t]\n\t}\n\n\t/** maj des colonnes des rÃ´les */\n\tprotected async updateRolesColsDef(usedRoles: Set<string>): Promise<void> {\n\t\tconst colsDef = this.colsDefBase();\n\t\tlet roleUiCtx: IRoleEditUiHandlerContext = {\n\t\t\treg: this.reg\n\t\t}\n\t\tconst rolesUiHandlers = await this.rolesUiHandlers()\n\t\tlet resultRoles = await ROLES.resolveRolesList(Array.from(usedRoles), roleUiCtx, rolesUiHandlers);\n\t\tresultRoles.forEach(entry => {\n\t\t\tcolsDef.push(new GridColDefRole(entry, rolesUiHandlers.find(roleUi => roleUi.roleCode === entry.role)));\n\t\t})\n\t\tthis.grid.columnDefs = colsDef;\n\t}\n\n\t/** Filtre : application du filtre */\n\tprivate _applyFilterWaiter: number;\n\n\tprivate onKeyPress(this: HTMLInputElement, ev: KeyboardEvent) {\n\t\tif (ev.key === 'ArrowDown') {\n\t\t\tconst tree = DOMSH.findHost(this) as RolesExplorerTabBase<E, R, CTX>;\n\t\t\tif (tree.grid.getSelectedRow() !== undefined) tree.grid.focus();\n\t\t}\n\t}\n\n\tprivate onApplyFilter(this: HTMLInputElement, ev: InputEvent) {\n\t\tconst me = DOMSH.findHost(this) as RolesExplorerTabBase<E, R, CTX>;\n\t\tif (me._applyFilterWaiter) clearTimeout(me._applyFilterWaiter);\n\t\tme._applyFilterWaiter = setTimeout(() => me.refreshUi(false), 200) as any;\n\t}\n\n\n\tprivate filterTreeDataHolderChiltren(ch: R[], filterTxtPattern?: RegExp, filterAccountsExtended?: Set<string>, filterRolesWhiteList?: Set<string>): R[] {\n\t\tif (!filterTxtPattern && !filterAccountsExtended?.size && !filterRolesWhiteList?.size) return ch;\n\t\treturn ch?.filter((entry) => {\n\t\t\tconst filterTxtPatternMatch = filterTxtPattern?.test((entry as JRoleExpEntryStructLevel<R>).title);\n\t\t\tif ((entry as JRoleExpEntryStructLevel<R>).ch) (entry as JRoleExpEntryStructLevel<R>).ch = this.filterTreeDataHolderChiltren((entry as JRoleExpEntryStructLevel<R>).ch, filterTxtPatternMatch ? null : filterTxtPattern, filterAccountsExtended, filterRolesWhiteList);\n\t\t\tif (\"title\" in (entry as JRoleExpEntryStructLevel<R>)) {\n\t\t\t\t// - Data de type \"JRoleExpEntryStructLevel\"\n\t\t\t\tif (filterTxtPattern) {\n\t\t\t\t\tif (filterTxtPatternMatch) return true;\n\t\t\t\t\t// si level possÃ¨de des fils de type \"structLevel\" : on affiche mÃªme si ne matche pas\n\t\t\t\t\telse if ((entry as JRoleExpEntryStructLevel<R>).ch?.find(entry => {\n\t\t\t\t\t\treturn \"structLevel\" in (entry as JRoleExpEntryStructLevel<R>) && (entry as JRoleExpEntryStructLevel<R>).structLevel != 'roles'\n\t\t\t\t\t})) return true;\n\n\t\t\t\t} else if ((entry as JRoleExpEntryStructLevel<R>).ch?.length)\n\t\t\t\t\treturn true;\n\t\t\t} else if (\"account\" in (entry as JRoleExpEntrySetAccount)) {\n\t\t\t\t// - Data de type \"JRoleExpEntrySetAccount\"\n\t\t\t\tif (!filterAccountsExtended?.size && !filterRolesWhiteList?.size) return true;\n\t\t\t\tif (filterAccountsExtended?.size && !filterAccountsExtended.has((entry as JRoleExpEntrySetAccount).account)) return false;\n\t\t\t\tif (filterRolesWhiteList?.size) {\n\t\t\t\t\t// si tous les roles sont masquÃ©s, on supp la ligne\n\t\t\t\t\tif (!((entry as JRoleExpEntrySetAccount).denied?.find(entry => filterRolesWhiteList.has(entry)) || (entry as JRoleExpEntrySetAccount).allowed?.find(entry => filterRolesWhiteList.has(entry)))) return false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else\n\t\t\t\treturn true;\n\t\t});\n\t}\n\n\t/** Grid */\n\tredrawLine(row: GridDataRowJson<R>, line: HTMLElement): void {\n\t\tDOM.setAttr(line, \"data-struct-level\", (row.rowDatas as JRoleExpEntryStructLevel<R>).structLevel);\n\t\tDOM.setAttrBool(line, \"data-account\", (row.rowDatas as JRoleExpEntrySetAccount).account ? true : false);\n\t}\n\n\t/** Details */\n\tprivate async showDetails(row: R[] | null): Promise<boolean> {\n\t\tif (row === null || row.length == 0) {\n\t\t\tDOM.setHidden(this._detailsBoxElt, true);\n\t\t\treturn false;\n\t\t} else if (row.length == 1) {\n\t\t\tthis._detailsBoxElt.innerHTML = \"\";\n\t\t\tconst result = await new MsgOver().setCustomMsg(\"Veuillez patienter...\", \"info\").showMsgOver(this._detailsBoxElt).waitFor(\n\t\t\t\tthis.buildRowDetails(row[0])\n\t\t\t);\n\t\t\tif (this._detailsBoxElt.innerHTML != \"\") return; //race condition\n\t\t\tthis._detailsBoxElt.appendChild(<Box skinOver={`webzone:page c-rolesexplorer-core-widgets rolesexplorer-core-details ${this.localName}-details`}>\n\t\t\t\t<ShadowJsx>{result}</ShadowJsx>\n\t\t\t</Box>);\n\n\t\t\tDOM.setHidden(this._detailsBoxElt, !result);\n\t\t}\n\t}\n\n\t/** Construction de la zone \"dÃ©tails\" d'une row */\n\tabstract buildRowDetails(row: R): Promise<HTMLElement>\n\n}\n\nREG.reg.registerSkin('rolesexplorer-core', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tflex-direction: column;\n\t\toverflow: hidden;\n\t}\n\n\t#toolbarsBox {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\tc-bar-actions.showToolbarTop {\n\t  flex: 1;\n  }\n\n  c-bar-actions.showToolbarTop {\n\t  flex-direction: column;\n\t  border-inline-start: 1px solid var(--border-color);\n  }\n\n  #filter {\n\t  background: .1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg);\n\t  padding-block: 2px;\n\t  padding-inline: 1.2em 2px;\n\t  display: flex;\n\t  min-width: 0;\n\t  min-height: 0;\n\t  align-items: center;\n\t  overflow: hidden;\n\t  flex-wrap: wrap;\n  }\n\n  #filter > * {\n\t  margin-block: 0;\n\t  margin-inline: .3rem 0;\n  }\n\n  #filter > select {\n\t  border: none;\n  }\n\n  #filter > input {\n\t  min-width: 10em;\n\t  background-color: var(--form-search-bgcolor);\n  }\n\n  #filter > input:placeholder-shown {\n\t  font-style: italic;\n  }\n\n\tc-input-users-panel {\n\t  min-width: 12rem;\n\t  background-color: var(--form-search-bgcolor);\n  }\n\n  #content {\n\t  display: flex;\n\t  flex: 1;\n\t  overflow: auto;\n\t  min-height: 30%\n  }\n\n  #gridContent {\n\t  display: flex;\n\t  flex: 1;\n\t  flex-direction: column;\n  }\n\n  c-grid {\n\t  flex: 1;\n\t  overflow: auto;\n\t  border: none;\n  }\n\n  c-resizer {\n\t  pointer-events: auto;\n\t  cursor: ns-resize;\n\t  height: 3px;\n  }\n\n  #details {\n\t  display: flex;\n\t  flex: .3;\n\t  flex-direction: column;\n\t  overflow: auto;\n\t  min-height: 5em;\n  }\n\n  #details[hidden] {\n\t  display: none;\n  }\n\n  #details > c-box {\n\t  flex: 1;\n  }\n\n\n`);\n\nREG.reg.registerSkin('c-rolesexplorer-core-widgets', 1, /* language=CSS */ `\n\n\t.roleName {\n\t\tdisplay: inline-flex;\n\t\tfont-variant: small-caps;\n\t\t/*color:var(--alt1-color);*/\n\t}\n\n\t.roleName.role-unknown {\n\t\ttext-decoration: line-through;\n\t}\n\n\t.roleName.role-inherited {\n\t\tfont-style: italic;\n\t}\n\n`);\n\nREG.reg.registerSkin('rolesexplorer-core-tree', 1, /* language=CSS */ `\n\t:host {\n\t\t/*--roles-struct-level-roles: url('/@skin@/builder/widgets/moan-info.svg');*/\n\t}\n\n\t#scroll {\n\t\t/* Permet d'Ã©viter les sauts lors des filtes*/\n\t\toverflow-y: scroll;\n\t}\n\n\t/** Ligne d'entete */\n\t.colH {\n\t\tmax-height: unset;\n\t}\n\n\t/*.colH[data-role-group] > c-button {\n\t\tborder-block-start: 2px var(--alt1-color);\n\t\tborder-block-start-style: outset;\n\t}*/\n\n\t.colH[data-role-group] {\n\t\tflex-direction: column;\n  }\n\n  .colH[data-role-group] > .grp {\n\t  font-size: xx-small;\n\t  color: var(--inv-color);\n\t  overflow: hidden;\n\t  text-overflow: ellipsis;\n\t  white-space: nowrap;\n\t  padding: 2px;\n\t  font-family: sans-serif;\n\t  border-radius: 4px;\n\t  text-align: center;\n\t  opacity: 0.7;\n  }\n\n  .colH:not([data-role-group]) {\n\t  padding-block-start: 1rem;\n  }\n\n  .colH[data-role] > c-button {\n\t  padding-inline-end: 1rem;\n\t  margin-inline-start: 0.3rem;\n\t  background: url(/@skin@/commons/icons/checkbox-checked.svg) no-repeat right .4rem;\n\t  background-size: .8rem;\n\t  align-items: start;\n\t  /*\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\t\t*/\n\n  }\n\n  .colH[data-role][disabled] > c-button {\n\t  background-image: url(/@skin@/commons/icons/checkbox-unchecked.svg);\n  }\n\n  .cell.role[disabled],\n  .colH[data-role][disabled] {\n\t  background-image: url(/@skin@/commons/icons/filtered.svg);\n  }\n\n  .line > .cell.role[unusedForLevel] {\n\t  background-color: #55555566;\n\t  filter: var(--inv-active-filter);\n  }\n\n  /** Ligne \"Account\" */\n  div[data-account] > .cell {\n\t  padding: 0px 1px;\n  }\n\n  div[data-account] > .cell:first-child > x-twisty {\n\t  padding-inline-start: .5rem;\n  }\n\n  div[data-account] > .cell:first-child > span {\n\t  border-inline-start: 1px solid var(--border-color);\n\t  font-size: smaller;\n\t  padding-inline-start: 0.5em;\n  }\n\n  /** Ligne \"Level\" */\n  div:not([data-struct-level='roles']) + div[data-struct-level]:not([data-struct-level='roles']) {\n\t  margin-block-start: .5rem;\n  }\n\n  /** Ligne \"RÃ´les affectÃ©s\" */\n  div[data-struct-level='roles'] > .cell {\n\t  padding: 0px 1px;\n  }\n\n  div[data-struct-level='roles'] > .cell:first-child > span {\n\t  font-style: italic;\n\t  font-size: x-small;\n  }\n\n  div[data-struct-level='roles'] > .cell:first-child > x-twisty.opened {\n\t  background-image: url(/@skin@/commons/widgets/grid/opened.svg);\n\t  background-position-x: center;\n  }\n\n  div[data-struct-level='roles'] > .cell:first-child .icon {\n\t  padding-inline-start: unset !important;\n  }\n\n  /** Cellule de rÃ´le */\n  .role {\n\t  text-align: center;\n  }\n\n  .role > .icon {\n\t  padding-inline-start: calc(var(--icon-size) * .8) !important;\n  }\n\n  *[hidden] {\n\t  display: none;\n  }\n`);\n\nREG.reg.registerSkin('rolesexplorer-core-details', 1, /* language=CSS */ `\n\tc-bar-actions {\n\t\tflex-direction: row;\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\t/** Details */\n\t.header {\n\t\tpadding: 0.3em;\n\t\tfont-weight: bold;\n\t}\n\n\t.resolvedRoles {\n\t\ttext-align: center;\n\t\tmargin-inline: 10%;\n\t\tmargin-block: 0.5em;\n\t\tborder: 2px dotted var(--alt2-border-color);\n\t}\n\n\tc-userref {\n\t\tdisplay: inline-flex;\n\t\tmargin: 0.2em;\n\t\tpadding: 0.1em;\n\t\tborder: 1px dotted var(--border-color);\n\t\tborder-radius: 0.4em;\n\t\tbackground-color: var(--alt2-bgcolor);\n\t\tcolor: unset;\n\t\tfont-size: smaller;\n\t}\n\n\tc-input-users-panel {\n\t\tdisplay: inline-flex;\n\t}\n\n`);\n\n\n/** CellBuilder **/\n\nclass GridColDefRole extends GridColDef {\n\tconstructor(public roleDef: { role: string, name: string }, roleUiHandler?: RoleEditUiHandler<IRoleEditUiHandlerContext> & RoleUiHandlerContextUsed) {\n\t\tsuper(roleDef.role);\n\t\tthis.setLabel(roleDef.name || roleDef.role);\n\t\tthis.setDescription(roleDef.name || roleDef.role);\n\t\tthis.setCellBuilder(new CellBuilderRole(roleDef.role, roleUiHandler));\n\t\tthis.setFlex('2rem', 1, 1)\n\t\tthis.setMaxWidth('15rem');\n\t}\n\n\tisFlagDisabledCol(root: HTMLElement): boolean {\n\t\tconst grid = DOMSH.findHost<Grid>(root);\n\t\tconst gridDisabledRoles = new Set(grid.getAttribute(\"data-roles-disabled\")?.split(\" \"));\n\t\treturn gridDisabledRoles.has(this.roleDef.role);\n\t}\n\n\thasOtherFlagDisabledCol(root: HTMLElement): boolean {\n\t\tconst grid = DOMSH.findHost<Grid>(root);\n\t\tconst gridDisabledRoles = new Set(grid.getAttribute(\"data-roles-disabled\")?.split(\" \"));\n\t\tconst headerDiv = root.parentElement;\n\t\tif (Array.from(headerDiv.childNodes).find((cell: HTMLDivElement) => {\n\t\t\tconst role = cell.getAttribute(\"data-role\");\n\t\t\tif (role && role != this.roleDef.role) {\n\t\t\t\tif (gridDisabledRoles.has(role)) return true;\n\t\t\t}\n\t\t})) return true;\n\t}\n\n\n\tsetFlagDisabledCol(root: HTMLElement, forcedDisabled: boolean | 'toogle' = 'toogle', forcedDisabledOnOtherCols?: boolean | 'toogle') {\n\t\tconst grid = DOMSH.findHost<Grid>(root);\n\t\tconst gridDisabledRoles = new Set(grid.getAttribute(\"data-roles-disabled\")?.split(\" \"));\n\t\tconst cellNewSateIsDisabled = forcedDisabled == \"toogle\" ? !this.isFlagDisabledCol(root) : forcedDisabled;\n\n\t\tif (cellNewSateIsDisabled) gridDisabledRoles.add(this.roleDef.role);\n\t\telse gridDisabledRoles.delete(this.roleDef.role);\n\n\t\tif (forcedDisabledOnOtherCols != null) {\n\t\t\tconst headerDiv = root.parentElement;\n\t\t\theaderDiv.childNodes.forEach((cell: HTMLDivElement) => {\n\t\t\t\tconst role = cell.getAttribute(\"data-role\");\n\t\t\t\tif (role && role != this.roleDef.role) {\n\t\t\t\t\tif (forcedDisabledOnOtherCols == \"toogle\") forcedDisabledOnOtherCols = !cellNewSateIsDisabled;\n\t\t\t\t\tif (forcedDisabledOnOtherCols) gridDisabledRoles.add(role);\n\t\t\t\t\telse gridDisabledRoles.delete(role);\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\n\t\tDOM.setAttr(grid, \"data-roles-disabled\", Array.from(gridDisabledRoles).join(\" \"));\n\t}\n\n\tbuildColHeader(col: GridCol, root: HTMLElement) {\n\t\tconst gridDisabledRoles = new Set(col.grid.getAttribute(\"data-roles-disabled\")?.split(\" \"));\n\n\t\tDOM.setAttrBool(root, \"disabled\", gridDisabledRoles?.has(this.roleDef.role));\n\n\t\tcol.rootHeader = root;\n\t\tDOM.setAttr(root, \"data-role\", this.roleDef.role);\n\t\tconst roleGrp = ROLES.extractGroupFromRole(this.roleDef.role);\n\t\tlet title = `RÃ´le : ${this.roleDef.name}`;\n\t\tif (roleGrp) {\n\t\t\tconst grpDef = ROLES.findGroupDef(roleGrp);\n\t\t\ttitle = `Groupe exclusif : ${grpDef.label}\\n${title}`;\n\t\t\tDOM.setAttr(root, \"data-role-group\", roleGrp);\n\t\t\tconst grpElt = root.appendChild(<div class=\"grp\">{grpDef.label ? grpDef.label : \"\"}</div>);\n\t\t\tif (grpDef.color) grpElt.style.backgroundColor = grpDef.color;\n\t\t}\n\n\t\tconst btn = root.appendChild(\n\t\t\t<c-button class=\"colBody roleName\"\n\t\t\t\t\t\t\t\tlabel={this.getLabel(col)}\n\t\t\t\t\t\t\t\tui-context=\"custom\"\n\t\t\t\t\t\t\t\tonclick={(ev: MouseEvent) => {\n\t\t\t\t\t\t\t\t\tif (ev.ctrlKey)\n\t\t\t\t\t\t\t\t\t\tthis.setFlagDisabledCol(root, false);\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tif (!this.isFlagDisabledCol(root) && this.hasOtherFlagDisabledCol(root))\n\t\t\t\t\t\t\t\t\t\t\tthis.setFlagDisabledCol(root, false, false);\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tthis.setFlagDisabledCol(root, false, true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tev.stopPropagation();\n\t\t\t\t\t\t\t\t}}/>) as Button;\n\n\t\troot.title = title;\n\t}\n}\n\nclass CellBuilderRole extends CellBuilderFlagIcon {\n\n\troleRegexp: RegExp;\n\n\tconstructor(protected role: string, protected roleUiHandler?: RoleEditUiHandler<IRoleEditUiHandlerContext> & RoleUiHandlerContextUsed) {\n\t\tsuper(role);\n\t}\n\n\tredrawCell(row: GridDataRowJson<JRoleExpEntrySetAccount>, root: HTMLElement): void {\n\t\tconst grid = DOMSH.findHost<Grid>(root);\n\t\tsuper.redrawCell(row, root);\n\t\tDOM.addClass(root, \"role\");\n\t\tDOM.setAttrBool(root, \"disabled\", grid.getAttribute(\"data-roles-disabled\")?.split(\" \").indexOf(this.role) > -1);\n\t\tconst isRolesUiHandlerUsable = RolesExplorerTabBase.isRolesUiHandlerUsableFor(this.roleUiHandler, row.rowDatas);\n\t\tDOM.setAttrBool(root, \"unusedForLevel\", !isRolesUiHandlerUsable);\n\t\troot.title = !isRolesUiHandlerUsable ? \"RÃ´le non exploitÃ© sur ce niveau\" : \"\";\n\n\t}\n\n\t_getValue(row: GridDataRowJson<JRoleExpEntrySetAccount>): string {\n\t\tif (this.role) {\n\t\t\tif (row.rowDatas.denied?.indexOf(this.role) > -1)\n\t\t\t\treturn \"RÃ´le retirÃ©\";\n\t\t\tif (row.rowDatas.allowed?.indexOf(this.role) > -1)\n\t\t\t\treturn \"RÃ´le affectÃ©\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tprotected _getIcon(row: GridDataRowJson<JRoleExpEntrySetAccount>): string {\n\t\tif (this.role) {\n\t\t\tif (row.rowDatas.denied?.indexOf(this.role) > -1)\n\t\t\t\treturn \"/@skin@/core/dialogs/rolesExplorer/removed.svg\";\n\t\t\tif (row.rowDatas.allowed?.indexOf(this.role) > -1)\n\t\t\t\treturn \"/@skin@/core/dialogs/rolesExplorer/added.svg\";\n\t\t\treturn \"\";\n\t\t}\n\t}\n}\n\nclass CellBuilderMainRoleLevelEntry extends CellBuilderIconLabel {\n\tcacheKey: symbol;\n\n\tconstructor(protected reg: IReg<ICoreUniverseEnv>, dataKey: string) {\n\t\tsuper(dataKey);\n\t\tthis.iconWidth = \"1.3rem\";\n\t}\n\n\tprotected _getIcon(row: GridDataRowJson<JRoleExpEntryStructLevel<any> | JRoleExpEntrySetAccount>): string {\n\t\tif (\"structLevel\" in (row.rowDatas as JRoleExpEntryStructLevel<any>))\n\t\t\treturn `--roles-struct-level-${(row.rowDatas as JRoleExpEntryStructLevel<any>).structLevel}`\n\t}\n\n\tredrawCell(row: GridDataRowJson<JRoleExpEntryStructLevel<any> | JRoleExpEntrySetAccount>, root: HTMLElement): void {\n\t\tsuper.redrawCell(row, root);\n\n\t\tconst span = root.firstElementChild as HTMLElement;\n\t\tlet userRef: UserRef = span.nextElementSibling as UserRef;\n\t\tif (\"account\" in (row.rowDatas as JRoleExpEntrySetAccount)) {\n\t\t\tif (!userRef)\n\t\t\t\tuserRef = root.appendChild(<UserRef class=\"inline list\" Ã®={{reg: this.reg, withIcon: true, skinOver: \"rolesExplorer/userRef\"} as OUserRefInit}/>) as UserRef;\n\t\t\tuserRef.nickOrAccount = row.getData(\"account\");\n\t\t\tDOM.setHidden(userRef, false);\n\t\t\tDOM.setHidden(span, true);\n\t\t} else {\n\t\t\tif (userRef) DOM.setHidden(userRef, true);\n\t\t\tDOM.setHidden(span, false);\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('rolesExplorer/userRef', 1, /* language=CSS */ `\n\t:host([data-withIcon]) span {\n\t\tbackground-image: url(/@skin@/core/dialogs/rolesExplorer/user.svg);\n\t\tbackground-size: auto 1rem;\n\t}\n\n\t:host([data-isGroup][data-withIcon]) span {\n\t\tbackground-image: url(/@skin@/core/dialogs/rolesExplorer/group.svg);\n\t}\n`);\n\n/** Actions **/\n\n/** RAZ filtres */\nconst actionRazFilters = new Action<IUsersRolesActionCtx<any, any, any>>(\"razFilters\")\n\t.setLabel(\"RÃ©initialiser les filtres\")\n\t.setGroup(\"filters\")\n\t.setIcon(\"/@skin@/commons/icons/reset-filter.svg\")\n\t.setEnabled((ctx: IUsersRolesActionCtx<any, any, any>) => {\n\t\treturn ctx.rolesExplorer.isFiltered;\n\t})\n\t.setExecute((ctx: IUsersRolesActionCtx<any, any, any>, ev: Event) => {\n\t\tctx.rolesExplorer.razFilters();\n\t});\n\n/** Reload UI */\nconst actionRefreshUi = new Action<IUsersRolesActionCtx<any, any, any>>(\"refreshUi\")\n\t.setLabel(\"Rafraichir la liste des rÃ´les\")\n\t.setGroup(\"reload\")\n\t.setIcon(\"/@skin@/commons/icons/refresh.svg\")\n\t.setExecute((ctx: IUsersRolesActionCtx<any, any, any>, ev: Event) => {\n\t\tctx.rolesExplorer.refresh();\n\t});\n\n/** Wrapper d'une action qui dÃ©clenche un refresh du tree\n * FIXME : usage pas optimal... passer plutot par des remontÃ©es d'event de modif sur les objets concernÃ©s */\nexport class ActionWrapperRefresRolesExplorer<C extends IUsersRolesActionCtx<any, any, any>> extends ActionWrapper<C> {\n\n\tisEnabled(ctx: C): boolean {\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<any> {\n\t\tlet result = await super.execute(ctx, ev);\n\t\tawait ctx.rolesExplorer.refresh();\n\t\treturn result;\n\t}\n}\n\n"]}