{"version":3,"sources":["/@back@/wsp/widgets/srcGrid.tsx"],"names":["REG","EWspChangesEvts","WspsLivePlace","ACTION","ESrcSt","SRC","InfoCurrentItem","InfoHighlighItemSgn","InfoReqCurrentItem","ITEM","Grid","GridDataHolderJsonArray","GridColDef","BASIS","ActionBtn","isColSearchBuilder","CellBuilderSrcIconCodeTitle","redrawSrcLine","DOMSH","GridArrayToTree","SrcGrid","[object Object]","this","shortDescs","categorizer","_treeView","target","setProvider","srcGridDatas","setCategorizer","dataHolder","srcUri","_selectRowKey","findRowKeyBySrcUri","srcId","findRowKeyBySrcId","rowKey","id","getId","getTargetEntryById","offset","getOffset","setSelectedRows","init","config","reg","findReg","wsp","env","place","SrcGridDatas","selType","columnDefs","getDefaultColumnDefs","defaultActionCtx","infoBroker","itemHandlingReact","lineDrawer","super","_initialize","addEventListener","ev","getSelectedDatas","matches","dispatchEvent","CustomEvent","detail","bubbles","composed","actions","injectSepByGroup","getPref","accelKeyMgr","handleKeyboardEvent","req","dispatchInfo","setCurrentSrcUri","draggable","linesNode","setAttribute","setShortDescTransferToDragSession","findHost","resetShortDescTransferToDragSession","setDefaultSort","setFlex","setMinWidth","setSortable","setCellBuilder","wspMetaUi","srcUriItemsSortFn","buildInitFromAtts","hasAttribute","mergeLists","extractAttr","split","connectedCallback","addConsumer","_refreshFreeze","_lstn","onWspUriChange","bind","eventsMgr","on","removeConsumer","removeListener","msg","from","type","u","lcSt","drfState","drvState","onWspUriChangeScope","fetchLongDesc","srcRef","then","sd","refreshFields","fetchShortDesc","s","refreshItSt","itSt","r","removeBySrcUri","ensureRowVisible","_currentSrcUri","invalidateRows","sgnPattern","assigned","_highlightSgn","_assigned","row","line","focusActionables","_focusActionables","buildButtons","ctxMenuActions","actionContext","rect","getSelRect","map","getShortDescFields","forEach","f","set","columns","col","cellBuilder","fillSearchColumns","dataKey","info","setHighlightSgn","me","emitter","registerSkin","customElements","define","useLiveSrcUri","d","_datas","srcLiveUri","i","length","isSubUriOrEqual","updateDatas","newFields","idx","srcSt","none","Object","assign","create","onWillUpdate","clone","resetRowCache","grid"],"mappings":"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","sourcesContent":["import {IReg, REG} from \"lib/commons/registry\";\nimport {IWspUiEnv, JWspUriChangeMsg, Wsp} from \"lib/wsp/wsp\";\nimport {EWspChangesEvts, IWspXmlHouse, WspsLivePlace} from \"lib/wsp/wspsLive\";\nimport {AccelKeyMgr, ACTION, IAction} from \"lib/commons/actions\";\nimport {ESrcSt, JSrcFields, SRC, srcId, srcRef, srcUri} from \"lib/wsp/src\";\nimport {EItStatus, InfoCurrentItem, InfoHighlighItemSgn, InfoReqCurrentItem, IShortDescCtx, ITEM} from \"lib/wsp/item\";\nimport {IActionable, IContextMenuActionsPointer, IFocusActionables} from \"back/commons/actionables\";\nimport {Grid, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridDataHolderBase, GridDataHolderJsonArray} from \"back/commons/widgets/grid-libs\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {GridColDef, IGridDataRow, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {BASIS} from \"back/commons/basis\";\nimport {ActionBtn} from \"back/commons/widgets/buttons\";\nimport {IInfo, IInfoBroker, IInfoConsumer} from \"lib/commons/infos\";\nimport {IColSearchBuilder, isColSearchBuilder, ISearchFunc} from \"lib/wsp/search\";\nimport {CellBuilderSrcIconCodeTitle, redrawSrcLine} from \"back/wsp/widgets/srcGridColumns\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {GridArrayToTree, GridDataHolderJsonTree, IGridCategorizer} from \"back/commons/widgets/tree\";\n\n\n/**\n * wsp-src-grid : Widget des listes d'items ou tasks.\n */\nexport interface SrcGrid extends Grid {\n\tinitialize(init: OSrcGridInit): this\n}\n\nexport interface OSrcGridInit extends OGridSmallInit {\n\treg?: IReg<IWspUiEnv>\n\n\t/** Réagira aux infos issues de ce broker (item courant, highlight d'items selon signature) */\n\titemHandlingReact?: IInfoBroker\n\n\t/** Actions associées aux items sélectionnés (menu contextuel et IFocusActionables). */\n\tactions?: IAction<ISrcGridCtx>[]\n\n\t/** Action excutée au double-click ou sur les frappes entrée ou espace. */\n\tdefaultAction?: IAction<ISrcGridCtx>\n\n\t/** Racourcis claviers à capter sur la sel courante. */\n\taccelKeyMgr?: AccelKeyMgr<ISrcGridCtx>\n\n\t/** item draggables. */\n\tdraggable?: boolean\n\n\t/** Restreint l'affichage aux noeuds respectant ce filtre. */\n\t//srcFilter?: (data: JSrcFields) => boolean  NON inmplémenté!\n\n\tdataHolder?: ISrcGridDatas\n\n\t/**\n\t * Si renseigné, le widget s'abonnera à cette place pour le refresh auto, sinon tentera this.reg.env.place.\n\t * Si \"none\", le widget ne s'abonnera pas (affichages éphémères ou en masse, gestion du refresh géré par l'appelant).\n\t */\n\tplace?: WspsLivePlace | \"none\"\n\n\t/** Dépendance du au shortDesc ou longDesc\n\t * \t\tValeur par défaut : shortDesc\n\t */\n\tonWspUriChangeScope?: 'shortDesc' | 'longDesc'\n\n\t/** Supprime le lineDrawer par défaut (avec null) ou customise le lineDrawer. */\n\tlineDrawer?: null | IGridLineDrawer\n}\n\nexport class SrcGrid extends Grid implements ISrcGridCtx, IFocusActionables<ISrcGridCtx>, IContextMenuActionsPointer<ISrcGridCtx>, IGridLineDrawer, IColSearchBuilder, IInfoConsumer {\n\n\treg: IReg<IWspUiEnv>;\n\twsp: Wsp;\n\n\tconfig: OSrcGridInit;\n\taccelKeyMgr: AccelKeyMgr<ISrcGridCtx>;\n\n\t/** Mémoire des actions pour le menuContextuel. */\n\tactions?: IAction<ISrcGridCtx>[];\n\n\t/** Fournisseur des donnée courant (srcGridDatas ou celui issu du categorizer). */\n\t\t// @ts-ignore\n\tdataHolder: GridDataHolderBase<JSrcFields>;\n\n\t/**\n\t * Datas à plat, provider pour un Categorizer ou dataHolder direct pour ce grid.\n\t * A utiliser pour les mises à jour des donnnées (et pas dataHolder).\n\t */\n\tsrcGridDatas: ISrcGridDatas;\n\n\t/** API IShortDescCtx */\n\tshortDescs: JSrcFields[] = [];\n\n\tinfoBroker: IInfoBroker;\n\n\tprotected _treeView: GridArrayToTree<JSrcFields, JSrcFields>;\n\n\t/** Mémoire du listener des WspChanges pour delete. */\n\tprotected _lstn: (msg: JWspUriChangeMsg, from: WspsLivePlace | 'local' | 'server') => void;\n\n\tget categorizer(): IGridCategorizer<JSrcFields, JSrcFields> {\n\t\treturn this._treeView ? this._treeView.categorizer : null;\n\t}\n\n\tsetCategorizer(categorizer: IGridCategorizer<JSrcFields, JSrcFields>, target?: GridDataHolderJsonTree<JSrcFields>) {\n\t\tif (categorizer) {\n\t\t\tif (!this._treeView) this._treeView = new GridArrayToTree(target).setProvider(this.srcGridDatas);\n\t\t\tthis._treeView.setCategorizer(categorizer);\n\t\t\tthis.dataHolder = this._treeView.target;\n\t\t} else if (this._treeView) {\n\t\t\t//On supprime le categorizer\n\t\t\tthis._treeView.setProvider(null);\n\t\t\tthis._treeView = null;\n\t\t\tthis.dataHolder = this.srcGridDatas;\n\t\t}\n\t}\n\n\tselectSrcUri(srcUri: srcUri): boolean {\n\t\treturn this._selectRowKey(this.srcGridDatas.findRowKeyBySrcUri(srcUri));\n\t}\n\n\tselectSrcId(srcId: srcId): boolean {\n\t\treturn this._selectRowKey(this.srcGridDatas.findRowKeyBySrcId(srcId));\n\t}\n\n\t_selectRowKey(rowKey: JSrcFields): boolean {\n\t\tif (!rowKey) return false;\n\t\tif (this._treeView && this._treeView.categorizer) {\n\t\t\tconst id = this._treeView.categorizer.getId(rowKey);\n\t\t\trowKey = this._treeView.getTargetEntryById(id);\n\t\t}\n\t\tconst offset = this.dataHolder.getOffset(rowKey);\n\t\tif (offset < 0) return false;\n\t\tthis.setSelectedRows(offset);\n\t\treturn true;\n\t}\n\n\tprotected _initialize(init: OSrcGridInit) {\n\t\tthis.config = init || {};\n\t\tthis.reg = this.findReg(init);\n\t\tthis.wsp = this.reg.env.wsp;\n\t\tif (!this.config.place) this.config.place = this.reg.env.place; //set default place si this.config.place != \"none\"\n\t\tif (!init.dataHolder) init.dataHolder = new SrcGridDatas(/*this.reg, init.srcFilter*/);\n\t\tif (!init.selType) init.selType = 'multi';\n\t\tif (!init.columnDefs) init.columnDefs = this.getDefaultColumnDefs();\n\t\tinit.defaultActionCtx = this;\n\t\tthis.infoBroker = init.itemHandlingReact;\n\t\tif (!('lineDrawer' in init)) init.lineDrawer = this;\n\t\tthis.srcGridDatas = init.dataHolder;\n\n\t\tsuper._initialize(init);\n\n\t\tthis.addEventListener('grid-select', function (this: SrcGrid, ev: Event) {\n\t\t\tthis.shortDescs = this.dataHolder.getSelectedDatas();\n\t\t\t//console.log(\"spaceTree.shortDescs::::\", spaceTree.shortDescs);\n\t\t\tif (this.matches(':focus')) this.dispatchEvent(new CustomEvent<IFocusActionables<IShortDescCtx>>('c-focus-actions', {detail: this, bubbles: true, composed: true}));\n\t\t});\n\n\t\tif (init.actions) this.actions = ACTION.injectSepByGroup(init.actions, this.reg.getPref(\"groupOrder.wsp.shortDesc\", \"\"), this);\n\t\tif (init.accelKeyMgr) {\n\t\t\tthis.accelKeyMgr = init.accelKeyMgr;\n\t\t\tthis.addEventListener('keydown', (ev: KeyboardEvent) => {\n\t\t\t\tthis.accelKeyMgr.handleKeyboardEvent(ev, this);\n\t\t\t});\n\t\t}\n\n\t\tif (init.itemHandlingReact) {\n\t\t\tconst req = new InfoReqCurrentItem();\n\t\t\tinit.itemHandlingReact.dispatchInfo(req, this);\n\t\t\tif (req.srcUri) this.setCurrentSrcUri(req.srcUri);\n\t\t}\n\n\t\tif (init.draggable) {\n\t\t\tthis.linesNode.setAttribute(\"draggable\", \"true\");\n\t\t\tthis.linesNode.addEventListener('dragstart', function (ev: DragEvent) {\n\t\t\t\t//console.log(ev);\n\t\t\t\tITEM.setShortDescTransferToDragSession(DOMSH.findHost<SrcGrid>(this), ev, 'build');\n\t\t\t});\n\t\t\tthis.linesNode.addEventListener('dragend', ITEM.resetShortDescTransferToDragSession);\n\t\t}\n\t}\n\n\tgetDefaultColumnDefs() {\n\t\treturn [new GridColDef('srcCode')\n\t\t\t.setDefaultSort(1, 'ascendant')\n\t\t\t.setFlex('1rem', 1, 1).setMinWidth('8em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderSrcIconCodeTitle(this.reg, this.wsp.wspMetaUi, false, this.wsp.srcUriItemsSortFn))\n\t\t];\n\t}\n\n\tbuildInitFromAtts(init?: any): any {\n\t\tinit = super.buildInitFromAtts(init);\n\t\tif (this.hasAttribute(\"actions\")) init.actions = this.reg.mergeLists(...BASIS.extractAttr(this, 'actions').split(' '));\n\t\treturn init;\n\t}\n\n\tconnectedCallback() {\n\t\tsuper.connectedCallback();\n\t\tif (this.infoBroker) this.infoBroker.addConsumer(this);\n\t\tif (this.config.place instanceof WspsLivePlace && this._refreshFreeze === 0) {\n\t\t\tthis._lstn = this.onWspUriChange.bind(this);\n\t\t\tthis.config.place.eventsMgr.on('wspUriChange', this._lstn);\n\t\t}\n\t}\n\n\tdisconnectedCallback() {\n\t\tif (this.infoBroker) this.infoBroker.removeConsumer(this);\n\t\tif (this.config.place instanceof WspsLivePlace && this._refreshFreeze === 0) this.config.place.eventsMgr.removeListener('wspUriChange', this._lstn);\n\t}\n\n\t/**\n\t * NOTES: A surcharger si les fields du shortDesc ne suffisent pas à rafraichir toutes les colonnes.\n\t */\n\tonWspUriChange(msg: JWspUriChangeMsg, from: WspsLivePlace | IWspXmlHouse | 'local' | 'server') {\n\t\tif (msg.type === EWspChangesEvts.u || msg.type === EWspChangesEvts.lcSt || msg.type === EWspChangesEvts.drfState || msg.type === EWspChangesEvts.drvState) {\n\t\t\tconst rowKey = this.srcGridDatas.findRowKeyBySrcUri(msg.srcUri);\n\t\t\tif (rowKey) {\n\t\t\t\tif (this.config.onWspUriChangeScope == 'longDesc') {\n\t\t\t\t\tthis.wsp.fetchLongDesc(SRC.srcRef(msg)).then((sd) => {\n\t\t\t\t\t\tthis.srcGridDatas.refreshFields(rowKey, sd);\n\t\t\t\t\t})\n\t\t\t\t} else\n\t\t\t\t\tthis.wsp.fetchShortDesc(SRC.srcRef(msg)).then((sd) => {\n\t\t\t\t\t\tthis.srcGridDatas.refreshFields(rowKey, sd);\n\t\t\t\t\t})\n\t\t\t}\n\t\t} else if (msg.type === EWspChangesEvts.s) {\n\t\t\tconst rowKey = this.srcGridDatas.findRowKeyBySrcUri(msg.srcUri);\n\t\t\tif (rowKey) this.srcGridDatas.refreshItSt(rowKey, msg.itSt);\n\t\t} else if (msg.type === EWspChangesEvts.r) {\n\t\t\tthis.srcGridDatas.removeBySrcUri(msg.srcUri);\n\t\t}\n\t}\n\n\n\tprotected _currentSrcUri: srcUri;\n\tprotected _highlightSgn: RegExp;\n\tprotected _assigned: srcRef;\n\n\tensureRowVisibleByUri(srcUri: srcUri): boolean {\n\t\tconst rowKey = this.srcGridDatas.findRowKeyBySrcUri(srcUri);\n\t\tif (rowKey) this.ensureRowVisible(this.dataHolder.getOffset(rowKey));\n\t\treturn rowKey != null;\n\t}\n\n\tsetCurrentSrcUri(srcUri: srcUri | null) {\n\t\tif (this._currentSrcUri === srcUri) return;\n\t\tthis._currentSrcUri = srcUri;\n\t\tthis.invalidateRows();\n\t\t//if (this._currentSrcUri) this.ensureRowVisibleByUri(this._currentSrcUri); //Ergonomiquement douteux : à rendre configuarble ?\n\t}\n\n\tsetHighlightSgn(sgnPattern: RegExp, assigned: srcRef) {\n\t\tthis._highlightSgn = sgnPattern;\n\t\tthis._assigned = assigned;\n\t\tthis.invalidateRows();\n\t}\n\n\tredrawLine(row: IGridDataRow, line: HTMLElement): void {\n\t\tredrawSrcLine(this.wsp, row.rowKey, line, this._currentSrcUri, this._highlightSgn, this._assigned);\n\t}\n\n\t/** boutons à afficher dans la focusToolbar. */\n\tprotected _focusActionables: IActionable<ISrcGridCtx>[];\n\tget focusActionables(): IActionable<ISrcGridCtx>[] {\n\t\tif (!this._focusActionables && this.actions) this._focusActionables = ActionBtn.buildButtons<ISrcGridCtx>(this.actions, this, 'bar');\n\t\treturn this._focusActionables;\n\t};\n\n\tget ctxMenuActions() {return {actions: this.actions, actionContext: this, rect: this.getSelRect()}}\n\n\tfillSearchColumns(map: Map<string, string | ISearchFunc>): void {\n\t\tthis.wsp.getShortDescFields().forEach((f) => {map.set(f, null)});\n\t\tif (this.columns) for (const col of this.columns) {\n\t\t\tif (isColSearchBuilder(col.cellBuilder)) col.cellBuilder.fillSearchColumns(map);\n\t\t\telse if (col.cellBuilder && 'dataKey' in col.cellBuilder) map.set((col.cellBuilder as any).dataKey, null);\n\t\t}\n\t}\n\n\tonInfo(info: IInfo): void {\n\t\tif (info instanceof InfoCurrentItem) {\n\t\t\tthis.setCurrentSrcUri(info.srcUri);\n\t\t} else if (info instanceof InfoHighlighItemSgn) {\n\t\t\tthis.setHighlightSgn(info.sgnPattern, info.assigned);\n\t\t}\n\t}\n\n\t//*** API ISrcGridCtx / IShortDescCtx ***\n\n\tget me() {return this} // Astuce pour retrouver le SpaceTree quand l'actionContext a été surchargé.\n\n\tget emitter(): HTMLElement {return this}\n}\n\nREG.reg.registerSkin('wsp-src-grid', 1, /* language=CSS */ `\n\t.highlight {\n\t\tbackground-color: var(--row-highlight-bgcolor);\n\t}\n\n\t.assigned {\n\t\tbackground-color: var(--row-assigned-bgcolor);\n\t}\n\n\t.current {\n\t\tbackground-position: right;\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-image: var(--row-current-img-end);\n\t\tbackground-color: var(--row-current-bgcolor);\n\t}\n`);\n\ncustomElements.define('wsp-src-grid', SrcGrid);\n\n\n/**\n * Contexte pour les actions du SrcGrid.\n * Abstraction de SrcGrid pour être utilisé en contexte d'actions wrappées/surchagées.\n */\nexport interface ISrcGridCtx extends IShortDescCtx {\n\tme: SrcGrid\n}\n\n/** Api de la source de données pour un SrcGrid. */\nexport interface ISrcGridDatas extends GridDataHolderJsonArray<JSrcFields> {\n\tfindRowKeyBySrcUri(srcUri: srcUri): JSrcFields;\n\n\tfindRowKeyBySrcId(srcId: srcId): JSrcFields;\n\n\tremoveBySrcUri(srcUri: srcUri): void;\n\n\trefreshFields(rowKey: JSrcFields, newFields: JSrcFields): void;\n\n\trefreshItSt(rowKey: JSrcFields, itSt: EItStatus): void;\n}\n\n\nexport class SrcGridDatas extends GridDataHolderJsonArray<JSrcFields> implements ISrcGridDatas {\n\n\tuseLiveSrcUri: boolean;\n\n\tconstructor(/*reg: IReg<IWspUiEnv>, srcFilter?: (data: JSrcFields) => boolean*/) {\n\t\tsuper();\n\t}\n\n\tfindRowKeyBySrcUri(srcUri: srcUri): JSrcFields {\n\t\tif (this.useLiveSrcUri) {\n\t\t\tfor (const d of this._datas) if (d.srcLiveUri === srcUri || d.srcUri === srcUri) return d;\n\t\t} else {\n\t\t\tfor (const d of this._datas) if (d.srcUri === srcUri) return d;\n\t\t}\n\t\treturn null;\n\t}\n\n\tfindRowKeyBySrcId(srcId: srcId): JSrcFields {\n\t\tfor (const d of this._datas) if (d.srcId === srcId) return d;\n\t\treturn null;\n\t}\n\n\tremoveBySrcUri(srcUri: srcUri) {\n\t\tfor (let i = this._datas.length - 1; i >= 0; i--) {\n\t\t\tif (SRC.isSubUriOrEqual(srcUri, this._datas[i].srcUri)) {\n\t\t\t\tthis.updateDatas(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\trefreshFields(rowKey: JSrcFields, newFields: JSrcFields) {\n\t\tconst idx = this.getOffset(rowKey);\n\t\tif (idx >= 0) {\n\t\t\tif (newFields.srcSt === ESrcSt.none) {\n\t\t\t\tthis.updateDatas(idx, 1);\n\t\t\t} else {\n\t\t\t\tthis.updateDatas(idx, 1, Object.assign(Object.create(null), newFields));\n\t\t\t}\n\t\t}\n\t}\n\n\trefreshItSt(rowKey: JSrcFields, itSt: EItStatus) {\n\t\tif (this.onWillUpdate) {\n\t\t\t//listeners déclarés, on passe par l'api pour le dispatch et un remplacement strict de l'objet pour éviter tout effet de bord.\n\t\t\tconst idx = this.getOffset(rowKey);\n\t\t\tif (idx >= 0) {\n\t\t\t\tconst clone = Object.assign(Object.create(null), rowKey) as JSrcFields;\n\t\t\t\tclone.itSt = itSt;\n\t\t\t\tthis.updateDatas(idx, 1, clone);\n\t\t\t}\n\t\t} else {\n\t\t\t//version optimisée XXX A mesurer...\n\t\t\trowKey['itSt'] = itSt;\n\t\t\tthis.resetRowCache(rowKey);\n\t\t\tconst grid = this.grid;\n\t\t\tif (grid) grid.invalidateRows();\n\t\t}\n\t}\n}\n"]}