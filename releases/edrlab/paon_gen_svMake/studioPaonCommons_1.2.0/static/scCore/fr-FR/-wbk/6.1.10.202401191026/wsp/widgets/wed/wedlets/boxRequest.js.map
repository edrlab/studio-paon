{"version":3,"sources":["/@back@/wsp/widgets/wed/wedlets/boxRequest.tsx"],"names":["AgEltBoxSelection","EWedletEditMode","EWedletEditModeLabel","WEDLET","DOM","JSX","JML","REG","AgEltBoxInputAnnotable","removeAnnots","DOMSH","AccelKeyMgr","Action","POPUP","BarActions","BASIS","MsgLabel","UiCritBool","XA","BoxRequest","HTMLElement","[object Object]","this","_redrawPlanned","tpl","wedlet","readonly","isWritableWedlet","criterionsLists","extractAttr","fillSearchWhereWrappersLists","hasAttribute","checkXpath","XPathEvaluator","createExpression","checkMsg","addEventListener","doEdit","bind","wedMgr","reg","sr","attachShadow","SHADOWDOM_INIT","installSkins","localName","barActionsElt","appendChild","createElement","î","actionContext","actions","getList","uiContext","disableFullOverlay","msgLabelElt","class","abstractElt","id","_bind","node","children","refreshEditMode","element","refreshBindValue","onChildNodesInserted","deleteChildNodes","updateInDescendants","doAfterBatch","_redraw","redraw","elt","eraseFrag","jml","newJml","vNode","firstChild","domNode2jml","nextSibling","batch","docHolder","newBatch","isVirtual","insertDatasFromDisplay","spliceSequence","append","wedAnchor","requestValue","length","doBatch","isEmpty","deleteSequence","mode","write","setAttr","val","findDomLast","getDocument","textContent","setStandardMsg","checkResult","undefined","result","evaluate","XPathResult","BOOLEAN_TYPE","booleanValue","setCustomMsg","context","criterions","mergeListsAsMap","split","getListAsMap","desc","AREA_AND_ROOT","buildAbstract","refreshContent","childNodes","search","setNewFrag","whereCrit","Element","SearchItems","import","init","showMainView","srcGrid","mergeLists","accelKeyMgr","initFromMapActions","searchStore","canEditTitle","initSearchRequest","whereHandlers","searchWhereWrapper","async","where","key","handler","call","ct","initialize","showDialog","titleBar","barLabel","label","closeButton","resizer","viewPortX","viewPortY","initWidth","initHeight","selMode","registerSkin","window","customElements","define","BoxRequestEdit","super","_description","ctx","ev","BoxRequestErase","_label","isEnabled","addAction","action","addToList","getId"],"mappings":"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","sourcesContent":["import {AgEltBoxSelection, IEltBoxSelection} from \"back/edit/wed/features/boxSel\";\nimport {EWedletEditMode, EWedletEditModeLabel, IWedlet, WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {IJmlNode, IJmlSubSet, JML} from \"lib/commons/xml/jml\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {AgEltBoxInputAnnotable, removeAnnots} from \"back/edit/wed/wedlets/box/boxTags\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {AccelKeyMgr, Action, IAction} from \"lib/commons/actions\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {BarActions, OBarActionsInit} from \"back/commons/widgets/bars\";\nimport {BASIS, MsgLabel} from \"back/commons/basis\";\nimport {OUiCritInit, UiCritBool} from \"back/wsp/widgets/search/uiCrit\";\nimport {XA} from \"lib/commons/xml/xAddr\";\nimport {OSearchItemsInit, SearchItems} from \"back/wsp/dialogs/searchItems\";\nimport {ISearchCrit, ISearchPersist, ISearchStore} from \"lib/wsp/search\";\nimport {BoxWedlet} from \"back/edit/wed/wedlets/box/box\";\nimport {IWspUiEnv} from \"lib/wsp/wsp\";\n\n/**\n * box-request pour l'affichage d'une requête, et l'accès aux fonctions d'édition.\n * Ex :\n * \t<box-request criterionsLists?=\"wsp.crit.items\" fillSearchWhereWrappersLists?=\"\"/>\n * \t<box-request criterionsLists?=\"wsp.crit.items\" fillSearchWhereWrappersLists?=\"\"\n * \t\t\t\t\t\t\t\tcheckXpath?=\"exp[@type='xxxx']\" checkMsg?=\"Il manque l'expression...\"\n * \t/>\n */\nclass BoxRequest extends HTMLElement implements IEltBoxSelection, ISearchStore {\n\n\twedlet: IWedlet;\n\n\treadonly: boolean;\n\n\trequestValue: Element;\n\n\tcriterionsLists: string;\n\n\tfillSearchWhereWrappersLists: string;\n\n\tcheckXpath: XPathExpression;\n\n\tcheckMsg: string;\n\n\tcheckResult: boolean;\n\n\tbarActionsElt: BarActions<any>;\n\n\tmsgLabelElt: MsgLabel;\n\n\tabstractElt: HTMLDivElement;\n\n\tconfigWedletElt(tpl: Element, wedlet: IWedlet & BoxWedlet) {\n\t\tthis.wedlet = wedlet;\n\t\tthis.readonly = !WEDLET.isWritableWedlet(wedlet);\n\t\tthis.criterionsLists = BASIS.extractAttr(tpl, \"criterionsLists\");\n\t\tthis.fillSearchWhereWrappersLists = BASIS.extractAttr(tpl, \"fillSearchWhereWrappersLists\");\n\t\tif (tpl.hasAttribute(\"checkXpath\")) {\n\t\t\tthis.checkXpath = new XPathEvaluator().createExpression(BASIS.extractAttr(tpl, \"checkXpath\"), this);\n\t\t\tthis.checkMsg = BASIS.extractAttr(tpl, \"checkMsg\");\n\t\t}\n\t\tthis.addEventListener(\"dblclick\", this.doEdit.bind(this));\n\t\tconst wedMgr = wedlet.wedMgr;\n\t\tconst reg = wedMgr.reg;\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tWEDLET.installSkins(tpl, sr, wedlet, this.localName);\n\n\t\tthis.barActionsElt = sr.appendChild(<BarActions î={{\n\t\t\treg,\n\t\t\tactionContext: this,\n\t\t\tactions: reg.getList<IAction<BoxRequest>>(\"wed:boxRequest:actions\"),\n\t\t\tuiContext: 'dialog',\n\t\t\tdisableFullOverlay: true\n\t\t} as OBarActionsInit<BoxRequest>}/>) as BarActions<any>;\n\n\t\tthis.msgLabelElt = sr.appendChild(<MsgLabel class=\"headband\"/>) as MsgLabel;\n\t\tthis.abstractElt = sr.appendChild(<div id=\"abstract\"/>) as HTMLDivElement;\n\n\t\twedlet._bind = function (this: BoxWedlet, node: IJmlNode, children: IJmlSubSet) {\n\t\t\tthis.refreshEditMode();\n\t\t\tthis.element.refreshBindValue(node, children);\n\t\t\t//kill construction des binds fils.\n\t\t};\n\t\twedlet.onChildNodesInserted = wedlet.deleteChildNodes = wedlet.updateInDescendants = () => {\n\t\t\tif (!this._redrawPlanned) {\n\t\t\t\tthis._redrawPlanned = true;\n\t\t\t\twedMgr.doAfterBatch(this._redraw || (this._redraw = this.redraw.bind(this)));\n\t\t\t}\n\t\t}\n\t}\n\n\tsetNewFrag(elt: Element) {\n\t\tif (!elt) return this.eraseFrag();\n\t\tconst wedlet = this.wedlet;\n\t\tif (!WEDLET.isWritableWedlet(wedlet)) return;\n\n\t\tconst jml = JML.newJml();\n\t\tlet vNode = elt.firstChild;\n\t\twhile (vNode) {\n\t\t\tJML.domNode2jml(vNode, jml, null);\n\t\t\tvNode = vNode.nextSibling;\n\t\t}\n\t\t//console.log(\"setNewFrag::::\", JML.jmlToDom(jml));\n\t\tconst batch = wedlet.wedMgr.docHolder.newBatch();\n\t\tif (wedlet.isVirtual()) {\n\t\t\tWEDLET.insertDatasFromDisplay(wedlet, batch, jml);\n\t\t} else {\n\t\t\t//batch.setText(wedlet.wedAnchor, \"\");\n\t\t\tbatch.spliceSequence(XA.append(wedlet.wedAnchor, 0), this.requestValue.children.length, jml);\n\t\t}\n\t\tbatch.doBatch();\n\t}\n\n\teraseFrag() {\n\t\tconst wedlet = this.wedlet;\n\t\tif (wedlet.isVirtual() || this.readonly) return;\n\t\tif (!this.isEmpty())\n\t\t\twedlet.wedMgr.docHolder.newBatch().deleteSequence(XA.append(wedlet.wedAnchor, 0), this.requestValue.children.length).doBatch();\n\t}\n\n\tsetEditMode(mode: EWedletEditMode) {\n\t\tthis.readonly = mode !== EWedletEditMode.write;\n\t\tDOM.setAttr(this, \"edit-mode\", EWedletEditModeLabel[mode]);\n\t}\n\n\trefreshBindValue(val: IJmlNode, children?: IJmlSubSet) {\n\t\tthis.wedlet.wedMgr.doAfterBatch(() => {\n\t\t\t//Toute réinterrogation du document DOIT se faire après le traitement complet du batch pour que le doc et les wedlets soient en phase.\n\t\t\tthis.requestValue = XA.findDomLast(this.wedlet.wedAnchor, this.wedlet.wedMgr.docHolder.getDocument()) as Element;\n\t\t\tthis.redraw();\n\t\t})\n\t}\n\n\tprotected _redraw: () => void;\n\tprotected _redrawPlanned = false;\n\n\tredraw() {\n\t\tthis._redrawPlanned = false;\n\t\tthis.abstractElt.textContent = null;\n\t\tthis.msgLabelElt.setStandardMsg(null);\n\t\tthis.checkResult = undefined;\n\t\t// Contrôle\n\t\tif (this.checkXpath && !this.isEmpty()) {\n\t\t\tconst result = this.checkXpath.evaluate(this.requestValue, XPathResult.BOOLEAN_TYPE);\n\t\t\tif (!result.booleanValue) {\n\t\t\t\tthis.msgLabelElt.setCustomMsg(this.checkMsg || \"Requête non valide\", \"warning\");\n\t\t\t\tthis.checkResult = false;\n\t\t\t} else\n\t\t\t\tthis.checkResult = true;\n\t\t}\n\t\t// Maj de la requête\n\t\tconst wedMgr = this.wedlet.wedMgr;\n\t\tif (this.checkResult !== false) {\n\t\t\tif (this.wedlet.isVirtual()) removeAnnots(this);\n\t\t\tif (this.isEmpty()) {\n\t\t\t\tthis.msgLabelElt.setCustomMsg(\"Requête non définie\", \"info\");\n\t\t\t} else {\n\t\t\t\tthis.msgLabelElt.setStandardMsg(null);\n\t\t\t\tif (this.abstractElt) {\n\t\t\t\t\tconst context: OUiCritInit = {\n\t\t\t\t\t\treg: wedMgr.reg,\n\t\t\t\t\t\tcriterions: this.criterionsLists ? wedMgr.reg.mergeListsAsMap(...this.criterionsLists.split(' ')) : wedMgr.reg.getListAsMap(\"wsp.crit.items\"),\n\t\t\t\t\t};\n\t\t\t\t\tconst desc = UiCritBool.AREA_AND_ROOT.buildAbstract(this.requestValue, context);\n\t\t\t\t\tif (desc) this.abstractElt.appendChild(desc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.barActionsElt.refreshContent();\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn !this.requestValue || this.requestValue.childNodes.length == 0;\n\t}\n\n\tasync persistSearch(search: ISearchPersist): Promise<void> {\n\t\t//console.log(\"persistSearch:::::\", search);\n\t\tthis.setNewFrag(search.whereCrit instanceof Element ? search.whereCrit : search.whereCrit(this.wedlet.wedMgr));\n\t}\n\n\tasync doEdit() {\n\t\tconst wedMgr = this.wedlet.wedMgr;\n\t\tconst reg = wedMgr.reg;\n\t\tconst {SearchItems} = await import(\"back/wsp/dialogs/searchItems.js\");\n\t\tconst init: OSearchItemsInit = {\n\t\t\treg: reg,\n\t\t\tshowMainView: true,\n\t\t\tsrcGrid: {\n\t\t\t\tactions: reg.mergeLists(\"actions:wsp:shortDesc\", \"actions:searchItem:shortDesc:item\"),\n\t\t\t\taccelKeyMgr: new AccelKeyMgr().initFromMapActions(reg.mergeListsAsMap(\"accelkeys:wsp:shortDesc\", \"accelkeys:searchItem:shortDesc:item\"))\n\t\t\t},\n\t\t\treadonly: this.readonly || this.checkResult === false,\n\t\t\tcriterions: this.criterionsLists ? wedMgr.reg.mergeListsAsMap(...this.criterionsLists.split(' ')) : wedMgr.reg.getListAsMap(\"wsp.crit.items\"),\n\t\t\tsearchStore: this,\n\t\t\tcanEditTitle: false,\n\t\t\tinitSearchRequest: {} as ISearchPersist,\n\t\t};\n\t\tif (!this.isEmpty()) (init.initSearchRequest as ISearchPersist).whereCrit = this.requestValue;\n\t\tif (this.fillSearchWhereWrappersLists) {\n\t\t\tconst whereHandlers: Dict<(where: ISearchCrit[]) => Promise<void>> = wedMgr.reg.mergeListsAsMap(...this.fillSearchWhereWrappersLists.split(' ')) as Dict<(where: ISearchCrit[]) => Promise<void>>;\n\t\t\tinit.searchWhereWrapper = async function (where: ISearchCrit[], reg: IReg<IWspUiEnv>) {\n\t\t\t\tfor (const key in whereHandlers) {\n\t\t\t\t\tconst handler = whereHandlers[key];\n\t\t\t\t\tawait handler.call(this, where, wedMgr.reg);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tconst ct = new SearchItems().initialize(init);\n\t\tPOPUP.showDialog(ct, this, {\n\t\t\ttitleBar: {barLabel: {label: init.readonly ? 'Consultation d\\'une requête' : 'Édition d\\'une requête'}, closeButton: {}},\n\t\t\tresizer: {},\n\t\t\tviewPortX: \"middle\",\n\t\t\tviewPortY: \"middle\",\n\t\t\tinitWidth: \"90vw\",\n\t\t\tinitHeight: \"90vh\"\n\t\t});\n\t}\n}\n\nAgEltBoxSelection(AgEltBoxInputAnnotable(BoxRequest), {selMode: \"box\"});\n\nREG.reg.registerSkin('box-request', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-height: min-content;\n\t\tmin-width: 5em;\n\t\tflex-direction: column;\n\t\tborder: 1px solid var(--border-color);\n\t\tmargin: 0;\n\t}\n\n\t:host(:focus) {\n\t\toutline: var(--edit-input-focus);\n\t}\n\n\tc-bar-actions {\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\t#abstract {\n\t\ttext-align: center;\n\t}\n`);\n\nwindow.customElements.define(\"box-request\", BoxRequest);\n\nclass BoxRequestEdit extends Action<BoxRequest> {\n\n\tconstructor() {\n\t\tsuper('fragEdit');\n\t\tthis._description = \"Éditer cette requête\";\n\t}\n\n\tgetLabel(ctx: BoxRequest): string {\n\t\treturn (ctx.readonly || ctx.checkResult === false) ? \"Visualiser\" : \"Éditer\";\n\t}\n\n\tasync execute(ctx: BoxRequest, ev?: Event) {\n\t\tawait ctx.doEdit();\n\t}\n}\n\nclass BoxRequestErase extends Action<BoxRequest> {\n\tconstructor() {\n\t\tsuper('fragErase');\n\t\tthis._label = \"Effacer\";\n\t\tthis._description = \"Effacer le fragment HTML\";\n\t}\n\n\tisEnabled(ctx: BoxRequest): boolean {\n\t\tif (ctx.readonly) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\texecute(ctx: BoxRequest, ev?: Event) {\n\t\tctx.eraseFrag();\n\t}\n}\n\nfunction addAction(action: Action<BoxRequest>) {\n\tREG.reg.addToList(\"wed:boxRequest:actions\", action.getId(), 1, action);\n}\n\naddAction(new BoxRequestEdit());\naddAction(new BoxRequestErase());"]}