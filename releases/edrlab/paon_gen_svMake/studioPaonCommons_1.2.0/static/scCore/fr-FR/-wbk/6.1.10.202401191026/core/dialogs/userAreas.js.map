{"version":3,"sources":["/@back@/core/dialogs/userAreas.tsx"],"names":["REG","DOM","JSX","ControlAsyncArea","DateInputArea","InputChoiceArea","LabelArea","StringInputArea","ERROR","EUserAspects","EUserType","USER","InputOrderedSetPanel","RolesSelectorInput","CreateUserAction","ActionBtn","ActionWrapper","DOMSH","Box","UserAccountInputArea","[object Object]","id","super","this","setLabel","setPattern","setRequired","setVisible","userAreaIsVisible","setEnabled","userAreaIsEnabled","setInputCustomValidity","async","ctx","checkValidity","usersSrv","getUser","value","checkedUser","code","name","input","_buildControl","setAttr","reg","registerSvc","UsesPropertiesArea","control","createElement","Ã®","skinOver","DTFormatter","Intl","DateTimeFormat","year","month","day","hour","minute","second","Object","assign","parent","root","account","dataset","extractJson","rootTag","shadowRoot","querySelector","appendChild","innerHTML","accountLine","isReadOnly","class","title","isDisabled","isHidden","userType","user","pwdDt","date","format","txt","registerSkin","UserFirstNameInputArea","UserLastNameInputArea","UserGroupsInputArea","includeIsHiddenGroups","checkGroupReentrancy","loadDatasetOnInit","hasAspect","groupable","call","inputBox","inputElt","initialize","dataSet","fetchGroupsList","selectionLabel","availableLabel","emptySelectionMsg","previewMode","availableGridInit","lineDrawer","selectionGridInit","selectedEntries","incompatList","forEach","entry","_b","_a","flattenedGroups","indexOf","_currentAccount","push","label","length","list","join","undefined","addGroupBtn","then","val","disabled","addEventListener","evt","form","querySelectorAll","elt","inheritedRoles","resolveRoles","setInheritedRoles","reportValidity","defaultValue","getDefaultValue","_initStdControl","wrp","setOverridenSvc","SINGLETON_group","setExecute","ev","newGroup","getWrapped","execute","isAvailable","buildButton","includeIsHidden","groupsSet","group","groupsList","userList","sort","groupA","groupB","getPrimaryName","localeCompare","pGroup","users","find","grps","filter","map","userObj","icon","iconFilter","description","row","line","setAttrBool","rowDatas","UserGroupsMultiInputArea","indeterminate","key","findDocumentOrShadowRoot","activeElement","stopPropagation","dispatchEvent","CustomEvent","bubbles","cancelable","UserRolesInputArea","fixedCtx","getId","rolable","isVisible","uiLayerSgn","canBeIndeterminate","UserNicknamesFirstInputArea","nickNames","userSelfSrv","oneNickName","fillJson","array","UserEmailInputArea","UserGroupNameInputArea","UsersBoolPropsInputArea","setDefaultValue","isEnabled","buildBody","getDescription","checked","requireVisiblePerm","setDataset","false","true","setDescription","env","universe","auth","currentUser","PasswordInputArea","showLabelMode","ctn","setAttribute","pwdInput","placeholder","getLabel","buildControlLabel","_buildControlLabel","pwdValidRequest","clearTimeout","setTimeout","_checkPwd","confirmInput","confirmValidRequest","setCustomValidity","findReg","resp","userSelf","checkPwd","password","result","secondaryResults","msgs","reportError","msg","adminDetails","JSON","stringify","hook","getSvc"],"mappings":"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","sourcesContent":["import {IRegPointer, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {ControlArea, ControlAsyncArea, DateInputArea, IControlAreaContext, InputChoiceArea, LabelArea, StringInputArea} from \"lib/commons/areas\";\nimport {IFormJsonisable} from \"lib/commons/forms\";\nimport {IBasicUniversePointer, ICoreUniversePointer} from \"lib/core/universe\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {EUserAspects, EUserType, JUser, USER, UsersSrv} from \"lib/core/user\";\nimport {InputOrderedSetPanel, IOrderedSetEntry, OOrderedSetInit} from \"back/commons/widgets/inputs\";\nimport {IRoleEditUiHandlerContext, ORolesSelectorInit, RolesSelectorInput} from \"lib/commons/roles\";\nimport {CreateUserAction} from \"back/core/actions/usersActions\";\nimport {ActionBtn} from \"back/commons/widgets/buttons\";\nimport {ActionWrapper} from \"lib/commons/actions\";\nimport {OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {Box, OSkinableInit} from \"back/commons/basis\";\nimport \"back/core/dialogs/dialogs_Perms\";\nimport {UserSelfSrv} from \"lib/core/userSelf\";\nimport {IActionable} from \"back/commons/actionables\";\n\nexport interface IUserBaseAreaContext extends IControlAreaContext, IRegPointer<ICoreUniversePointer | IBasicUniversePointer> {\n\t/** CaractÃ©rise le contexte UI courant */\n\tuiContextSgn?: string\n\t/** Srvs de gestion de user associÃ©s Ã  cette arÃ©a */\n\tuserSelfSrv: UserSelfSrv\n\tusersSrv?: UsersSrv\n}\n\nexport interface IUserAreaContext extends IUserBaseAreaContext {\n\t/** User(s) sur lesquels s'appliquent cette area */\n\tusers?: JUser[],\n}\n\n/** account */\nexport class UserAccountInputArea extends StringInputArea<IUserAreaContext> {\n\tconstructor(id: string = \"account\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Compte\");\n\t\tthis.setPattern(\"[a-zA-Z0-9\\\\.\\\\-\\\\*_@]+\");\n\t\tthis.setRequired(true);\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t\tthis.setInputCustomValidity(async function (this: HTMLInputElement, ctx: IUserAreaContext): Promise<string> {\n\t\t\tif (!this.checkValidity()) return \"Seuls les caractÃ¨res alpha-numÃ©riques et \\\".-*_@\\\" sont autorisÃ©s\";\n\t\t\tif (ctx.usersSrv && (ctx.usersSrv as UsersSrv).getUser) {\n\t\t\t\tif (this.value) {\n\t\t\t\t\tlet checkedUser = await (ctx.usersSrv as UsersSrv).getUser(this.value);\n\t\t\t\t\tif (checkedUser) {\n\t\t\t\t\t\tlet code = this.value;\n\t\t\t\t\t\treturn `L'identifiant d'utilisateur '${code}' a dÃ©jÃ  Ã©tÃ© utilisÃ©.`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}, 500, true)\n\t}\n\n\t_buildControl(ctx: IUserAreaContext, name: string): HTMLInputElement {\n\t\tlet input = super._buildControl(ctx, name);\n\t\tDOM.setAttr(input, \"spellcheck\", \"false\");\n\t\tDOM.setAttr(input, \"autocomplete\", \"current-password\");// \"off\" ne fonctionne pas\n\t\treturn input;\n\t}\n}\n\nREG.reg.registerSvc('area.users.account', 1, new UserAccountInputArea());\n\n/** account et propriÃ©tÃ©s */\nclass UsesPropertiesArea extends LabelArea<IUserAreaContext> {\n\n\tconstructor() {\n\t\tsuper(\"account\");\n\t\tthis.setLabel(\"Compte\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\t_buildControl(ctx: IUserAreaContext, name: string): Box {\n\t\tlet control = <Box Ã®={{skinOver: \"area-users-props-box\"} as OSkinableInit}/> as Box;\n\t\tconst DTFormatter = new Intl.DateTimeFormat(\"fr\", {year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'});\n\t\tObject.assign(control, {\n\t\t\tfillJson(this: Box, parent: Jsonisable, root: Jsonisable): void {\n\t\t\t\tparent.account = this.dataset.account;\n\t\t\t},\n\t\t\textractJson: function (this: Box, parent: JUser) {\n\t\t\t\tthis.dataset.account = parent.account;\n\t\t\t\tlet rootTag: HTMLDivElement = this.shadowRoot.querySelector(\"div\");\n\t\t\t\tif (!rootTag) rootTag = this.shadowRoot.appendChild(<div/>) as HTMLDivElement;\n\t\t\t\trootTag.innerHTML = \"\";\n\t\t\t\tlet accountLine = rootTag.appendChild(<div/>);\n\t\t\t\tif (parent.isReadOnly)\n\t\t\t\t\taccountLine.appendChild(<span class=\"icon locked\" title=\"Compte en lecture seule\"/>);\n\t\t\t\tif (parent.isDisabled)\n\t\t\t\t\taccountLine.appendChild(<span class=\"icon disabled\" title=\"Compte dÃ©sactivÃ©\"/>);\n\t\t\t\tif (parent.isHidden && parent.userType === EUserType.user)\n\t\t\t\t\taccountLine.appendChild(<span class=\"icon system\" title=\"Compte de service\"/>);\n\t\t\t\t//accountLine.appendChild(<ButtonToggle onclick={function(this:ButtonToggle, ev:Event){this.toggleOn=!this.toggleOn}} Ã®={{icon:\"/@skin@/core/objects/user/system.svg\", toggleOn:!parent.isHidden, uiContext:\"bar\"} as OButtonToggleInit}/>);\n\t\t\t\taccountLine.appendChild(\n\t\t\t\t\t<span class=\"account\">{parent.account}</span>);\n\t\t\t\tif (parent.pwdDt) {\n\t\t\t\t\tlet date = DTFormatter.format(parent.pwdDt);\n\t\t\t\t\tlet txt = `Dernier changement de mot de passe : ${date}`;\n\t\t\t\t\trootTag.appendChild(<div class=\"pwd\">{txt}</div>);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} as IFormJsonisable);\n\t\treturn control;\n\t}\n}\n\nREG.reg.registerSvc('area.users.props', 1, new UsesPropertiesArea());\nREG.reg.registerSkin('area-users-props-box', 1, /* language=CSS */ `\n\t.icon {\n\t\tbackground-repeat: no-repeat;\n\t\tbackground-position: center;\n\t\tbackground-size: auto .9rem;\n\t\tpadding-inline-start: 12px;\n\t\tmargin-inline-end: 0.3em;\n\t}\n\n\t.disabled {\n\t\tbackground-image: url(/@skin@/core/objects/user/disabled.svg);\n\t}\n\n\t.locked {\n\t\tbackground-image: url(/@skin@/core/objects/user/locked.svg);\n\t}\n\n\t.system {\n\t\tbackground-image: url(/@skin@/core/objects/user/system.svg);\n\t}\n\n\t.account {\n\t\tfont-weight: bold;\n\t}\n\n\t.pwd {\n\t\tfont-size: .8rem;\n\t}\n`);\n\n/** firstName */\nexport class UserFirstNameInputArea extends StringInputArea<IUserAreaContext> {\n\tconstructor(id: string = \"firstName\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"PrÃ©nom\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\t_buildControl(ctx: IUserAreaContext, name: string): HTMLInputElement {\n\t\tlet input = super._buildControl(ctx, name);\n\t\tDOM.setAttr(input, \"spellcheck\", \"false\");\n\t\tDOM.setAttr(input, \"autocomplete\", \"current-password\");// \"off\" ne fonctionne pas\n\t\treturn input;\n\t}\n}\n\nREG.reg.registerSvc('area.users.firstName', 1, new UserFirstNameInputArea());\n\n/** lastName */\nexport class UserLastNameInputArea extends StringInputArea<IUserAreaContext> {\n\tconstructor(id: string = \"lastName\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Nom\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\t_buildControl(ctx: IUserAreaContext, name: string): HTMLInputElement {\n\t\tlet input = super._buildControl(ctx, name);\n\t\tDOM.setAttr(input, \"spellcheck\", \"false\");\n\t\tDOM.setAttr(input, \"autocomplete\", \"current-password\");// \"off\" ne fonctionne pas\n\t\treturn input;\n\t}\n}\n\nREG.reg.registerSvc('area.users.lastName', 1, new UserLastNameInputArea());\n\n\n/** groups */\nexport class UserGroupsInputArea<C extends IUserAreaContext> extends ControlAsyncArea<C> implements IGridLineDrawer {\n\tconstructor(id: string = \"groups\", public includeIsHiddenGroups: boolean | null = true, public checkGroupReentrancy = false, public loadDatasetOnInit = false) {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Groupes\");\n\t\tthis.setVisible((ctx) => {\n\t\t\tif (!ctx.usersSrv || !ctx.usersSrv.hasAspect(EUserAspects.groupable)) return false;\n\t\t\treturn userAreaIsVisible.call(this, ctx);\n\t\t});\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\tasync _loadControl(ctx: C, name: string): Promise<HTMLElement> {\n\t\tlet inputBox = <div class=\"ctrlLbl\"/>;\n\t\t// - Input\n\t\tconst inputElt: InputOrderedSetPanel = inputBox.appendChild(new InputOrderedSetPanel().initialize({\n\t\t\t//init data dÃ©portÃ© sur `extractJson` dans le cas de l'update de user (liste dÃ©pendant de la propriÃ©tÃ© 'flattenedGroups' du user courant)\n\t\t\tdataSet: this.loadDatasetOnInit ? await UserGroupsInputArea.fetchGroupsList(ctx, this.includeIsHiddenGroups) : {},\n\t\t\tselectionLabel: \"Groupes sÃ©lectionnÃ©s\",\n\t\t\tavailableLabel: \"Groupes disponibles\",\n\t\t\temptySelectionMsg: \"Aucun\",\n\t\t\tpreviewMode: \"asLines\",\n\t\t\tavailableGridInit: {\n\t\t\t\tskinOver: \"area-users-groups-tabs\",\n\t\t\t\tlineDrawer: this,\n\t\t\t} as OGridSmallInit,\n\t\t\tselectionGridInit: {\n\t\t\t\tskinOver: \"area-users-groups-tabs\",\n\t\t\t\tlineDrawer: this,\n\t\t\t} as OGridSmallInit,\n\t\t\tname,\n\t\t\tcheckValidity: this.checkGroupReentrancy ? function (this: InputOrderedSetPanel, selectedEntries) {\n\t\t\t\t// ContrÃ´le de cycle dans les groupes via 'flattenedGroups'\n\t\t\t\tconst incompatList: string[] = [];\n\t\t\t\tselectedEntries?.forEach(entry => {\n\t\t\t\t\tif (((inputElt.dataSet[entry] as any)?.flattenedGroups as string[])?.indexOf((this as any)._currentAccount) > -1)\n\t\t\t\t\t\tincompatList.push(inputElt.dataSet[entry].label)\n\t\t\t\t});\n\t\t\t\tif (incompatList.length) {\n\t\t\t\t\tconst list: string = incompatList.join(\", \");\n\t\t\t\t\treturn `Groupe(s) incompatible(s) avec le groupe courant : '${list}'`\n\t\t\t\t} else\n\t\t\t\t\treturn true;\n\t\t\t} : undefined,\n\t\t} as OOrderedSetInit));\n\n\t\tlet addGroupBtn: IActionable<any>;\n\n\t\tconst includeIsHiddenGroups = this.includeIsHiddenGroups;\n\t\tObject.assign(inputBox, {\n\t\t\tfillJson(this: Box, parent: Jsonisable, root: Jsonisable): void {\n\t\t\t\tparent[name] = inputElt.value;\n\t\t\t},\n\t\t\textractJson: function (this: Box, parent: JUser) {\n\t\t\t\t// Recalcul du dataSet : les propriÃ©tÃ©s peuvent Ã©voluer (modif du user courant, modif des 'flattenedGroups', ...)\n\t\t\t\tUserGroupsInputArea.fetchGroupsList(ctx, includeIsHiddenGroups).then((val) => {\n\t\t\t\t\tinputElt.dataSet = val;\n\t\t\t\t});\n\t\t\t\t(inputElt as any)._currentAccount = parent.account;\n\t\t\t\tinputElt.value = (parent as any)[name];\n\t\t\t\tif (addGroupBtn) addGroupBtn.disabled = parent.isReadOnly;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} as IFormJsonisable);\n\n\t\t// maj de la zone input du formulaire \"roles\"\n\t\tinputElt.addEventListener(\"change\", (evt) => {\n\t\t\tinputElt.form.querySelectorAll(\"c-input-roles-selector\").forEach(async (elt: RolesSelectorInput) => {\n\t\t\t\tlet inheritedRoles = await (ctx.usersSrv as UsersSrv).resolveRoles(inputElt.value);\n\t\t\t\tawait elt.setInheritedRoles(inheritedRoles);\n\t\t\t});\n\t\t\tinputElt.reportValidity();\n\t\t});\n\n\t\tconst defaultValue = this.getDefaultValue(ctx);\n\t\tif (defaultValue != null) inputElt.value = defaultValue;\n\t\tawait this._initStdControl(inputElt, ctx);\n\n\t\t// - Btn add groupes\n\t\tlet wrp = new ActionWrapper();\n\t\twrp.setOverridenSvc(CreateUserAction.SINGLETON_group).setExecute(async (ctx: C, ev?: Event) => {\n\t\t\tlet newGroup = await wrp.getWrapped(ctx).execute(ctx, ev);\n\t\t\tif (newGroup) {\n\t\t\t\t// FIXME : maj du dataset + ouverture du panel avec sÃ©lection de la nouvelle entrÃ©e \"newGroup\"\n\t\t\t\tinputElt.dataSet = await UserGroupsInputArea.fetchGroupsList(ctx, this.includeIsHiddenGroups);\n\t\t\t}\n\t\t});\n\t\tif (this.isAvailable(ctx)) addGroupBtn = inputBox.appendChild(ActionBtn.buildButton(wrp, ctx, \"bar\"));\n\n\t\treturn inputBox;\n\t}\n\n\tstatic async fetchGroupsList(ctx: IUserAreaContext, includeIsHidden?: boolean | null): Promise<Dict<IOrderedSetEntry>> {\n\t\tconst groupsSet = await (ctx.usersSrv as UsersSrv).list(null, EUserType.group, includeIsHidden, null, 100, null, null, ['flattenedGroups']);\n\t\tconst groupsList = groupsSet.userList?.sort((groupA, groupB) => USER.getPrimaryName(groupA).localeCompare(USER.getPrimaryName(groupB)));\n\t\tlet dataset: Dict<IOrderedSetEntry> = {};\n\t\tif (groupsList?.length > 0) {\n\t\t\tgroupsList.forEach((pGroup) => {\n\t\t\t\tif (pGroup && (!ctx.users || !ctx.users.find((user) => user?.account === pGroup.account))) {\n\t\t\t\t\tconst grps: string[] = pGroup.flattenedGroups?.filter(entry => entry != pGroup.account)\n\t\t\t\t\t\t.map(entry => {\n\t\t\t\t\t\t\tconst userObj = groupsList.find((user => user.account == entry));\n\t\t\t\t\t\t\treturn userObj ? USER.getPrimaryName(userObj) : entry;\n\t\t\t\t\t\t});\n\n\t\t\t\t\tdataset[pGroup.account] = {\n\t\t\t\t\t\tlabel: USER.getPrimaryName(pGroup),\n\t\t\t\t\t\ticon: \"/@skin@/core/objects/group.svg\",\n\t\t\t\t\t\ticonFilter: pGroup.isHidden ? \"opacity(50%)\" : undefined,\n\t\t\t\t\t\tdescription: grps?.length ? `groupes liÃ©s : ${grps}` : undefined,\n\t\t\t\t\t\tflattenedGroups: pGroup.flattenedGroups\n\t\t\t\t\t} as any;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn dataset;\n\t}\n\n\tredrawLine(row: GridDataRowJson<any>, line: HTMLElement): void {\n\t\tDOM.setAttrBool(line, \"data-user-hidden\", row.rowDatas.isHidden);\n\t}\n}\n\nREG.reg.registerSvc('area.users.groupsmembers.users', 1, new UserGroupsInputArea(\"groups\", false, false));\nREG.reg.registerSvc('area.users.groupsmembers.groups', 1, new UserGroupsInputArea(\"groups\", null, true));\nREG.reg.registerSvc('area.users.groupsmembers.users.create', 1, new UserGroupsInputArea(\"groups\", false, false, true));\nREG.reg.registerSvc('area.users.groupsmembers.groups.create', 1, new UserGroupsInputArea(\"groups\", null, true, true));\nREG.reg.registerSkin(\"area-users-groups-tabs\", 1, /* language=CSS */ `\n\t.cell > .icon {\n\t\tpadding-inline-start: 1.2em !important;\n\t\tmargin-inline-end: 0.3em !important;\n\t}\n\n\tdiv[data-user-hidden] {\n\t\tfont-style: italic;\n\t}\n`);\n\n/** Gestion des groupes sur n users sÃ©lectionnÃ©s */\nexport class UserGroupsMultiInputArea<C extends IUserAreaContext> extends ControlAsyncArea<C> implements IGridLineDrawer {\n\tconstructor(id: string = \"groups\", public includeIsHidden: boolean | null = true) {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Groupes\");\n\t\tthis.setVisible((ctx) => {\n\t\t\tif (!ctx.usersSrv || !ctx.usersSrv.hasAspect(EUserAspects.groupable)) return false;\n\t\t\treturn userAreaIsVisible.call(this, ctx);\n\t\t});\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\tasync _loadControl(ctx: C, name: string): Promise<HTMLElement> {\n\t\tlet inputBox = <div class=\"ctrlLbl\"/>;\n\t\t// - Input\n\t\tconst inputElt = inputBox.appendChild(new InputOrderedSetPanel().initialize({\n\t\t\tdataSet: await UserGroupsInputArea.fetchGroupsList(ctx, this.includeIsHidden),\n\t\t\tselectionLabel: \"Groupes sÃ©lectionnÃ©s\",\n\t\t\tavailableLabel: \"Groupes disponibles\",\n\t\t\temptySelectionMsg: \"Aucun\",\n\t\t\tavailableGridInit: {\n\t\t\t\tskinOver: \"area-users-groups-tabs\",\n\t\t\t\tlineDrawer: this,\n\t\t\t} as OGridSmallInit,\n\t\t\tselectionGridInit: {\n\t\t\t\tskinOver: \"area-users-groups-tabs\",\n\t\t\t\tlineDrawer: this,\n\t\t\t} as OGridSmallInit,\n\t\t\tname\n\t\t} as OOrderedSetInit));\n\t\tconst defaultValue = this.getDefaultValue(ctx);\n\t\tif (defaultValue != null) inputElt.value = defaultValue;\n\t\t// Gestion de l'Ã©tat indeterminate\n\t\tinputElt.indeterminate = true;\n\t\tinputElt.addEventListener(\"change\", function (this: InputOrderedSetPanel, evt) {\n\t\t\tthis.indeterminate = false;\n\t\t});\n\t\tinputElt.addEventListener('keydown', async function (this: InputOrderedSetPanel, ev: KeyboardEvent) {\n\t\t\tif (!this.disabled && (ev.key === 'Delete' || ev.key === 'Backspace') && this === DOMSH.findDocumentOrShadowRoot(this).activeElement) {\n\t\t\t\tthis.indeterminate = true;\n\t\t\t\tthis.value = null;\n\t\t\t\tev.stopPropagation();\n\t\t\t\tthis.form.dispatchEvent(new CustomEvent(\"change\", {bubbles: true, cancelable: false}));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\t// - Btn rÃ´les\n\t\t/*\n\t\tlet wrp = new ActionWrapper();\n\t\twrp.setOverridenSvc(CreateUserAction.SINGLETON_group).setExecute(async (ctx: C, ev?: Event) => {\n\t\t\tlet newGroup = await wrp.getWrapped(ctx).execute(ctx, ev);\n\t\t\tif (newGroup) {\n\t\t\t\t// FIXME : maj du dataset + ouverture du panel avec sÃ©lection de la nouvelle entrÃ©e \"newGroup\"\n\t\t\t\t// inputElt.dataSet = await UserGroupsInputArea.fetchGroupsList(ctx, this.filterHiddenGroups);\n\t\t\t}\n\t\t});\n\t\tinputBox.appendChild(ActionBtn.buildButton(wrp, ctx, \"bar\"));\n\t\t */\n\t\treturn inputBox;\n\t}\n\n\tredrawLine(row: GridDataRowJson<any>, line: HTMLElement): void {\n\t\tDOM.setAttrBool(line, \"data-user-hidden\", row.rowDatas.isHidden);\n\t}\n}\n\nREG.reg.registerSvc('area.users.groupsmembers.multi.users', 1, new UserGroupsMultiInputArea(\"groups\", false));\n\n/** grantedRoles */\nexport class UserRolesInputArea extends LabelArea {\n\n\tconstructor(id?: string, public fixedCtx?: ORolesSelectorInit & IRoleEditUiHandlerContext) {\n\t\tsuper(id || \"rolesSet\");\n\t\tif (!this.fixedCtx) this.fixedCtx = {\n\t\t\tname: this.getId(),\n\t\t} as ORolesSelectorInit & IRoleEditUiHandlerContext;\n\t\tthis.setLabel(\"RÃ´les\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\tisVisible(ctx: IUserAreaContext): boolean {\n\t\tif (!ctx.usersSrv || !ctx.usersSrv.hasAspect(EUserAspects.rolable)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\t_buildControl(ctx: IUserAreaContext, name: string): HTMLElement {\n\t\tconst elt = <RolesSelectorInput Ã®={Object.assign(Object.assign({}, ctx), this.fixedCtx)}/> as RolesSelectorInput;\n\t\tthis._initStdControl(elt, ctx);\n\t\treturn elt;\n\t}\n\n}\n\nREG.reg.registerSvc('area.users.grantedRoles.users', 1, new UserRolesInputArea(null, {uiLayerSgn: 'users'} as ORolesSelectorInit & IRoleEditUiHandlerContext));\nREG.reg.registerSvc('area.users.grantedRoles.groups', 1, new UserRolesInputArea(null, {uiLayerSgn: 'groups'} as ORolesSelectorInit & IRoleEditUiHandlerContext));\n\nREG.reg.registerSvc('area.users.grantedRoles.multi.users', 1, new UserRolesInputArea(null, {uiLayerSgn: 'users', canBeIndeterminate: true} as ORolesSelectorInit & IRoleEditUiHandlerContext));\nREG.reg.registerSvc('area.users.grantedRoles.multi.groups', 1, new UserRolesInputArea(null, {uiLayerSgn: 'groups', canBeIndeterminate: true} as ORolesSelectorInit & IRoleEditUiHandlerContext));\n\n/** nickNames : gestion d'une *unique valeur* */\nexport class UserNicknamesFirstInputArea<C extends IUserAreaContext> extends StringInputArea<C> {\n\tconstructor(id: string = \"nickNames\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Pseudo\");\n\t\tthis.setInputCustomValidity(async function (this: HTMLInputElement, ctx: IUserAreaContext): Promise<string> {\n\t\t\tif (this.value) {\n\t\t\t\tif (ctx.usersSrv && (ctx.usersSrv as UsersSrv).getUser) {\n\t\t\t\t\tif (ctx.users && ctx.users.length === 1 && ctx.users[0].nickNames && ctx.users[0].nickNames.indexOf(this.value) > -1)\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\tlet checkedUser = await (ctx.usersSrv as UsersSrv).getUser(this.value);\n\t\t\t\t\tif (checkedUser) {\n\t\t\t\t\t\tlet code = this.value;\n\t\t\t\t\t\treturn `L'identifiant d'utilisateur '${code}' a dÃ©jÃ  Ã©tÃ© utilisÃ©.`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}, 500, true)\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.userSelfSrv.hasAspect(EUserAspects.oneNickName)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\t_buildControl(ctx: C, name: string): HTMLInputElement {\n\t\tconst control = super._buildControl(ctx, name);\n\t\tDOM.setAttr(control, \"spellcheck\", \"false\");\n\t\tDOM.setAttr(control, \"autocomplete\", \"current-password\");// \"off\" ne fonctionne pas\n\t\tObject.assign(control, {\n\t\t\tfillJson: function (this: HTMLInputElement, parent: Jsonisable, root: Jsonisable) {\n\t\t\t\tif (!this.disabled) parent[this.name] = this.value ? [this.value] : []; //Si disabled, nickName non Ã©ditable => on ne le retourne pas au serveur.\n\t\t\t},\n\t\t\textractJson: function (this: HTMLInputElement, parent: Dict<any>) {\n\t\t\t\tconst array = parent[this.name];\n\t\t\t\tif (array && array.length) {\n\t\t\t\t\tthis.value = array[0];\n\t\t\t\t\treturn true;\n\t\t\t\t} else\n\t\t\t\t\tthis.value = null;//pour RAZ\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} as IFormJsonisable);\n\t\treturn control;\n\t}\n}\n\nREG.reg.registerSvc('area.users.nickNames.first', 1, new UserNicknamesFirstInputArea());\n\n/** mail */\nexport class UserEmailInputArea extends StringInputArea<IUserAreaContext> {\n\tconstructor(id: string = \"email\") {\n\t\tsuper(id, \"email\");\n\t\tthis.setLabel(\"E-mail\");\n\t\tthis.setPattern(\"^[a-zA-Z0-9_.-]+@[a-zA-Z0-9.-]+$\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\t_buildControl(ctx: IUserAreaContext, name: string): HTMLInputElement {\n\t\tconst control = super._buildControl(ctx, name);\n\t\tDOM.setAttr(control, \"autocomplete\", \"current-password\");// \"off\" ne fonctionne pas\n\t\treturn control;\n\t}\n}\n\nREG.reg.registerSvc('area.users.email.user', 1, new UserEmailInputArea());\nREG.reg.registerSvc('area.users.email.group', 1, new UserEmailInputArea());\n\n/** groupName */\nexport class UserGroupNameInputArea extends StringInputArea<IUserAreaContext> {\n\tconstructor(id: string = \"groupName\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"IntitulÃ©\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\t_buildControl(ctx: IUserAreaContext, name: string): HTMLInputElement {\n\t\tlet input = super._buildControl(ctx, name);\n\t\tDOM.setAttr(input, \"spellcheck\", \"false\");\n\t\tDOM.setAttr(input, \"autocomplete\", \"current-password\");// \"off\" ne fonctionne pas\n\t\treturn input;\n\t}\n}\n\nREG.reg.registerSvc('area.users.groupName', 1, new UserGroupNameInputArea());\n\n/** isHidden, isDisabled */\nclass UsersBoolPropsInputArea extends InputChoiceArea<IUserAreaContext> {\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t\tthis.setDefaultValue(\"false\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\tisEnabled(ctx: IUserAreaContext): boolean {\n\t\t//XXX A revoir : isEnabled n'est pas rÃ©Ã©valuÃ© au changement du user Ã  afficher dans l'area.\n\t\t// if (this._id === \"isDisabled\") {\n\t\t// \t//On interdit le user de se dÃ©sactiver lui-mÃªme.\n\t\t// \tconst currentUser = ctx.reg.env.universe.auth.currentAccount;\n\t\t// \tif (ctx.users.find((u) => u.account === currentUser)) return false;\n\t\t// }\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\tbuildBody(ctx: IUserAreaContext): HTMLElement {\n\t\tlet elt = super.buildBody(ctx);\n\t\tif (this.getDescription(ctx)) elt.title = this.getDescription(ctx);\n\t\treturn elt;\n\t}\n\n\t_buildControl(ctx: any, name: string): HTMLDivElement {\n\t\tconst control = super._buildControl(ctx, name);\n\t\tObject.assign(control, {\n\t\t\tfillJson: function (this: HTMLDivElement, parent: Jsonisable, root: Jsonisable) {\n\t\t\t\tlet input = this.querySelector(\"input:checked\") as HTMLInputElement;\n\t\t\t\tif (input) parent[name] = input.value === \"true\";\n\t\t\t},\n\t\t\textractJson: function (this: HTMLDivElement, parent: Dict<any>) {\n\t\t\t\tif (parent[name])\n\t\t\t\t\t(this.querySelector(\"input[value='true']\") as HTMLInputElement).checked = true;\n\t\t\t\telse\n\t\t\t\t\t(this.querySelector(\"input[value='false']\") as HTMLInputElement).checked = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} as IFormJsonisable);\n\t\treturn control;\n\t}\n}\n\nREG.reg.registerSvc('area.users.isHidden.groups', 1, new UsersBoolPropsInputArea(\"isHidden\")\n\t.setLabel(\"VisibilitÃ©\")\n\t.requireVisiblePerm(\"ui.usersMgr.admin.hiddenGroup\")\n\t.setDataset({\"false\": {label: \"globale\"}, \"true\": {label: \"gestion\", description: \"Groupe intermÃ©diaire n'ayant pas vocation Ã  Ãªtre exploitÃ© en dehors de l'Ã©cran de gestion des groupes\"}})\n);\nREG.reg.registerSvc('area.users.isHidden.users', 1, new UsersBoolPropsInputArea(\"isHidden\")\n\t.setLabel(\"Compte de service\")\n\t.requireVisiblePerm(\"ui.usersMgr.admin.hiddenUser\")\n\t.setDescription(\"Compte de service : compte masquÃ© en dehors de l'Ã©cran de gestion des utilisateurs\")\n\t.setDataset({\"false\": {label: \"non\"}, \"true\": {label: \"oui\"}})\n);\n\n\nREG.reg.registerSvc('area.users.isDisabled.users', 1, new UsersBoolPropsInputArea(\"isDisabled\")\n\t.setLabel(\"Compte actif\")\n\t.setDataset({\"false\": {label: \"actif\"}, \"true\": {label: \"inactif\"}})\n\t// pas de dÃ©sactivation du user courant\n\t.setEnabled(function (this: ControlArea<any>, ctx: IUserAreaContext) {\n\t\t\tif (userAreaIsEnabled.call(this, ctx) === false) return false;\n\t\t\treturn ctx.users?.find(user =>\n\t\t\t\tuser?.account === ctx.reg.env.universe.auth.currentUser.account) ? false : true\n\t\t}\n\t)\n);\n\nREG.reg.registerSvc('area.users.enabledEndDt', 1, new DateInputArea(\"enabledEndDt\").setLabel(\"Inactif Ã  partir du\")\n\t// pas de dÃ©sactivation du user courant\n\t.setEnabled(function (this: ControlArea<any>, ctx: IUserAreaContext) {\n\t\t\tif (userAreaIsEnabled.call(this, ctx) === false) return false;\n\t\t\treturn ctx.users?.find(user =>\n\t\t\t\tuser?.account === ctx.reg.env.universe.auth.currentUser.account) ? false : true\n\t\t}\n\t)\n);\n\n/**\n * Area de construction d'un double champs pour entrer un mot de passe\n */\nexport class PasswordInputArea<C extends IUserAreaContext> extends StringInputArea<C> {\n\tconstructor(id?: string, public showLabelMode?: \"placeholder\") {\n\t\tsuper(id, \"password\");\n\t\tthis.setLabel(\"Mot de passe\");\n\t\tthis.setVisible(userAreaIsVisible);\n\t\tthis.setEnabled(userAreaIsEnabled);\n\t}\n\n\tbuildBody(ctx: C): HTMLElement {\n\t\tconst ctn = <div/>;\n\t\tif (!this.isVisible(ctx)) ctn.setAttribute('hidden', '');\n\n\t\tconst pwdInput = this._buildControl(ctx, this.getId());\n\t\tDOM.setAttr(pwdInput, \"autocomplete\", \"current-password\");// \"off\" ne fonctionne pas\n\t\tif (this.showLabelMode === \"placeholder\") pwdInput.placeholder = this.getLabel(ctx);\n\t\tctn.appendChild((this.showLabelMode !== \"placeholder\" && ctx.buildControlLabel) ? this._buildControlLabel(pwdInput, ctx) : <div class=\"ctrlLbl\">{pwdInput}</div>);\n\t\tthis._initStdControl(pwdInput, ctx);\n\n\t\tlet pwdValidRequest = 0;\n\t\tif (this.isAvailable(ctx)) {\n\t\t\tpwdInput.addEventListener('input', () => {\n\t\t\t\tif (pwdValidRequest) {\n\t\t\t\t\tclearTimeout(pwdValidRequest);\n\t\t\t\t\tpwdValidRequest = 0;\n\t\t\t\t}\n\t\t\t\tpwdValidRequest = setTimeout(async () => {\n\t\t\t\t\tawait this._checkPwd(pwdInput);\n\t\t\t\t}, 500) as any;\n\t\t\t});\n\n\t\t\tconst confirmInput = this._buildControl(ctx, \"confirmPwd\");\n\t\t\tDOM.setAttr(confirmInput, \"autocomplete\", \"current-password\");\n\t\t\tthis._initStdControl(confirmInput, ctx);\n\t\t\tif (this.showLabelMode === \"placeholder\") confirmInput.placeholder = \"Confirmation\";\n\t\t\tctn.appendChild((this.showLabelMode !== \"placeholder\" && ctx.buildControlLabel) ? this._buildControlLabel(confirmInput, ctx, \"Confirmation\") : <div class=\"ctrlLbl\">{confirmInput}</div>);\n\n\t\t\tObject.assign(confirmInput, {\n\t\t\t\textractJson: function (this: HTMLInputElement, parent: Jsonisable) {\n\t\t\t\t\t//input technique (ni rÃ©cupÃ©rÃ©, ni renvoyÃ© au serveur)\n\t\t\t\t},\n\t\t\t\tfillJson: function (this: HTMLDivElement, parent: Jsonisable, root: Jsonisable) {\n\t\t\t\t\t//input technique (ni rÃ©cupÃ©rÃ©, ni renvoyÃ© au serveur)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet confirmValidRequest = 0;\n\t\t\tconfirmInput.addEventListener('input', () => {\n\t\t\t\tif (confirmValidRequest) {\n\t\t\t\t\tclearTimeout(confirmValidRequest);\n\t\t\t\t\tconfirmValidRequest = 0;\n\t\t\t\t}\n\t\t\t\tconfirmValidRequest = setTimeout(() => {\n\t\t\t\t\tif (confirmInput.value && confirmInput.value != pwdInput.value) confirmInput.setCustomValidity(\"Les mots de passe ne correspondent pas.\");\n\t\t\t\t\telse confirmInput.setCustomValidity('');\n\t\t\t\t}, 300) as any;\n\t\t\t});\n\n\t\t\tpwdInput.addEventListener('input', () => {\n\t\t\t\tconfirmInput.dispatchEvent(new CustomEvent(\"input\", {bubbles: true, cancelable: false}));\n\t\t\t});\n\t\t}\n\t\treturn ctn;\n\t}\n\n\tasync _checkPwd(input: HTMLInputElement) {\n\t\tinput.setCustomValidity('')\n\t\tif (input.value && input.checkValidity()) {\n\t\t\tconst reg = REG.findReg<IBasicUniversePointer>(input);\n\t\t\tconst resp = await reg.env.universe.userSelf.checkPwd({password: input.value});\n\n\t\t\tif (resp.result === \"ok\") {\n\t\t\t\tinput.setCustomValidity('');\n\t\t\t} else if (resp.result == \"failedInvalidDatas\" && resp.secondaryResults && resp.secondaryResults.msgs) {\n\t\t\t\tinput.setCustomValidity(resp.secondaryResults.msgs[0]);\n\t\t\t} else {\n\t\t\t\tERROR.reportError({\n\t\t\t\t\tmsg: \"Une erreur est survenue lors de la vÃ©rification du mot de passe.\",\n\t\t\t\t\tctx: {reg},\n\t\t\t\t\tadminDetails: JSON.stringify(resp)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Hook sur le isVisible des areas de users */\nexport type IUserAreaIsVisibleHook = (this: ControlArea<any>, ctx: IUserBaseAreaContext) => boolean;\n\n/** @return false si masquÃ©\n * ctx \"IUserBaseAreaContext\" non utilisÃ© car nÃ©cessite un recalcul du form lors de chaque sÃ©lection de user dans usersMgr.\n * A activer si le besoin apparait (init form userAreas dÃ©pendant de la liste des users)\n */\nexport function userAreaIsVisible(this: ControlArea<any>, ctx: IUserBaseAreaContext): boolean {\n\tlet hook = ctx.reg.getSvc(\"user.area.visible.hook\") as IUserAreaIsVisibleHook;\n\tif (hook) return hook.call(this, ctx);\n\treturn null;\n}\n\n/** Hook sur le isEnabled des areas de users */\nexport type IUserAreaIsEnabledHook = (this: ControlArea<any>, ctx: IUserBaseAreaContext) => boolean;\n\n/** @return false si disabled\n * ctx \"IUserBaseAreaContext\" non utilisÃ© car nÃ©cessite un recalcul du form lors de chaque sÃ©lection de user dans usersMgr.\n * A activer si le besoin apparait (init form userAreas dÃ©pendant de la liste des users)\n */\nexport function userAreaIsEnabled(this: ControlArea<any>, ctx: IUserBaseAreaContext): boolean {\n\tlet hook = ctx.reg.getSvc(\"user.area.enabled.hook\") as IUserAreaIsEnabledHook;\n\tif (hook) return hook.call(this, ctx);\n\treturn null;\n}\n"]}