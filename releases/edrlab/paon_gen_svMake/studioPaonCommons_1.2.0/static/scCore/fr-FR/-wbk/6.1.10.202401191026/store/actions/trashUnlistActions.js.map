{"version":3,"sources":["/@back@/store/actions/trashUnlistActions.tsx"],"names":["URLTREE","EStoreAspects","ResEditAction","POPUP","ResAction","switchVisState2TrashUnlistActions","reg","resEditCdList","add","TrashResList","UntrashResList","UnlistResList","RelistResList","addEditAction","action","addToList","getId","UnlistRes","RelistRes","TrashRes","UntrashRes","[object Object]","id","super","this","_description","_icon","_group","_enablePerms","ctx","_label","env","resType","prcVersionning","getLabel","universe","hasAspect","trash","nodeInfos","trashed","isRootPath","permaPath","isVisible","ev","uiCtx","getUiCtx","confirm","sendCidUpdate","path","olderResId","unlisted","atLeastOne","node","t","resList","restrictToRoots","filter","count","length","progress","showProgress","onProgress","i","n","close"],"mappings":"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","sourcesContent":["import {IDepotCtx, IDepotResCtx, IDepotShortResCtx} from \"lib/store/res\";\nimport {JNodeShortProps, URLTREE} from \"lib/store/urlTree\";\nimport {EStoreAspects, IDepotUiEnv} from \"lib/store/depot\";\nimport {ResEditAction} from \"back/store/actions/resActions\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {ResAction} from \"back/store/actions/depotActions\";\nimport {IReg} from \"lib/commons/registry\";\nimport {IAction} from \"lib/commons/actions\";\n\n\n/**\n * Gestion des statuts trashed et unlisted par 4 boutons différents.\n * Approche abandonnée par défaut en SC6 au profit d'un menu \"Visibilité en ligne\".\n * Isolé ici si on souhaite activer cette approche ergo dans certains projets en free.\n *\n * @reg registre du dépot.\n * @param resEditCdList \"actions:depot:resMainView:edit\" pour resMainView\n */\nexport function switchVisState2TrashUnlistActions(reg: IReg<IDepotUiEnv>, resEditCdList: string) {\n\tResAction.add(new TrashResList(), null, reg);\n\tResAction.add(new UntrashResList(), null, reg);\n\tResAction.add(new UnlistResList(), null, reg);\n\tResAction.add(new RelistResList(), null, reg);\n\n\tfunction addEditAction(action: IAction<IDepotShortResCtx | IDepotResCtx>) {\n\t\treg.addToList(resEditCdList, action.getId(), 1, action);\n\t}\n\n\taddEditAction(new UnlistRes());\n\taddEditAction(new RelistRes());\n\taddEditAction(new TrashRes());\n\taddEditAction(new UntrashRes());\n}\n\n\nexport class TrashRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'trashRes');\n\t\tthis._description = \"Supprimer cette ressource (restauration possible)\";\n\t\tthis._icon = \"/@skin@/store/actions/trashRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#trash.res\";\n\t}\n\n\tgetLabel(ctx: C): string {\n\t\tif (!this._label) return ctx.reg.env.resType.prcVersionning === \"VCB\" ? \"Supprimer cette version\" : \"Supprimer\";\n\t\treturn super.getLabel(ctx);\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.trash)) return false;\n\t\tif (ctx.reg.env.nodeInfos.trashed) return false;\n\t\tif (URLTREE.isRootPath(ctx.reg.env.nodeInfos.permaPath)) return false; //XXX à voir si root versionné ?\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tif (await POPUP.confirm(\"Supprimer cette ressource (restauration possible) ?\", uiCtx)) {\n\t\t\treturn ResEditAction.sendCidUpdate({\n\t\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\t\tolderResId: \"\",\n\t\t\t\ttrashed: true\n\t\t\t}, ctx, uiCtx);\n\t\t}\n\t}\n}\n\nexport class UntrashRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'restoreRes');\n\t\tthis._description = \"Restaurer cette ressource supprimée\";\n\t\tthis._icon = \"/@skin@/store/actions/untrashRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#untrash.res\";\n\t}\n\n\tgetLabel(ctx: C): string {\n\t\tif (!this._label) return ctx.reg.env.resType.prcVersionning === \"VCB\" ? \"Restaurer cette version\" : \"Restaurer\";\n\t\treturn super.getLabel(ctx);\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.trash)) return false;\n\t\tif (!ctx.reg.env.nodeInfos.trashed) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tif (await POPUP.confirm(\"Restaurer cette ressource supprimée ?\", uiCtx)) {\n\t\t\treturn ResEditAction.sendCidUpdate({\n\t\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\t\tolderResId: \"\",\n\t\t\t\ttrashed: false\n\t\t\t}, ctx, uiCtx);\n\t\t}\n\t}\n}\n\nexport class UnlistRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'unlistRes');\n\t\tthis._label = \"Masquer dans les listes\";\n\t\tthis._description = \"Masquer cette ressource lors de l'affichage d'une liste\";\n\t\tthis._icon = \"/@skin@/store/actions/unlistRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#unlist.res\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.unlisted)) return false;\n\t\tif (ctx.reg.env.nodeInfos.trashed || ctx.reg.env.nodeInfos.unlisted) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tif (await POPUP.confirm(\"Masquer cette ressource lors de l'affichage d'une liste ?\", uiCtx)) {\n\t\t\treturn ResEditAction.sendCidUpdate({\n\t\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\t\tolderResId: \"\",\n\t\t\t\tunlisted: true\n\t\t\t}, ctx, uiCtx);\n\t\t}\n\t}\n}\n\nexport class RelistRes<C extends IDepotShortResCtx | IDepotResCtx> extends ResEditAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'relistRes');\n\t\tthis._label = \"Afficher dans les listes\";\n\t\tthis._description = \"Afficher cette ressource lors de l'affichage d'une liste\";\n\t\tthis._icon = \"/@skin@/store/actions/relistRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#relist.res\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.unlisted)) return false;\n\t\tif (ctx.reg.env.nodeInfos.trashed || !ctx.reg.env.nodeInfos.unlisted) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tif (await POPUP.confirm(\"Afficher cette ressource lors de l'affichage d'une liste ?\", uiCtx)) {\n\t\t\treturn ResEditAction.sendCidUpdate({\n\t\t\t\tpath: ctx.reg.env.nodeInfos.permaPath,\n\t\t\t\tolderResId: \"\",\n\t\t\t\tunlisted: false\n\t\t\t}, ctx, uiCtx);\n\t\t}\n\t}\n}\n\n\nexport class TrashResList<C extends IDepotCtx> extends ResAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'trashResList');\n\t\tthis._label = \"Supprimer\";\n\t\tthis._description = \"Supprimer ces éléments (restauration possible)\";\n\t\tthis._icon = \"/@skin@/store/actions/trashRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#trash.res\";\n\t\tthis.atLeastOne = (node: JNodeShortProps) => !node.trashed && node.t !== \"moved\" && !URLTREE.isRootPath(node.permaPath); //XXX à voir si root versionné ?\n\t}\n\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.trash)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tlet resList = TrashResList.restrictToRoots(ctx.resList.filter(this.atLeastOne as (node: JNodeShortProps) => boolean));\n\t\tconst count = resList.length;\n\t\tif (count === 0) return;\n\t\t//TODO afficher la liste des res à supprimer dans la confirmation.\n\t\tif (await POPUP.confirm(count === 1 ? \"Supprimer cet élément (restauration possible) ?\" : `Supprimer ces ${count} éléments (restauration possible) ?`, uiCtx)) {\n\t\t\tconst progress = POPUP.showProgress(uiCtx, \"Suppressions en cours...\");\n\t\t\ttry {\n\t\t\t\tprogress.onProgress(0, count);\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tconst n = resList[i];\n\t\t\t\t\tawait ResEditAction.sendCidUpdate({\n\t\t\t\t\t\tpath: n.permaPath,\n\t\t\t\t\t\tolderResId: \"\",\n\t\t\t\t\t\ttrashed: true\n\t\t\t\t\t}, ctx, uiCtx);\n\t\t\t\t\tprogress.onProgress(i + 1, count);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tprogress.close();\n\t\t\t}\n\t\t}\n\t}\n}\n\n\nexport class UntrashResList<C extends IDepotCtx> extends ResAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'untrashResList');\n\t\tthis._label = \"Restaurer\";\n\t\tthis._description = \"Restaurer ces éléments\";\n\t\tthis._icon = \"/@skin@/store/actions/untrashRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#untrash.res\";\n\t\tthis.atLeastOne = (node: JNodeShortProps) => node.trashed;\n\t}\n\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.trash)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tconst resList = ctx.resList.filter(this.atLeastOne as (node: JNodeShortProps) => boolean);\n\t\tconst count = resList.length;\n\t\tif (count === 0) return;\n\t\tif (await POPUP.confirm(count === 1 ? \"Restaurer cet élément ?\" : `Restaurer ces ${count} éléments ?`, uiCtx)) {\n\t\t\tconst progress = POPUP.showProgress(uiCtx, \"Restaurations en cours...\");\n\t\t\ttry {\n\t\t\t\tprogress.onProgress(0, count);\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tconst n = resList[i];\n\t\t\t\t\tawait ResEditAction.sendCidUpdate({\n\t\t\t\t\t\tpath: n.permaPath,\n\t\t\t\t\t\tolderResId: \"\",\n\t\t\t\t\t\ttrashed: false\n\t\t\t\t\t}, ctx, uiCtx);\n\t\t\t\t\tprogress.onProgress(i + 1, count);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tprogress.close();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class UnlistResList<C extends IDepotCtx> extends ResAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'unlistResList');\n\t\tthis._label = \"Masquer dans les listes\";\n\t\tthis._description = \"Masquer ces éléments lors de l'affichage d'une liste\";\n\t\tthis._icon = \"/@skin@/store/actions/unlistRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#unlist.res\";\n\t\tthis.atLeastOne = (node: JNodeShortProps) => !node.unlisted;\n\t}\n\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.unlisted)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tconst resList = ctx.resList.filter(this.atLeastOne as (node: JNodeShortProps) => boolean);\n\t\tconst count = resList.length;\n\t\tif (count === 0) return;\n\t\tif (await POPUP.confirm(count === 1 ? \"Masquer cet élément ?\" : `Masquer ces ${count} éléments ?`, uiCtx)) {\n\t\t\tconst progress = POPUP.showProgress(uiCtx, \"Masquage en cours...\");\n\t\t\ttry {\n\t\t\t\tprogress.onProgress(0, count);\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tconst n = resList[i];\n\t\t\t\t\tawait ResEditAction.sendCidUpdate({\n\t\t\t\t\t\tpath: n.permaPath,\n\t\t\t\t\t\tolderResId: \"\",\n\t\t\t\t\t\tunlisted: true\n\t\t\t\t\t}, ctx, uiCtx);\n\t\t\t\t\tprogress.onProgress(i + 1, count);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tprogress.close();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class RelistResList<C extends IDepotCtx> extends ResAction<C> {\n\n\tconstructor(id?: string) {\n\t\tsuper(id || 'relistResList');\n\t\tthis._label = \"Afficher dans les listes\";\n\t\tthis._description = \"Afficher cet élément lors de l'affichage d'une liste\";\n\t\tthis._icon = \"/@skin@/store/actions/relistRes.svg\";\n\t\tthis._group = \"edit\";\n\t\tthis._enablePerms = \"action.store#relist.res\";\n\t\tthis.atLeastOne = (node: JNodeShortProps) => node.unlisted;\n\t}\n\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.hasAspect(EStoreAspects.unlisted)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst uiCtx = ResEditAction.getUiCtx(ctx, ev);\n\t\tconst resList = ctx.resList.filter(this.atLeastOne as (node: JNodeShortProps) => boolean);\n\t\tconst count = resList.length;\n\t\tif (count === 0) return;\n\t\tif (await POPUP.confirm(count === 1 ? \"Afficher cet élément dans les listes ?\" : `Afficher ces ${count} éléments dans les listes ?`, uiCtx)) {\n\t\t\tconst progress = POPUP.showProgress(uiCtx, \"Traitement en cours...\");\n\t\t\ttry {\n\t\t\t\tprogress.onProgress(0, count);\n\t\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\t\tconst n = resList[i];\n\t\t\t\t\tawait ResEditAction.sendCidUpdate({\n\t\t\t\t\t\tpath: n.permaPath,\n\t\t\t\t\t\tolderResId: \"\",\n\t\t\t\t\t\tunlisted: false\n\t\t\t\t\t}, ctx, uiCtx);\n\t\t\t\t\tprogress.onProgress(i + 1, count);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tprogress.close();\n\t\t\t}\n\t\t}\n\t}\n}\n"]}