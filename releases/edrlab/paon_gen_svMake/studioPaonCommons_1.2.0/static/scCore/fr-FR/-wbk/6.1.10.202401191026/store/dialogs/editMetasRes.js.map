{"version":3,"sources":["/@back@/store/dialogs/editMetasRes.tsx"],"names":["BaseElementAsync","MsgLabel","REG","DOMSH","FORMS","Button","POPUP","JSX","EditMetasRes","holder","this","config","findPopupableParent","[object Object]","init","reg","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","env","nodeInfosPending","datas","_a","nodeInfos","metas","defaultValues","Object","assign","create","overrideValues","area","resType","resForm","formView","formIdent","skinForm","getSkin","skinFormOver","getSkinOver","ctx","buildControlLabel","callback","msgArea","createElement","id","fields","loadBody","formEditElt","onsubmit","ev","doBtn","label","doBtnLabel","class","onclick","onSave","ui-context","append","onCancel","jsonToForm","_b","findFirstFocusable","focus","me","findHost","checkAsyncValidity","currentInfos","result","path","processing","prc","resId","olderResId","olderPath","formToJson","close","reportValidity","resState","targetPath","msg","msgLevel","setCustomMsg","disabled","registerSkin","customElements","define"],"mappings":"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","sourcesContent":["import {BaseElementAsync, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {IDepotResUiEnv} from \"lib/store/depot\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {FORMS} from \"lib/commons/forms\";\nimport {Button} from \"back/commons/widgets/buttons\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {IResFormCtx, IResFormIdentCtx, JCidMetas, JPersistMetas, OResFormIdentConfig, resPath} from \"lib/store/res\";\nimport {ICloseable} from \"back/commons/widgets/popupable\";\n\n\n/**\n * Dialogue d'édition des metas d'une ressource.\n * Ce dialogue n'exécute pas le push cid mais retourne les paramètres Cid.\n * Ce dialogue fournit en retour un JCidMetas à envoyer.\n */\nexport interface EditMetasRes extends BaseElementAsync {\n\tinitialize(init: OEditMetasResInit): this\n}\n\nexport interface OEditMetasResInit extends OSkinableInit {\n\treg?: IReg<IDepotResUiEnv>;\n\n\t/**\n\t * A configurer pour éditer les metas identificatoires de la ressource (déplacement, renommage...).\n\t */\n\tformIdent?: OResFormIdentConfig\n\n\t/** Key pour IResType.resForm(). Par défaut : \"editMetas\" ou \"editIdent\" si formIdent est renseigné. */\n\tformView?: string\n\n\t/**\n\t * Valeurs par défaut de 'reg.env.nodeInfos.metas' passé au formulaire.\n\t *\n\t * Algo:\n\t * Si defaultValue est un objet :\n\t * \tconst datas = Object.assign(Object.create(defaultValues), reg.env.nodeInfos?.metas);\n\t *\n\t * Si defaultValue est une fonction :\n\t * \tconst datas = Object.assign(defaultValues(this), reg.env.nodeInfos?.metas);\n\t *\n\t * Si defaultValue == null\n\t * \tconst datas = {};\n\t */\n\tdefaultValues?: JCidMetas | ((editMetas: EditMetasRes) => JCidMetas)\n\n\t/**\n\t * Valeurs imposées / modifiées sur la res à éditer (écrasant les 'reg.env.nodeInfos.metas' courants).\n\t *\n\t * Algo:\n\t * `datas` est le résultat tel que définit par OEditMetasResInit.defaultValues\n\t *\n\t * Si overrideValues est un objet :\n\t * \tObject.assign(datas, overrideValues)\n\t *\n\t * Si overrideValues est une fonction :\n\t * \toverrideValues(this, datas)\n\t */\n\toverrideValues?: JCidMetas | ((editMetas: EditMetasRes, values: JCidMetas) => JCidMetas)\n\n\t/**\n\t * Personnalisation du libellé du bouton de validation. Par défaut: \"Enregistrer\" ou \"Renommer\" si formIdent est renseigné.\n\t */\n\tdoBtnLabel?: string\n\n\t/** Contexte d'appel auprès duquel retourner le résultat. */\n\tholder?: ICloseable<JCidMetas | null>\n}\n\nexport class EditMetasRes extends BaseElementAsync {\n\treg: IReg<IDepotResUiEnv>;\n\tconfig: OEditMetasResInit;\n\n\tprotected formEditElt: HTMLFormElement;\n\tprotected doBtn: Button;\n\tprotected msgArea: MsgLabel;\n\n\tget holder(): ICloseable<JCidMetas | null> {return this.config.holder || POPUP.findPopupableParent(this)}\n\n\tprotected async _initialize(init: OEditMetasResInit): Promise<void> {\n\t\tthis.config = init;\n\t\tthis.reg = init.reg;\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin(\"form-control-areas\", sr);\n\t\tthis.reg.installSkin(\"standard-dialog\", sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\t//Attente fin de chargement\n\t\twhile (this.reg.env.nodeInfosPending) await this.reg.env.nodeInfosPending;\n\t\t//TODO écoute this.reg.env.nodeInfosChange et notif + refresh...\n\n\t\t//Construction des datas avec ses overrides avant exploitation de this.reg.env.resType (si prc changé)\n\t\tlet datas: JPersistMetas = this.reg.env.nodeInfos?.metas;\n\n\t\tif (typeof init.defaultValues === \"function\") datas = Object.assign(init.defaultValues(this), datas)\n\t\telse if (init.defaultValues != null) datas = Object.assign(Object.create(init.defaultValues), datas)\n\t\telse if (datas == null) datas = Object.create(null);\n\n\t\tif (typeof init.overrideValues === \"function\") init.overrideValues(this, datas)\n\t\telse if (init.overrideValues != null) Object.assign(datas, init.overrideValues);\n\n\t\t//Formulaire\n\t\tconst area = this.reg.env.resType.resForm(init.formView || (init.formIdent ? \"editIdent\" : \"editMetas\"));\n\n\t\tconst skinForm = area.getSkin(this.reg);\n\t\tif (skinForm) this.reg.installSkin(skinForm, sr);\n\t\tconst skinFormOver = area.getSkinOver(this.reg);\n\t\tif (skinFormOver) this.reg.installSkin(skinFormOver, sr);\n\n\t\tlet ctx: IResFormCtx & IResFormIdentCtx = Object.create(init.formIdent || null);\n\t\tctx.reg = this.reg;\n\t\tctx.buildControlLabel = true;\n\n\t\tif (init.formIdent) {\n\t\t\tctx.callback = this;\n\t\t\tthis.msgArea = <MsgLabel id=\"msg\"/> as MsgLabel;\n\t\t}\n\t\tconst fields = await area.loadBody(ctx);\n\n\t\tthis.formEditElt = <form id=\"scroll\">{fields}</form> as HTMLFormElement;\n\t\tthis.formEditElt.onsubmit = (ev) => false;\n\t\tthis.doBtn = <Button label={init.doBtnLabel || (init.formIdent ? \"Renommer\" : \"Enregistrer\")} class=\"default\" onclick={this.onSave} ui-context=\"dialog\"/> as Button;\n\t\tsr.append(\n\t\t\tthis.formEditElt,\n\t\t\t<footer id=\"footer\">\n\t\t\t\t{this.msgArea}\n\t\t\t\t{this.doBtn}\n\t\t\t\t<c-button label=\"Annuler\" onclick={this.onCancel} ui-context=\"dialog\"/>\n\t\t\t</footer>\n\t\t);\n\n\t\tFORMS.jsonToForm(datas, this.formEditElt);\n\t\tFORMS.findFirstFocusable(this.formEditElt)?.focus();\n\t}\n\n\tasync onSave(this: Button, ev: Event) {\n\t\tconst me = DOMSH.findHost<EditMetasRes>(this);\n\t\tif (await FORMS.checkAsyncValidity(me.formEditElt)) {\n\t\t\tconst currentInfos = me.reg.env.nodeInfos;\n\t\t\tconst result: JCidMetas = {\n\t\t\t\tpath: me.reg.env.path,\n\t\t\t\tprocessing: me.reg.env.resType.prc || currentInfos?.prc\n\t\t\t}\n\t\t\tif (currentInfos.resId) result.olderResId = currentInfos.resId;\n\t\t\tif (me.config.formIdent) result.olderPath = me.reg.env.path; //renommage\n\t\t\tFORMS.formToJson(me.formEditElt, result);\n\t\t\t//console.log(\"onSave:::\",result);\n\t\t\tme.holder.close(result);\n\t\t} else {\n\t\t\tFORMS.reportValidity(me.formEditElt);\n\t\t}\n\t}\n\n\tonCancel(this: Button, ev: Event) {\n\t\tDOMSH.findHost<EditMetasRes>(this).holder.close();\n\t}\n\n\t/** En cas d'édition de l'identité. */\n\tidentState(resState: 'invalid' | 'pending' | 'exist' | 'free' | 'inTrash', targetPath?: resPath | null, msg?: string, msgLevel?: 'info' | 'error' | 'warning' | 'valid'): void {\n\t\tthis.msgArea.setCustomMsg(msg, msgLevel);\n\t\tthis.doBtn.disabled = resState === \"invalid\";\n\t}\n}\n\nREG.reg.registerSkin('store-editmetas-res', 1, /* language=CSS */ `\n\t#scroll {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\toverflow: auto;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t}\n\n\tform {\n\t\tdisplay: flex;\n\t\tflex: 3;\n\t}\n\n\tform > fieldset {\n\t\tborder: none;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tdisplay: grid;\n\t\tgrid-template-columns: auto 1fr;\n\t\tgrid-gap: .5rem .5rem;\n\t\tgrid-auto-rows: max-content;\n\t\tpadding: .5rem;\n\t\twidth: 40em;\n\t\tmax-width: calc(100% - 1rem);\n\t\talign-self: center;\n\t}\n\n\t.ctrlLbl {\n\t\tdisplay: contents;\n\t}\n\n\t.lbl {\n\t\tjustify-content: flex-end;\n\t\tword-break: keep-all;\n\t\tmax-width: 15rem;\n\t\twhite-space: unset;\n\t}\n\n\t.valueEntry {\n\t\tdisplay: inline-block;\n\t}\n\n\t:any-link {\n\t\tcolor: unset;\n\t}\n\n\t#msg {\n\t\tflex: 1;\n\t\tmargin: 0 .5em;\n\t\tjustify-content: start;\n\t}\n`);\n\ncustomElements.define('store-editmetas-res', EditMetasRes);"]}