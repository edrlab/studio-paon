{"version":3,"sources":["/@back@/edit/wed/features/insMgrTxt.tsx"],"names":["POPUP","WEDLET","Action","REG","DOM","DOMSH","XA","GFX","MarkImportInsert","MarkImportReplace","findTxtStrParent","AgEltBoxInsertDrawerTxt","cls","proto","prototype","drawInsertMarks","drawInsertMarks_Txt","removeInsertMarks","removeInsertMarks_Txt","importers","emptyStruct","this","_insMarks","isSelInThis","replaceCh","insertCh","imp","importPos","console","log","replaceChildren","Map","chPath","mark","get","matchModel","similarTo","from","model","addImporter","ch","wedlet","findWedletChild","VISITOPTIONS_mainBranch","placeOn","element","push","set","insertOffsetMin","undefined","isTextContainer","txtRoot","_insSelMarked","selMgr","typeSel","type","isAncestor","range","startContainer","MarkImportSel","MarkImportCaret","init","previousCh","i","insertOffsetMax","setClass","remove","[object Object]","importer","parentRef","Error","para","rgCaret","wedMgr","reg","installSkin","localName","attachShadow","SHADOWDOM_INIT","Text","parentNode","insertBefore","splitText","startOffset","error","txtStr","isVirtual","sel","start","append","wedAnchor","virtualPath","buildVirtualPath","offset","getXmlOffset","parent","parentElement","super","normalize","registerSkin","customElements","define","addEventListener","onTxtDragOverSel","onTxtDropOverSel","Array","isArray","setAttr","removeEventListener","x","y","rects","selMgrAsIs","getClientRects","length","isPointIn","item","ev","preventDefault","stopImmediatePropagation","isOnSel","dataTransfer","dropEffect","execute","editor","wedEditor","actions","completeDatasAtDrop","setLabel","getLabel","setExecute","executeImporter","showNotifInfo","action","showPopupActions","posFrom","fromY","targetY","endInsertSession","needAsyncBuild","buildContentToImport","restoreSel","ctx","buildImportContext","batch","docHolder","newBatch","doImport","doBatch","getXaRange"],"mappings":"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","sourcesContent":["import {ORelativePosition} from \"back/commons/widgets/popupable\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {IElementWedlet, IParentWedlet, IWedlet, WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {IWedletSingleElt} from \"back/edit/wed/wedlets/wedletSingleElt\";\nimport {Action} from \"lib/commons/actions\";\nimport {REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {ISkImporter, OSkPasteContext} from \"lib/edit/schema/schemaMeta\";\nimport {XA} from \"lib/commons/xml/xAddr\";\nimport {ITxtElement, TxtRoot} from \"back/edit/wed/wedlets/txt/txt\";\nimport {GFX} from \"lib/commons/utils/gfx\";\nimport {IEltInsertDrawer, IWedEditorInsMgr, MarkImportInsert, MarkImportReplace, MarkImportReplaceCtn} from \"back/edit/wed/features/insMgr\";\nimport {findTxtStrParent} from \"back/edit/wed/wedlets/txt/txtUtils\";\n\ninterface ITxtRootInsMgr extends TxtRoot {\n\t/** Mémoire sur le txtRoot de l'import au point de Caret ou sur le Range de la Selection. */\n\t_insSelMarked?: MarkImportCaret | MarkImportSel;\n}\n\ninterface IEltInsertDrawer_Txt extends IEltInsertDrawer, ITxtElement, HTMLElement {\n\t//_insCaretImporters: ISkImporter | ISkImporter[]\n}\n\nexport function AgEltBoxInsertDrawerTxt(cls: any): any {\n\tconst proto = cls.prototype as IEltInsertDrawer;\n\tproto.drawInsertMarks = drawInsertMarks_Txt;\n\tproto.removeInsertMarks = removeInsertMarks_Txt;\n\treturn cls;\n}\n\n\nfunction drawInsertMarks_Txt(this: IEltInsertDrawer_Txt, importers: ISkImporter[], emptyStruct: boolean) {\n\t// if (this.wedlet.model.nodeName=== 'dk:text') {\n\t// \tconsole.log(\"drawInsertMarks\", this, importers);\n\t// }\n\tthis._insMarks = [];\n\tlet isSelInThis: boolean;\n\tlet replaceCh: Map<number | string, MarkImportReplaceCtn>;//mémoire des remplacements de fils.\n\tlet insertCh: Map<number | string, MarkImportInsert>;//mémoire des insertions entre les fils.\n\tfor (const imp of importers) {\n\t\tif (!imp.importPos) {\n\t\t\tconsole.log(\"drawInsertMarks_Txt::: !imp.importPos::\", imp);\n\t\t\treturn;\n\t\t}\n\t\tif (imp.importPos.replaceChildren) {\n\t\t\t//on remplace certains fils\n\t\t\tif (!replaceCh) replaceCh = new Map();\n\t\t\tfor (const chPath of imp.importPos.replaceChildren) {\n\t\t\t\tlet mark = replaceCh ? replaceCh.get(chPath) : null;\n\t\t\t\tif (mark) {\n\t\t\t\t\tif (WEDLET.matchModel(imp.importPos.similarTo, mark.from.model)) mark.addImporter(imp);\n\t\t\t\t} else {\n\t\t\t\t\tconst ch = (this.wedlet as IParentWedlet).findWedletChild(chPath, WEDLET.VISITOPTIONS_mainBranch) as any as IWedletSingleElt & ITxtElement;\n\t\t\t\t\tif (ch && WEDLET.matchModel(imp.importPos.similarTo, ch.wedlet.model)) {\n\t\t\t\t\t\tmark = new MarkImportReplace().placeOn(ch, imp, ch.element);\n\t\t\t\t\t\tthis._insMarks.push(mark);\n\t\t\t\t\t\treplaceCh.set(chPath, mark);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (imp.importPos.insertOffsetMin !== undefined) {\n\t\t\t//on injecte des marques d'insertion\n\t\t\tif (this.isTextContainer) {\n\t\t\t\t//On est dans un noeud texte d'un TxtRoot qui admet au moins un import\n\t\t\t\t//Si le caret ou le début de la sel est dans ce noeud texte, on active\n\t\t\t\tconst txtRoot = this.txtRoot as ITxtRootInsMgr;\n\t\t\t\tif (txtRoot._insSelMarked === undefined) {\n\t\t\t\t\tconst selMgr = txtRoot.selMgr;\n\t\t\t\t\tconst typeSel = selMgr.type;\n\t\t\t\t\tif (typeSel === \"Range\" || typeSel === \"Caret\") {\n\t\t\t\t\t\tif (DOM.isAncestor(this, selMgr.range.startContainer)) {\n\t\t\t\t\t\t\tisSelInThis = true;\n\t\t\t\t\t\t\tif (typeSel === \"Range\") {\n\t\t\t\t\t\t\t\ttxtRoot._insSelMarked = new MarkImportSel(this.wedlet, txtRoot, imp);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttxtRoot._insSelMarked = new MarkImportCaret().init(this.wedlet, imp, this, selMgr.range);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (isSelInThis) {\n\t\t\t\t\ttxtRoot._insSelMarked.addImporter(imp);\n\t\t\t\t}\n\t\t\t\t//WAIT impl Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n\t\t\t\t//console.log(\"Mark on text....\", imp, this);\n\t\t\t\t// if (!this._insCaretImporters) {\n\t\t\t\t// \tthis._insCaretImporters = imp;\n\t\t\t\t// \tthis.addEventListener('dragenter', onParaDragEnter);\n\t\t\t\t// \tthis.addEventListener('dragover', onParaDragOver);\n\t\t\t\t// \tthis.addEventListener('dragleave', onParaDragLeave);\n\t\t\t\t// \tthis.addEventListener('drop', onParaDrop);\n\t\t\t\t// } else if (Array.isArray(this._insCaretImporters)) {\n\t\t\t\t// \tthis._insCaretImporters.push(imp);\n\t\t\t\t// } else {\n\t\t\t\t// \tthis._insCaretImporters = [this._insCaretImporters, imp];\n\t\t\t\t// }\n\t\t\t} else {\n\t\t\t\tif (!insertCh) insertCh = new Map();\n\t\t\t\tlet previousCh: IWedlet;\n\t\t\t\tfor (let i = imp.importPos.insertOffsetMin; i <= imp.importPos.insertOffsetMax; i++) {\n\t\t\t\t\tlet mark = insertCh.get(i);\n\t\t\t\t\tif (mark) {\n\t\t\t\t\t\tmark.addImporter(imp);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst ch = (this.wedlet as IParentWedlet).findWedletChild(i, WEDLET.VISITOPTIONS_mainBranch) as IWedlet;\n\t\t\t\t\t\tmark = new MarkImportInsert().setClass('small').placeOn(this.wedlet, imp, this, i, ch, previousCh);\n\t\t\t\t\t\tthis._insMarks.push(mark);\n\t\t\t\t\t\tinsertCh.set(i, mark);\n\t\t\t\t\t\tpreviousCh = ch;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//WAIT impl Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n// function onParaDragEnter(this: IEltInsertDrawer_Txt, ev: DragEvent) {\n// \tev.preventDefault();\n// \tev.stopImmediatePropagation();\n// \tconst typeSel = this.txtRoot.selMgr.type;\n// \tif (typeSel === \"Caret\") {\n// \t\t//On marque l'emplacement du caret\n// \t\tev.dataTransfer.dropEffect = \"link\";\n// \t\tlet editor = this.wedlet.wedMgr.wedEditor as IWedEditorInsMgr;\n// \t\tif (!editor._insCaret) editor._insCaret = new MarkImportCaret().init(editor.wedMgr);\n// \t\tthis.txtRoot.appendChild(editor._insCaret);\n// \t}\n// \t//console.log(\"selMgrAsIs;;;;\", this, this.txtRoot.selMgrAsIs._sel, this.txtRoot.selMgrAsIs.range.getBoundingClientRect());\n// }\n// function onParaDragOver(this: IEltInsertDrawer_Txt, ev: DragEvent) {\n// \tev.preventDefault();\n// \tev.stopImmediatePropagation();\n// \t//WAIT impl Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n// \t//let caretPos = DOMSH.findDocumentOrShadowRoot(this).caretPositionFromPoint(ev.x, ev.y);\n// \t//console.log(\"onParaDragOver:::TODO move editor._insCaret\", ev.x, ev.y);\n// }\n// function onParaDragLeave(this: IEltInsertDrawer_Txt, ev: DragEvent) {\n// \tev.preventDefault();\n// \tlet editor = this.wedlet.wedMgr.wedEditor as IWedEditorInsMgr;\n// \tif (editor._insCaret && editor._insCaret.parentNode) editor._insCaret.remove();\n// \tDOM.setAttr(this.txtRoot, \"dragOn\", null);\n// }\n// function onParaDrop(this: IEltInsertDrawer_Txt, ev: DragEvent) {\n// \t//WAIT impl Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n// }\n\nfunction removeInsertMarks_Txt(this: IEltInsertDrawer_Txt) {\n\tif (this._insMarks) {\n\t\tfor (const mark of this._insMarks) mark.remove();\n\t\tthis._insMarks = null;\n\t}\n\tconst txtRoot = this.txtRoot as ITxtRootInsMgr;\n\tif (txtRoot._insSelMarked) {\n\t\ttxtRoot._insSelMarked.remove();\n\t\ttxtRoot._insSelMarked = undefined;\n\t}\n\t//WAIT impl Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n\t// if (this._insCaretImporters) {\n\t// \tthis._insCaretImporters = null;\n\t// \tthis.removeEventListener('dragenter', onParaDragEnter);\n\t// \tthis.removeEventListener('dragover', onParaDragOver);\n\t// \tthis.removeEventListener('dragleave', onParaDragLeave);\n\t// \tthis.removeEventListener('drop', onParaDrop);\n\t// \tDOM.setAttr(this.txtRoot, \"dragOn\", null);\n\t// }\n}\n\n/**\n * Marque d'insertion sur la position du caret dans un texte\n */\nclass MarkImportCaret extends MarkImportInsert {\n\tplaceOn(from: IWedlet, importer: ISkImporter, parentRef: IElementWedlet): this {\n\t\tthrow Error();\n\t}\n\n\tinit(from: IWedlet, importer: ISkImporter, para: IEltInsertDrawer_Txt, rgCaret: Range): this {\n\t\tthis.from = from;\n\t\tthis.importer = importer;\n\t\tfrom.wedMgr.reg.installSkin(this.localName, this.attachShadow(DOMSH.SHADOWDOM_INIT));\n\t\tif (rgCaret.startContainer instanceof Text) {\n\t\t\trgCaret.startContainer.parentNode.insertBefore(this, rgCaret.startContainer.splitText(rgCaret.startOffset));\n\t\t} else {\n\t\t\tconsole.error(\"MarkImportCaret caret position::::\", rgCaret);\n\t\t}\n\t\treturn this;\n\t}\n\n\tprotected buildImportContext(): OSkPasteContext {\n\t\tconst txtStr = findTxtStrParent(this);\n\t\tif (txtStr.isVirtual()) {\n\t\t\treturn {sel: {start: XA.append(txtStr.wedAnchor, 0)}, virtualPath: WEDLET.buildVirtualPath(txtStr)}\n\t\t} else {\n\t\t\tconst offset = txtStr.getXmlOffset(this, 0) + 1; //FIXME TxtStr endEdgeOffset (+1)\n\t\t\treturn {sel: {start: XA.append(txtStr.wedAnchor, offset)}};\n\t\t}\n\t}\n\n\tremove() {\n\t\tconst parent = this.parentElement;\n\t\tsuper.remove();\n\t\tparent.normalize();\n\t}\n}\n\nREG.reg.registerSkin('txt-mark-caret', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t\tz-index: 910;\n\t\twidth: 16px;\n\t\tmargin-inline-start: -8px;\n\t\tmargin-block-start: -.3em;\n\t\theight: 2em;\n\t\tbox-sizing: border-box;\n\t\tbackground-color: var(--edit-drop-color);\n\t\tbackground-clip: padding-box;\n\t\tborder: 6px solid transparent;\n\t\tborder-bottom-width: .3em;\n\t\tborder-top-width: .3em;\n\t\tborder-radius: 12px;\n\t}\n\n\t:host(.over),\n\t:host(:hover) {\n\t\twidth: 20px;\n\t\tmargin-inline-start: -10px;\n\t\tborder: 7px solid var(--edit-drop-bgcolor);\n\t  border-bottom-width: .1em;\n\t  border-top-width: .1em;\n\t}\n`);\ncustomElements.define('txt-mark-caret', MarkImportCaret);\n\n/**\n * Insertion correspondant à la sélection du texte.\n * NOTE : La classe s'appelle MarkImportSel par analogie aux autres points d'insertions MarkImportXxx,\n * mais ce n'est pas un widget Html : c'est le style de la Selection Html qui est modifiée.\n */\nclass MarkImportSel {\n\timporter: ISkImporter | ISkImporter[];\n\n\tconstructor(public from: IWedlet, public txtRoot: ITxtRootInsMgr, imp: ISkImporter) {\n\t\tthis.importer = imp;\n\t\ttxtRoot.addEventListener('dragover', this.onTxtDragOverSel);\n\t\ttxtRoot.addEventListener('drop', this.onTxtDropOverSel);\n\t}\n\n\taddImporter(importer: ISkImporter) {\n\t\tif (!Array.isArray(this.importer)) this.importer = [this.importer, importer];\n\t\telse this.importer.push(importer);\n\t}\n\n\tremove() {\n\t\tDOM.setAttr(this.txtRoot, \"dragOn\", null);\n\t\tthis.txtRoot.removeEventListener('dragover', this.onTxtDragOverSel);\n\t\tthis.txtRoot.removeEventListener('drop', this.onTxtDropOverSel);\n\t}\n\n\tisOnSel(x: number, y: number): boolean {\n\t\tconst rects = this.txtRoot.selMgrAsIs.range.getClientRects();\n\t\tfor (let i = 0; i < rects.length; i++) if (GFX.isPointIn(rects.item(i), x, y)) return true;\n\t\treturn false;\n\t}\n\n\tonTxtDragOverSel(this: ITxtRootInsMgr, ev: DragEvent) {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tif ((this._insSelMarked as MarkImportSel).isOnSel(ev.x, ev.y)) {\n\t\t\tev.dataTransfer.dropEffect = \"link\";\n\t\t\tDOM.setAttr(this.txtRoot, \"dragOn\", \"sel\");\n\t\t} else {\n\t\t\tev.dataTransfer.dropEffect = \"none\";\n\t\t\tDOM.setAttr(this.txtRoot, \"dragOn\", null);\n\t\t}\n\t}\n\n\tonTxtDropOverSel(this: ITxtRootInsMgr, ev: DragEvent) {\n\t\tev.preventDefault();\n\t\tev.stopImmediatePropagation();\n\t\tif ((this._insSelMarked as MarkImportSel).isOnSel(ev.x, ev.y)) {\n\t\t\t(this._insSelMarked as MarkImportSel).execute(ev.dataTransfer);\n\t\t}\n\t}\n\n\tasync execute(dataTransfer?: DataTransfer) {\n\t\tconst editor = this.from.wedMgr.wedEditor as IWedEditorInsMgr;\n\t\tif (Array.isArray(this.importer)) {\n\t\t\tconst actions = [];\n\t\t\tfor (const imp of this.importer) {\n\t\t\t\tif (dataTransfer && imp.completeDatasAtDrop) {\n\t\t\t\t\tif (await imp.completeDatasAtDrop(dataTransfer) === 'stop') continue;\n\t\t\t\t}\n\t\t\t\tactions.push(new Action().setLabel(imp.getLabel()).setExecute(() => {this.executeImporter(imp)}));\n\t\t\t}\n\t\t\tswitch (actions.length) {\n\t\t\tcase 0: {\n\t\t\t\tPOPUP.showNotifInfo(\"Import incompatible\", this.txtRoot);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcase 1: {\n\t\t\t\treturn actions[0].execute(null);\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tconst action = await POPUP.showPopupActions({actions}, {posFrom: this.txtRoot, fromY: 'middle', targetY: 'middle'} as ORelativePosition, editor);\n\t\t\t\tif (!action) editor.endInsertSession();\n\t\t\t}\n\t\t} else {\n\t\t\tif (dataTransfer && this.importer.completeDatasAtDrop) {\n\t\t\t\tif (await this.importer.completeDatasAtDrop(dataTransfer) === 'stop') {\n\t\t\t\t\tPOPUP.showNotifInfo(\"Import incompatible\", this.txtRoot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.executeImporter(this.importer);\n\t\t}\n\t}\n\n\tasync executeImporter(imp: ISkImporter) {\n\t\t//console.log(\"executeImporter:::\", imp);\n\t\ttry {\n\t\t\tif (imp.needAsyncBuild) {\n\t\t\t\tif (await imp.buildContentToImport(this.from.wedMgr.wedEditor) === 'stop') return;\n\t\t\t\t//Un dialogue d'import a pu provoquer une perte du focus et de la sel, on la restaure.\n\t\t\t\tthis.txtRoot.selMgrAsIs.restoreSel();\n\t\t\t}\n\t\t\tconst ctx = this.buildImportContext();\n\t\t\tif (ctx) {\n\t\t\t\tconst batch = this.from.wedMgr.docHolder.newBatch();\n\t\t\t\timp.doImport(ctx, batch);\n\t\t\t\tbatch.doBatch();\n\t\t\t}\n\t\t} finally {\n\t\t\t(this.from.wedMgr.wedEditor as IWedEditorInsMgr).endInsertSession();\n\t\t}\n\t}\n\n\tprotected buildImportContext(): OSkPasteContext {\n\t\tif (this.txtRoot.selMgr.type === \"Range\") {\n\t\t\treturn {sel: this.txtRoot.selMgr.getXaRange()};\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n}\n\n//WAIT impl Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=388976\n// class MarkImportCaret extends HTMLElement {\n// \tinit(wedMgr: WedMgr): this {\n// \t\twedMgr.reg.installSkin(this.localName, this.attachShadow(DOMSH.SHADOWDOM_INIT));\n// \t\treturn this;\n// \t}\n// }\n// REG.reg.registerSkin('box-mark-caret', 1, /* language=CSS */ `\n// \t:host {\n// \t\tdisplay: block;\n// \t\tposition: absolute;\n// \t\twidth: 2px;\n// \t\tbackground-color: #0000cc;\n// \t\tz-index: 10000;\n// \t}\n// `);\n// customElements.define('box-mark-caret', MarkImportCaret);\n"]}