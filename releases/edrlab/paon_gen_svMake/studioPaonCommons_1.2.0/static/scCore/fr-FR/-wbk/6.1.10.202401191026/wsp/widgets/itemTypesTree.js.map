{"version":3,"sources":["/@back@/wsp/widgets/itemTypesTree.tsx"],"names":["BaseElement","CellBuilderIconLabel","GridSmall","EFolderState","GridColTreeDef","GridDataHolderJsonTree","REG","DOM","JSX","DOMSH","isDirItemType","POPUP","HelpViews","ItemTypesTree","[object Object]","this","forbidHideSelRow","row","dataHolder","getRow","grid","getSelectedRow","rowDatas","getSelectedDatas","filter","pData","i","c","countRows","setSelectedRows","getFolderState","closed","openFolder","rowKey","itModels","selectedRows","itType","indexOf","getModel","push","itTypes","forEach","selectByItModels","threshold","count","countInChildren","datas","length","entry","children","getDatas","init","reg","findReg","wsp","env","wspMetaUi","getItemTypesTree","itemTypeReducer","setDefaultOpenState","e","setDatas","colDefs","setFlex","setMinWidth","setCellBuilder","CellBuilderItemType","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","textFilter","countItemTypesUntil","forbidHideSelectedRow","collator","Intl","Collator","usage","sensitivity","search","appendChild","createElement","type","spellcheck","oninput","onSearchInput","onkeydown","onKeyPress","initialize","Object","assign","columnDefs","skinScroll","hideHeaders","filterText","value","dispatchEvent","CustomEvent","ev","tree","findHost","key","undefined","focus","val","selectedItemsTypes","getSelectedItemsTypes","buildFilteredDatas","list","r","ch","newE","create","find","matchTitle","getTitle","selectByItTypes","selectFirst","title","found","s","compare","charAt","registerSkin","customElements","define","super","root","redrawCell","_currentIt","span","firstElementChild","style","display","fontWeight","setAttr","desc","label","getIcon","cell","findParentOrSelf","n","Element","classList","contains","promiseTooltip","async","owner","tooltip","addEventListener","it","helpId","view","showLiveHelpId","preventDefault","liveView","hideBar","helpDbProv","getHelpDbProv","initializedAsync","hoverAllowed","anchor","posFrom","intersectWith","fromX","marginX","notAvailableSpace","targetX","_buildContent"],"mappings":"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","sourcesContent":["import {BaseElement, OSkinableInit} from \"back/commons/basis\";\nimport {CellBuilderIconLabel} from \"back/commons/widgets/grid-libs\";\nimport {GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {EFolderState, GridColTreeDef, GridDataHolderJsonTree, GridDataRowJsonTree} from \"back/commons/widgets/tree\";\nimport {IReg, IUiEnv, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IWspEnv, IWspUiEnv} from \"lib/wsp/wsp\";\nimport {IDirItemType, isDirItemType, ItemType} from \"lib/wsp/wspMetaUi\";\nimport {POPUP, PopupTooltip} from \"back/commons/widgets/popups\";\nimport {IView} from \"lib/commons/views\";\nimport {HelpViews} from \"back/help/views/helpViews\";\n\n/**\n *\n */\nexport interface ItemTypesTree extends BaseElement {\n\tinitialize(init?: OItemTypesTreeInit): this\n}\n\nexport interface OItemTypesTreeInit extends OSkinableInit {\n\treg?: IReg<IWspEnv & IUiEnv>\n\n\titemTypeReducer?: (acc: ItemType[], cur: ItemType, idx: number, src: ItemType[]) => ItemType[]\n\n\t/** Si null ou undefined, pas de champs de filtrage de l'arbre affiché, \"\" pour afficher le champs vide. */\n\ttextFilter?: undefined | string\n\n\t/** Préserve l'affichage de la ou les lignes sélectionnées même si le filtre ne matche pas. */\n\tforbidHideSelectedRow?: boolean;\n\n\tgrid?: OGridSmallInit\n}\n\nexport class ItemTypesTree extends BaseElement {\n\n\treg: IReg<IWspEnv & IUiEnv>;\n\n\tdataHolder: GridDataHolderJsonTree<IDirItemType | ItemType>;\n\n\tgrid: GridSmall;\n\tsearch: HTMLInputElement;\n\tcollator: Intl.Collator;\n\n\tprotected datas: (IDirItemType | ItemType)[];\n\n\tprotected forbidHideSelRow = false;\n\n\tgetSelectedItemType(): ItemType | null {\n\t\tconst row = this.dataHolder.getRow(this.grid.getSelectedRow());\n\t\tif (!row) return null;\n\t\treturn isDirItemType(row.rowDatas) ? null : row.rowDatas;\n\t}\n\n\tgetSelectedItemsTypes(): ItemType[] {\n\t\treturn this.dataHolder.getSelectedDatas().filter(pData => !isDirItemType(pData)) as ItemType[];\n\t}\n\n\tselectFirst(): boolean {\n\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\tconst row = this.dataHolder.getRow(i);\n\t\t\tif (!isDirItemType(row.rowDatas)) {\n\t\t\t\tthis.grid.setSelectedRows(i);\n\t\t\t\treturn true;\n\t\t\t} else if (row.getFolderState() === EFolderState.closed) {\n\t\t\t\t//dir fermé, on ouvre\n\t\t\t\tthis.dataHolder.openFolder(row.rowKey);\n\t\t\t\tc = this.dataHolder.countRows();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sélection des entrées de l'arbre via une liste d'itModels\n\t * Si un itModel demandé n'est pas présent dans le tree, aucune erreur n'est remontée\n\t * @param itModels\n\t */\n\tselectByItModels(itModels: string[]): void {\n\t\tif (itModels != null) {\n\t\t\tconst selectedRows: number[] = [];\n\t\t\tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t\t\t\tconst itType = this.dataHolder.getRow(i).rowDatas;\n\t\t\t\tif (!isDirItemType(itType) && itModels.indexOf(itType.getModel()) > -1) selectedRows.push(i);\n\t\t\t}\n\t\t\tthis.grid.setSelectedRows(selectedRows);\n\t\t}\n\t}\n\n\t/**\n\t * Sélection des entrées de l'arbre via une liste d'itemTypes\n\t * Si un itemType demandé n'est pas présent dans le tree, aucune erreur n'est remontée\n\t * @param itTypes\n\t */\n\tselectByItTypes(itTypes: ItemType[]): void {\n\t\tif (itTypes != null) {\n\t\t\tconst itModels: string[] = [];\n\t\t\titTypes.forEach((itType => {\n\t\t\t\titModels.push(itType.getModel());\n\t\t\t}));\n\t\t\tthis.selectByItModels(itModels);\n\t\t}\n\t}\n\n\t/** Retourne le nb d'ItemType total (affichés ou pas) dans la liste, jusqu'à atteindre threshold.\n\t * @param threshold : compte max\n\t * @param filter : retourne true pour garder l'élément\n\t */\n\tcountItemTypesUntil(threshold: number, filter?: (itemType: ItemType) => boolean): number {\n\t\tlet count = 0;\n\n\t\tfunction countInChildren(datas: (IDirItemType | ItemType)[]) {\n\t\t\tfor (let i = 0, c = datas.length; i < c; i++) {\n\t\t\t\tconst entry = datas[i];\n\t\t\t\tif (isDirItemType(entry)) {\n\t\t\t\t\tcountInChildren(entry.children);\n\t\t\t\t} else {\n\t\t\t\t\tif (!filter || filter(entry)) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count >= threshold) return;\n\t\t\t}\n\t\t}\n\n\t\tcountInChildren(this.dataHolder.getDatas());\n\t\treturn count;\n\t}\n\n\t// /** Retourne le nb d'ItemType **affichés** (ie, pas dans un folder clos) dans la liste, jusqu'à atteindre threshold.\n\t//  * @param threshold : compte max\n\t//  * @param filter : retourne true pour garder l'élément\n\t//  */\n\t// countShownItemTypesUntil(threshold: number, filter?: (itemType: ItemType) => boolean): number {\n\t// \tlet count = 0;\n\t// \tfor (let i = 0, c = this.dataHolder.countRows(); i < c; i++) {\n\t// \t\tif (!isDirItemType(this.dataHolder.getRow(i).rowDatas) && (!filter || filter(this.dataHolder.getRow(i).rowDatas as ItemType))) {\n\t// \t\t\tcount++;\n\t// \t\t\tif (count >= threshold) return count;\n\t// \t\t}\n\t// \t}\n\t// \treturn count;\n\t// }\n\n\tprotected _initialize(init: OItemTypesTreeInit) {\n\t\tthis.reg = this.findReg(init);\n\t\tconst wsp = this.reg.env.wsp;\n\t\tthis.datas = wsp.wspMetaUi.getItemTypesTree(init.itemTypeReducer);\n\t\tthis.dataHolder = new GridDataHolderJsonTree<IDirItemType | ItemType>('children')\n\t\t\t.setDefaultOpenState(function (e: IDirItemType | ItemType) {return (e as IDirItemType).closed !== true})\n\t\t\t.setDatas(this.datas);\n\n\t\tconst colDefs = [new GridColTreeDef('tree')\n\t\t\t.setFlex('1rem', 1, 1).setMinWidth('55px')\n\t\t\t.setCellBuilder(new CellBuilderItemType())];\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tif (init.textFilter != null && this.countItemTypesUntil(5) == 5) {\n\t\t\t//On ajoute le filtre\n\t\t\tif (init.forbidHideSelectedRow) this.forbidHideSelRow = true;\n\t\t\tthis.collator = new Intl.Collator('fr', {usage: 'search', sensitivity: 'base'});\n\t\t\tthis.search = sr.appendChild(<input type=\"search\" spellcheck=\"false\" oninput={this.onSearchInput} onkeydown={this.onKeyPress}/>) as HTMLInputElement;\n\t\t}\n\n\t\tthis.grid = sr.appendChild(new GridSmall().initialize(Object.assign({\n\t\t\tcolumnDefs: colDefs,\n\t\t\tskinScroll: 'scroll/small',\n\t\t\tdataHolder: this.dataHolder,\n\t\t\thideHeaders: true\n\t\t}, init.grid)));\n\n\t\tif (init.textFilter) {\n\t\t\tthis.filterText(this.search.value = init.textFilter);\n\t\t\tif (this.countItemTypesUntil(1) === 0) {\n\t\t\t\t//Avec ce filtre, aucun itemType, on supprime le filtre.\n\t\t\t\tthis.filterText(\"\");\n\t\t\t}\n\t\t}\n\t}\n\n\tclearSearch(): void {\n\t\tif (this.search && this.search.value != \"\") {\n\t\t\tthis.search.value = \"\";\n\t\t\tthis.search.dispatchEvent(new CustomEvent('input'));\n\t\t}\n\t}\n\n\tprotected onSearchInput(this: HTMLInputElement, ev: InputEvent) {\n\t\tconst tree = DOMSH.findHost(this) as ItemTypesTree;\n\t\ttree.filterText(this.value);\n\t}\n\n\tprotected onKeyPress(this: HTMLInputElement, ev: KeyboardEvent) {\n\t\tif (ev.key === 'ArrowDown') {\n\t\t\tconst tree = DOMSH.findHost(this) as ItemTypesTree;\n\t\t\tif (tree.grid.getSelectedRow() !== undefined) tree.grid.focus();\n\t\t}\n\t}\n\n\tprotected filterText(val: string) {\n\t\tconst selectedItemsTypes: ItemType[] = this.getSelectedItemsTypes();\n\t\tif (val) {\n\t\t\tconst buildFilteredDatas = (list: (IDirItemType | ItemType)[]): (IDirItemType | ItemType)[] => {\n\t\t\t\tconst r = [] as (IDirItemType | ItemType)[];\n\t\t\t\tfor (const e of list) {\n\t\t\t\t\tif (isDirItemType(e)) {\n\t\t\t\t\t\tconst ch = buildFilteredDatas(e.children);\n\t\t\t\t\t\tif (ch.length > 0) {\n\t\t\t\t\t\t\tconst newE = Object.create(e) as IDirItemType;\n\t\t\t\t\t\t\tnewE.children = ch;\n\t\t\t\t\t\t\tnewE.closed = false;\n\t\t\t\t\t\t\tr.push(newE)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this.forbidHideSelRow && selectedItemsTypes && selectedItemsTypes.find(entry => entry.datas === e.datas)) {\n\t\t\t\t\t\tr.push(Object.create(e));\n\t\t\t\t\t} else if (this.matchTitle(e.getTitle(), val)) {\n\t\t\t\t\t\tr.push(Object.create(e));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t};\n\t\t\tthis.dataHolder.setDatas(buildFilteredDatas(this.datas));\n\t\t} else {\n\t\t\tthis.dataHolder.setDatas(this.datas);\n\t\t}\n\t\tthis.selectByItTypes(selectedItemsTypes);\n\t\tif (this.grid.getSelectedRow() === undefined) {\n\t\t\t//Si la sel a disparu, on reselectionne le 1er itemType.\n\t\t\tthis.selectFirst();\n\t\t}\n\t}\n\n\t/** ??? filter: \"Contient\" ou \"mot commence par\" ? */\n\tmatchTitle(title: string, val: string): boolean {\n\t\tlet found = 0;\n\t\tfor (let i = 0, s = title.length; i < s; i++) {\n\t\t\tif (this.collator.compare(title.charAt(i), val.charAt(found)) !== 0)\n\t\t\t\tfound = 0;\n\t\t\tif (this.collator.compare(title.charAt(i), val.charAt(found)) === 0)\n\t\t\t\tif (++found === val.length) return true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nREG.reg.registerSkin('wsp-itemtypes-tree', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\tinput {\n\t\tborder: none;\n\t\tcolor: var(--form-color);\n\t\tborder-bottom: 1px solid var(--border-color);\n\t\tbackground: .1em / 1em no-repeat url(/@skin@/commons/icons/filter.svg) var(--form-search-bgcolor);\n\t\tpadding-block: 2px;\n\t\tpadding-inline: 1.2em 2px;\n\t}\n\n\tinput:focus {\n\t\toutline: var(--focus-outline);\n\t}\n\n\tc-grid-small {\n\t\tflex: 1;\n\t\tborder: none;\n\t\tbackground-color: var(--row-bgcolor);\n\t}\n`);\n\ncustomElements.define(\"wsp-itemtypes-tree\", ItemTypesTree);\n\n\nexport class CellBuilderItemType extends CellBuilderIconLabel {\n\n\tconstructor() {\n\t\tsuper(null);\n\t}\n\n\tredrawCell(row: GridDataRowJsonTree<IDirItemType | ItemType>, root: HTMLElement & IItemTypeHolder): void {\n\t\tsuper.redrawCell(row, root);\n\t\troot._currentIt = row.rowDatas;\n\t\tconst span = root.firstElementChild as HTMLElement;\n\t\tif (isDirItemType(row.rowDatas)) {\n\t\t\tspan.style.display = 'none';\n\t\t\troot.style.fontWeight = 'bold';\n\t\t\tDOM.setAttr(root, \"title\", null);\n\t\t} else {\n\t\t\tspan.style.display = '';\n\t\t\troot.style.fontWeight = 'normal';\n\t\t\tDOM.setAttr(root, \"title\", row.rowDatas.datas.desc);\n\t\t}\n\t}\n\n\t_getValue(row: GridDataRowJsonTree<IDirItemType | ItemType>) {\n\t\treturn isDirItemType(row.rowDatas) ? row.rowDatas.label : row.rowDatas.getTitle();\n\t}\n\n\t_getIcon(row: GridDataRowJsonTree<IDirItemType | ItemType>) {\n\t\treturn isDirItemType(row.rowDatas) ? null : row.rowDatas.getIcon();\n\t}\n\n\tprotected _buildContent(row: GridDataRowJsonTree<IDirItemType | ItemType>, root: HTMLElement & IItemTypeHolder): HTMLElement {\n\t\t//On remonte sur la cell pour que le positionnement du tooltip reste dans la zone du grid.\n\t\tconst cell = DOM.findParentOrSelf(root, null, (n): n is HTMLElement => n instanceof Element && n.classList.contains(\"cell\")) || root;\n\t\tPOPUP.promiseTooltip(cell,\n\t\t\tasync (owner: HTMLElement, tooltip: PopupTooltip): Promise<IView> => {\n\t\t\t\ttooltip.addEventListener('c-show', function (this: PopupTooltip, ev: CustomEvent) {\n\t\t\t\t\tconst it = root._currentIt;\n\t\t\t\t\tconst helpId = isDirItemType(it) ? it.helpId : it.datas.helpId;\n\t\t\t\t\tif (helpId) (this.view as HelpViews).showLiveHelpId(helpId);\n\t\t\t\t\telse ev.preventDefault();\n\t\t\t\t});\n\t\t\t\tconst reg = REG.findReg(owner) as IReg<IWspUiEnv>;\n\t\t\t\treturn await new HelpViews().initialize({reg, liveView: {hideBar: true}, helpDbProv: reg.env.wsp.wspMetaUi.getHelpDbProv()}).initializedAsync;\n\t\t\t},\n\t\t\t{\n\t\t\t\thoverAllowed: true, anchor: {\n\t\t\t\t\tposFrom: root, intersectWith: cell, fromX: 'end', marginX: -3,\n\t\t\t\t\tnotAvailableSpace: {\n\t\t\t\t\t\tposFrom: root, intersectWith: cell, fromX: 'start', targetX: 'end', marginX: 3\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn super._buildContent(row, root);\n\t}\n}\n\ntype IItemTypeHolder = { _currentIt: IDirItemType | ItemType }\n"]}