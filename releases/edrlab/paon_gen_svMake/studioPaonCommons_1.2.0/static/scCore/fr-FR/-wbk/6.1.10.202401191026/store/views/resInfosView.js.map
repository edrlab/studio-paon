{"version":3,"sources":["/@back@/store/views/resInfosView.tsx"],"names":["REG","DOMSH","ResBodyView","ResInfoView","[object Object]","init","this","reg","areaContext","super","_initialize","sr","attachShadow","SHADOWDOM_INIT","installSkin","_initAndInstallSkin","localName","listenChanges","_a","env","nodeInfosChange","on","refresh","bind","lines","shadowRoot","line","drawLine","registerSkin","customElements","define"],"mappings":"OAEqBA,QAAI;OACjBC,UAAM;OAENC,gBAAY;OAed,MAAOC,oBAAoBD,YAItBE,YAAYC;AACrBC,KAAKC,IAAMF,KAAKG,YAAYD;AAC5BE,MAAMC,YAAYL;AAClB,MAAMM,GAAKL,KAAKM,aAAaX,MAAMY;AACnCP,KAAKC,IAAIO,YAAY,qBAAsBH;AAC3CL,KAAKS,oBAAoBT,KAAKU,UAAWX;AAEzC,GAAIA,KAAKY,eAAeC,GAACZ,KAAKC,IAAIY,IAAuBC,mBAAe,MAAAF,UAAA,OAAA,EAAAA,GAAEG,GAAG,aAAcf,KAAKgB,QAAQC,KAAKjB;AAC7GA,KAAKkB,MAAQnB,KAAKmB,MAGTpB,OACT,MAAMO,GAAKL,KAAKmB;AAChB,IAAK,IAAIC,QAAQpB,KAAKkB,MAAOE,KAAKC,SAASrB,KAAKC,IAAKI,GAAIL,OAQ3DN,IAAIO,IAAIqB,aAAa,kBAAmB,EAAsB;AAuC9DC,eAAeC,OAAO,kBAAmB3B","sourcesContent":["import {OBaseAreaViewInit} from \"lib/commons/views\";\nimport {IDepotResUiEnv, IDepotShortResUiEnv} from \"lib/store/depot\";\nimport {IRegPointer, REG} from \"lib/commons/registry\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {ResBodyView} from \"back/store/views/resViewer\";\n\n\nexport interface ResInfoView extends ResBodyView {\n\tinitialize(init: OResInfoViewInit): this\n}\n\nexport interface OResInfoViewInit extends OBaseAreaViewInit<IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>> {\n\t/** Lignes constituant cette resInfoView. */\n\tlines: IResInfosLineDrawer[]\n\n\t/** Ecoute les modifs du node (pas de ses voisins ch, anc, hist, succ...). */\n\tlistenChanges?: boolean\n}\n\nexport class ResInfoView extends ResBodyView {\n\n\tlines: IResInfosLineDrawer[];\n\n\tprotected _initialize(init: OResInfoViewInit) {\n\t\tthis.reg = init.areaContext.reg;\n\t\tsuper._initialize(init); //init this.area, this.areaContext\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.reg.installSkin('form-control-areas', sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tif (init.listenChanges) (this.reg.env as IDepotResUiEnv).nodeInfosChange?.on(\"nodeChange\", this.refresh.bind(this));\n\t\tthis.lines = init.lines;\n\t}\n\n\tprotected draw() {\n\t\tconst sr = this.shadowRoot;\n\t\tfor (let line of this.lines) line.drawLine(this.reg, sr, this);\n\t}\n}\n\nexport interface IResInfosLineDrawer {\n\tdrawLine(ctx: IRegPointer<IDepotResUiEnv | IDepotShortResUiEnv>, parent: Node, view: ResBodyView): void\n}\n\nREG.reg.registerSkin('store-res-infos', 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: auto 1fr;\n\t\tgrid-gap: .5rem .5rem;\n\t\tgrid-auto-rows: max-content;\n\t\tpadding: .5rem;\n\t}\n\n\t/** class 'ctrlLbl' : Compat form-control-areas */\n\t.line, .ctrlLbl {\n\t\tdisplay: contents;\n\t}\n\n\t/** class 'lbl' : Compat form-control-areas */\n\t.label, .lbl {\n\t\tdisplay: flex;\n\t\tcolor: var(--alt1-color);\n\t\tjustify-content: flex-end;\n\t}\n\n\t/** class 'lbl' : Compat form-control-areas */\n\t.lbl {\n\t\tmargin-inline-end: unset;\n\t}\n\n\t.value {\n\t\tfont-weight: bold;\n\t}\n\n\t.valueEntry {\n\t\tdisplay: inline-block;\n\t}\n\n\t:any-link {\n\t\tcolor: unset;\n\t}\n`);\n\ncustomElements.define('store-res-infos', ResInfoView);"]}