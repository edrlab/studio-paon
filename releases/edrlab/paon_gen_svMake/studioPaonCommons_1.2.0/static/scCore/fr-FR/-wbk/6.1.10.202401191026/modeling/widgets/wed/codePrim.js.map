{"version":3,"sources":["/@back@/modeling/widgets/wed/codePrim.tsx"],"names":["XA","WEDLET","WedletFork","AdjustLangTypeWedlet","[object Object]","widget","eltWedlet","super","this","futureTask","isVirtual","setLangTypeDef","getMimeType","attr","findDomLast","append","mainWedlet","wedAnchor","wedMgr","docHolder","getDocument","Attr","value","msg","last","xa","length","planSetLangTypeDef","window","requestIdleCallback","deadline","annot","xaTarget","_a","diffLib","isDiffAnnot","diffSession","getDiffSession","v","otherValue","setDiffLangTypeDef","jslibAsyncInit","jsEndPoint","elt","wedReg","registerSvc","currentLang","tpl","wedlet","wedParent"],"mappings":"OAGgBA,OAAG;OACsBC,OAAQC,eAAW;AAS5D,MAAMC,6BAA6BD,WAIlCE,YAAqBC,OAAsBC,WAC1CC,MAAMD;AADcE,KAAAH,OAAAA;AAFrBG,KAAAC,WAAa;AAIZ,IAAKH,UAAUI,YAAa,CAE3BL,OAAOM,eAAeH,KAAKI,gBAI7BR,cACC,MAAMS,KAAOb,GAAGc,YAAYd,GAAGe,OAAOP,KAAKQ,WAAWC,UAAW,YAAaT,KAAKQ,WAAWE,OAAOC,UAAUC;AAC/G,OAAOP,gBAAgBQ,KAAOR,KAAKS,MAAQ,KAG5ClB,oBAAoBmB,KACnB,GAAIvB,GAAGwB,KAAKD,IAAIE,MAAQ,YAAcF,IAAIE,GAAGF,IAAIE,GAAGC,OAAS,KAAO,WAAY,CAE/ElB,KAAKmB,sBAIGvB,qBACT,GAAII,KAAKC,aAAe,EAAG,CAC1BD,KAAKC,WAAamB,OAAOC,oBAAqBC,WAC7CtB,KAAKC,WAAa;AAClBD,KAAKH,OAAOM,eAAeH,KAAKI,kBAKnCR,eAAe2B,MAAiBC;AAE/B,KAAIC,GAAAhC,OAAOiC,WAAO,MAAAD,UAAA,OAAA,EAAAA,GAAEE,YAAYJ,SAAUA,MAAMK,cAAgB5B,KAAKU,OAAOC,UAAUkB,iBAAkB,CAEvG,MAAMC,EAAKP,MAA0BQ;AACrC,GAAID,EAAG9B,KAAKH,OAAOmC,mBAAmBF,IAIxClC,iBAAiB2B,MAAiBC;AACjC,KAAIC,GAAAhC,OAAOiC,WAAO,MAAAD,UAAA,OAAA,EAAAA,GAAEE,YAAYJ,SAAUA,MAAMK,cAAgB5B,KAAKU,OAAOC,UAAUkB,iBAAkB,CACvG7B,KAAKH,OAAOmC,mBAAmB,eAO5B,SAAUC,eAAeC,WAAuBC,IAAcC,QACnEA,OAAOC,YAA0B,6BAA8B,GAAG,SAASC,YAAYzC,OAAsB0C,KAE5G,IAAI5C,qBAAqBE,OAAQA,OAAO2C,OAAOC","sourcesContent":["import {IEndPoint} from \"lib/commons/io/io\";\nimport {REG} from \"lib/commons/registry\";\nimport {BoxInputCode, ICurrentLang} from \"back/edit/wed/wedlets/box/boxInputCode\";\nimport {IXAddr, XA} from \"lib/commons/xml/xAddr\";\nimport {IParentWedlet, ISkAnnotListener, WEDLET, WedletFork} from \"back/edit/wed/wedlets/wedlet\";\nimport {IXmlMsg} from \"lib/edit/ot/xmlHouse\";\nimport {ISkAnnot} from \"lib/edit/schema/schemaAnnots\";\nimport {IDiffAnnotValue} from \"lib/edit/schema/diff\";\nimport Reg = REG.Reg;\n\n/**\n * Affectation du bon langage au BoxCodeInput.\n */\nclass AdjustLangTypeWedlet extends WedletFork implements ISkAnnotListener {\n\n\tfutureTask = 0;\n\n\tconstructor(readonly widget: BoxInputCode, eltWedlet: IParentWedlet) {\n\t\tsuper(eltWedlet);\n\t\tif (!eltWedlet.isVirtual()) {\n\t\t\t//Valeur en cours de l'attribut à l'init du widget\n\t\t\twidget.setLangTypeDef(this.getMimeType());\n\t\t}\n\t}\n\n\tgetMimeType(): string | null {\n\t\tconst attr = XA.findDomLast(XA.append(this.mainWedlet.wedAnchor, 'mimeType'), this.mainWedlet.wedMgr.docHolder.getDocument());\n\t\treturn attr instanceof Attr ? attr.value : null;\n\t}\n\n\tupdateInDescendants(msg: IXmlMsg) {\n\t\tif (XA.last(msg.xa) === 'mimeType' || msg.xa[msg.xa.length - 2] === 'mimeType') {\n\t\t\t//Modification de l'attribut mimeType\n\t\t\tthis.planSetLangTypeDef();\n\t\t}\n\t}\n\n\tprotected planSetLangTypeDef() {\n\t\tif (this.futureTask === 0) {\n\t\t\tthis.futureTask = window.requestIdleCallback((deadline: RequestIdleDeadline) => {\n\t\t\t\tthis.futureTask = 0;\n\t\t\t\tthis.widget.setLangTypeDef(this.getMimeType());\n\t\t\t});\n\t\t}\n\t}\n\n\tonAddedSkAnnot(annot: ISkAnnot, xaTarget: IXAddr): void {\n\t\t//console.log(\"onAddedSkAnnot\", annot, xaTarget);\n\t\tif (WEDLET.diffLib?.isDiffAnnot(annot) && annot.diffSession === this.wedMgr.docHolder.getDiffSession()) {\n\t\t\t//console.log(\"annot::::::\", annot);\n\t\t\tconst v = (annot as IDiffAnnotValue).otherValue;\n\t\t\tif (v) this.widget.setDiffLangTypeDef(v);\n\t\t}\n\t}\n\n\tonRemovedSkAnnot(annot: ISkAnnot, xaTarget: IXAddr): void {\n\t\tif (WEDLET.diffLib?.isDiffAnnot(annot) && annot.diffSession === this.wedMgr.docHolder.getDiffSession()) {\n\t\t\tthis.widget.setDiffLangTypeDef(null);\n\t\t}\n\t}\n\n}\n\n/** Fonction apelée au chargement de la lib par le WED. */\nexport function jslibAsyncInit(jsEndPoint: IEndPoint, elt: Element, wedReg: Reg<any>) {\n\twedReg.registerSvc<ICurrentLang>(\"codePrim.currentLangFinder\", 1, function currentLang(widget: BoxInputCode, tpl: Element) {\n\t\t//le widget BoxCodeInput est bindé sur le noeud texte, on s'accroche sur le wedlet de son élement parent.\n\t\tnew AdjustLangTypeWedlet(widget, widget.wedlet.wedParent);\n\t});\n}"]}