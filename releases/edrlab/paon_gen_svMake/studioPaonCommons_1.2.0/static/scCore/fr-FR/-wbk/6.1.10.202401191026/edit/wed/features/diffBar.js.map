{"version":3,"sources":["/@back@/edit/wed/features/diffBar.tsx"],"names":["Action","WEDLET","AgDiffBarEditor","cls","proto","prototype","superInit","initialize","config","call","this","getDiffBar","hideDiffBar","reg","isListFilled","wedMgr","accelKeyMgr","addAccelKey","ToggleDiffBar","SINGLETON","addToList","ShowDiffBar","async","diffBar","importDiffLib","import","WedDiffBar","init","[object Object]","id","super","_label","_icon","ctx","isVisible","api","hidden","ev","bar","show","close","DiffBarPanelAction","_a","currentPanel","action","panel","getPanelFor","buildPanel","setCurrentPanel","setDiff","initParams"],"mappings":"OACQA,WAA+B;OAC/BC,WAAO;OAcT,SAAUC,gBAAgBC,KAC/B,MAAMC,MAAQD,IAAIE;AAClB,MAAMC,UAAYF,MAAMG;AACxBH,MAAMG,WAAa,SAAmCC,QACrDF,UAAUG,KAAKC,KAAMF;AACrBJ,MAAMO,WAAaA;AACnB,IAAKH,OAAOI,aAAeF,KAAKG,IAAIC,aAAa,uBAAwB,CACxEJ,KAAKK,OAAOC,YAAYC,YAAY,IAAK,cAAeC,cAAcC;AACtET,KAAKG,IAAIO,UAAU,4BAA6B,UAAW,EAAGC,YAAYF,UAAW,GAItF,OAAOT;AAER,OAAOP,IAGRmB,eAAeX,aACd,IAAKD,KAAKa,QAAS,OACZtB,OAAOuB;AACb,IAAKd,KAAKa,QAASb,KAAKa,SAAU,WAAWE,OAAM,0CAAwCC,aAAaC,KAAKjB,MAE9G,OAAOA,KAAKa,eAIP,MAAOL,sBAAsBlB,OAGlC4B,YAAYC,IACXC,MAAM,QAAUD;AAChBnB,KAAKqB,OAAS;AACdrB,KAAKsB,MAAQ,iCAGdJ,UAAUK,KACT,GAAKA,IAAIzB,OAAmCI,YAAa,OAAO;AAChE,OAAOkB,MAAMI,UAAUD,KAGxBL,WAAsD,OAAO,KAE7DA,SAASO,IAAeF,KACvB,OAAOA,IAAIV,UAAYU,IAAIV,QAAQa,OAGpCR,cAAcK,IAAwBI,IACrC,MAAMC,UAAYL,IAAItB;AACtB,GAAI2B,IAAIF,OAAQE,IAAIC;KACfD,IAAIE,SAtBHtB,cAAAC,UAAY,IAAID;OA2BlB,MAAOG,oBAAoBH,cAGhCU,WAAsD,OAAO,MAE7DA,UAAUK,KACT,GAAIA,IAAIV,UAAYU,IAAIV,QAAQa,OAAQ,OAAO;AAC/C,OAAON,MAAMI,UAAUD,MANjBZ,YAAAF,UAAY,IAAIE;OAsFlB,MAAgBoB,2BAA2BzC,OAEhD4B,SAASK,KAAuD,OAAO,KAGvEL,SAASO,IAAeF,KAAgB,IAAAS;AAAmB,QAAOA,GAAAT,IAAIU,gBAAY,MAAAD,UAAA,OAAA,EAAAA,GAAEE,UAAWlC,KAE/FkB,cAAcK,IAAkBI,IAC/B,IAAIQ,MAAQZ,IAAIa,YAAYpC;AAC5B,IAAKmC,MAAOA,YAAcnC,KAAKqC,WAAWd;AAC1CA,IAAIe,gBAAgBH;AACpBA,MAAMI,QAAQhB,IAAIiB","sourcesContent":["import {IWedEditorMain, OWedEditorMainConfig} from \"back/edit/wed/wedEditor\";\nimport {Action, IAction, IActionToggle} from \"lib/commons/actions\";\nimport {WEDLET} from \"back/edit/wed/wedlets/wedlet\";\n\nexport interface OWedEditorDiffBarConfig extends OWedEditorMainConfig {\n\t/** Désactive cette diffBar. */\n\thideDiffBar?: boolean;\n}\n\nexport interface IWedEditorDiffBar extends IWedEditorMain {\n\tdiffBar?: IWedDiffBar\n\n\tgetDiffBar(): Promise<IWedDiffBar>\n}\n\n/** Agrégation pour le IWedEditor ajoutant la diffBar. */\nexport function AgDiffBarEditor(cls: any): any {\n\tconst proto = cls.prototype as IWedEditorDiffBar;\n\tconst superInit = proto.initialize;\n\tproto.initialize = function (this: IWedEditorDiffBar, config: OWedEditorDiffBarConfig) {\n\t\tsuperInit.call(this, config);\n\t\tproto.getDiffBar = getDiffBar;\n\t\tif (!config.hideDiffBar && this.reg.isListFilled(\"wed.diffBar.actions\")) {\n\t\t\tthis.wedMgr.accelKeyMgr.addAccelKey(\"d\", 'accel shift', ToggleDiffBar.SINGLETON);\n\t\t\tthis.reg.addToList(\"actions:wed:commonbar:end\", \"diffBar\", 1, ShowDiffBar.SINGLETON, 1);\n\t\t\t//this.wedMgr.listeners.on(\"redrawAtEnd\", coordDiff);\n\t\t\t//this.wedMgr.listeners.on(\"shown\", coordDiff);\n\t\t}\n\t\treturn this;\n\t};\n\treturn cls;\n}\n\nasync function getDiffBar(this: IWedEditorDiffBar): Promise<IWedDiffBar> {\n\tif (!this.diffBar) {\n\t\tawait WEDLET.importDiffLib();\n\t\tif (!this.diffBar) this.diffBar = new (await import(\"back/edit/wed/features/diffBar_.js\")).WedDiffBar().init(this);\n\t}\n\treturn this.diffBar;\n}\n\n/** Action d'affichage ou masquage de la diffBar. */\nexport class ToggleDiffBar extends Action<IWedEditorDiffBar> implements IActionToggle<IWedEditorDiffBar> {\n\tstatic SINGLETON = new ToggleDiffBar();\n\n\tconstructor(id?: string) {\n\t\tsuper('diff' || id);\n\t\tthis._label = \"Comparer...\";\n\t\tthis._icon = \"/@skin@/edit/wed/diff/diff.svg\";\n\t}\n\n\tisVisible(ctx: IWedEditorDiffBar): boolean {\n\t\tif ((ctx.config as OWedEditorDiffBarConfig).hideDiffBar) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisToggle(): this is IActionToggle<IWedEditorDiffBar> {return true}\n\n\tgetDatas(api: 'toggle', ctx: IWedEditorDiffBar): boolean | null {\n\t\treturn ctx.diffBar && !ctx.diffBar.hidden;\n\t}\n\n\tasync execute(ctx: IWedEditorDiffBar, ev?: Event) {\n\t\tconst bar = await ctx.getDiffBar();\n\t\tif (bar.hidden) bar.show();\n\t\telse bar.close();\n\t}\n}\n\n/** Action pour bouton masqué si la diffBar est déjà visible. */\nexport class ShowDiffBar extends ToggleDiffBar {\n\tstatic SINGLETON = new ShowDiffBar();\n\n\tisToggle(): this is IActionToggle<IWedEditorDiffBar> {return false}\n\n\tisVisible(ctx: IWedEditorDiffBar): boolean {\n\t\tif (ctx.diffBar && !ctx.diffBar.hidden) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n}\n\n/** Abstraction du widget pour la barre de diff. */\nexport interface IWedDiffBar extends HTMLElement {\n\n\teditor: IWedEditorDiffBar;\n\n\tcurrentPanel: IDiffBarPanel | null\n\n\tinitParams: JWedDiffBarParams | null;\n\n\tgetPanelFor(action: IDiffBarAction): IDiffBarPanel | null\n\n\tsetCurrentPanel(panel: IDiffBarPanel | null): void\n\n\tgetDiffParams(): JWedDiffBarParams | null\n\n\tsetDiffParams(params: JWedDiffBarParams): Promise<void>\n\n\tsetDiffStates(st: 'drawn' | 'computable' | 'notComputable'): void;\n\n\tshow(): void\n\n\tclose(): void\n}\n\n/** Action responsable de l'affichage d'un des panels de la diffBar. */\nexport interface IDiffBarAction extends IAction<IWedDiffBar> {\n\texecute(ctx: IWedDiffBar, ev?: Event): Promise<void>\n}\n\n\n/** Données pour initialiser un panneau de recherche. Les autres paramètres sont dépendants de chaque type de panneau de recherche. */\nexport interface JWedDiffBarParams {\n\t/** Id du IDiffBarAction cible */\n\tdiffId: string\n}\n\n\n/** Panel construit par IDiffBarAction et affecté à la diffBar via WedDiffBar.setCurrentPanel(). */\nexport interface IDiffBarPanel extends HTMLElement {\n\n\t/** Action à l'origine de la création de ce panel.*/\n\taction: IDiffBarAction\n\n\t/** Connecte l'éditeur à ce panneau de recherche. Injecte alors les objets recherchés. */\n\tconnectDoc(): void\n\n\t/** Déconnecte le panneau de recherche du document.*/\n\tunconnectDoc(): void\n\n\t/**\n\t * Modifie les paramètres de recherche.\n\t * undefined pour init par défaut (construit le diff si pas de selection user utile).\n\t * null pour reset/erase: effacer les diff.\n\t */\n\tsetDiff(params: JWedDiffBarParams | null | undefined): void\n\n\t/** Construit un objet sérialisable représentant la config de cette session diff. */\n\tbuildDiffParams(): JWedDiffBarParams\n\n\t/**\n\t * (re)exécution du diff (refresh).\n\t * @param fullRefresh si provient du bouton de refresh général de la barre de diff.\n\t */\n\texecDiff(fullRefresh?: boolean): Promise<void>\n\n\t/** Impl partielle de IView */\n\tonViewShown?(): void;\n\n\t/** Impl partielle de IView */\n\tonViewHidden?(closed?: boolean): void;\n}\n\n\n/**\n * Impl de base pour l'action de choix du panel de diff.\n */\nexport abstract class DiffBarPanelAction extends Action<IWedDiffBar> implements IDiffBarAction {\n\n\tisToggle(ctx: IWedDiffBar): this is IActionToggle<IWedDiffBar> {return true}\n\n\t/** null pour l'état 'mixed'. */\n\tgetDatas(api: 'toggle', ctx: IWedDiffBar): boolean | null {return ctx.currentPanel?.action === this}\n\n\tasync execute(ctx: IWedDiffBar, ev?: Event) {\n\t\tlet panel = ctx.getPanelFor(this);\n\t\tif (!panel) panel = await this.buildPanel(ctx);\n\t\tctx.setCurrentPanel(panel);\n\t\tpanel.setDiff(ctx.initParams);\n\t}\n\n\tabstract buildPanel(ctx: IWedDiffBar, ev?: Event): Promise<IDiffBarPanel>\n}"]}