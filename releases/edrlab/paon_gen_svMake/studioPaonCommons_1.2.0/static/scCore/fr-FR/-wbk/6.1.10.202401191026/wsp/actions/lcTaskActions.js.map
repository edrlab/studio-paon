{"version":3,"sources":["/@back@/wsp/actions/lcTaskActions.tsx"],"names":["InfoFocusItem","ITEM","SRC","ERROR","LIFECYCLE","TASK","SrcAction","ActionMenuDep","CreateTask","[object Object]","taskType","super","getModel","this","_label","getTitle","_icon","getIcon","ctx","ev","infoBroker","datas","tkSt","getTaskInitStates","dispatchInfo","createNewSrcUri","_id","SrcExecTransition","trans","lcProv","overrideExec","code","showPerm","requireSrcVisiblePerm","enablePerm","requireSrcEnabledPerm","name","iconUrl","getLcState","targetState","execute","isTransitionVisible","shortDescs","reg","emitter","isVisible","_checkAtLeastOne","isTransitionEnabled","isEnabled","length","_checkAll","group","getGroup","sd","isTransAvailable","lcSt","itModel","srcRefs","src","isTask","push","params","env","wsp","wspServer","wspsLive","saveItems","paramsProvider","computeParams","controlBeforeExecute","rollbackTransition","result","execItemTransition","ok","reportError","msg","cause","error","adminDetails","text","ItemListTransition","_group","wspMetaUi","_listTrActions","list","transitions","getLcTransitions","tr","values"],"mappings":"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","sourcesContent":["import {JSX} from \"lib/commons/xml/dom\";\nimport {InfoFocusItem, IShortDescCtx, ITEM} from \"lib/wsp/item\";\nimport {JSrcIdent, SRC} from \"lib/wsp/src\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {IDatasLcSimpleTransition, ILcProvider, ITaskCreationCtx, ItemTypeTask} from \"lib/wsp/wspMetaUi\";\nimport {LIFECYCLE, TASK} from \"lib/wsp/lcTask\";\nimport {SrcAction} from \"back/wsp/actions/srcActions\";\nimport {ActionMenuDep, IAction} from \"lib/commons/actions\";\nimport {JLDTaskMain} from \"back/wsp/views/itemMain\";\n\n\n/** Action de création d'une tâche. */\nexport class CreateTask<C extends ITaskCreationCtx> extends SrcAction<C> {\n\n\tconstructor(public taskType: ItemTypeTask) {\n\t\tsuper(taskType.getModel());\n\t\tthis._label = taskType.getTitle();\n\t\tthis._icon = taskType.getIcon();\n\t}\n\n\texecute(ctx: C, ev?: Event) {\n\t\tif (ctx.infoBroker) {\n\t\t\tconst datas: JLDTaskMain = {tkSt: this.taskType.getTaskInitStates(ctx)};\n\t\t\tctx.infoBroker.dispatchInfo(new InfoFocusItem(SRC.createNewSrcUri(this._id), null, datas), null);\n\t\t}\n\t}\n}\n\n/**\n * Action d'exécution d'une transition\n */\nexport class SrcExecTransition<C extends IShortDescCtx> extends SrcAction<C> {\n\n\tconstructor(public trans: IDatasLcSimpleTransition, public lcProv: ILcProvider, overrideExec?: (ctx: C, ev?: Event) => any) {\n\t\tsuper(trans.code);\n\t\tif (trans.showPerm) this.requireSrcVisiblePerm(trans.showPerm);\n\t\tif (trans.enablePerm) this.requireSrcEnabledPerm(trans.enablePerm);\n\t\tthis._label = trans.name;\n\t\tthis._icon = trans.iconUrl || lcProv.getLcState(trans.targetState).iconUrl;\n\t\tif (overrideExec) this.execute = overrideExec;\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (this.trans.isTransitionVisible && this.trans.isTransitionVisible(ctx.shortDescs, ctx.reg, ctx.emitter) === false) return false;\n\t\tif (!super.isVisible(ctx)) return false;\n\t\t// On ne laisse visibles que les transitions actives sur au moins l'une des rows sélectionnées\n\t\treturn this._checkAtLeastOne(ctx);\n\t}\n\n\tisEnabled(ctx: C): boolean {\n\t\tif (this.trans.isTransitionEnabled && this.trans.isTransitionEnabled(ctx.shortDescs, ctx.reg, ctx.emitter) === false) return false;\n\t\tif (!super.isEnabled(ctx)) return false;\n\t\tif (ctx.shortDescs.length > 1) {\n\t\t\t//Si plusieurs src sélectionnés, on laisse visible mais désactivé si la transition ne peut être activée sur une des sources.\n\t\t\tif (!this._checkAll(ctx)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tgetGroup(ctx: C): string {\n\t\treturn this.trans.group || super.getGroup(ctx);\n\t}\n\n\t/** Retourne true si TOUTES les sources peuvent se voir affecter cette transition */\n\t_checkAll(ctx: C): boolean {\n\t\tfor (const sd of ctx.shortDescs) if (!LIFECYCLE.isTransAvailable(this.trans, sd.lcSt, sd.itModel, this.lcProv)) return false;\n\t\treturn true;\n\t}\n\n\t/** Retourne true si AU MOINS UNE source peut se voir affecter cette transition */\n\t_checkAtLeastOne(ctx: C): boolean {\n\t\tfor (const sd of ctx.shortDescs) if (LIFECYCLE.isTransAvailable(this.trans, sd.lcSt, sd.itModel, this.lcProv)) return true;\n\t\treturn false;\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst srcRefs: JSrcIdent[] = [];\n\t\tfor (const src of ctx.shortDescs) {\n\t\t\tif (TASK.isTask(src)) continue; //cf task.ts lorsque la source est une task.\n\t\t\tsrcRefs.push(src);\n\t\t}\n\t\tif (srcRefs.length === 0) return;\n\t\tlet params: { [srcUri: string]: { [key: string]: Jsonisable } };\n\t\tawait ctx.reg.env.wsp.wspServer.wspsLive.saveItems(ctx.reg.env.wsp.code, srcRefs);\n\t\tconst { paramsProvider } = this.trans;\n\t\tif (paramsProvider) {\n\t\t\tparams = {} as any;\n\t\t\tif (!await paramsProvider.computeParams(params, ctx.shortDescs, ctx.reg, ctx.emitter)) return;\n\t\t}\n\t\tif (this.trans.controlBeforeExecute && !await this.trans.controlBeforeExecute(ctx.shortDescs, ctx.reg, ctx.emitter, params)) {\n\t\t\tif (paramsProvider?.rollbackTransition) await paramsProvider.rollbackTransition(params, ctx.shortDescs, ctx.reg);\n\t\t\treturn;\n\t\t}\n\t\tconst result = await ITEM.execItemTransition(ctx.reg.env.wsp, ctx.emitter, this.trans.code, srcRefs, params);\n\t\tif (!result.ok) {\n\t\t\treturn ERROR.reportError({msg: \"Une erreur est survenue durant le changement d'état.\", cause: result.error, adminDetails: await result.text()})\n\t\t}\n\t}\n}\n\n/**\n * Menu des transitions exécutables des items.\n */\nexport class ItemListTransition<C extends IShortDescCtx> extends ActionMenuDep<C> {\n\n\tconstructor() {\n\t\tsuper('itemListTransition');\n\t\tthis._label = \"Changer d'état...\";\n\t\tthis._group = \"edit\";\n\t}\n\n\tgetActions(ctx: C): IAction<C>[] {\n\t\tconst lcProv: ILcProvider & { _listTrActions?: IAction<C>[] } = ctx.reg.env.wsp.wspMetaUi;\n\t\tif (!lcProv._listTrActions) {\n\t\t\tconst list: IAction<C>[] = lcProv._listTrActions = [];\n\t\t\tconst transitions = lcProv.getLcTransitions();\n\t\t\tif (transitions != null) for (const tr of transitions.values()) list.push(new SrcExecTransition(tr, lcProv));\n\t\t}\n\t\treturn lcProv._listTrActions;\n\t}\n}"]}