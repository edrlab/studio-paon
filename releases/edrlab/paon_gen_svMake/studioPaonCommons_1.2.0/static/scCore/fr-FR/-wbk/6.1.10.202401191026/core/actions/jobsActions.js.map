{"version":3,"sources":["/@back@/core/actions/jobsActions.tsx"],"names":["JSX","Action","POPUP","ERROR","MsgOver","EJobStatus","EXECUTOR","JobPlanificatorInput","JobPriorizationInput","JobsAction","[object Object]","this","mode","requiredStatus","status","ctx","reg","jobs","length","find","entry","includes","lastStatus","super","isVisible","isEnabled","action","waitMsg","errorMsg","msg","setCustomMsg","showMsgOver","window","document","body","waitFor","Promise","async","resolve","refuse","countJobs","errorsArray","ii","job","posJob","isDeleted","id","push","errorsCount","errors","join","show","e","report","ActionDeleteJobs","_label","_description","_group","_icon","setRequiredStatus","waiting","done","failed","planned","requireEnabledPerm","ev","jobId","usersCount","confirm","okLbl","cancelLbl","executeForEachJobs","deleteJob","env","universe","executor","count","showNotifWarning","uiRoot","SINGLETON","ActionScheduleJobs","hasFeature","input","createElement","titleBar","barLabel","label","scheduleDate","value","date","Date","now","scheduleJob","ActionForceExecuteJobs","forceExecuteJob","ActionMoveInQueueJobs","moveJobInQueue"],"mappings":"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","sourcesContent":["import {JSX} from \"lib/commons/xml/dom\";\nimport \"back/core/dialogs/dialogs_Perms\";\nimport {Action} from \"lib/commons/actions\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport \"back/core/actions/actions_Perms\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {MsgOver} from \"back/commons/basis\";\nimport {EJobStatus, EXECUTOR, IJobsCtx, JJobBase} from \"lib/core/executor\";\nimport {JJobPlanifValue, JobPlanificatorInput, JobPriorizationInput} from \"back/core/widgets/jobsInput\";\n\n\n/**\n * Contexte des actions associées à un job\n */\n\n\nexport abstract class JobsAction<E extends IJobsCtx = IJobsCtx> extends Action<E> {\n\tprotected mode: 'mono' | 'multi' = null;\n\n\tprotected requiredStatus: EJobStatus[] = null;\n\n\t/**\n\t * @param mode :\n\t * <ul>\n\t *   <li>multi : affiché <b>ssi</b> multi sélection de jobs</li>\n\t *   <li>mono : affiché <b>ssi</b> mono sélection de jobs</li>\n\t *   <li>null : affiché <b>ssi</b> sélection (mono ou multi) de jobs</li>\n\t *  </ul>\n\t */\n\tsetMode(mode: 'mono' | 'multi') {\n\t\tthis.mode = mode;\n\t}\n\n\t/**\n\t * Status rendant l'action visible\n\t * NOte : si non spécifié, pas de filtre sur le statut\n\t */\n\tsetRequiredStatus(status: EJobStatus[]) {\n\t\tthis.requiredStatus = status;\n\t}\n\n\tisVisible(ctx: E): boolean {\n\t\tif (!ctx.reg) return false;\n\t\tif (!ctx.jobs || ctx.jobs.length == 0) return false;\n\t\tif (this.requiredStatus)\n\t\t\tif (ctx.jobs.find((entry: JJobBase) => !this.requiredStatus.includes(entry.lastStatus))) return false\n\t\tif (this.mode === \"multi\" && ctx.jobs.length === 1) return false;\n\t\tif (this.mode === \"mono\" && ctx.jobs.length !== 1) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisEnabled(ctx: E): boolean {\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\t/**\n\t *\n\t * @param jobs\n\t * @param action : EXECUTOR.deleteJob(ctx.reg.env.universe.executor, job.id)\n\t * @param waitMsg : ex : \"Suppression en cours...\"\n\t * @param errorMsg : ex : \"Suppression en échec\"\n\t */\n\tstatic async executeForEachJobs(jobs: JJobBase[], action: (jobId: string) => Promise<any | null>, waitMsg: string, errorMsg: string,): Promise<any> {\n\t\tlet msg = new MsgOver();\n\t\treturn msg.setCustomMsg(waitMsg, \"info\").showMsgOver(window.document.body).waitFor(\n\t\t\tnew Promise(async (resolve, refuse) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (jobs && jobs.length > 0) {\n\t\t\t\t\t\tlet countJobs = jobs.length;\n\t\t\t\t\t\tlet errorsArray: string[] = [];\n\t\t\t\t\t\tfor (let ii = 0; ii < countJobs; ii++) {\n\t\t\t\t\t\t\tlet job = jobs[ii];\n\t\t\t\t\t\t\tlet posJob = ii + 1;\n\t\t\t\t\t\t\tif (jobs.length > 1)\n\t\t\t\t\t\t\t\tmsg.setCustomMsg(`${waitMsg}\\nTraitement ${posJob} sur ${countJobs}...`);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tmsg.setCustomMsg(waitMsg);\n\t\t\t\t\t\t\tlet isDeleted = await action(job.id);\n\t\t\t\t\t\t\tif (!isDeleted)\n\t\t\t\t\t\t\t\terrorsArray.push(job.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errorsArray.length == 0) {\n\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet errorsCount = errorsArray.length;\n\t\t\t\t\t\t\tlet errors = errorsArray.join(\", \");\n\t\t\t\t\t\t\trefuse(ERROR.show(`${errorMsg} (${errorsCount}) : ${errors}.`));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\trefuse(ERROR.report(`${errorMsg}. Veuillez réessayer ultérieurement.`, e));\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\t}\n}\n\n/** Action de suppression de job */\nexport class ActionDeleteJobs<C extends IJobsCtx> extends JobsAction<C> {\n\tstatic SINGLETON = new ActionDeleteJobs();\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis._label = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"Supprimer les traitements\";\n\t\t\telse return \"Supprimer le traitement\";\n\t\t};\n\t\tthis._description = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"Suppression des traitements\";\n\t\t\telse return \"Suppression du traitement\";\n\t\t};\n\t\tthis._group = \"delete\";\n\t\tthis._icon = \"/@skin@/commons/icons/delete.svg\";\n\t\tthis.setRequiredStatus([EJobStatus.waiting, EJobStatus.done, EJobStatus.failed, EJobStatus.planned]);\n\t\tthis.requireEnabledPerm(\"action.jobs#delete\");\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<boolean> {\n\t\tlet msg;\n\t\tif (ctx.jobs.length === 1) {\n\t\t\tlet jobId = ctx.jobs[0].id;\n\t\t\tmsg = `Voulez-vous vraiment supprimer le traitement '${jobId}' ?`;\n\t\t} else {\n\t\t\tconst usersCount = ctx.jobs.length;\n\t\t\tmsg = `Voulez-vous vraiment supprimer les '${usersCount}' traitements ?`;\n\t\t}\n\t\tif (await POPUP.confirm(msg, null, {okLbl: \"Supprimer\", cancelLbl: \"Annuler\"})) {\n\t\t\ttry {\n\t\t\t\tawait JobsAction.executeForEachJobs(ctx.jobs, jobId => EXECUTOR.deleteJob(ctx.reg.env.universe.executor, jobId), \"Suppression en cours...\", \"Suppression en échec\");\n\t\t\t\tlet count = ctx.jobs.length;\n\t\t\t\tPOPUP.showNotifWarning(ctx.jobs.length > 1 ?\n\t\t\t\t\t`Les ${count} traitements ont bien été supprimés.` :\n\t\t\t\t\t`Le traitement a bien été supprimé.`\n\t\t\t\t\t, ctx.reg.env.uiRoot);\n\t\t\t\t// FIXME sys : stratégie pour fixer ce param anchor dans une action ?\n\t\t\t\treturn true;\n\t\t\t} catch (e) {\n\t\t\t\tawait ERROR.report(`La suppression n'a pas pu aboutir. Veuillez réessayer ultérieurement.`, e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Action de (re)planificaton d'un job */\nexport class ActionScheduleJobs<C extends IJobsCtx> extends JobsAction<C> {\n\tstatic SINGLETON = new ActionScheduleJobs();\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis._label = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"(Re)planifier les traitements\";\n\t\t\telse return \"(Re)planifier le traitement\";\n\t\t};\n\t\tthis._description = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"(Re)planification des traitements\";\n\t\t\telse return \"(Re)planification du traitement\";\n\t\t};\n\n\t\tthis._group = \"edit\";\n\t\tthis._icon = \"/@skin@/core/actions/jobs/schedule.svg\";\n\t\tthis.setRequiredStatus([EJobStatus.waiting, EJobStatus.done, EJobStatus.failed, EJobStatus.planned]);\n\t\tthis.requireEnabledPerm(\"action.jobs#schedule\");\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.executor.hasFeature(\"scheduling\"))\n\t\t\treturn false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<boolean> {\n\t\tlet input = <JobPlanificatorInput/> as JobPlanificatorInput;\n\t\tif (await POPUP.confirm(input, null, {okLbl: \"(Re)planifier\", cancelLbl: \"Annuler\", titleBar: {barLabel: {label: \"Planification\"}}})) {\n\t\t\ttry {\n\t\t\t\tlet scheduleDate: JJobPlanifValue = input.value || {date: Date.now()}\n\t\t\t\tawait JobsAction.executeForEachJobs(ctx.jobs, jobId => EXECUTOR.scheduleJob(ctx.reg.env.universe.executor, jobId, scheduleDate.date), \"Enregistrement en cours...\", \"Enregistrement en échec\");\n\t\t\t\tlet count = ctx.jobs.length;\n\t\t\t\tPOPUP.showNotifWarning(ctx.jobs.length > 1 ?\n\t\t\t\t\t`Planification des ${count} traitements terminée.` :\n\t\t\t\t\t`Planification du traitement terminée.`\n\t\t\t\t\t, ctx.reg.env.uiRoot);\n\t\t\t\treturn true;\n\t\t\t} catch (e) {\n\t\t\t\tawait ERROR.report(`La planification n'a pas pu aboutir. Veuillez réessayer ultérieurement.`, e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Action d'exécution forcée d'un job */\nexport class ActionForceExecuteJobs<C extends IJobsCtx> extends JobsAction<C> {\n\tstatic SINGLETON = new ActionForceExecuteJobs();\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis._label = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"(Re)exécuter maintenant les traitements\";\n\t\t\telse return \"(Re)exécuter maintenant le traitement\";\n\t\t};\n\t\tthis._description = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"Placer les traitements dans la pile d'exécution\";\n\t\t\telse return \"Placer le traitement dans la pile d'exécution\";\n\t\t};\n\n\t\tthis._group = \"edit\";\n\t\tthis._icon = \"/@skin@/core/actions/jobs/execute.svg\";\n\t\tthis.setRequiredStatus([EJobStatus.failed, EJobStatus.planned]);\n\t\tthis.requireEnabledPerm(\"action.jobs#forceExecute\");\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<boolean> {\n\t\tlet msg;\n\t\tif (ctx.jobs.length === 1) {\n\t\t\tlet jobId = ctx.jobs[0].id;\n\t\t\tmsg = `Voulez-vous vraiment déplacer le traitement '${jobId}' dans la pile d'exécution ?`;\n\t\t} else {\n\t\t\tconst count = ctx.jobs.length;\n\t\t\tmsg = `Voulez-vous vraiment déplacer les '${count}' traitements dans la pile d'exécution ?`;\n\t\t}\n\t\tif (await POPUP.confirm(msg, null, {okLbl: \"Exécuter\", cancelLbl: \"Annuler\", titleBar: {barLabel: {label: \"Pile d'exécution\"}}})) {\n\t\t\ttry {\n\t\t\t\t// FIXME : set jobDatas : \"top\" | \"bottom\" | int ?\n\t\t\t\tawait JobsAction.executeForEachJobs(ctx.jobs, jobId => EXECUTOR.forceExecuteJob(ctx.reg.env.universe.executor, jobId), \"Planification immédiate en cours...\", \"Planification immédiate en échec\");\n\t\t\t\tlet count = ctx.jobs.length;\n\t\t\t\tPOPUP.showNotifWarning(ctx.jobs.length > 1 ?\n\t\t\t\t\t`Planification immédiate des ${count} traitements terminée.` :\n\t\t\t\t\t`Planification immédiate du traitement terminée.`\n\t\t\t\t\t, ctx.reg.env.uiRoot);\n\t\t\t\treturn true;\n\t\t\t} catch (e) {\n\t\t\t\tawait ERROR.report(`La planification n'a pas pu aboutir. Veuillez réessayer ultérieurement.`, e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Action de priorisation d'un job */\nexport class ActionMoveInQueueJobs<C extends IJobsCtx> extends JobsAction<C> {\n\tstatic SINGLETON = new ActionMoveInQueueJobs();\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis._label = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"Prioriser les traitements\";\n\t\t\telse return \"Prioriser le traitement\";\n\t\t};\n\t\tthis._description = (ctx) => {\n\t\t\tif (ctx.jobs && ctx.jobs.length > 1) return \"Modification de la priorité des traitements dans la pile d'exécution\";\n\t\t\telse return \"Modification de la priorité du traitement dans la pile d'exécution\";\n\t\t};\n\n\t\tthis._group = \"edit\";\n\t\tthis._icon = \"/@skin@/core/actions/jobs/prioritization.svg\";\n\t\tthis.setRequiredStatus([EJobStatus.waiting]);\n\t\tthis.requireEnabledPerm(\"action.jobs#moveInQueue\");\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<boolean> {\n\t\tlet msg;\n\t\tlet input = <JobPriorizationInput/> as JobPriorizationInput;\n\t\tif (await POPUP.confirm(input, null, {okLbl: \"Enregistrer\", cancelLbl: \"Annuler\", titleBar: {barLabel: {label: ctx.jobs.length > 1 ? \"Prioriser les traitements\" : \"Prioriser le traitement\"}}})) {\n\t\t\ttry {\n\t\t\t\tawait JobsAction.executeForEachJobs(ctx.jobs, jobId => EXECUTOR.moveJobInQueue(ctx.reg.env.universe.executor, jobId, input.value), \"Priorisation en cours...\", \"Priorisation en échec\");\n\t\t\t\tlet count = ctx.jobs.length;\n\t\t\t\tPOPUP.showNotifWarning(ctx.jobs.length > 1 ?\n\t\t\t\t\t`Modification de la priorité des ${count} traitements terminée.` :\n\t\t\t\t\t`Modification de la priorité du traitement terminée.`\n\t\t\t\t\t, ctx.reg.env.uiRoot);\n\t\t\t\treturn true;\n\t\t\t} catch (e) {\n\t\t\t\tawait ERROR.report(`La priorisation des traitements n'a pas pu aboutir. Veuillez réessayer ultérieurement.`, e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n"]}