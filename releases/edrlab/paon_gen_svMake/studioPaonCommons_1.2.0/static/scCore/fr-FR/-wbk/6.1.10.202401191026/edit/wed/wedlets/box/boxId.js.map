{"version":3,"sources":["/@back@/edit/wed/wedlets/box/boxId.tsx"],"names":["REG","Action","BoxContainer","EWedletEditMode","isEditableWedlet","POPUP","JSX","ShadowJsx","Button","DOMSH","MsgLabel","BoxId","[object Object]","val","children","super","refreshBindValue","this","fragmentId","toString","onFragmentIdChanged","chars","msg","replaceChars","reg","addToList","setLabel","setGroup","setIcon","setVisible","ctx","wedlet","isVirtual","editMode","write","setEnabled","wedMgr","hasPerm","setExecute","async","confirm","focusedElt","okLbl","kind","docHolder","xa","wedAnchor","mgrId","getAspect","newBatch","start","setAttr","generateId","Set","doBatch","boxId","newId","showDialog","createElement","skin","skinOver","id","î","label","level","icon","value","uiContext","onclick","findPopupableParent","close","findDocumentOrShadowRoot","getElementById","titleBar","onNextClose"],"mappings":"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","sourcesContent":["import {REG} from \"lib/commons/registry\";\nimport {Action} from \"lib/commons/actions\";\nimport {BoxContainer} from \"back/edit/wed/wedlets/box/boxTags\";\nimport {EWedletEditMode, isEditableWedlet, IWedletActionCtx} from \"back/edit/wed/wedlets/wedlet\";\nimport {IXmlIdMgr} from \"lib/edit/schema/xmlIdMgr\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {JSX, ShadowJsx} from \"lib/commons/xml/dom\";\nimport {Button, OButtonInit} from \"back/commons/widgets/buttons\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IJmlNode, IJmlSubSet} from \"lib/commons/xml/jml\";\nimport {IXmlMsg} from \"lib/edit/ot/xmlHouse\";\nimport {MsgLabel, OMsgLabelInit} from \"back/commons/basis\";\nimport \"back/edit/wed/wedlets/wedlets_Perms\";\n\n// Base d'un widget pour gérer un xml:id.\nexport abstract class BoxId extends BoxContainer {\n\n\tfragmentId: string;\n\n\trefreshBindValue(val: IJmlNode, children?: IJmlSubSet) {\n\t\tsuper.refreshBindValue(val, children);\n\t\tthis.fragmentId = val ? val.toString() : null;\n\t\tthis.onFragmentIdChanged();\n\t}\n\n\treplaceChars(chars: string, msg: IXmlMsg) {\n\t\tsuper.replaceChars(chars, msg);\n\t\tthis.fragmentId = chars;\n\t\tthis.onFragmentIdChanged();\n\t}\n\n\tprotected onFragmentIdChanged(){}\n}\n\n// AgEltBoxSelection(BoxId, {selMode: 'box', actionsLists: ['actions:wed:box-id', 'actions:wed:box'], groupOrder: '* edit'});\n// window.customElements.define(\"box-id\", BoxId);\n\n/**\n * Action de génération d'un nouvel Id via l'aspect XmlIdMgr du docHolder.\n */\nREG.reg.addToList(\"actions:wed:box-id\", \"changeId\", 1, new Action<IWedletActionCtx>(\"changeId\")\n\t.setLabel(\"Changer d'identifiant\")\n\t.setGroup(\"edit\")\n\t.setIcon(\"/@skin@/edit/wed/box/changeId.svg\")\n\t.setVisible((ctx: IWedletActionCtx) => !ctx.wedlet.isVirtual() && isEditableWedlet(ctx.wedlet) && ctx.wedlet.editMode === EWedletEditMode.write)\n\t.setEnabled((ctx: IWedletActionCtx) => ctx.wedlet.wedMgr.reg.hasPerm(\"action.wed#change.box-id\"))\n\t//.requireEnabledPerm(\"action.wed#change.box-id\") FIXME6 : manque le reg dans IWedletActionCtx pour faire fonctionner checkObjectRootPerm\n\t.setExecute(async (ctx: IWedletActionCtx) => {\n\t\tif (await POPUP.confirm(\"Attention : Changer d'identifiant aura pour effet de casser les liens établis vers ce fragment.\",\n\t\t\tctx.focusedElt, {okLbl: \"Changer d'identifiant\", kind: \"warning\"})) {\n\t\t\tconst docHolder = ctx.wedlet.wedMgr.docHolder;\n\t\t\tconst xa = ctx.wedlet.wedAnchor;\n\t\t\tconst mgrId = docHolder.getAspect<IXmlIdMgr>(xa, null, \"XmlIdMgr\");\n\t\t\tif (mgrId) docHolder.newBatch({start: xa}).setAttr(xa, mgrId.generateId(new Set())).doBatch();\n\t\t}\n\t})\n);\n\n/**\n * Action d'édition directe du xml:id.\n */\nREG.reg.addToList(\"actions:wed:box-id\", \"editId\", 1, new Action<IWedletActionCtx>(\"editId\")\n\t.setLabel(\"Éditer l'identifiant\")\n\t.setGroup(\"edit\")\n\t.setIcon(\"/@skin@/edit/wed/box/editId.svg\")\n\t.setVisible((ctx: IWedletActionCtx) => !ctx.wedlet.isVirtual() && isEditableWedlet(ctx.wedlet) && ctx.wedlet.editMode === EWedletEditMode.write)\n\t//.requireEnabledPerm(\"action.wed#edit.box-id\") FIXME6 : manque le reg dans IWedletActionCtx pour faire fonctionner checkObjectRootPerm\n\t.setEnabled((ctx: IWedletActionCtx) => ctx.wedlet.wedMgr.reg.hasPerm(\"action.wed#edit.box-id\"))\n\t.setExecute(async (ctx: IWedletActionCtx) => {\n\t\tconst docHolder = ctx.wedlet.wedMgr.docHolder;\n\t\tconst boxId = ctx.focusedElt as BoxId;\n\t\tconst newId = await POPUP.showDialog<string>(<div><ShadowJsx skin=\"standard-dialog\" skinOver=\"webzone:panel\">\n\t\t\t<style>{/* language=CSS */ `\n\t\t  :host {\n\t\t\t  min-width: 20em;\n\t\t\t  width: 20em;\n\t\t  }\n\n\t\t  #body {\n\t\t\t  display: flex;\n\t\t\t  flex-direction: column;\n\t\t\t  min-height: 0;\n\t\t\t  min-width: 0;\n\t\t\t  padding: .5em;\n\t\t  }\n\n\t\t  #msg {\n\t\t\t  padding: .5em 0;\n\t\t  }\n\n\t\t  label {\n\t\t\t  display: flex;\n\t\t\t  flex-direction: column;\n\t\t\t  min-height: 0;\n\t\t\t  min-width: 0;\n\t\t  }\n\n\t\t\t`}</style>\n\t\t\t<div id=\"body\">\n\t\t\t\t<MsgLabel id=\"msg\" î={{\n\t\t\t\t\tlabel: \"Attention, changer d'identifiant aura pour effet de casser les liens établis vers ce fragment.\",\n\t\t\t\t\tlevel: \"warning\", icon: \"/@skin@/commons/widgets/popupable/warning.svg\"\n\t\t\t\t} as OMsgLabelInit}/>\n\t\t\t\t<label>\n\t\t\t\t\t<div>Nouvel identifiant</div>\n\t\t\t\t\t<input id=\"input\" value={boxId.fragmentId}/>\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<div id=\"footer\">\n\t\t\t\t<Button î={{label: \"Changer\", uiContext: \"dialog\"} as OButtonInit} onclick={function (this: Button) {\n\t\t\t\t\tPOPUP.findPopupableParent(this).close((DOMSH.findDocumentOrShadowRoot(this).getElementById('input') as HTMLInputElement).value);\n\t\t\t\t}\n\t\t\t\t}/>\n\t\t\t\t<Button î={{label: \"Annuler\", uiContext: \"dialog\"} as OButtonInit} onclick={function (this: Button) {\n\t\t\t\t\tPOPUP.findPopupableParent(this).close(null);\n\t\t\t\t}\n\t\t\t\t}/>\n\t\t\t</div>\n\t\t</ShadowJsx></div>, ctx.focusedElt, {titleBar: \"Éditer cet identifiant\"}).onNextClose();\n\t\tconst xa = ctx.wedlet.wedAnchor;\n\t\tif (newId && newId !== boxId.fragmentId) docHolder.newBatch({start: xa}).setAttr(xa, newId).doBatch();\n\t})\n);\n\n\nREG.reg.addToList(\"actions:wed:box-id\", \"scComment\", 2, null);\nREG.reg.addToList(\"actions:wed:box-id\", \"delete\", 2, null);"]}