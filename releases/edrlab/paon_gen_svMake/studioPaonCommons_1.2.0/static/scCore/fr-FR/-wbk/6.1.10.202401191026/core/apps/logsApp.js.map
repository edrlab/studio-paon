{"version":3,"sources":["/@back@/core/apps/logsApp.tsx"],"names":["BaseElementAsync","ENodeType","JSX","REG","DOMSH","LASTDATAS","BlocksCollapsable","Area","AppHeader","LogsApp","[object Object]","init","this","appDef","reg","findReg","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","sr","shadowRoot","showUniverses","logsUnivers","maxOpenEntriesByDefault","appHeader","appendChild","initialize","actionContext","setAttribute","hasHeadTitleBar","createElement","logsAppEntries","getList","filter","entry","canReadLogUniverce","universe","LDkey","LD","lastDatas","open","i","length","logAppEntry","push","getId","_blocksCollapsable","î","Object","assign","areasContext","skinOver","lastDatasKey","blocksCollapsableInit","forEach","pos","addArea","setLabel","name","getName","requireVisiblePerm","setBodyBuilder","ctx","iframe","src","config","adminLogsUrl","addEventListener","forceOpenLinksInNewTab","areaContext","parentBlockCtn","locked","undefined","def","parentLastDatas","buildLastDatas","visitor","options","frame","_a","contentDocument","ev","defaultPrevented","target","link","nodeName","targetPaths","composedPath","nodeType","element","result","univ","hasPerm","customElements","define","registerSkin"],"mappings":"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","sourcesContent":["import {BaseElementAsync, OSkinableInit} from \"back/commons/basis\";\nimport {IApp, IAppCtx} from \"back/core/appFrame\";\n\nimport {ENodeType, JSX} from \"lib/commons/xml/dom\";\nimport {IView, IViewsContainer, OViewVisitOptions} from \"lib/commons/views\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {JLogsAppDef} from \"back/core/plugins/logsPlg\";\nimport {BasicUniverse, IUniverseEnv} from \"lib/core/universe\";\nimport {ILastDatasBuilder, JLastDatas, LASTDATAS} from \"lib/commons/lastDatas\";\nimport {BlocksCollapsable, JLDBlocksCollapsable, OBlocksCollapsableInit} from \"back/commons/widgets/blocks\";\nimport {Area} from \"lib/commons/areas\";\nimport {AppHeader} from \"back/core/widgets/appHeader\";\nimport \"back/core/apps/apps_Perms\";\n\n\ninterface JLogsAppEntry {\n\tuniverse: BasicUniverse\n\tname?: string\n}\n\nexport interface LogsApp extends BaseElementAsync {\n\tinitialize(init: OLogsAppInit & IAppCtx<IUniverseEnv>): this;\n}\n\nexport interface OLogsAppInit extends OSkinableInit {\n\t/** nombre d'entrées de log maximal ouvert par défaut.\n\t * 5 si non défini */\n\tmaxOpenEntriesByDefault?: number,\n\tblocksCollapsableInit?: OBlocksCollapsableInit<any>,\n}\n\nexport class LogsApp extends BaseElementAsync implements IApp<IUniverseEnv>, IViewsContainer, ILastDatasBuilder {\n\n\treg: IReg<IUniverseEnv>;\n\n\tappDef: JLogsAppDef;\n\n\tappHeader: AppHeader<LogsApp>;\n\n\tprotected _blocksCollapsable: BlocksCollapsable;\n\n\tprotected async _initialize(init: OLogsAppInit & IAppCtx<IUniverseEnv>) {\n\t\tthis.appDef = init.appDef as JLogsAppDef;\n\t\tthis.reg = this.findReg(init) as IReg<IUniverseEnv>;\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tconst sr = this.shadowRoot;\n\t\tconst showUniverses = this.appDef.logsUnivers;\n\n\t\tif (!init.maxOpenEntriesByDefault) init.maxOpenEntriesByDefault = 5;\n\n\t\t//AppHeader\n\t\tthis.appHeader = sr.appendChild(new AppHeader<LogsApp>().initialize({\n\t\t\treg: this.reg,\n\t\t\tactionContext: this,\n\t\t}));\n\n\t\tthis.setAttribute(\"label\", \"Logs système\");\n\t\tif (!init.hasHeadTitleBar) this.appHeader.appendChild(<header><h1>Logs système</h1></header>);\n\n\t\tlet logsAppEntries = init.reg.getList(\"plg:logs:entries\") as JLogsAppEntry[];\n\t\tlogsAppEntries = logsAppEntries.filter((entry) => LogsApp.canReadLogUniverce(entry.universe));\n\n\t\tconst LDkey = \"blocks\";\n\t\tlet LD: JLDBlocksCollapsable = (init.lastDatas ? init.lastDatas[LDkey] : null) as JLDBlocksCollapsable;\n\n\t\t// Ouverture des blocks par défaut (si pas de LD)\n\t\tif (!LD && init.maxOpenEntriesByDefault) {\n\t\t\tLD = {open: []};\n\t\t\tfor (var i = 0; i < logsAppEntries.length; i++) {\n\t\t\t\tconst logAppEntry = logsAppEntries[i];\n\t\t\t\tif (i < init.maxOpenEntriesByDefault)\n\t\t\t\t\tLD.open.push(logAppEntry.universe.getId())\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis._blocksCollapsable = sr.appendChild(<BlocksCollapsable î={Object.assign({\n\t\t\treg: this.reg,\n\t\t\tareasContext: {reg: this.reg},\n\t\t\tskinOver: \"logs-app/collapsableBlocks\",\n\t\t\tlastDatasKey: LDkey,\n\t\t\tlastDatas: LD,\n\t\t} as OBlocksCollapsableInit<any>, init.blocksCollapsableInit)}/>) as BlocksCollapsable;\n\n\t\tlogsAppEntries.forEach((logAppEntry, pos) => {\n\t\t\tthis._blocksCollapsable.addArea(\n\t\t\t\tnew Area(logAppEntry.universe.getId()).setLabel(logAppEntry.name || logAppEntry.universe.getName()).requireVisiblePerm(\"ui.apps.logs.show\").setBodyBuilder((ctx) => {\n\t\t\t\t\t\tlet iframe = <iframe src={logAppEntry.universe.config.adminLogsUrl}/> as HTMLIFrameElement;\n\t\t\t\t\t\tiframe.addEventListener(\"load\", () => {\n\t\t\t\t\t\t\tthis.forceOpenLinksInNewTab(iframe, this.reg);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn iframe;\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tnull,\n\t\t\t\t{\n\t\t\t\t\treg: logAppEntry.universe.reg,\n\t\t\t\t\tareaContext: {reg: logAppEntry.universe.reg},\n\t\t\t\t\tparentBlockCtn: this._blocksCollapsable,\n\t\t\t\t\tlocked: logsAppEntries.length == 1 ? true : undefined,\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\tupdateAppDef(def: JLogsAppDef): boolean {\n\t\tif (this.appDef === def) return true; //chgt issu d'ici\n\t\treturn false;\n\t}\n\n\tbuildLastDatas(parentLastDatas: JLastDatas): void {\n\t\tLASTDATAS.buildLastDatas(parentLastDatas, this._blocksCollapsable, true);\n\t}\n\n\tvisitViews(visitor: (view: IView) => any) {\n\t\tvisitor(this._blocksCollapsable)\n\t}\n\n\tvisitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\treturn visitor(this._blocksCollapsable);\n\t}\n\n\t/** */\n\tprivate forceOpenLinksInNewTab(frame: HTMLIFrameElement, reg: IReg<any>) {\n\t\t//note : frame.contentDocument null si pas \"sameSite\" (sécurité navigateurs).\n\t\tframe.contentDocument?.addEventListener('click', (ev) => {\n\t\t\tif (ev.defaultPrevented) return;\n\n\t\t\tconst target = ev.target as Element;\n\t\t\tlet link: Element = null;\n\t\t\tif (target.nodeName == \"a\") link = target;\n\t\t\tif (!link) {\n\t\t\t\t// Typage volontairement incorrect : targetPaths contient document et window, qui ne passeront pas la première condition\n\t\t\t\tconst targetPaths = ev.composedPath() as Element[];\n\t\t\t\tfor (let i = 1; i < targetPaths.length; i++) {\n\t\t\t\t\tconst target = targetPaths[i];\n\t\t\t\t\tif (target.nodeType != ENodeType.element) break;\n\t\t\t\t\telse if (target.nodeName == \"a\") {\n\t\t\t\t\t\tlink = target;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!link) return;\n\t\t\tlink.setAttribute(\"target\", \"_blank\");\n\t\t});\n\t}\n\n\t/** Retourne true si au moins un univers est visible dans cette app */\n\tstatic atLeastOneEntry(reg: IReg<any>): boolean {\n\t\tlet logsAppEntries = reg.getList(\"plg:logs:entries\") as JLogsAppEntry[] || [];\n\t\tlet result = false;\n\t\tfor (const logAppEntry of logsAppEntries) {\n\t\t\tif (this.canReadLogUniverce(logAppEntry.universe)) {\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/** Retourne true si cet univers est visible dans cette app */\n\tprivate static canReadLogUniverce(univ: BasicUniverse): boolean {\n\t\treturn univ.config.adminLogsUrl && univ.reg.hasPerm(\"ui.apps.logs.show\") ? true : false;\n\t}\n}\n\n\ncustomElements.define('logs-app', LogsApp);\nREG.reg.registerSkin('logs-app', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t}\n\n\theader {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tmax-height: 5em;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tuser-select: none;\n\t}\n\n\th1 {\n\t\tmargin: .1em .5em;\n\t\tfont-size: 1em;\n\t\tletter-spacing: 0.1em;\n\t\ttext-align: center;\n\t}\n\n\tc-blocks-collapsable {\n\t\tflex: 1;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t}\n`);\n\n\nREG.reg.registerSkin('logs-app/collapsableBlocks', 1, /* language=CSS */ `\n\tiframe {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder: none;\n\t\tbackground-color: var(--form-bgcolor);\n\t}\n`);\n"]}