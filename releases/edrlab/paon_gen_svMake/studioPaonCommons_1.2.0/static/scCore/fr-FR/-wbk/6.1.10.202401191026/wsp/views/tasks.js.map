{"version":3,"sources":["/@back@/wsp/views/tasks.tsx"],"names":["REG","BaseAreaView","DOM","JSX","DOMSH","EWspChangesEvts","isItemUiEnv","SRC","IO","EInvolvement","ETaskStage","TASK","CDM","GridColDef","CellBuilderItModelFlagIcon","CellBuilderLc","CellBuilderSrcIconCode","CellBuilderTkDeadline","AccelKeyMgr","Button","EItemTypeFamily","ItemTypeTask","LC_DEFAULT_NAME","CreateTask","FocusTask","IS_element","Tasks","taskScope","this","reg","env","itemRef","srcRef","longDesc","itemLongDesc","currentUser","universe","auth","visibleStage","_currentTab","id","pending","completed","forthcoming","[object Object]","init","super","_initialize","wsp","ephemeralView","refreshCb","taskFields","_tasksFields","join","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","installSkin","localName","allTabs","appendChild","createElement","Ã®","icon","title","actionContext","shortDescs","infoBroker","emitter","actions","wspMetaUi","getItemTypes","filter","t","map","onclick","ev","target","classList","contains","setCurrentTab","fetchTasks","append","class","label","hasForthcomingTasks","undefined","Error","addToList","setLabel","setMinWidth","setMaxWidth","setSortable","setCellBuilder","setSkin","setFlex","setIconWidth","override","gridInit","columnDefs","mergeLists","emptyBody","_fetchingMsg","itemHandlingReact","onWspUriChangeScope","accelKeyMgr","initFromMapActions","mergeListsAsMap","defaultAction","lineDrawer","skinScroll","autoSelOnFocus","_grid","tab","lastDatas","getElementById","findNext","n","_refresh","shadowRoot","setAttrBool","hasPerm","toggle","showTasksList","currTab","qs","code","options","user","_lastUserFlatGroups","fetchFlattenedGroups","account","push","includeDescendants","involvedUser","involvedUserGroups","actStage","stringify","tasks","wspServer","config","tasksUrl","fetchJson","i","length","taskIsShown","splice","e","state","dataHolder","setDatas","currentTabId","task","userFlatGroups","inv","executor","follower","getInvolvementForAccounts","_onConnRenewed","_wspUriChange","onWspUriChange","bind","place","eventsMgr","on","onConnRenewed","shown","closed","removeListener","parentLastDatas","lastDatasKey","getAttribute","row","line","dt","rowDatas","tkDeadline","Date","now","redrawLine","msg","from","involved","type","u","getItemType","itModel","getFamily","srcGridDatas","findRowKeyBySrcId","srcId","setTimeout","registerSkin","customElements","define"],"mappings":"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","sourcesContent":["import {ILastDatasBuilder, JLastDatas} from \"lib/commons/lastDatas\";\nimport {IReg, IRegPointer, REG} from 'lib/commons/registry';\nimport {BaseAreaView, OBaseAreaViewInit} from \"lib/commons/views\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IWspUiEnv, JWspUriChangeMsg, Wsp} from \"lib/wsp/wsp\";\nimport {EWspChangesEvts, WspsLivePlace} from \"lib/wsp/wspsLive\";\nimport {isItemUiEnv} from \"back/wsp/views/itemMain\";\nimport {ESrcField, JSrcFields, SRC, srcUri} from \"lib/wsp/src\";\nimport {IO} from \"lib/commons/io/io\";\nimport {EInvolvement, ETaskStage, TASK} from \"lib/wsp/lcTask\";\nimport {CDM} from \"lib/commons/utils/cdm\";\nimport {Label} from \"back/commons/basis\";\nimport {GridColDef, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {CellBuilderItModelFlagIcon, CellBuilderLc, CellBuilderSrcIconCode, CellBuilderTkDeadline} from \"back/wsp/widgets/srcGridColumns\";\nimport {OSrcGridInit, SrcGrid} from \"back/wsp/widgets/srcGrid\";\nimport {JUser} from \"lib/core/user\";\nimport {GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {AccelKeyMgr} from \"lib/commons/actions\";\nimport {Button, OButtonActionsInit} from \"back/commons/widgets/buttons\";\nimport {EItemTypeFamily, ItemTypeTask, LC_DEFAULT_NAME} from \"lib/wsp/wspMetaUi\";\nimport {CreateTask} from \"back/wsp/actions/lcTaskActions\";\nimport {IShortDescCtx} from \"lib/wsp/item\";\nimport \"back/wsp/views/views_Perms\";\nimport {FocusTask} from \"back/wsp/actions/taskActions\";\nimport IS_element = DOM.IS_element;\n\n\n/**\n */\nexport interface Tasks extends BaseAreaView<IRegPointer<IWspUiEnv>> {\n\tinitialize(init: OTasksInit): this\n}\n\nexport interface OTasksInit extends OBaseAreaViewInit<IRegPointer<IWspUiEnv>> {\n\t/** Si affichÃ© en tooltip, pas d'abonnements */\n\tephemeralView?: boolean\n\t/** Notifie Ã  chaque rechargement d'une liste (rafraichit les compteurs dans le ribbon) */\n\trefreshCb?: (visibleStage: ETaskStage, tasks: JSrcFields[]) => void\n\tlastDatas?: JLDTasks\n}\n\ninterface JLDTasks {\n\ttab: 'do'/* to do */ | 'fo'/* to follow */ | 'pe' /* pending */ | 'co' /* completed */ | 'fc'/* forthcoming */\n}\n\nexport class Tasks extends BaseAreaView<IRegPointer<IWspUiEnv>> implements ILastDatasBuilder, IGridLineDrawer {\n\treg: IReg<IWspUiEnv>;\n\twsp: Wsp;\n\n\tephemeralView?: boolean;\n\n\trefreshCb: (visibleStage: ETaskStage, tasks: JSrcFields[]) => void;\n\n\n\tget taskScope(): 'my' | 'item' {return isItemUiEnv(this.reg.env) ? 'item' : 'my'}\n\n\tget itemRef(): srcUri {return isItemUiEnv(this.reg.env) ? SRC.srcRef(this.reg.env.longDesc) : null}\n\n\tget itemLongDesc(): JSrcFields {return isItemUiEnv(this.reg.env) ? this.reg.env.longDesc : null}\n\n\tget currentUser(): JUser {return this.reg.env.universe.auth.currentUser}\n\n\tget visibleStage(): ETaskStage {\n\t\tswitch (this._currentTab.id) {\n\t\tcase \"do\":\n\t\tcase \"fo\":\n\t\tcase \"pe\":\n\t\t\treturn ETaskStage.pending;\n\t\tcase \"co\":\n\t\t\treturn ETaskStage.completed;\n\t\tcase \"fc\":\n\t\t\treturn ETaskStage.forthcoming;\n\t\t}\n\t}\n\n\tprotected _currentTab: Label;\n\n\tprotected _tasksFields: string;\n\n\tprotected _grid: SrcGrid;\n\n\tprotected _fetchingMsg: string;\n\n\n\tprotected _initialize(init: OTasksInit) {\n\t\tsuper._initialize(init); //init this.reg, this.area, this.areaContext\n\t\tthis.wsp = this.reg.env.wsp;\n\t\tthis.ephemeralView = init.ephemeralView;\n\t\tthis.refreshCb = init.refreshCb;\n\n\t\tconst taskFields: ESrcField[] = [\"srcUri\", \"srcId\", \"itSgn\", \"itModel\", \"actTi\", \"lcSt\", \"lcDt\", \"lcBy\", \"rspUsrs\", \"actCts\", \"actStage\", \"tkDeadline\", \"srcRoles\", \"srcRi\"]; //todo configurable ?\n\t\tthis._tasksFields = taskFields.join('*');\n\n\t\t//Construction Ui\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin('c-tabs/base', init);\n\t\tthis.reg.installSkin('c-tabs', sr);\n\t\tthis.reg.installSkin('scroll/small', sr);\n\t\tthis.reg.installSkin(this.localName, sr);\n\t\tconst allTabs = sr.appendChild(<div id=\"allTabs\"/>);\n\n\t\tallTabs.appendChild(<c-button-actions id=\"createTask\" Ã®={{\n\t\t\treg: this.reg,\n\t\t\ticon: \"/@skin@/wsp/views/tasks/add.svg\",\n\t\t\ttitle: \"CrÃ©er une nouvelle tÃ¢che\",\n\t\t\tactionContext: {\n\t\t\t\treg: this.reg,\n\t\t\t\tshortDescs: this.itemLongDesc ? [this.itemLongDesc] : [],\n\t\t\t\tinfoBroker: this.reg.env.infoBroker,\n\t\t\t\temitter: this,\n\t\t\t} as IShortDescCtx,\n\t\t\tactions: this.reg.env.wsp.wspMetaUi.getItemTypes().filter((t) => t instanceof ItemTypeTask).map((t) => new CreateTask<IShortDescCtx>(t as ItemTypeTask))\n\t\t} as OButtonActionsInit<IShortDescCtx>}/>);\n\n\t\tallTabs.onclick = (ev: MouseEvent) => {\n\t\t\tif (ev.target instanceof Button && ev.target.classList.contains(\"tab\")) {\n\t\t\t\tthis.setCurrentTab(ev.target);\n\t\t\t\tthis.fetchTasks();\n\t\t\t}\n\t\t};\n\t\tswitch (this.taskScope) {\n\t\tcase \"my\":\n\t\t\tallTabs.append(<div id=\"tabs\">\n\t\t\t\t\t<c-button id=\"do\" class=\"tab\" label=\"Ã faire\" title=\"TÃ¢ches Ã  faire\"/>\n\t\t\t\t\t<c-button id=\"fo\" class=\"tab\" label=\"Ã suivre\" title=\"TÃ¢ches Ã  suivre\"/>\n\t\t\t\t</div>,\n\t\t\t\t<div class=\"flex\"/>,\n\t\t\t\t<div id=\"tabs\">\n\t\t\t\t\t{this.wsp.wspMetaUi.hasForthcomingTasks() ? <c-button id=\"fc\" class=\"tab\" label=\"Ã venir\" title=\"TÃ¢ches Ã  venir\"/> : undefined}\n\t\t\t\t\t<c-button id=\"co\" class=\"tab\" label=\"Closes\" title=\"TÃ¢ches closes\"/>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tbreak;\n\t\tcase \"item\":\n\t\t\tallTabs.append(<div id=\"tabs\">\n\t\t\t\t<c-button id=\"pe\" class=\"tab\" label=\"En cours\" title=\"TÃ¢ches en cours\"/>\n\t\t\t\t{this.wsp.wspMetaUi.hasForthcomingTasks() ? <c-button id=\"fc\" class=\"tab\" label=\"Ã venir\" title=\"TÃ¢ches Ã  venir\"/> : undefined}\n\t\t\t\t<c-button id=\"co\" class=\"tab\" label=\"Closes\" title=\"TÃ¢ches closes\"/>\n\t\t\t</div>);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow Error(\"taskScope unknown \" + this.taskScope);\n\t\t}\n\n\t\t// colonnes\n\t\tthis.reg.addToList(\"columns:tasksview\", \"type\", 1, new GridColDef('type').setLabel(\"\")\n\t\t\t.setMinWidth('1.5em').setMaxWidth('1.5em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderItModelFlagIcon(this.reg, this.wsp.wspMetaUi))\n\t\t\t.setSkin(\"wsp-tasks/grid\"), 0);\n\t\tthis.reg.addToList(\"columns:tasksview\", \"label\", 1, new GridColDef('label').setLabel(\"LibellÃ©\")\n\t\t\t.setFlex('10em', 1, 1).setMinWidth('5em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderSrcIconCode(this.reg, this.wsp.wspMetaUi, true).setIconWidth('0').override('_getIcon', () => \"\")), 0);\n\t\tthis.reg.addToList(\"columns:tasksview\", \"lc\", 1, new GridColDef('lc').setLabel(LC_DEFAULT_NAME)\n\t\t\t.setFlex('4em', 1, 1).setMinWidth('2em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderLc(this.wsp.wspMetaUi)), 0);\n\t\tthis.reg.addToList(\"columns:tasksview\", \"deadline\", 1, new GridColDef('deadline').setLabel(\"Date limite\")\n\t\t\t.setFlex('5em', 1, 0).setMinWidth('4em').setSortable(true)\n\t\t\t.setCellBuilder(new CellBuilderTkDeadline()), 0);\n\n\t\t//grid\n\t\tconst gridInit: OSrcGridInit = {\n\t\t\treg: this.reg,\n\t\t\tcolumnDefs: this.reg.mergeLists(\"columns:tasksview\", \"columns:tasksview:\" + this.id),\n\t\t\temptyBody: () => {\n\t\t\t\treturn <c-msg label={this._fetchingMsg || \"Aucune tÃ¢che trouvÃ©e\"}/>;\n\t\t\t},\n\t\t\titemHandlingReact: this.reg.env.infoBroker,\n\t\t\tonWspUriChangeScope: \"longDesc\",\n\t\t\tactions: this.reg.mergeLists(\"actions:wsp:shortDesc:task\"),\n\t\t\taccelKeyMgr: new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:wsp:shortDesc:task\")),\n\t\t\tdefaultAction: new FocusTask(),\n\t\t\tlineDrawer: this,\n\t\t\tskinScroll: 'scroll/small',\n\t\t\tautoSelOnFocus: \"first\"\n\t\t};\n\t\tthis._grid = sr.appendChild(<wsp-src-grid Ã®={gridInit}/>) as SrcGrid;\n\n\t\t//init tab.\n\t\tconst tab = init.lastDatas ? init.lastDatas.tab : null;\n\t\tthis.setCurrentTab((tab ? sr.getElementById(tab) as Button : null) || DOM.findNext(allTabs, allTabs, (n: Node): n is Button => IS_element(n) && n.classList.contains(\"tab\")));\n\t}\n\n\tprotected _refresh() {\n\t\tsuper._refresh();\n\t\tconst sr = this.shadowRoot;\n\t\tDOM.setAttrBool(sr.getElementById(\"createTask\"), \"disabled\", !this.reg.hasPerm(\"action.tasks#create.task\"));\n\t}\n\n\tsetCurrentTab(tab: Button) {\n\t\tif (this._currentTab) this._currentTab.classList.toggle(\"selected\", false);\n\t\tthis._currentTab = tab;\n\t\ttab.classList.toggle(\"selected\", true);\n\t}\n\n\t/** rÃ©tention locale de cette info qui nÃ©cessite une requÃªte dÃ©diÃ©e (et pas anodine en temps de traitement),\n\t * et qui Ã©volue suffisamment peu pour considÃ©rer que c'est une constante entre deux fetch globaux */\n\tprivate _lastUserFlatGroups: string[];\n\n\t/** Refresh complet de la liste des tasks */\n\tasync fetchTasks() {\n\t\tthis.showTasksList(null, 'loading');\n\t\ttry {\n\t\t\tconst currTab = this._currentTab;\n\t\t\tconst qs = [\"cdaction\", \"FindTasks\", \"param\", this.wsp.code, \"fields\", this._tasksFields] as any[];\n\t\t\tlet options: any;\n\t\t\tconst user = this.currentUser;\n\t\t\tthis._lastUserFlatGroups = await this.reg.env.universe.auth.fetchFlattenedGroups() || [user.account];\n\t\t\tif (currTab !== this._currentTab || user !== this.currentUser) return; //race cond\n\n\t\t\tswitch (this.taskScope) {\n\t\t\tcase \"my\":\n\t\t\t\tqs.push(\"refUriFrom\", \"\"); //tout l'atelier\n\t\t\t\toptions = {includeDescendants: true, involvedUser: user.account, involvedUserGroups: true};\n\t\t\t\tbreak;\n\t\t\tcase \"item\":\n\t\t\t\toptions = {};\n\t\t\t\tqs.push(\"refUriFrom\", this.itemRef);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"taskScope unknown \" + this.taskScope);\n\t\t\t}\n\t\t\tconst visibleStage = this.visibleStage;\n\t\t\tif (visibleStage !== ETaskStage.pending) options.actStage = visibleStage;\n\t\t\tqs.push(\"options\", CDM.stringify(options));\n\n\t\t\tconst tasks = await this.reg.env.universe.wspServer.config.tasksUrl.fetchJson<JSrcFields[]>(IO.qs(...qs));\n\t\t\tif (currTab !== this._currentTab || user !== this.currentUser) return; //race cond\n\t\t\tif (this.refreshCb) this.refreshCb(visibleStage, tasks);\n\n\t\t\t//Filtre\n\t\t\tfor (let i = tasks.length - 1; i >= 0; i--)\n\t\t\t\tif (!Tasks.taskIsShown(this._currentTab.id, this.taskScope, tasks[i], this._lastUserFlatGroups, this.wsp)) tasks.splice(i, 1);\n\n\t\t\tthis.showTasksList(tasks);\n\t\t} catch (e) {\n\t\t\tthis.showTasksList(null, 'error');\n\t\t}\n\t}\n\n\tprivate showTasksList(tasks: JSrcFields[]|null, state:'error'|'loading'|null=null){\n\t\tif(state==='error')\n\t\t\tthis._fetchingMsg=\"Chargement en cours...\";\n\t\telse if(state==='loading')\n\t\t\tthis._fetchingMsg=\"Chargement en cours...\";\n\t\telse this._fetchingMsg = null;\n\n\t\tthis._grid.dataHolder.setDatas(tasks||[]);\n\t}\n\n\t/** Retourne true si la tache doit Ãªtre affichÃ©e dans ce contexte */\n\tprivate static taskIsShown(currentTabId: string, taskScope: string, task: JSrcFields, userFlatGroups: string[], wsp: Wsp): boolean {\n\t\tconst inv: EInvolvement = currentTabId === 'do' ? EInvolvement.executor : currentTabId === 'fo' ? EInvolvement.follower : null;\n\t\tif (inv) {\n\t\t\treturn ((TASK.getInvolvementForAccounts(taskScope === 'my' ? userFlatGroups : '*', task, wsp.wspMetaUi) & inv) > 0);\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected shown: boolean;\n\n\tonViewShown() {\n\t\tif (!this.ephemeralView && !this._onConnRenewed) {\n\t\t\tif (this.taskScope === \"my\") {\n\t\t\t\tthis._wspUriChange = this.onWspUriChange.bind(this);\n\t\t\t\tthis.reg.env.place.eventsMgr.on(\"wspUriChange\", this._wspUriChange);\n\t\t\t}\n\t\t\tthis._onConnRenewed = this.onConnRenewed.bind(this);\n\t\t\tthis.reg.env.place.eventsMgr.on(\"onConnectionRenewed\", this._onConnRenewed);\n\t\t}\n\t\tthis.shown = true;\n\t\tthis.fetchTasks();\n\t}\n\n\tonViewHidden(closed?: boolean): void {\n\t\tthis.shown = false;\n\t\tif (closed) {\n\t\t\tif (this._wspUriChange) {\n\t\t\t\tthis.reg.env.place.eventsMgr.removeListener(\"wspUriChange\", this._wspUriChange);\n\t\t\t\tthis._wspUriChange = null;\n\t\t\t}\n\t\t\tif (this._onConnRenewed) {\n\t\t\t\tthis.reg.env.place.eventsMgr.removeListener(\"onConnectionRenewed\", this._onConnRenewed);\n\t\t\t\tthis._onConnRenewed = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tbuildLastDatas(parentLastDatas: JLastDatas) {\n\t\tconst lastDatasKey = this.getAttribute('last-datas');\n\t\tif (lastDatasKey) {\n\t\t\tparentLastDatas[lastDatasKey] = {tab: this._currentTab.id as any} as JLDTasks;\n\t\t}\n\t}\n\n\tredrawLine(row: GridDataRowJson<JSrcFields>, line: HTMLElement): void {\n\t\tconst dt = row.rowDatas.tkDeadline;\n\t\tline.classList.toggle(\"late\", dt > 0 && dt < Date.now());\n\t\tline.classList.toggle(\"comleted\", row.rowDatas.actStage === \"completed\");\n\t\t// Utile pour les Ã©volutons des Ã©tats *sans* fetch global de la view\n\t\tline.classList.toggle(\"isNotShown\", !Tasks.taskIsShown(this._currentTab.id, this.taskScope, row.rowDatas, this._lastUserFlatGroups, this.wsp));\n\t\tthis._grid.redrawLine(row, line);\n\t}\n\n\tprotected _wspUriChange: (msg: JWspUriChangeMsg, from: WspsLivePlace | 'local' | 'server') => void;\n\n\tprotected onWspUriChange(msg: JWspUriChangeMsg, from: WspsLivePlace | 'local' | 'server') {\n\t\tif (msg.involved && msg.type === EWspChangesEvts.u) {\n\t\t\t//La src de cette modif implique le user connectÃ©\n\t\t\tconst type = this.wsp.wspMetaUi.getItemType(msg.itModel);\n\t\t\tif (type.getFamily() === EItemTypeFamily.task) {\n\t\t\t\t//C'est une task, si pas dans la liste faut rafraichir.\n\t\t\t\tif (!this._grid.srcGridDatas.findRowKeyBySrcId(msg.srcId)) this.fetchTasks();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _onConnRenewed: () => void;\n\n\tprotected async onConnRenewed() {\n\t\tif (this.shown) setTimeout(() => {if (this.shown) this.fetchTasks()}, 200);\n\t}\n\n}\n\nREG.reg.registerSkin(\"wsp-tasks\", 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\t#tabs {\n\t\tdisplay: contents;\n\t}\n\n\t#allTabs {\n\t\tdisplay: flex;\n\t\tborder-bottom: 1px solid var(--border-color);\n\t}\n\n\t#createTask[disabled] {\n\t\tdisplay: none;\n\t}\n\n\t.tab {\n\t\tflex: 1 1 auto;\n\t\tmin-width: 2em !important;\n\t\tcursor: pointer;\n\t\tborder: unset;\n\t\tborder-radius: 0;\n\t}\n\n\t.flex {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t}\n\n\twsp-src-grid {\n\t\tflex: 1;\n\t\tborder: none;\n\t}\n`);\n\nREG.reg.registerSkin(\"wsp-tasks/grid\", 1, /* language=CSS */ `\n\t.icon {\n\t\tpadding-inline-start: 1.5em;\n\t}\n\n\t.late {\n\t\tcolor: var(--error-color);\n\t}\n\n\t.comleted {\n\t\ttext-decoration-line: line-through;\n\t}\n\n\t.isNotShown {\n\t\tfont-style: italic;\n\t\topacity: .8;\n\t}\n`);\ncustomElements.define(\"wsp-tasks\", Tasks);\n"]}