{"version":3,"sources":["/@back@/edit/wed/features/diffBar_.tsx"],"names":["Button","ButtonActions","DOMSH","REG","DOM","JSX","findWedEditor","WEDLET","VIEWS","WedSearchBarNextPrev","WedDiffBar","HTMLElement","[object Object]","super","this","id","hidden","editor","sr","attachShadow","SHADOWDOM_INIT","reg","installSkin","localName","diffActions","getList","selector","initialize","actions","actionContext","prevNextBtns","annotFilter","diffLib","isDiffAnnot","eraseBtn","createElement","title","icon","onclick","onErase","disabled","refreshBtn","onRefetchDiff","appendChild","onClose","rootPanels","wedMgr","listeners","on","onViewShown","currentPanel","close","onViewHidden","refresh","buildDiffParams","params","importDiffLib","barLayout","showBar","_a","action","getId","diffId","act","find","a","initParams","execute","setDiff","onHideBar","setCurrentPanel","panel","parentNode","append","ch","firstElementChild","nextElementSibling","setHidden","unconnectDoc","docHolderAsync","connectDoc","once","label","getLabel","dispatchDiffChange","st","setAttrBool","setDisabled","findHost","execDiff","isAvailable","registerSkin","customElements","define","DiffPanelBase","bar","result","_needRefresh","needRefresh","bind","docConnected","removeListener","docHolder","setDiffSession","count","setTextContent","setDiffStates","onRefresh","href","ev","preventDefault","me","updateDiffResult"],"mappings":"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","sourcesContent":["import {Button, ButtonActions} from \"back/commons/widgets/buttons\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {IDiffBarAction, IDiffBarPanel, IWedDiffBar, IWedEditorDiffBar, JWedDiffBarParams} from \"back/edit/wed/features/diffBar\";\nimport {WedMgr} from \"back/edit/wed/wedEditor\";\nimport {findWedEditor, WEDLET} from \"back/edit/wed/wedlets/wedlet\";\nimport {IView, VIEWS} from \"lib/commons/views\";\nimport {WedSearchBarNextPrev} from \"back/edit/wed/features/searchBar\";\n\n/**\n * Widget principal de la diffBar.\n */\nexport class WedDiffBar extends HTMLElement implements IWedDiffBar {\n\teditor: IWedEditorDiffBar;\n\n\tdiffActions: IDiffBarAction[];\n\n\tprotected selector: ButtonActions<WedDiffBar>;\n\tprotected eraseBtn: Button;\n\tprotected refreshBtn: Button;\n\tprotected prevNextBtns: WedSearchBarNextPrev;\n\tprotected rootPanels: HTMLElement;\n\n\tcurrentPanel: IDiffBarPanel | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.id = \"diffBar\";\n\t\tthis.hidden = true;\n\t}\n\n\tinit(editor: IWedEditorDiffBar): this {\n\t\tthis.editor = editor;\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tconst reg = editor.reg;\n\t\treg.installSkin(this.localName, sr);\n\n\t\tthis.diffActions = reg.getList(\"wed.diffBar.actions\");\n\t\tthis.selector = new ButtonActions().initialize({\n\t\t\treg,\n\t\t\tactions: this.diffActions,\n\t\t\tactionContext: this\n\t\t}) as ButtonActions<WedDiffBar>;\n\n\t\t//TODO <c-button title=\"Différence précédente\" icon=\"/@skin@/edit/wed/search/prev.svg\" onclick={this.onPrevious}/>\n\t\t//TODO <c-button title=\"Différence suivante\" icon=\"/@skin@/edit/wed/search/next.svg\" onclick={this.onNext}/>\n\t\tthis.prevNextBtns = new WedSearchBarNextPrev();\n\t\tthis.prevNextBtns.annotFilter = WEDLET.diffLib.isDiffAnnot;\n\t\tthis.eraseBtn = <Button title=\"Effacer les différences\" icon=\"/@skin@/edit/wed/diff/erase.svg\" onclick={this.onErase} disabled/> as Button;\n\t\tthis.refreshBtn = <Button title=\"Rafraîchir les différences\" icon=\"/@skin@/commons/icons/refresh.svg\" onclick={this.onRefetchDiff} disabled/> as Button;\n\n\t\tsr.appendChild(<div id=\"top\">\n\t\t\t<div id=\"head\">\n\t\t\t\t<span>Comparer avec</span>\n\t\t\t\t{this.selector}\n\t\t\t\t<div id=\"buttons\">\n\t\t\t\t\t{this.prevNextBtns}\n\t\t\t\t\t{this.eraseBtn}\n\t\t\t\t\t{this.refreshBtn}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<c-button icon=\"/@skin@/commons/icons/close.svg\" title=\"Fermer\" onclick={this.onClose}/>\n\t\t</div>);\n\t\tthis.rootPanels = sr.appendChild(<div id=\"panelCtn\"/>);\n\n\t\teditor.wedMgr.listeners.on(\"shown\", (wedMgr: WedMgr) => {VIEWS.onViewShown(this.currentPanel)});\n\t\teditor.wedMgr.listeners.on(\"hidden\", (wedMgr: WedMgr, close?: boolean) => {VIEWS.onViewHidden(this.currentPanel, close)});\n\n\t\tthis.refresh();\n\t\treturn this;\n\t}\n\n\t/** Paramètres d'init d'un panel. */\n\tinitParams: JWedDiffBarParams | null;\n\n\tgetDiffParams(): JWedDiffBarParams | null {\n\t\treturn !this.hidden && this.currentPanel ? this.currentPanel.buildDiffParams() : null;\n\t}\n\n\t/** */\n\tasync setDiffParams(params: JWedDiffBarParams) {\n\t\tif (!WEDLET.diffLib) await WEDLET.importDiffLib();\n\t\tif (this.hidden) {\n\t\t\tthis.editor.barLayout.showBar(this);\n\t\t\tthis.hidden = false;\n\t\t}\n\t\tif (this.currentPanel?.action.getId() !== params.diffId) {\n\t\t\tconst act = this.diffActions.find((a) => a.getId() === params.diffId);\n\t\t\tif (!act) return;\n\t\t\ttry {\n\t\t\t\tthis.initParams = params;\n\t\t\t\tawait act.execute(this);\n\t\t\t} finally {\n\t\t\t\tthis.initParams = null;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentPanel.setDiff(params);\n\t\t}\n\t}\n\n\tclose() {\n\t\tthis.hidden = true;\n\t\tthis.editor.barLayout.onHideBar(this);\n\t\tthis.setCurrentPanel(null);\n\t}\n\n\tshow() {\n\t\tthis.hidden = false;\n\t\tthis.editor.barLayout.showBar(this);\n\t\tthis.refresh();\n\t}\n\n\tsetCurrentPanel(panel: IDiffBarPanel | null) {\n\t\tif (panel && panel.parentNode !== this.rootPanels) {\n\t\t\t//1ère déclaration, on ajoute.\n\t\t\tthis.rootPanels.append(panel);\n\t\t\tpanel.hidden = true;\n\t\t}\n\t\t//On masque et déconnecte tous les autres, on affiche et connecte ce panel.\n\t\tconst wedMgr = this.editor.wedMgr;\n\t\tfor (let ch = this.rootPanels.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif (DOM.setHidden(ch, ch !== panel)) {\n\t\t\t\tif (ch !== panel) {\n\t\t\t\t\t(ch as IDiffBarPanel).unconnectDoc();\n\t\t\t\t\tVIEWS.onViewHidden(ch as IView, false);\n\t\t\t\t} else if (wedMgr.docHolderAsync) (ch as IDiffBarPanel).connectDoc();\n\t\t\t\telse this.editor.wedMgr.listeners.once(\"redrawAtEnd\", () => {(ch as IDiffBarPanel).connectDoc()});\n\t\t\t}\n\t\t}\n\t\tthis.selector.label = panel ? panel.action.getLabel(this) : \"\";\n\t\t//this.selector.icon = panel ? panel.action.getIcon(this) : \"\";\n\t\tthis.currentPanel = panel;\n\t\tif (panel) VIEWS.onViewShown(panel);\n\t\tthis.dispatchDiffChange();\n\t}\n\n\tsetDiffStates(st: 'drawn' | 'computable' | 'notComputable') {\n\t\tswitch (st) {\n\t\tcase \"drawn\":\n\t\t\tDOM.setAttrBool(this.eraseBtn, 'disabled', false);\n\t\t\tDOM.setAttrBool(this.refreshBtn, 'disabled', false);\n\t\t\tthis.prevNextBtns.setDisabled(false);\n\t\t\tbreak;\n\t\tcase \"computable\":\n\t\t\tDOM.setAttrBool(this.eraseBtn, 'disabled', true);\n\t\t\tDOM.setAttrBool(this.refreshBtn, 'disabled', false);\n\t\t\tthis.prevNextBtns.setDisabled(true);\n\t\t\tbreak;\n\t\tcase \"notComputable\":\n\t\t\tDOM.setAttrBool(this.eraseBtn, 'disabled', true);\n\t\t\tDOM.setAttrBool(this.refreshBtn, 'disabled', true);\n\t\t\tthis.prevNextBtns.setDisabled(true);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tgetSearchParams(): JWedDiffBarParams | null {\n\t\treturn !this.hidden && this.currentPanel ? this.currentPanel.buildDiffParams() : null;\n\t}\n\n\tdispatchDiffChange() {\n\t\t// const coord = (this.editor.reg.env as IWedDiffCoordinatorPointer).wedDiffCoord;\n\t\t// if (coord) coord.setParams(this.currentPanel?.buildDiff() || null);\n\t}\n\n\tgetPanelFor(action: IDiffBarAction): IDiffBarPanel | null {\n\t\tfor (let ch = this.rootPanels.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif ((ch as IDiffBarPanel).action === action) return ch as IDiffBarPanel;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprotected onErase(this: Button) {\n\t\tDOMSH.findHost<WedDiffBar>(this).currentPanel?.setDiff(null);\n\t}\n\n\tprotected onRefetchDiff(this: Button) {\n\t\tDOMSH.findHost<WedDiffBar>(this).currentPanel?.execDiff(true);\n\t}\n\n\tprotected onClose(this: Button) {\n\t\tDOMSH.findHost<WedDiffBar>(this).close();\n\t}\n\n\n\trefresh() {\n\t\tif (this.hidden) return;\n\t\tif (!this.currentPanel) {\n\t\t\tif (this.diffActions) {\n\t\t\t\tfor (let action of this.diffActions) {\n\t\t\t\t\tif (action.isAvailable(this)) {\n\t\t\t\t\t\taction.execute(this);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentPanel.action.execute(this); //refresh.\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin(\"wed-diffbar\", 1, /* language=CSS */ `\n\t:host {\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\tbackground-color: var(--bgcolor);\n\t\tfont-size: var(--label-size);\n\t}\n\n\t[hidden] {\n\t\tdisplay: none !important;\n\t}\n\n  #top {\n\t  display: flex;\n\t  min-height: 1.5em;\n  }\n\n  #head {\n\t  flex: 1;\n\t  display: flex;\n\t  flex-wrap: wrap;\n\t  align-items: center;\n\t  padding: 0 .3em;\n  }\n\n  #buttons {\n\t  display: flex;\n  }\n\n  c-button-actions {\n\t  flex: 1 1 auto;\n\t  padding: 0;\n\t  padding-inline-start: 1.2em;\n\t  background-position: left;\n\t  align-self: stretch;\n\t  justify-content: start;\n\t  font-weight: bold;\n  }\n\n  #panelCtn {\n\t  flex: 1;\n  }\n`);\ncustomElements.define(\"wed-diffbar\", WedDiffBar);\n\n\n/** Classe de base pour les panels de diff dans la barre de recherche. */\nexport abstract class DiffPanelBase<ENV = {}> extends HTMLElement implements IDiffBarPanel {\n\taction: IDiffBarAction;\n\tbar: IWedDiffBar;\n\twedMgr: WedMgr;\n\treg: IReg<ENV>;\n\n\tdocConnected: boolean;\n\tresult: HTMLElement;\n\n\tprotected _initPanel(action: IDiffBarAction, bar: IWedDiffBar) {\n\t\tthis.action = action;\n\t\tthis.bar = bar;\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis.wedMgr = findWedEditor(bar).wedMgr;\n\t\tthis.reg = this.wedMgr.reg;\n\t\tthis.reg.installSkin(this.localName, sr);\n\t\tthis.result = <span id=\"result\"/> as HTMLElement;\n\t\tthis._needRefresh = this.needRefresh.bind(this);\n\t\tthis.docConnected = false;\n\t}\n\n\tconnectDoc(): void {\n\t\tthis.wedMgr.listeners.on(\"hookEndTransac\", this._needRefresh);\n\t\tthis.docConnected = true;\n\t\t//this.execDiff();\n\t}\n\n\tunconnectDoc(): void {\n\t\tthis.setDiff(null);\n\t\tif (this.docConnected) {\n\t\t\tthis.wedMgr.listeners.removeListener(\"hookEndTransac\", this._needRefresh);\n\t\t\tthis.wedMgr.docHolder.setDiffSession(null);\n\t\t\tthis.docConnected = false;\n\t\t}\n\t}\n\n\tabstract setDiff(params: JWedDiffBarParams | null): void;\n\n\tbuildDiffParams(): JWedDiffBarParams {\n\t\treturn {diffId: this.action.getId()}\n\t}\n\n\tupdateDiffResult(count: number | 'computing' | 'needRefresh' | 'error' | 'notFound' | 'computable' | null) {\n\t\tif (count == null) {\n\t\t\tDOM.setTextContent(this.result, null);\n\t\t\tthis.bar.setDiffStates(\"notComputable\");\n\t\t\treturn;\n\t\t}\n\t\tswitch (count) {\n\t\tcase \"needRefresh\":\n\t\t\tif (!this.result.firstElementChild) {\n\t\t\t\tDOM.setTextContent(this.result, null);\n\t\t\t\tthis.result.appendChild(<a onclick={this.onRefresh} href=\"\">Rafraîchir</a>);\n\t\t\t}\n\t\t\tthis.bar.setDiffStates(\"drawn\");\n\t\t\tbreak;\n\t\tcase \"computing\":\n\t\t\tDOM.setTextContent(this.result, \"Recherche en cours...\");\n\t\t\tthis.bar.setDiffStates(\"notComputable\");\n\t\t\tbreak;\n\t\tcase \"error\":\n\t\t\tDOM.setTextContent(this.result, \"Recherche de différences impossible\");\n\t\t\tthis.bar.setDiffStates(\"drawn\");\n\t\t\tbreak;\n\t\tcase \"notFound\":\n\t\t\tDOM.setTextContent(this.result, \"Autre source de comparaison indisponible\");\n\t\t\tthis.bar.setDiffStates(\"drawn\");\n\t\t\tbreak;\n\t\tcase \"computable\":\n\t\t\tDOM.setTextContent(this.result, null);\n\t\t\tthis.bar.setDiffStates(\"computable\");\n\t\t\tbreak;\n\t\tcase 0:\n\t\t\tDOM.setTextContent(this.result, \"➔ Aucune différence trouvée\");\n\t\t\tthis.bar.setDiffStates(\"drawn\");\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tDOM.setTextContent(this.result, \"➔ 1 différence trouvée\");\n\t\t\tthis.bar.setDiffStates(\"drawn\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tDOM.setTextContent(this.result, `➔ ${count} différences trouvées`);\n\t\t\tthis.bar.setDiffStates(\"drawn\");\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tprotected onRefresh(this: HTMLAnchorElement, ev: Event) {\n\t\tev.preventDefault();\n\t\tconst me = DOMSH.findHost<DiffPanelBase>(this);\n\t\tme.execDiff();\n\t}\n\n\tabstract execDiff(fullRefresh?: boolean): Promise<void>;\n\n\t_needRefresh: () => void;\n\n\tprotected needRefresh(): void {\n\t\tthis.updateDiffResult('needRefresh');\n\t}\n}"]}