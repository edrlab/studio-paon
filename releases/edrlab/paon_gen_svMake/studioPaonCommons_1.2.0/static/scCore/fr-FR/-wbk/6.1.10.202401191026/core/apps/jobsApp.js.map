{"version":3,"sources":["/@back@/core/apps/jobsApp.tsx"],"names":["BaseElementAsync","JSX","REG","DOMSH","LASTDATAS","BlocksCollapsable","Area","AppHeader","JobsMgr","AccelKeyMgr","Action","JobsApp","autoRefresh","this","params","val","refreshAllBlocksFetch","then","_registerAutoRefreshHandler","clearTimeout","_autoRefreshHandler","_refreshui","[object Object]","init","Object","assign","maxOpenEntriesByDefault","autoRefreshInterval","appDef","reg","findReg","attachShadow","SHADOWDOM_INIT","sr","shadowRoot","installSkin","_initAndInstallSkin","localName","showUniverses","jobsUniverse","initRegExtPoints","accelKeyMgr","addEventListener","ev","handleKeyboardEvent","reset","initFromMapActions","getListAsMap","appHeader","appendChild","initialize","skinOver","actionContext","mainActions","getList","setAttribute","createElement","universes","filter","entry","executor","hasPerm","LDkey","LD","lastDatas","open","i","length","univ","push","getId","blocksCollapsable","î","areasContext","lastDatasKey","blocksCollapsableInit","forEach","pos","addArea","setLabel","getName","requireVisiblePerm","setBodyBuilder","ctx","jobsTab","areaContext","parentBlockCtn","locked","undefined","refresh","isConnected","selectedBlocks","Promise","all","map","async","block","view","fetchAll","window","setTimeout","addMainBarAction","action","accel","addToList","AutoRefreshBtn","def","parentLastDatas","buildLastDatas","visitor","options","result","customElements","define","registerSkin","RefreshAllBlocksAction","super","_label","_icon","getDatas","api","currentStatus"],"mappings":"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","sourcesContent":["import {BaseElementAsync, OSkinableInit} from \"back/commons/basis\";\nimport {IApp, IAppCtx} from \"back/core/appFrame\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {IView, IViewsContainer, OViewVisitOptions} from \"lib/commons/views\";\nimport {IReg, IRegPointer, IUiEnv, REG} from \"lib/commons/registry\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {BasicUniverse, IUniverseEnv} from \"lib/core/universe\";\nimport {ILastDatasBuilder, JLastDatas, LASTDATAS} from \"lib/commons/lastDatas\";\nimport {BlocksCollapsable, JLDBlocksCollapsable, OBlocksCollapsableInit} from \"back/commons/widgets/blocks\";\nimport {Area} from \"lib/commons/areas\";\nimport {AppHeader} from \"back/core/widgets/appHeader\";\nimport {JobsMgr, OJobsMgrInit} from \"back/core/dialogs/jobsMgr\";\nimport \"back/core/apps/apps_Perms\";\nimport {JJobsAppDef} from \"back/core/plugins/jobsPlg\";\nimport {AccelKeyMgr, Action, IAccelKeyMgrPointer, IActionToggle} from \"lib/commons/actions\";\nimport {IExecutorInUniverse} from \"lib/core/executor\";\n\n\nexport interface JLDJobsApp extends JLastDatas {\n\t/** Rafraichissement auto des zones ouvertes */\n\tautoRefresh?: boolean\n}\n\nexport interface JobsApp extends BaseElementAsync {\n\tinitialize(init: OJobsAppInit & IAppCtx<IUniverseEnv>): this;\n}\n\nexport interface OJobsAppInit extends OSkinableInit {\n\t/** nombre d'entrées de log maximal ouvert par défaut.\n\t * 5 si non défini */\n\tmaxOpenEntriesByDefault?: number,\n\tblocksCollapsableInit?: OBlocksCollapsableInit<any>,\n\t/** Rafraichissement auto des zones ouvertes */\n\tautoRefresh?: boolean,\n\t/** Gap de rafraichissement auto en seconde */\n\tautoRefreshInterval?: number,\n}\n\nexport class JobsApp extends BaseElementAsync implements IApp<IUniverseEnv>, IViewsContainer, ILastDatasBuilder, IAccelKeyMgrPointer<IRegPointer<IUniverseEnv & IUiEnv>> {\n\n\treg: IReg<IUniverseEnv & IUiEnv>;\n\n\tappDef: JJobsAppDef;\n\n\tappHeader: AppHeader<JobsApp>;\n\n\taccelKeyMgr: AccelKeyMgr<IRegPointer<IUniverseEnv & IUiEnv>>;\n\n\tblocksCollapsable: BlocksCollapsable;\n\n\tparams: OJobsAppInit & IAppCtx<IUniverseEnv>;\n\n\t/** Auto refresh des blocks */\n\tget autoRefresh(): boolean {return this.params.autoRefresh};\n\n\tset autoRefresh(val: boolean) {\n\t\tif (this.params.autoRefresh !== val) {\n\t\t\tthis.params.autoRefresh = val;\n\t\t\tif (val)\n\t\t\t\tthis.refreshAllBlocksFetch().then(() => {\n\t\t\t\t\tthis._registerAutoRefreshHandler()\n\t\t\t\t});\n\t\t\telse\n\t\t\t\tclearTimeout(this._autoRefreshHandler);\n\t\t\tthis._refreshui();\n\t\t}\n\t}\n\n\tprotected async _initialize(init: OJobsAppInit & IAppCtx<IUniverseEnv>) {\n\t\tthis.params = Object.assign(init, {\n\t\t\tmaxOpenEntriesByDefault: 5,\n\t\t\tautoRefresh: true,\n\t\t\tautoRefreshInterval: 15,\n\t\t});\n\t\tthis.appDef = init.appDef as JJobsAppDef;\n\t\tthis.reg = this.findReg(init) as IReg<IUniverseEnv>;\n\t\tthis.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tconst sr = this.shadowRoot;\n\t\tthis.reg.installSkin('scroll/large', sr);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\t\tconst showUniverses = this.appDef.jobsUniverse;\n\n\t\tthis.initRegExtPoints();\n\n\t\tif (!this.accelKeyMgr) {\n\t\t\tthis.accelKeyMgr = new AccelKeyMgr();\n\t\t\tthis.addEventListener('keydown', function (this: JobsApp, ev: KeyboardEvent) {\n\t\t\t\tthis.accelKeyMgr.handleKeyboardEvent(ev, this)\n\t\t\t});\n\t\t} else {\n\t\t\tthis.accelKeyMgr.reset();\n\t\t}\n\t\tthis.accelKeyMgr.initFromMapActions(this.reg.getListAsMap(\"accelkeys:jobsApp:global\"));\n\n\t\t// # AppHeader\n\t\tthis.appHeader = sr.appendChild(new AppHeader<JobsApp>().initialize({\n\t\t\treg: this.reg,\n\t\t\tskinOver: \"jobs-app/header\",\n\t\t\tactionContext: this,\n\t\t\tmainActions: this.reg.getList(\"actions:jobsApp:bar:main\"),\n\t\t}));\n\t\tthis.setAttribute(\"label\", \"Traitements\");\n\t\tthis.appHeader.appendChild(<header><h1>Traitements</h1></header>);\n\n\t\t// # Blocks\n\t\tlet universes = init.reg.getList(\"plg:jobs:universes\") as (BasicUniverse & IExecutorInUniverse)[];\n\t\tuniverses = universes.filter((entry) => entry.executor && entry.reg.hasPerm(\"ui.apps.jobs.show\") ? true : false);\n\n\t\tconst LDkey = \"blocks\";\n\t\tlet LD: JLDBlocksCollapsable = (init.lastDatas ? init.lastDatas[LDkey] : null) as JLDBlocksCollapsable;\n\n\t\t// Ouverture des blocks par défaut (si pas de LD)\n\t\tif (!LD && init.maxOpenEntriesByDefault) {\n\t\t\tLD = {open: []};\n\t\t\tfor (var i = 0; i < universes.length; i++) {\n\t\t\t\tconst univ = universes[i];\n\t\t\t\tif (i < init.maxOpenEntriesByDefault)\n\t\t\t\t\tLD.open.push(univ.getId())\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.blocksCollapsable = sr.appendChild(<BlocksCollapsable î={Object.assign({\n\t\t\treg: this.reg,\n\t\t\tareasContext: {reg: this.reg},\n\t\t\tskinOver: \"jobs-app/collapsableBlocks\",\n\t\t\tlastDatasKey: LDkey,\n\t\t\tlastDatas: LD,\n\t\t} as OBlocksCollapsableInit<any>, init.blocksCollapsableInit)}/>) as BlocksCollapsable;\n\n\t\tuniverses.forEach((univ, pos) => {\n\t\t\tthis.blocksCollapsable.addArea(\n\t\t\t\tnew Area(univ.getId()).setLabel(univ.getName()).requireVisiblePerm(\"ui.apps.jobs.show\").setBodyBuilder((ctx) =>\n\t\t\t\t\t<JobsMgr î={{reg: univ.reg, jobsTab: {skinOver: \"jobs-app/mgr/tab\"}} as OJobsMgrInit}/>\n\t\t\t\t),\n\t\t\t\tnull,\n\t\t\t\t{\n\t\t\t\t\treg: univ.reg,\n\t\t\t\t\tareaContext: {reg: univ.reg},\n\t\t\t\t\tparentBlockCtn: this.blocksCollapsable,\n\t\t\t\t\tlocked: universes.length == 1 ? true : undefined,\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\n\t\t// Auto refresh\n\t\tif (this.params.lastDatas && (this.params.lastDatas as JLDJobsApp).autoRefresh !== undefined)\n\t\t\tthis.autoRefresh = (this.params.lastDatas as JLDJobsApp).autoRefresh;\n\t\telse this.autoRefresh = this.autoRefresh; //utile pour refresh UI\n\t\tif (this.autoRefresh)\n\t\t\tthis._registerAutoRefreshHandler()\n\t}\n\n\t/** Refresh des composants UI */\n\tprotected _refreshui() {\n\t\tthis.appHeader.refresh();\n\t}\n\n\t/** Rafraichit tous els blocks ouverts */\n\tasync refreshAllBlocksFetch(): Promise<void> {\n\t\tif (this.isConnected) {\n\t\t\tlet selectedBlocks = this.blocksCollapsable.selectedBlocks;\n\t\t\tif (selectedBlocks) {\n\t\t\t\tPromise.all(selectedBlocks.map(async (block) => {\n\t\t\t\t\tlet view = block.view as JobsMgr<any, any>;\n\t\t\t\t\tif (view)\n\t\t\t\t\t\tawait view.fetchAll();\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t}\n\n\t/** déclare le handler de refresh auto */\n\tprivate _registerAutoRefreshHandler() {\n\t\tif (this._autoRefreshHandler)\n\t\t\tclearTimeout(this._autoRefreshHandler);\n\t\tthis._autoRefreshHandler = window.setTimeout(async () => {\n\t\t\tawait this.refreshAllBlocksFetch();\n\t\t\tif (this.autoRefresh) this._registerAutoRefreshHandler();\n\t\t}, this.params.autoRefreshInterval * 1000);\n\t}\n\n\tprivate _autoRefreshHandler: number;\n\n\t/** Init des extPoints du registre de l'app. */\n\tprotected initRegExtPoints() {\n\t\tconst reg = this.reg;\n\n\t\tfunction addMainBarAction(action: Action<JobsApp>, accel?: string) {\n\t\t\treg.addToList(\"actions:jobsApp:bar:main\", action.getId(), 1, action);\n\t\t\tif (accel)\n\t\t\t\treg.addToList(\"accelkeys:jobsApp:global\", accel, 1, action);\n\t\t}\n\n\t\t//addMainBarAction(new RefreshAllBlocksAction(), \"F5-ctrl\");\n\t\taddMainBarAction(new AutoRefreshBtn());\n\t}\n\n\tupdateAppDef(def: JJobsAppDef): boolean {\n\t\tif (this.appDef === def) return true; //chgt issu d'ici\n\t\treturn false;\n\t}\n\n\tbuildLastDatas(parentLastDatas: JLastDatas): void {\n\t\tif (this.params.lastDatas && (this.params.lastDatas as JLDJobsApp).autoRefresh !== undefined) {\n\t\t\t(parentLastDatas as JLDJobsApp).autoRefresh = (this.params.lastDatas as JLDJobsApp).autoRefresh;\n\t\t}\n\t\tLASTDATAS.buildLastDatas(parentLastDatas, this.blocksCollapsable, true);\n\t}\n\n\tvisitViews(visitor: (view: IView) => any) {\n\t\tvisitor(this.blocksCollapsable)\n\t}\n\n\tvisitViewsAsync(visitor: (view: IView) => Promise<any>, options?: OViewVisitOptions): Promise<any> {\n\t\treturn visitor(this.blocksCollapsable);\n\t}\n\n\t/** Retourne true si au moins un univers est visible dans cette app */\n\tstatic atLeastOneEntry(reg: IReg<any>): boolean {\n\t\tlet universes = reg.getList(\"plg:jobs:universes\") as (BasicUniverse & IExecutorInUniverse)[] || [];\n\t\tlet result = false;\n\t\tfor (const univ of universes) {\n\t\t\tif (univ.executor && univ.reg.hasPerm(\"ui.apps.jobs.show\")) {\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n\ncustomElements.define('jobs-app', JobsApp);\nREG.reg.registerSkin('jobs-app', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t}\n\n\tc-appheader {\n\t\tmin-height: 2rem;\n\t\tz-index: 1;\n\t\tmargin: 0 4px;\n\t}\n\n\theader {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tmax-height: 5em;\n\t\toverflow: hidden;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t  user-select: none;\n  }\n\n  h1 {\n\t  margin: .1em .5em;\n\t  font-size: 1em;\n\t  letter-spacing: 0.1em;\n\t  text-align: center;\n  }\n\n  c-blocks-collapsable {\n\t  flex: 1;\n\t  min-height: 0;\n\t  min-width: 0;\n\t  overflow: auto;\n  }\n\n`);\n\nREG.reg.registerSkin('jobs-app/header', 1, /* language=CSS */ `\n\t:host > div {\n\t\tflex-direction: row-reverse;\n\t}\n`);\n\nREG.reg.registerSkin('jobs-app/collapsableBlocks', 1, /* language=CSS */ `\n\tjobs-mgr {\n\t\tflex: 1;\n\t}\n`);\n\n\nREG.reg.registerSkin(\"jobs-app/mgr/tab\", 1, /* language=CSS */ `\n\t#head {\n\t\tbackground-color: var(--alt1-bgcolor);\n\t}\n`);\n\n/** Actions */\n\n/** Rafraichissement de tous les fetchs des areas ouvertes */\nclass RefreshAllBlocksAction extends Action<JobsApp> {\n\tconstructor() {\n\t\tsuper('refreshAllBlocks');\n\t\tthis._label = \"Rafraichir les zones affichées\";\n\t\tthis._icon = \"/@skin@/commons/icons/refresh.svg\";\n\t}\n\n\texecute(ctx: JobsApp, ev?: Event): any | \"noPreventDefault\" {\n\t\tctx.refreshAllBlocksFetch();\n\t}\n}\n\n/** Rafraichissement de tous les fetchs des areas ouvertes */\nclass AutoRefreshBtn extends Action<JobsApp> {\n\tconstructor() {\n\t\tsuper('autoRefresh');\n\t\tthis._icon = \"/@skin@/commons/icons/refresh.svg\";\n\t}\n\n\tgetLabel(ctx: JobsApp): string {\n\t\treturn `Rafraichissement automatique des zones affichées (toutes les ${ctx.params.autoRefreshInterval} secondes)`;\n\t}\n\n\tisToggle(ctx: JobsApp): this is IActionToggle<JobsApp> {\n\t\treturn true;\n\t}\n\n\tgetIcon(ctx: JobsApp): string {\n\t\treturn this.getDatas(\"toggle\", ctx) ? \"/@skin@/core/apps/autorefresh-on.svg\" : \"/@skin@/core/apps/autorefresh-off.svg\";\n\t}\n\n\tgetDatas(api: \"toggle\", ctx: JobsApp): boolean {\n\t\treturn ctx.autoRefresh;\n\t}\n\n\texecute(ctx: JobsApp, ev?: Event): any | \"noPreventDefault\" {\n\t\tlet currentStatus = this.getDatas(\"toggle\", ctx);\n\t\tif (!ctx.params.lastDatas) ctx.params.lastDatas = {};\n\t\t(ctx.params.lastDatas as JLDJobsApp).autoRefresh = !currentStatus;\n\t\tctx.autoRefresh = !currentStatus;\n\t}\n}\n"]}