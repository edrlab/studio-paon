{"version":3,"sources":["/@back@/core/dialogs/jobsMgr.tsx"],"names":["MsgLabel","REG","DOM","JSX","DOMSH","GridColDef","AccelKeyMgr","Action","ACTION","ActionMenu","ActionWrapper","CellBuilderDate","CellBuilderEnum","CellBuilderIconLabel","CellBuilderString","BaseAreaViewAsync","EJobStatus","EXECUTOR","UiJobFactory","JobsGrid","ERROR","BarShared","CellBuilderAccount","Tabs","AreaAsync","POPUP","ActionDeleteJobs","ActionForceExecuteJobs","ActionMoveInQueueJobs","JobsAction","EJobTabStatus","JobsMgr","[object Object]","this","_fetchingCountersPending","_fetchingTabJobsPending","frozenStatus","hasAttribute","val","setAttrBool","init","reg","createSubReg","findReg","params","Object","assign","jobsFactoriesList","JOBS_FACTORIES_LIST","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","uiJobsFactoriesFcts","mergeLists","uiJobsFactoriesPromises","map","entry","call","uiJobsFactories","Promise","all","addToList","FreezeExecutorBtn","actionRefreshUi","ActionNewJobs","SINGLETON","ActionWrapperRefresMgr","setOverridenSvc","ActionWrapperCreateJob","ActionDuplicateJob","_headband","appendChild","createElement","class","Ã®","label","icon","level","jbBoxElt","col_id","setLabel","setDescription","setSortable","setCellBuilder","col_name","setFlex","CellBuilderJobLabel","col_lastQueued","setCellClass","setOptions","year","month","day","hour","minute","second","col_planned","col_createdBy","col_status","Map","waiting","launched","pending","done","failed","planned","areas","push","alive","setBodyBuilder","ctx","JobsGridView","id","columnDefs","emptyBody","skinOver","actions","accelKeyMgr","initFromMapActions","mergeListsAsMap","selectAction","DisplayJobDetails","lineDrawer","jobsGrids","env","universe","executor","hasFeature","_tabs","JobsTabs","vertical","jobsTab","_toolbar","initialize","startActions","injectSepByGroup","getId","getPref","actionContext","focusListening","addEventListener","ev","key","currentJobsGrig","selectByJob","stopPropagation","showTab","selectTab","getTabByCode","fetchAll","selectedTab","view","excludeCurrent","fetchTabJobs","fetchStats","stats","currentTab","currentTabStatus","area","getStats","refreshCounterValue","countInQueue","toString","countFailed","frozen","e","log","refresh","_fetching","jobCriterions","computeFetchCriterion","result","scope","findMyJobs","findJobs","currentSelect","getSelectedJobs","jobsGridDatas","setDatas","jobs","jobStatus","statuses","inQueue","row","line","setAttr","rowDatas","lastStatus","close","customElements","define","registerSkin","super","_initialize","shadowRoot","lastElementChild","_resizerElt","c-orient","_detailsElt","c-resizable","showJobDetail","me","findHost","length","jobBase","_currentJobDetailId","job","getJob","innerText","factory","find","matchJob","buildJobDetails","setHidden","ensureRowVisibleByJobId","undefined","buildJobTitleDetails","buildJobPropsDetails","buildJobTriesDetails","_countersElts","installSkin","tab","_initTab","_createLabel","includes","set","jobTabStatus","value","has","get","textContent","jobsMgr","cacheHolder","getJobUiFactory","getLabel","jobSgn","getIcon","setGroup","setIcon","setExecute","async","_label","_group","_description","_icon","_enablePerms","isVisible","jobsFactories","forEach","getJobBuilder","setMode","requireVisiblePerm","creator","isAvailable","execute","report","jobId","dateObj","Date","date","toLocaleString","showNotifWarning","executeIfAvailable","showNotifError","requireEnabledPerm","currentStatus","getDatas","api","infos","freezeExecutor"],"mappings":"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","sourcesContent":["import {MsgLabel, OMsgLabelInit, OSkinableInit} from \"back/commons/basis\";\nimport {IReg, IRegPointer, IUiEnv, REG} from \"lib/commons/registry\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {GridColDef, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\nimport {ICoreUniverseEnv} from \"lib/core/universe\";\nimport {AccelKeyMgr, Action, ACTION, ActionMenu, ActionWrapper, IAction, IActionToggle} from \"lib/commons/actions\";\nimport {CellBuilderDate, CellBuilderEnum, CellBuilderIconLabel, CellBuilderString, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {BaseAreaViewAsync, IView} from \"lib/commons/views\";\nimport \"back/core/dialogs/dialogs_Perms\";\nimport {EJobStatus, EXECUTOR, IExecutorInUniverse, IExecutorInUniversePointer, IJobBuilderActionContext, IJobsCtx, JJob, JJobBase, JJobCriterion, JJobsStats, UiJobFactory} from \"lib/core/executor\";\nimport {IJobGridCtx, JobsGrid, OJobsGridInit} from \"back/core/widgets/jobsGrid\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {BarShared, OBarSharedInit} from \"back/commons/widgets/bars\";\nimport {CellBuilderAccount} from \"back/core/widgets/usersGrid\";\nimport {OTabsInit, Tab, Tabs} from \"back/commons/widgets/tabs\";\nimport {AreaAsync, IArea} from \"lib/commons/areas\";\nimport {GridDataRowJsonTree} from \"back/commons/widgets/tree\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {ActionDeleteJobs, ActionForceExecuteJobs, ActionMoveInQueueJobs, JobsAction} from \"back/core/actions/jobsActions\";\nimport {Resizer} from \"back/commons/widgets/resizer\";\n\nexport interface OJobsMgrInit extends OSkinableInit {\n\treg: IReg<ICoreUniverseEnv & IExecutorInUniverse & IUiEnv>,\n\tscope?: 'my' | 'all',\n\t/** Liste de promises de UiJobFactory, ou de fctions retournant cette promise. Liste issue de executor:jobs:factories Ã  dÃ©faut */\n\tjobsFactoriesList?: [],\n\t/** Init de=u tab */\n\tjobsTab?: OTabsInit<any>,\n\t/** Init des grids */\n\tjobsGrids?: OJobsGridInit<any>,\n\t/** Tab Ã  afficher */\n\tshowTab?: EJobTabStatus\n}\n\nenum EJobTabStatus {\n\talive = 'alive',\n\tplanned = 'planned',\n\tfailed = 'failed',\n\tdone = 'done',\n}\n\n\nexport class JobsMgr<E extends IRegPointer<IExecutorInUniversePointer & IUiEnv>, D extends IJobBuilderActionContext> extends BaseAreaViewAsync<E> implements IGridLineDrawer {\n\treg: IReg<IExecutorInUniversePointer & IUiEnv>;\n\n\tparams: OJobsMgrInit;\n\n\tuiJobsFactories: UiJobFactory<E, D>[];\n\n\tprotected _headband: MsgLabel;\n\n\tprotected _tabs: JobsTabs;\n\n\tprotected _toolbar: BarShared<JobsMgr<any, any>>;\n\n\tprotected _fetching: \"error\" | \"pending\" | null;\n\n\t/** Mise en pause de l'Ã©xÃ©cution des jobs */\n\tget frozenStatus(): boolean {return this.hasAttribute(\"data-frozen\")};\n\n\tset frozenStatus(val: boolean) {\n\t\tDOM.setAttrBool(this, \"data-frozen\", val);\n\t}\n\n\tprotected async _initialize(init: OJobsMgrInit): Promise<void> {\n\t\tif (!this.reg) this.reg = REG.createSubReg(this.findReg(init));\n\t\tthis.params = Object.assign({\n\t\t\tjobsFactoriesList: [EXECUTOR.JOBS_FACTORIES_LIST],\n\t\t}, init);\n\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tconst uiJobsFactoriesFcts: (() => Promise<UiJobFactory<any, any>>)[] = this.reg.mergeLists(...this.params.jobsFactoriesList) as any;\n\t\tconst uiJobsFactoriesPromises = uiJobsFactoriesFcts ? uiJobsFactoriesFcts.map((entry) => typeof entry === \"function\" ? entry.call(this) : entry) : null;\n\t\tthis.uiJobsFactories = await Promise.all(uiJobsFactoriesPromises || []) as UiJobFactory<any, any>[];\n\n\t\t// Actions\n\t\tthis.reg.addToList(\"actions:jobsmgr:toolbar\", \"actionFreezeExecutor\", 1, new FreezeExecutorBtn());\n\t\tthis.reg.addToList(\"actions:jobsmgr:toolbar\", \"actionRefreshUi\", 1, actionRefreshUi);\n\t\tthis.reg.addToList(\"actions:jobsmgr:toolbar\", \"actionNewJob\", 1, ActionNewJobs.SINGLETON);\n\n\t\tthis.reg.addToList(\"actions:jobsmgr\", \"actionDuplicateJob\", 1, new ActionWrapperRefresMgr(this).setOverridenSvc(new ActionWrapperCreateJob(this).setOverridenSvc(new ActionDuplicateJob(this))));\n\t\tthis.reg.addToList(\"actions:jobsmgr\", \"actionDeleteJobs\", 1, new ActionWrapperRefresMgr(this).setOverridenSvc(ActionDeleteJobs.SINGLETON));\n\t\t//this.reg.addToList(\"actions:jobsmgr\", \"actionScheduleJobs\", 1, new ActionWrapperRefresMgr(this).setOverridenSvc(ActionScheduleJobs.SINGLETON));\n\t\tthis.reg.addToList(\"actions:jobsmgr\", \"actionForceExecuteJobs\", 1, new ActionWrapperRefresMgr(this).setOverridenSvc(ActionForceExecuteJobs.SINGLETON));\n\t\tthis.reg.addToList(\"actions:jobsmgr\", \"actionMoveInQueueJobs\", 1, new ActionWrapperRefresMgr(this).setOverridenSvc(ActionMoveInQueueJobs.SINGLETON));\n\n\t\tthis._headband = sr.appendChild(<MsgLabel class=\"headband\" Ã®={{\n\t\t\tlabel: \"ExÃ©cution des traitements gelÃ©e\",\n\t\t\ticon: \"/@skin@/core/actions/jobs/frozen.svg\",\n\t\t\tlevel: \"warning\",\n\t\t} as OMsgLabelInit}/>) as MsgLabel;\n\n\t\tlet jbBoxElt = sr.appendChild(<div class=\"jobsBox\"/>) as HTMLDivElement;\n\n\t\t// Colonnes\n\t\tconst col_id = new GridColDef('id')\n\t\t\t.setLabel(\"Id.\")\n\t\t\t.setDescription(\"Identifiant\")\n\t\t\t.setSortable(false)\n\t\t\t.setCellBuilder(new CellBuilderString(\"id\"));\n\t\tconst col_name = new GridColDef('name')\n\t\t\t.setLabel(\"Label\")\n\t\t\t.setFlex(\"6rem\", 1, 1)\n\t\t\t.setCellBuilder(new CellBuilderJobLabel(this));\n\t\tconst col_lastQueued = new GridColDef('lastQueued')\n\t\t\t.setLabel(\"ExÃ©cution\")\n\t\t\t.setDescription(\"Date d'exÃ©cution\")\n\t\t\t.setFlex(\"8rem\", 1, 1)\n\t\t\t.setCellBuilder(new CellBuilderDate(\"lastQueued\").setCellClass(\"center\").setOptions({year: \"numeric\", month: \"2-digit\", day: \"2-digit\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"}));\n\t\tconst col_planned = new GridColDef('planned')\n\t\t\t.setLabel(\"Planification\")\n\t\t\t.setDescription(\"Date planifiÃ©e\")\n\t\t\t.setFlex(\"8rem\", 1, 1)\n\t\t\t.setCellBuilder(new CellBuilderDate(\"planned\").setCellClass(\"center\").setOptions({year: \"numeric\", month: \"2-digit\", day: \"2-digit\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"}));\n\t\tconst col_createdBy = new GridColDef('createdBy')\n\t\t\t.setLabel(\"CrÃ©ateur\")\n\t\t\t.setDescription(\"Compte ayant crÃ©Ã© ce traitement\")\n\t\t\t.setFlex(\"3rem\", 1, 1)\n\t\t\t.setCellBuilder(new CellBuilderAccount(this.reg, \"createdBy\", true));\n\t\tconst col_status = new GridColDef('lastStatus')\n\t\t\t.setLabel(\"Statut\")\n\t\t\t.setFlex('2rem', 1, 1)\n\t\t\t.setCellBuilder(new CellBuilderEnum('lastStatus', new Map([\n\t\t\t\t[EJobStatus.waiting, \"En attente\"],\n\t\t\t\t[EJobStatus.launched, \"ChargÃ©\"],\n\t\t\t\t[EJobStatus.pending, \"En cours d'exÃ©cution\"],\n\t\t\t\t[EJobStatus.done, \"TerminÃ©\"],\n\t\t\t\t[EJobStatus.failed, \"En Ã©chec\"],\n\t\t\t\t[EJobStatus.planned, \"PlanifiÃ©\"],\n\t\t\t])).setCellClass(\"center\"));\n\n\t\t/** Tabs */\n\t\tlet areas: IArea[] = [];\n\t\tareas.push(new AreaAsync(EJobTabStatus.alive)\n\t\t\t.setLabel(\"En cours\").setDescription(\"Traitements en cours\")\n\t\t\t.setBodyBuilder((ctx) => {\n\t\t\t\treturn <JobsGridView id={EJobTabStatus.alive} Ã®={Object.assign({\n\t\t\t\t\tcolumnDefs: [col_id, col_name, col_lastQueued, col_createdBy, col_status],\n\t\t\t\t\treg: this.reg,\n\t\t\t\t\temptyBody: this.emptyBody,\n\t\t\t\t\tskinOver: 'jobs-mgr/grid',\n\t\t\t\t\tactions: this.reg.mergeLists(\"actions:jobsmgr\", \"actions:jobsmgr:alive\"),\n\t\t\t\t\taccelKeyMgr: new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:jobsmgr\", \"accelkeys:jobsmgr:alive\")),\n\t\t\t\t\tselectAction: new DisplayJobDetails(this),\n\t\t\t\t\tlineDrawer: this,\n\t\t\t\t} as OJobsGridInit<any>, init.jobsGrids)}/>\n\t\t\t}));\n\t\tif (this.reg.env.universe.executor.hasFeature(\"scheduling\")) areas.push(new AreaAsync(EJobTabStatus.planned)\n\t\t\t.setLabel(\"PlanifiÃ©s\").setDescription(\"Traitements planifiÃ©s\")\n\t\t\t.setBodyBuilder((ctx) => {\n\t\t\t\treturn <JobsGridView id={EJobTabStatus.planned} Ã®={Object.assign({\n\t\t\t\t\tcolumnDefs: [col_id, col_name, col_planned, col_createdBy],\n\t\t\t\t\treg: this.reg,\n\t\t\t\t\temptyBody: this.emptyBody,\n\t\t\t\t\tskinOver: 'jobs-mgr/grid',\n\t\t\t\t\tactions: this.reg.mergeLists(\"actions:jobsmgr\", \"actions:jobsmgr:planned\"),\n\t\t\t\t\taccelKeyMgr: new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:jobsmgr\", \"accelkeys:jobsmgr:planned\")),\n\t\t\t\t\tselectAction: new DisplayJobDetails(this),\n\t\t\t\t\tlineDrawer: this,\n\t\t\t\t} as OJobsGridInit<any>, init.jobsGrids)}/>\n\t\t\t}));\n\t\tareas.push(new AreaAsync(EJobTabStatus.failed)\n\t\t\t.setLabel(\"En Ã©chec\").setDescription(\"Traitements en Ã©chec\")\n\t\t\t.setBodyBuilder((ctx) => {\n\t\t\t\treturn <JobsGridView id={EJobTabStatus.failed} Ã®={Object.assign({\n\t\t\t\t\tcolumnDefs: [col_id, col_name, col_lastQueued, col_createdBy],\n\t\t\t\t\treg: this.reg,\n\t\t\t\t\temptyBody: this.emptyBody,\n\t\t\t\t\tskinOver: 'jobs-mgr/grid',\n\t\t\t\t\tactions: this.reg.mergeLists(\"actions:jobsmgr\", \"actions:jobsmgr:failed\"),\n\t\t\t\t\taccelKeyMgr: new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:jobsmgr\", \"accelkeys:jobsmgr:failed\")),\n\t\t\t\t\tselectAction: new DisplayJobDetails(this),\n\t\t\t\t\tlineDrawer: this,\n\t\t\t\t} as OJobsGridInit<any>, init.jobsGrids)}/>\n\t\t\t}));\n\t\tareas.push(new AreaAsync(EJobTabStatus.done)\n\t\t\t.setLabel(\"TerminÃ©s\").setDescription(\"Traitements terminÃ©s\")\n\t\t\t.setBodyBuilder((ctx) => {\n\t\t\t\treturn <JobsGridView id={EJobTabStatus.done} Ã®={Object.assign({\n\t\t\t\t\tcolumnDefs: [col_id, col_name, col_lastQueued, col_createdBy],\n\t\t\t\t\treg: this.reg,\n\t\t\t\t\temptyBody: this.emptyBody,\n\t\t\t\t\tskinOver: 'jobs-mgr/grid',\n\t\t\t\t\tactions: this.reg.mergeLists(\"actions:jobsmgr\", \"actions:jobsmgr:done\"),\n\t\t\t\t\taccelKeyMgr: new AccelKeyMgr().initFromMapActions(this.reg.mergeListsAsMap(\"accelkeys:jobsmgr\", \"accelkeys:jobsmgr:done\")),\n\t\t\t\t\tselectAction: new DisplayJobDetails(this),\n\t\t\t\t\tlineDrawer: this,\n\t\t\t\t} as OJobsGridInit<any>, init.jobsGrids)}/>\n\t\t\t}));\n\t\tthis._tabs = jbBoxElt.appendChild(<JobsTabs Ã®={Object.assign({\n\t\t\tvertical: true,\n\t\t\tareas: areas,\n\t\t} as OTabsInit<any>, init.jobsTab)} id=\"tabs\"/>) as JobsTabs;\n\n\t\t/** Toolbar */\n\t\tthis._toolbar = jbBoxElt.appendChild(new BarShared<this>().initialize({\n\t\t\treg: this.reg,\n\t\t\tstartActions: ACTION.injectSepByGroup(\n\t\t\t\tthis.reg.mergeLists(\"actions:jobsmgr:toolbar\", \"actions:jobsmgr:toolbar:\" + this.reg.env.universe.getId()),\n\t\t\t\tthis.reg.getPref(\"actions.jobsmgr.groupOrder\", \"refresh add *\"), this) as Action<this>[],\n\t\t\tactionContext: this,\n\t\t\tfocusListening: this._tabs,\n\t\t} as OBarSharedInit<this>));\n\t\tDOM.setAttrBool(this._toolbar, \"vertical\", true);\n\n\t\tthis.addEventListener(\"keydown\", (ev) => {\n\t\t\tif (ev.key === 'Escape' && this.currentJobsGrig) {\n\t\t\t\tthis.currentJobsGrig.selectByJob([]);\n\t\t\t\tev.stopPropagation()\n\t\t\t}\n\t\t});\n\t}\n\n\tonViewShown() {\n\t\tif (this.params.showTab)\n\t\t\tthis._tabs.selectTab(this._tabs.getTabByCode(this.params.showTab));\n\t\tthis.fetchAll();\n\t}\n\n\tget currentJobsGrig(): JobsGridView {\n\t\treturn this._tabs.selectedTab ? this._tabs.selectedTab.view as JobsGridView : null;\n\t}\n\n\t/** Rafraichissement global des donnÃ©es affichÃ©es */\n\tasync fetchAll(excludeCurrent: boolean = true) {\n\t\tawait this.fetchTabJobs();\n\t\tawait this.fetchStats();\n\t}\n\n\t/** Rafraichit les compteurs des tabs et l'Ã©tat d'exÃ©cution\n\t * @param stats : stats computÃ©s en amont. Si spÃ©cifÃ©, refreh ui uniquement\n\t */\n\tasync fetchStats(stats?: JJobsStats) {\n\t\tif (this._fetchingCountersPending) return;\n\t\tlet currentTab = this._tabs.selectedTab;\n\t\tif (!currentTab) return;\n\t\tlet currentTabStatus = currentTab.area.getId() as EJobTabStatus;\n\t\ttry {\n\t\t\tthis._fetchingCountersPending = true;\n\t\t\tif (!stats)\n\t\t\t\tstats = await EXECUTOR.getStats(this.reg.env.universe.executor);\n\t\t\tthis._tabs.refreshCounterValue(EJobTabStatus.alive, stats.countInQueue.toString());\n\t\t\tthis._tabs.refreshCounterValue(EJobTabStatus.failed, stats.countFailed.toString());\n\t\t\tthis.frozenStatus = stats.frozen;\n\t\t} catch (e) {\n\t\t\tthis._tabs.refreshCounterValue(EJobTabStatus.alive, '-');\n\t\t\tthis._tabs.refreshCounterValue(EJobTabStatus.failed, '-');\n\t\t\tthis.frozenStatus = null;\n\t\t\tawait ERROR.log(\"Count jobs failed\", e);\n\t\t} finally {\n\t\t\tthis._fetchingCountersPending = false;\n\t\t}\n\t\tthis._toolbar.refresh();\n\t}\n\n\tprivate _fetchingCountersPending = false;\n\n\t/** Rafraichit la tab courante affichÃ©e */\n\tprotected async fetchTabJobs() {\n\t\tif (this._fetchingTabJobsPending) return;\n\t\tlet currentTab = this._tabs.selectedTab;\n\t\tif (!currentTab) return;\n\t\tlet currentTabStatus = currentTab.area.getId() as EJobTabStatus;\n\t\tthis._fetching = \"pending\";\n\t\ttry {\n\t\t\tthis._fetchingTabJobsPending = true;\n\t\t\tlet jobCriterions: JJobCriterion = this.computeFetchCriterion(currentTabStatus);\n\t\t\tconst result = this.params.scope == \"my\" ?\n\t\t\t\tawait EXECUTOR.findMyJobs(this.reg.env.universe.executor, jobCriterions) :\n\t\t\t\tawait EXECUTOR.findJobs(this.reg.env.universe.executor, jobCriterions);\n\n\t\t\tthis._fetching = null;\n\t\t\tconst currentSelect = this.currentJobsGrig.getSelectedJobs();\n\t\t\tthis.currentJobsGrig.jobsGridDatas.setDatas(result.jobs);\n\t\t\tthis.currentJobsGrig.selectByJob(currentSelect);\n\t\t} catch (e) {\n\t\t\tthis._fetching = \"error\";\n\t\t\tthis.currentJobsGrig.jobsGridDatas.setDatas([]);\n\t\t\tawait ERROR.log(\"List jobs failed\", e);\n\t\t} finally {\n\t\t\tthis._fetchingTabJobsPending = false;\n\t\t}\n\t}\n\n\tprivate _fetchingTabJobsPending = false;\n\n\t/** */\n\tprivate computeFetchCriterion(jobStatus: EJobTabStatus): JJobCriterion {\n\t\t// TODO : critÃ¨re de filtre apportÃ© par le init\n\t\tlet jobCriterions: JJobCriterion = {};\n\t\tif (jobStatus == EJobTabStatus.alive) {\n\t\t\tjobCriterions.statuses = [EJobStatus.waiting, EJobStatus.launched, EJobStatus.pending];\n\t\t\tjobCriterions.inQueue = true;\n\t\t} else if (jobStatus == EJobTabStatus.done)\n\t\t\tjobCriterions.statuses = [EJobStatus.done]\n\t\telse if (jobStatus == EJobTabStatus.failed)\n\t\t\tjobCriterions.statuses = [EJobStatus.failed]\n\t\telse if (jobStatus == EJobTabStatus.planned)\n\t\t\tjobCriterions.statuses = [EJobStatus.planned]\n\t\treturn jobCriterions;\n\t}\n\n\t/**\n\t * Tree\n\t */\n\tredrawLine(row: GridDataRowJson<JJobBase>, line: HTMLElement): void {\n\t\tDOM.setAttr(line, \"data-status\", row.rowDatas.lastStatus);\n\t}\n\n\temptyBody(): Element {\n\t\tswitch (this._fetching) {\n\t\tcase \"pending\":\n\t\t\treturn <c-msg label=\"Chargement en cours...\" level=\"loading\"/>\n\t\tcase \"error\":\n\t\t\treturn <c-msg label=\"Chargement en erreur\" level=\"error\"/>\n\t\tdefault:\n\t\t\treturn <c-msg label=\"Aucun traitement\"/>\n\t\t}\n\t}\n\n\t/**\n\t * IViewApi\n\t */\n\tonViewBeforeHide(close?: boolean): boolean {\n\t\treturn false;\n\t}\n\n\tasync onViewWaitForHide(close?: boolean): Promise<boolean> {\n\t\treturn true;\n\t\t/*return !await this.computeDirtyStatus() || await POPUP.confirm(`Des propriÃ©tÃ©s n'ont pas Ã©tÃ© enregistrÃ©es. Voulez-vous abandonner ces modifications et quitter ?`, this.reg.env.uiRoot, {\n\t\t\tokLbl: \"Abandonner les modifications et quitter\",\n\t\t\tcancelLbl: \"Reprendre l'Ã©dition\"\n\t\t});*/\n\t}\n\n}\n\ncustomElements.define(\"jobs-mgr\", JobsMgr);\n\nREG.reg.registerSkin('jobs-mgr', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t}\n\n\tc-bar-shared {\n\t\tflex: none;\n\t}\n\n\t#tabs {\n\t\tdisplay: contents;\n\t}\n\n\tserver-jobs-grid {\n\t\tflex: 1;\n\t}\n\n\tjobs-mgr-gridview {\n\t\tborder: none;\n\t}\n\n\t:host(:not([data-frozen])) .headband {\n\t\tdisplay: none;\n\t}\n\n\t.headband {\n\t\tbackground-color: var(--tooltip-bgcolor);\n\t}\n\n\t.jobsBox {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: row;\n\t}\n\n`);\n\n\nREG.reg.registerSkin(\"jobs-mgr/grid\", 1, /* language=CSS */ `\n\t.icon {\n\t\tpadding-inline-start: 1.5em;\n\t}\n\n\t.late {\n\t\tcolor: var(--error-color);\n\t}\n\n\t*[data-status=launched],\n\t*[data-status=pending] {\n\t\tfont-style: italic;\n\t}\n\n`);\n\n/** JobsGridView */\nclass JobsGridView extends JobsGrid implements IView {\n\n\tprotected _detailsElt: HTMLDivElement;\n\n\tprotected _resizerElt: Resizer;\n\n\tprotected async _initialize(init: OJobsGridInit<IJobGridCtx>): Promise<void> {\n\t\tsuper._initialize(init);\n\t\tDOM.setAttrBool(this.shadowRoot.lastElementChild, \"c-resizable\", true);\n\t\tthis._resizerElt = this.shadowRoot.appendChild(<c-resizer c-orient=\"column\" class=\"detailsRsz\"/>) as Resizer;\n\t\tthis._detailsElt = this.shadowRoot.appendChild(<div class=\"details\" c-resizable/>) as HTMLDivElement;\n\t\tawait this.showJobDetail(null);\n\t}\n\n\t/**\n\t * Details\n\t */\n\tasync showJobDetail(jobs: JJobBase[]): Promise<void> {\n\t\tconst me = DOMSH.findHost<JobsMgr<any, any>>(this);\n\t\tif (jobs && jobs.length == 1) {\n\t\t\tlet jobBase = jobs[0];\n\t\t\tthis._currentJobDetailId = jobBase.id; //raceCond\n\t\t\tlet job = await EXECUTOR.getJob(me.reg.env.universe.executor, jobBase.id);\n\t\t\tthis._detailsElt.innerText = \"\";\n\t\t\tif (this._currentJobDetailId !== job.id) return; //raceCond\n\t\t\tlet factory = me.uiJobsFactories.find((factory) => factory.matchJob(jobBase));\n\t\t\tif (factory) {\n\t\t\t\tawait factory.buildJobDetails(this._detailsElt, me, job);\n\t\t\t\tif (this._currentJobDetailId !== job.id) return; //raceCond\n\t\t\t\tDOM.setHidden(this._detailsElt, false);\n\t\t\t\tDOM.setHidden(this._resizerElt, false);\n\t\t\t\tthis.ensureRowVisibleByJobId(job.id);\n\t\t\t\tthis._currentJobDetailId = undefined;\n\t\t\t} else {\n\t\t\t\tDOM.setHidden(this._detailsElt, false);\n\t\t\t\tDOM.setHidden(this._resizerElt, false);\n\t\t\t\tthis._detailsElt.appendChild(UiJobFactory.buildJobTitleDetails(job));\n\t\t\t\tthis._detailsElt.appendChild(UiJobFactory.buildJobPropsDetails(job));\n\t\t\t\tthis._detailsElt.appendChild(UiJobFactory.buildJobTriesDetails(job, me.reg));\n\t\t\t}\n\t\t} else {\n\t\t\tDOM.setHidden(this._detailsElt, true);\n\t\t\tDOM.setHidden(this._resizerElt, true);\n\t\t}\n\t}\n\n\tprivate _currentJobDetailId: string;\n\n\tonViewShown(): void {\n\t\tconst me = DOMSH.findHost<JobsMgr<any, any>>(this);\n\t\tif (me) me.fetchAll();\n\t}\n}\n\ncustomElements.define(\"jobs-mgr-gridview\", JobsGridView);\nREG.reg.registerSkin(\"jobs-mgr-gridview\", 1, /* language=CSS */ `\n\t.detailsRsz {\n\t\tcursor: n-resize;\n\t}\n\n\t.details:not([hidden]) {\n\t\tbackground-color: var(--row-bgcolor);\n\t\tborder-block-start: 1px solid var(--border-color);\n\t\tpadding: 2px;\n\t\tfont-size: .8em;\n\t\toverflow: auto;\n\t\theight: max(20%, 6rem);\n\t}\n\n\t.details h1 {\n\t\tfont-size: 1.2em;\n\t\tmargin-block-start: 0;\n\t}\n\n\t.details h2 {\n\t\tfont-size: 1em;\n\t\tletter-spacing: 1px;\n\t\tfont-weight: bolder;\n\t}\n\n\t.details .content {\n\t\tmargin-inline-start: 2rem;\n\t}\n\n\t.details .code {\n\t\tfont-size: .8rem;\n\t\tfont-family: var(--font-mono);\n\t\tborder: 1px solid var(--alt1-border-color);\n\t\tpadding: .3rem;\n\t\tuser-select: text;\n\t}\n\n`);\n\n\n/** JobsTabs */\nclass JobsTabs extends Tabs {\n\tprivate _countersElts: Map<EJobTabStatus, HTMLSpanElement> = new Map();\n\n\tinitialize(init?: OTabsInit<any>): this {\n\t\tsuper.initialize(init);\n\t\tthis.findReg(init).installSkin(\"c-tabs\", this.shadowRoot);\n\t\treturn this;\n\t}\n\n\t_initTab(tab: Tab<any>) {\n\t\tsuper._initTab(tab);\n\t\ttab._createLabel();\n\t\tREG.findReg(this).installSkin(\"jobs-mgr-jobstabs-tab\", tab.shadowRoot);\n\t\tif ([EJobTabStatus.alive, EJobTabStatus.failed].includes(tab.area.getId() as EJobTabStatus))\n\t\t\tthis._countersElts.set(tab.area.getId() as EJobTabStatus, tab.shadowRoot.appendChild(<span class={\"count \" + tab.area.getId()}>-</span>));\n\t}\n\n\trefreshCounterValue(jobTabStatus: EJobTabStatus, value: string) {\n\t\tif (this._countersElts.has(jobTabStatus))\n\t\t\tthis._countersElts.get(jobTabStatus).textContent = value;\n\t}\n\n}\n\ncustomElements.define(\"jobs-mgr-jobstabs\", JobsTabs);\nREG.reg.registerSkin(\"jobs-mgr-jobstabs\", 1, /* language=CSS */ `\n\n`);\nREG.reg.registerSkin(\"jobs-mgr-jobstabs-tab\", 1, /* language=CSS */ `\n\t:host {\n\t\tmin-width: 7em !important;\n\t\ttext-align: start !important;\n\t}\n\n\t.label {\n\t\t/*flex:unset;*/\n\t}\n\n\t.count {\n\t\tbackground-color: var(--inv-bgcolor);\n\t\tcolor: var(--inv-color);\n\t\tborder-radius: 3px;\n\t\t/*top: -.4rem;\n\t\tleft: .4rem;\n\t\tposition: relative;*/\n\t\tfont-size: .7em;\n\t\tpadding: 2px;\n\t\tline-height: .7rem;\n\t\tfont-family: var(--font-mono);\n\t\t-webkit-text-stroke: initial;\n\t}\n\n\t.count.failed {\n\t\tbackground-color: var(--error-color);\n\t}\n\n`);\n\n/** Colonnes */\nexport class CellBuilderJobLabel extends CellBuilderIconLabel {\n\n\tconstructor(public jobsMgr: JobsMgr<any, any>) {\n\t\tsuper(null);\n\t}\n\n\tprivate getJobUiFactory(row: GridDataRowJsonTree<JJob>): UiJobFactory<any, any> {\n\t\tif (!(\"_jobFactory\" in row.cacheHolder) && this.jobsMgr.uiJobsFactories)\n\t\t\trow.cacheHolder['_jobFactory'] = this.jobsMgr.uiJobsFactories.find((factory) => factory.matchJob(row.rowDatas as JJob));\n\t\treturn row.cacheHolder['_jobFactory'];\n\t}\n\n\t_getValue(row: GridDataRowJsonTree<JJob>) {\n\t\tif (\"_jobLabel\" in row.cacheHolder)\n\t\t\treturn row.cacheHolder['_jobLabel'];\n\t\treturn row.cacheHolder['_jobLabel'] = this.getJobUiFactory(row) ? this.getJobUiFactory(row).getLabel(this.jobsMgr) : row.rowDatas.jobSgn\n\t}\n\n\t_getIcon(row: GridDataRowJsonTree<JJob>) {\n\t\tif (\"_jobIcon\" in row.cacheHolder)\n\t\t\treturn row.cacheHolder['_jobIcon'];\n\t\treturn row.cacheHolder['_jobIcon'] = this.getJobUiFactory(row) ? this.getJobUiFactory(row).getIcon(this.jobsMgr) : null\n\t}\n}\n\n/** Actions */\n\n/** Action refresh UI */\nconst actionRefreshUi = new Action<JobsMgr<any, any>>(\"refreshUi\")\n\t.setLabel(\"Rafraichir\")\n\t.setGroup(\"refresh\")\n\t.setIcon(\"/@skin@/commons/icons/refresh.svg\")\n\t.setExecute(async function (this: Action<JobsMgr<any, any>>, ctx: JobsMgr<any, any>, ev: Event) {\n\t\t\tctx.fetchAll();\n\t\t}\n\t);\n\n/** Action crÃ©ate Job */\nexport class ActionNewJobs<C extends JobsMgr<any, any>> extends ActionMenu<C> {\n\tstatic SINGLETON = new ActionNewJobs();\n\n\tconstructor(id?: string) {\n\t\tsuper(id);\n\t\tthis._label = \"Nouveau...\";\n\t\tthis._group = \"new\";\n\t\tthis._description = \"CrÃ©er un nouveau traitement\";\n\t\tthis._icon = \"/@skin@/core/dialogs/jobs/addJob.svg\";\n\t\tthis._enablePerms = \"action.jobsMgr#create.job\";\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.uiJobsFactories) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tgetActions(ctx: C): IAction<IRegPointer<IExecutorInUniversePointer & IUiEnv>>[] {\n\t\tconst jobsFactories = ctx.uiJobsFactories;\n\t\tlet actions: IAction<any>[] = [];\n\t\tjobsFactories.forEach((factory) => {if (factory.getJobBuilder()) actions.push(new ActionWrapperCreateJob(ctx).setOverridenSvc(factory.getJobBuilder()))});\n\t\treturn actions;\n\t}\n}\n\n/** Action de duplication d'un job */\nexport class ActionDuplicateJob<C extends IJobsCtx> extends JobsAction<C> {\n\n\tconstructor(protected jobsMgr: JobsMgr<any, any>, id?: string) {\n\t\tsuper(id);\n\t\tthis._label = \"CrÃ©er un nouveau traitement de mÃªme type\";\n\t\tthis._description = \"CrÃ©er un nouveau traitement de mÃªme type\";\n\t\tthis.setMode(\"mono\");\n\t\tthis._group = \"new\";\n\t\tthis._icon = \"/@skin@/core/actions/jobs/clone.svg\";\n\t\tthis.requireVisiblePerm(\"action.jobsMgr#create.job\");\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!this.jobsMgr.uiJobsFactories) return false;\n\t\tif (!ctx.jobs || ctx.jobs.length !== 1) return false;\n\t\tlet factory = this.jobsMgr.uiJobsFactories.find((factory) => factory.matchJob(ctx.jobs[0]));\n\t\tif (!factory || !factory.getJobBuilder()) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<JJob> {\n\t\ttry {\n\t\t\tconst factory = this.jobsMgr.uiJobsFactories.find((factory) => factory.matchJob(ctx.jobs[0]));\n\t\t\tconst creator = factory.getJobBuilder();\n\t\t\tif (creator.isAvailable(ctx)) {\n\t\t\t\tlet job = await EXECUTOR.getJob(ctx.reg.env.universe.executor, ctx.jobs[0].id);\n\t\t\t\treturn await creator.execute(Object.assign({job}, ctx));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tawait ERROR.report(`La crÃ©ation du traitement n'a pas pu aboutir. Veuillez rÃ©essayer ultÃ©rieurement.`, e);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n\n/** Wrapper des actions de crÃ©ation de job : notification, refresh, ... */\nclass ActionWrapperCreateJob<C extends IJobsCtx> extends ActionWrapper<C> {\n\tconstructor(public jobsMgr: JobsMgr<any, any>) {\n\t\tsuper();\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<any> {\n\t\tlet result = await super.execute(ctx, ev);\n\t\tif (result) {\n\t\t\tlet jobId = (result as JJob).id;\n\t\t\tlet planned = (result as JJob).planned;\n\t\t\tlet dateObj = planned ? new Date(planned) : null;\n\t\t\tlet date = dateObj ? dateObj.toLocaleString() : null;\n\t\t\tPOPUP.showNotifWarning(date ?\n\t\t\t\t\t`Le traitement a bien Ã©tÃ© planifiÃ© le ${date} avec l'identifiant '${jobId}'.` :\n\t\t\t\t\t`Le traitement a bien Ã©tÃ© crÃ©Ã© avec l'identifiant '${jobId}'.`\n\t\t\t\t, this.jobsMgr);\n\t\t\tactionRefreshUi.executeIfAvailable(this.jobsMgr);\n\t\t} else\n\t\t\tPOPUP.showNotifError(`Le traitement n'a pas Ã©tÃ© crÃ©Ã©. Veuillez vÃ©rifier les paramÃ¨tres saisis.`, this.jobsMgr);\n\t\treturn result;\n\t}\n}\n\n/** Wrapper d'une action qui dÃ©clenche un refresh du tree */\nclass ActionWrapperRefresMgr<C extends IJobsCtx> extends ActionWrapper<C> {\n\tconstructor(public jobsMgr: JobsMgr<any, any>) {\n\t\tsuper();\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<any> {\n\t\tlet result = await super.execute(ctx, ev);\n\t\tif (result) await this.jobsMgr.fetchAll();// Difficile d'etre plus fin (maj des compteurs, ...)\n\t\tif (typeof result === \"object\") {\n\t\t\tlet job = result as JJobBase;\n\t\t\tthis.jobsMgr.currentJobsGrig.selectByJob([job]);\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/** Action qui affiche le dÃ©tail d'un job */\nexport class DisplayJobDetails extends Action<IJobsCtx> {\n\n\tconstructor(public jobsMgr: JobsMgr<any, any>) {\n\t\tsuper('focusItem');\n\t}\n\n\texecute(ctx: IJobsCtx, ev?: Event) {\n\t\tthis.jobsMgr.currentJobsGrig.showJobDetail(ctx.jobs);\n\t}\n}\n\n/** Rafraichissement de tous les fetchs des areas ouvertes */\nclass FreezeExecutorBtn<C extends JobsMgr<any, any>> extends Action<C> {\n\tconstructor() {\n\t\tsuper('freezeExecutor');\n\t\tthis._group = \"refresh\";\n\t\tthis._icon = \"/@skin@/core/actions/jobs/frozen.svg\";\n\t\tthis.requireEnabledPerm(\"action.jobsMgr#freeze.executor\");\n\t}\n\n\tgetLabel(ctx: C): string {\n\t\tlet currentStatus = this.getDatas(\"toggle\", ctx);\n\t\treturn `GÃ¨le/relance l'exÃ©cution des traitements en attente`;\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!ctx.reg.env.universe.executor.hasFeature(\"freezable\"))\n\t\t\treturn false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisToggle(ctx: C): this is IActionToggle<C> {\n\t\treturn true;\n\t}\n\n\tgetDatas(api: \"toggle\", ctx: C): boolean {\n\t\treturn ctx.frozenStatus;\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<void> {\n\t\tlet currentStatus = this.getDatas(\"toggle\", ctx);\n\t\tlet infos = await EXECUTOR.freezeExecutor(ctx.reg.env.universe.executor, !currentStatus);\n\t\tctx.fetchStats(infos);\n\t}\n}"]}