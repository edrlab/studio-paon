{"version":3,"sources":["/@back@/wsp/widgets/skinSet/skinSetSelector.tsx"],"names":["BaseElementAsync","MsgLabel","WSP","DOMSH","DOM","JSX","REG","ERROR","MxFormElement","GridSmall","GridDataHolderJsonTree","CellBuilderIconLabel","CellBuilderString","GridColDef","SkinSetSelector","[object Object]","init","this","config","reg","findReg","sr","attachShadow","SHADOWDOM_INIT","_initAndInstallSkin","localName","msgElt","appendChild","createElement","rootConfElt","name","tabIndex","class","type","value","id","onchange","onChangeEditMode","for","title","treeElt","î","columnDefs","setMaxWidth","setMinWidth","setCellBuilder","CellBuilderSkinSelected","setFlex","CellBuilderSkinImage","setIconWidth","setDescriptionFunc","row","version","getData","lineDrawer","hideHeaders","selType","skinScroll","skinOver","noResizableCol","dataHolder","emptyBody","style","c-resizable","uiEvents","on","ev","disabled","target","nodeName","line","_getLineFrom","querySelector","click","addEventListener","key","_getLine","getSelectedRow","refreshValidity","_initializeForm","_refreshAll","initStatus","reinitializeStarted","skinsets","getDatas","editMode","find","entry","selected","setValidity","valueMissing","dispatchEvent","CustomEvent","cancelable","bubbles","addPendingValidity","setStandardMsg","refreshPending","skinSetsList","env","wsp","document","documentElement","lang","setDatas","skinSets","e","setCustomMsg","log","skins","length","currentDatas","forEach","includes","code","val","tree","setAttr","removeAttribute","refreshUi","host","findHost","dispatchChangeEvent","rowDatas","addClass","removeClass","classList","contains","undefined","inputElt","checked","parentNode","datas","result","skinset","push","parent","propsJsonName","updateState","root","fillSkinSet","customElements","define","registerSkin","innerText","grid","skinSetSelector","onChangeSelectSkin","offset","getActiveRow","getDataByOffset","invalidateRows","preventDefault","getAttribute","_getValue","setHidden","firstElementChild","onerror","img","src","skinSetsIconUrl"],"mappings":"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","sourcesContent":["import {BaseElementAsync, MsgLabel, OSkinableInit} from \"back/commons/basis\";\nimport {IWspEnv, JSkinSetEntry, JSkinSets, JWspTypeInst, WSP} from \"lib/wsp/wsp\";\nimport {DOMSH} from \"lib/commons/xml/domsh\";\nimport {DOM, JSX} from \"lib/commons/xml/dom\";\nimport {IReg, REG} from \"lib/commons/registry\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {IPendingValidity, MxFormElement} from \"lib/commons/forms\";\nimport {GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridDataHolderJsonTree} from \"back/commons/widgets/tree\";\nimport {CellBuilderIconLabel, CellBuilderString, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {GridColDef, ICellBuilder, IGridDataRow, IGridLineDrawer} from \"back/commons/widgets/grid-core\";\n\nexport interface OSkinSetSelectorInit extends OSkinableInit {\n\treg: IReg<IWspEnv>\n\tdisabled?: boolean\n\tpropsJsonName?: string\n}\n\nexport interface IWspTypeDefMaker {\n\tfillWspTypeInst(): JWspTypeInst;\n}\n\n\nexport class SkinSetSelector extends MxFormElement(BaseElementAsync) implements IGridLineDrawer, IPendingValidity {\n\n\tprotected config: OSkinSetSelectorInit;\n\n\tprotected reg: IReg<IWspEnv>;\n\n\tprotected rootConfElt: HTMLFormElement;\n\n\tprotected treeElt: GridSmall;\n\n\tprotected msgElt: MsgLabel;\n\n\tprotected async _initialize(init: OSkinSetSelectorInit): Promise<any> {\n\t\tthis.config = init;\n\t\tthis.reg = this.findReg(init);\n\t\tconst sr = this.attachShadow(DOMSH.SHADOWDOM_INIT);\n\t\tthis._initAndInstallSkin(this.localName, init);\n\n\t\tthis.msgElt = sr.appendChild(<MsgLabel/>) as MsgLabel;\n\t\tthis.rootConfElt = sr.appendChild(<form name=\"skinset\"/>) as HTMLFormElement;\n\n\t\tthis.tabIndex = -1;\n\n\t\tthis.rootConfElt.appendChild(\n\t\t\t<div>\n\t\t\t\t<div class=\"choice\">\n\t\t\t\t\t<input type=\"radio\" name=\"editMode\" value=\"white\" id=\"editModeWhite\" onchange={this.onChangeEditMode}/>\n\t\t\t\t\t<label for=\"editModeWhite\" title=\"Inclure uniquement les éléments sélectionnés\">Liste d'inclusions</label>\n\t\t\t\t</div>\n\t\t\t</div>);\n\t\tthis.rootConfElt.appendChild(\n\t\t\t<div>\n\t\t\t\t<div class=\"choice\">\n\t\t\t\t\t<input type=\"radio\" name=\"editMode\" value=\"black\" id=\"editModeBlack\" onchange={this.onChangeEditMode}/>\n\t\t\t\t\t<label for=\"editModeBlack\" title=\"Tout inclure sauf les éléments sélectionnés\">Liste d'exclusions</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\n\t\tthis.treeElt = this.rootConfElt.appendChild(<GridSmall id=\"tree\" î={{\n\t\t\treg: this.reg,\n\t\t\tcolumnDefs: [\n\t\t\t\tnew GridColDef('selected').setMaxWidth(\"2em\").setMinWidth(\"2em\").setCellBuilder(new CellBuilderSkinSelected(\"selected\")),\n\t\t\t\tnew GridColDef('icon').setMinWidth('calc(var(--icon-size) * 2)').setFlex(\"unset\").setCellBuilder(new CellBuilderSkinImage()),\n\t\t\t\tnew GridColDef('title').setFlex('1rem', 1, 1).setMinWidth('10em')\n\t\t\t\t\t.setCellBuilder(new CellBuilderIconLabel(\"title\").setIconWidth(\"0px\").setDescriptionFunc((row: IGridDataRow) => {\n\t\t\t\t\t\tlet version = row.getData(\"version\");\n\t\t\t\t\t\treturn `Version ${version}`;\n\t\t\t\t\t})),\n\t\t\t],\n\t\t\tlineDrawer: this,\n\t\t\thideHeaders: true,\n\t\t\tselType: 'monoClick',\n\t\t\tskinScroll: 'scroll/small',\n\t\t\tskinOver: 'skinset-grid',\n\t\t\tnoResizableCol: true,\n\t\t\tdataHolder: new GridDataHolderJsonTree<JSkinSetEntry>(),\n\t\t\temptyBody: <div style=\"font-style:italic\">Aucun habillage graphique disponible</div>\n\t\t} as OGridSmallInit} c-resizable=\"\"/>) as GridSmall;\n\n\t\tthis.treeElt.uiEvents.on('rowDblclick', (row: GridDataRowJson<JSkinSetEntry> | null, ev: MouseEvent) => {\n\t\t\tif (!this.disabled)\n\t\t\t\tif ((ev.target as Node).nodeName != 'input') {\n\t\t\t\t\tlet line = this.treeElt._getLineFrom(ev.target as Node);\n\t\t\t\t\tif (line)\n\t\t\t\t\t\tline.querySelector(\"input\").click();\n\t\t\t\t}\n\t\t});\n\n\t\tthis.treeElt.addEventListener('keypress', (ev: KeyboardEvent) => {\n\t\t\tif (ev.key === ' ' || ev.key === 'Enter') {\n\t\t\t\tlet line = this.treeElt._getLine(this.treeElt.getSelectedRow());\n\t\t\t\tif (line)\n\t\t\t\t\tline.querySelector(\"input\").click();\n\t\t\t}\n\t\t});\n\n\t\tthis.addEventListener(\"change\", this.refreshValidity);\n\n\t\tthis._initializeForm(init);\n\t\tawait this._refreshAll();\n\t}\n\n\t/**\n\t * Fonctions de refresh UI\n\t */\n\n\tprotected refreshUi() {\n\t\tif (this.initStatus != \"pending\") {\n\t\t\tthis.reinitializeStarted(this._refreshAll());\n\t\t\tthis.refreshValidity();\n\t\t}\n\t}\n\n\tpublic refreshValidity() {\n\t\tlet skinsets = (this.treeElt.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>).getDatas();\n\t\tif (this.editMode === \"white\" && !skinsets?.find((entry => entry.selected)))\n\t\t\tthis.setValidity({valueMissing: true}, \"Veuillez inclure au moins un habillage graphique\");\n\t\telse if (this.editMode === \"black\" && !skinsets?.find((entry => !entry.selected)))\n\t\t\tthis.setValidity({valueMissing: true}, \"Veuillez ne pas exclure au moins un habillage graphique\");\n\t\telse\n\t\t\tthis.setValidity({}, \"\");\n\t}\n\n\tdispatchChangeEvent() {\n\t\tthis.dispatchEvent(new CustomEvent(\"change\", {cancelable: true, bubbles: true}));\n\t}\n\n\trefreshPending: Promise<JSkinSets>;\n\n\tprotected async _refreshAll(): Promise<void> {\n\t\tthis.addPendingValidity(this);\n\t\tthis.msgElt.setStandardMsg(\"loading\");\n\t\ttry {\n\t\t\t// - Load de la liste des skins avec l'état courant\n\t\t\tthis.refreshPending = WSP.skinSetsList(this.reg.env.wsp, this, document.documentElement.lang);\n\t\t\t// - Clean\n\t\t\t(this.treeElt.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>).setDatas([]);\n\t\t\tlet skinSets: JSkinSets = await this.refreshPending;\n\t\t\t// - affichage UI\n\t\t\tthis.editMode = skinSets.editMode;\n\t\t\t(this.treeElt.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>).setDatas(skinSets.skinSets);\n\t\t\tthis.msgElt.setStandardMsg(null);\n\t\t\tthis.refreshValidity();\n\t\t} catch (e) {\n\t\t\tthis.msgElt.setCustomMsg(\"Chargement impossible\", \"error\");\n\t\t\tawait ERROR.log(e);\n\t\t} finally {\n\t\t\tthis.refreshPending = null;\n\t\t}\n\t}\n\n\tprotected updateState(skins?: [\"white\" | \"black\", ...String[]]) {\n\t\tif (skins?.length >= 1) {\n\t\t\tconst currentDatas: JSkinSetEntry[] = (this.treeElt.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>).getDatas();\n\t\t\tthis.editMode = skins[0];\n\t\t\tcurrentDatas.forEach(entry => entry.selected = skins.includes(entry.code, 1));\n\t\t\t(this.treeElt.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>).setDatas(currentDatas);\n\t\t}\n\t}\n\n\tasync computeValidity(): Promise<void> {\n\t\tawait this.refreshPending;\n\t}\n\n\tformDisabledCallback(val: boolean) {\n\t\t(this.rootConfElt.querySelector(\"#editModeWhite\") as HTMLInputElement).disabled = val;\n\t\t(this.rootConfElt.querySelector(\"#editModeBlack\") as HTMLInputElement).disabled = val;\n\t\tlet tree = this.rootConfElt.querySelector(\"#tree\") as GridSmall;\n\t\tif (val) DOM.setAttr(tree, \"disabled\", \"true\");\n\t\telse tree.removeAttribute(\"disabled\");\n\t\tthis.refreshUi();//recalcul des cells avec input\n\t}\n\n\tprotected onChangeEditMode(this: HTMLInputElement, ev: Event): void {\n\t\tconst host: SkinSetSelector = DOMSH.findHost(this);\n\t\thost.editMode = this.value == \"white\" ? \"white\" : \"black\";\n\t\thost.dispatchChangeEvent();\n\t}\n\n\tredrawLine(row: GridDataRowJson<JSkinSetEntry>, line: HTMLElement): void {\n\t\tif (row.rowDatas.selected)\n\t\t\tDOM.addClass(line, \"selected\");\n\t\telse\n\t\t\tDOM.removeClass(line, \"selected\");\n\t}\n\n\t/* Retourne la logique de sélection courante */\n\tget editMode(): \"white\" | \"black\" | undefined {\n\t\tconst tree = this.rootConfElt.querySelector(\"#tree\") as GridSmall;\n\t\tif (tree.classList.contains(\"modewhite\"))\n\t\t\treturn \"white\"\n\t\tif (tree.classList.contains(\"modeblack\"))\n\t\t\treturn \"black\"\n\t\treturn undefined\n\t}\n\n\tset editMode(val: \"white\" | \"black\") {\n\t\tconst tree = this.rootConfElt.querySelector(\"#tree\") as GridSmall;\n\t\tif (this.editMode != val) {\n\t\t\tlet inputElt;\n\t\t\tif (val == \"white\") {\n\t\t\t\tDOM.addClass(tree, \"modewhite\");\n\t\t\t\tDOM.removeClass(tree, \"modeblack\");\n\t\t\t\tinputElt = this.rootConfElt.querySelector(\"#editModeWhite\") as HTMLInputElement;\n\t\t\t\tinputElt.checked = true;\n\t\t\t} else {\n\t\t\t\tDOM.addClass(tree, \"modeblack\");\n\t\t\t\tDOM.removeClass(tree, \"modewhite\");\n\t\t\t\tinputElt = this.rootConfElt.querySelector(\"#editModeBlack\") as HTMLInputElement;\n\t\t\t\tinputElt.checked = true;\n\t\t\t}\n\t\t\t// - Déplacement du tree\n\t\t\tinputElt.parentNode.parentNode.appendChild(tree);\n\t\t\t// - Inversion des états\n\t\t\tconst dataHolder: GridDataHolderJsonTree<JSkinSetEntry> = this.treeElt.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>;\n\t\t\tconst datas = dataHolder.getDatas();\n\t\t\tdatas.forEach((entry) => entry.selected = entry.selected ? false : true);\n\t\t\tdataHolder.setDatas(datas);\n\t\t}\n\t}\n\n\t/**\n\t * Retourne skinSet construit\n\t */\n\tfillSkinSet(): [\"white\" | \"black\", ...String[]] | null {\n\t\tlet tree = this.rootConfElt.querySelector(\"#tree\") as GridSmall;\n\t\tlet result: [\"white\" | \"black\", ...String[]] = [this.editMode];\n\t\tlet skinsets = (tree.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>).getDatas();\n\t\tskinsets.forEach((skinset) => {\n\t\t\tif (skinset.selected) result.push(skinset.code)\n\t\t});\n\t\treturn result;\n\t}\n\n\textractJson(parent: Dict<any>): boolean {\n\t\tif (parent && parent[this.config.propsJsonName]) {\n\t\t\tthis.updateState(parent[this.config.propsJsonName]);\n\t\t\treturn true;\n\t\t} else\n\t\t\treturn false;\n\t}\n\n\tfillJson(parent: any, root: any): void {\n\t\tif (this.config.propsJsonName) {\n\t\t\tparent[this.config.propsJsonName] = this.fillSkinSet();\n\t\t}\n\t}\n\n}\n\ncustomElements.define('skinset-selector', SkinSetSelector);\nREG.reg.registerSkin('skinset-selector', 1, /* language=CSS */ `\n\t:host {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tmin-height: 0;\n\t\tmin-width: 0;\n\t\tflex-direction: column;\n\t\toverflow: auto;\n\t\tuser-select: none;\n\t\tborder: 1px solid transparent;\n\t}\n\n\t:host(:invalid) {\n\t\tborder: 1px solid var(--error-color);\n\t\tbox-shadow: 0 0 2px var(--error-color);\n\t}\n\n\t.choice {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t#tree {\n\t\tmargin-top: .2em;\n\t\tmargin-inline-start: 2em;\n\t}\n\n\n`);\n\n/** Skin du grid **/\nREG.reg.registerSkin('skinset-grid', 1, /* language=CSS */ `\n\t:host(.modeblack) .line.selected,\n\t:host(.modewhite) .line:not(.selected) {\n\t\ttext-decoration: line-through;\n\t}\n\n\t.colW {\n\t\tborder-color: transparent !important;\n\t}\n\n\t.imgcell {\n\t\ttext-align: center;\n\t}\n\t\n\t.line{\n\t  align-items: center;\n\t}\n\n\timg {\n\t  max-height: calc(var(--icon-size) * 2);\n\t  width: calc(var(--icon-size) * 2);\n\t}\n`);\n\n/** Cell builder checked*/\nclass CellBuilderSkinSelected extends CellBuilderString {\n\n\tredrawCell(row: IGridDataRow, root: HTMLElement): void {\n\t\troot.innerText = \"\";\n\t\tconst grid = DOMSH.findHost(root) as GridSmall;\n\t\tconst skinSetSelector = DOMSH.findHost(grid) as SkinSetSelector;\n\t\tconst line = grid._getLineFrom(root);\n\n\t\tfunction onChangeSelectSkin(this: HTMLInputElement, ev: Event): void {\n\t\t\tconst offset = grid.getActiveRow();\n\t\t\tlet datas = (grid.dataHolder as GridDataHolderJsonTree<JSkinSetEntry>).getDataByOffset(offset);\n\t\t\tdatas.selected = this.checked;\n\t\t\tgrid.invalidateRows(offset, 1);\n\t\t\tskinSetSelector.dispatchChangeEvent();\n\t\t\tev.preventDefault();\n\t\t}\n\n\t\troot.appendChild(<input type=\"checkbox\" disabled={grid.getAttribute('disabled')} checked={this._getValue(row) === true ? true : null} onchange={onChangeSelectSkin}/>);\n\t}\n\n}\n\n/** Cell builder checked*/\nclass CellBuilderSkinImage implements ICellBuilder {\n\tgetColSortFn(): ((r1: IGridDataRow, r2: IGridDataRow) => number) | null {\n\t\treturn undefined;\n\t}\n\n\tredrawCell(row: IGridDataRow, root: HTMLElement): void {\n\t\tconst grid = DOMSH.findHost(root) as GridSmall;\n\t\tconst reg = REG.findReg(grid) as IReg<IWspEnv>;\n\t\tDOM.setHidden(root, false);\n\t\tif (!root.firstElementChild) {\n\t\t\tDOM.addClass(root, \"imgcell\");\n\t\t\troot.appendChild(<img onerror={function (this: HTMLImageElement, ev: Event) {\n\t\t\t\tDOM.setHidden(this, true);\n\t\t\t}}/>);\n\t\t}\n\t\tconst img = root.firstElementChild as HTMLImageElement;\n\t\timg.src = WSP.skinSetsIconUrl(reg.env.wsp, row.getData(\"code\"));\n\t}\n\n}"]}