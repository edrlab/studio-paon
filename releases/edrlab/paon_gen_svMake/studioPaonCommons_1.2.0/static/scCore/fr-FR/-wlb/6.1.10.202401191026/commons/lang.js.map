{"version":3,"sources":["/@lib@/commons/lang.ts"],"names":["LANG","[object Object]","left","right","i","length","arrayEquals","a","b","every","v","arr","members","s","undefined","push","fromClass","toClass","from","prototype","to","key","Object","getOwnPropertyNames","hasOwnProperty","defineProperty","getOwnPropertyDescriptor","str","offset","ins","substring","len","text","vars","idx","replace","p1","p2","parseInt","chars","dic","this","fuzzySearch","ch","charAt","fuzzy","get","charCodeAt","escape4Regexp","join","char","val","toString","_fuzzySearchDatas","_fuzzySearch","Map","group","split","set","promisesMap","async","array","mapper","concurrency","results","Array","poolSize","Math","min","pool","then","result","activeCount","racePool","filter","p","resolvedIdx","Promise","race","index","getKey","reduce","dict","item","EBytesUnits","LOCALE","languageToName","language","baseLang","ISOLANGLIST","has","name","nativeLanguageToName","nativeName","SORT_CMP","Intl","Collator","formatMinDuration","date1","date2","shortFormat","addSign","diffSec","abs","getTime","sign","indexOf","diffYear","floor","diffMonth","diffDay","week","diffHour","diffMin","bytes","forceUnit","showUnity","numberOptions","scaleLevel","po","bytesStr","toLocaleString","maximumFractionDigits","scaleStr","ko","mo","go","formatDateDigitsToSec","DateTimeFormat","year","month","day","hour","minute","second"],"mappings":"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","sourcesContent":["export const LANG = {\n\n\tin<T>(left: T, ...right: T[]) {\n\t\tfor (let i = 0; i < right.length; i++) if (left === right[i]) return true;\n\t\treturn false;\n\t},\n\n\t/** Egalité stricte de 2 tableaux. */\n\tarrayEquals: function (a: Array<any> | null, b: Array<any> | null): boolean {\n\t\tif (a == null || b == null) return a == b;\n\t\treturn a.length === b.length && a.every((v, i) => v === b[i]);\n\t},\n\n\t/** Ajoute des membres à un tableau si ils ne sont pas undefined. */\n\tpushIfDefined<T>(arr: T[], ...members: (T | undefined)[]): T[] {\n\t\tfor (let i = 0, s = members.length; i < s; i++) {\n\t\t\tconst v = members[i];\n\t\t\tif (v !== undefined) arr.push(v);\n\t\t}\n\t\treturn arr;\n\t},\n\n\t/**\n\t * Copie toutes les ownProps d'un prototype d'une classe sur un prototype d'une autre classe\n\t * si cette propriétée n'est pas déjà spécifiée sur la classe cible.\n\t *\n\t * ATTENTION : Si la chaine d'héritage diffère, les functions copiées NE doivent PAS contenir\n\t * le mot cle \"super\" (qui est résolu statiquement).\n\t *\n\t */\n\tcompleteClassProps(fromClass: any, toClass: any) {\n\t\tconst from = fromClass.prototype;\n\t\tconst to = toClass.prototype;\n\t\tfor (const key of Object.getOwnPropertyNames(from)) {\n\t\t\tif (key !== \"constructor\") {\n\t\t\t\tif (!to.hasOwnProperty(key)) Object.defineProperty(to, key, Object.getOwnPropertyDescriptor(from, key));\n\t\t\t}\n\t\t}\n\t},\n\n\t/** Insert une string dans une autre. */\n\tstringInsert(str: string, offset: number, ins: string) {\n\t\tif (str == null) return ins;\n\t\tif (offset === 0) {\n\t\t\treturn ins + str;\n\t\t} else if (offset === str.length) {\n\t\t\treturn str + ins;\n\t\t}\n\t\treturn str.substring(0, offset) + ins + str.substring(offset);\n\t},\n\n\t/** Supprime un fragment de string. */\n\tstringDelete(str: string, offset: number, len: number) {\n\t\tif (len === 0) return str;\n\t\tif (offset === 0) {\n\t\t\treturn str.substring(len);\n\t\t} else if (offset + len >= str.length) {\n\t\t\treturn str.substring(0, offset);\n\t\t} else {\n\t\t\treturn str.substring(0, offset) + str.substring(offset + len);\n\t\t}\n\t},\n\n\n\t/**\n\t * Implémentation partielle de l'API Formatter.\n\t *\n\t * Usage :\n\t *   LANG.formatStr(\"test %2$s %1$s %s %s %%\", \"a\", \"b\");\n\t *   retourne : \"test b a a b %\"\n\t */\n\tformatStr(text: string, vars: string[]) {\n\t\tif (!text || !vars) return text;\n\t\tlet idx = 0;\n\t\treturn text.replace(/(%(?:%|(?:(\\d+)\\$)?s))/g,\n\t\t\t(substring: string, p1: string, p2: string) => p1 == \"%%\" ? \"%\" : vars[(p2 ? parseInt(p2) - 1 : idx++)]\n\t\t);\n\t},\n\n\t/** Echappe une chaine de caractère pour être insérée dans le pattern d'une RegExp. */\n\tescape4Regexp(text: string): string {\n\t\treturn text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n\t},\n\n\t/**\n\t * Echappe une chaine de caractère pour être insérée dans le pattern d'une RegExp en intégrant la recherche\n\t * floue sur les caractères similaires (dépendant de la locale courante).\n\t */\n\tescape4RegexpFuzzy(text: string): string {\n\t\tconst chars = [] as string[];\n\t\tconst dic = this.fuzzySearch();\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tconst ch = text.charAt(i);\n\t\t\tconst fuzzy = dic.get(ch.charCodeAt(0));\n\t\t\tif (fuzzy !== undefined) {\n\t\t\t\tchars.push('[', fuzzy, ']');\n\t\t\t} else {\n\t\t\t\tchars.push(this.escape4Regexp(ch));\n\t\t\t}\n\t\t}\n\t\treturn chars.join('');\n\t},\n\n\tescapeChar4Regexp(char: string): string {\n\t\tconst val = char.charCodeAt(0).toString(16);\n\t\tswitch (val.length) {\n\t\tcase 1:\n\t\t\treturn \"\\\\x0\" + val;\n\t\tcase 2:\n\t\t\treturn \"\\\\x\" + val;\n\t\tcase 3:\n\t\t\treturn \"\\\\u0\" + val;\n\t\tcase 4:\n\t\t\treturn \"\\\\u\" + val;\n\t\t}\n\t},\n\n\t_fuzzySearchDatas: \"aa\",\n\n\t_fuzzySearch: null as Map<number, string>,\n\tfuzzySearch(): Map<number, string> {\n\t\tif (this._fuzzySearch === null) {\n\t\t\tconst dic = this._fuzzySearch = new Map<number, string>();\n\t\t\tfor (const group of this._fuzzySearchDatas.split(\"|\")) {\n\t\t\t\tfor (let i = 0; i < group.length; i++) dic.set(group.charCodeAt(i), group);\n\t\t\t}\n\t\t}\n\t\treturn this._fuzzySearch;\n\t},\n\n\t/**\n\t * Map un tableau vers un ensemble de promesses résolues en concurrentiel\n\t * @param array Le tableau à mapper puis résoudre\n\t * @param mapper La fonction de mappage item vers promesse\n\t * @param concurrency Nombre de promesses à résoudre en parallèle\n\t * @returns Un tableau des résultats des promesses dans l'ordre du tableau d'entrée\n\t */\n\tpromisesMap: async function <T, R>(\n\t\tarray: ArrayLike<T>,\n\t\tmapper: (item: T, index: number) => Promise<R>,\n\t\tconcurrency: number): Promise<R[]> {\n\n\t\tconst results = Array<R>(array.length);\n\n\t\t// Initialisation du pool\n\t\tconst poolSize = Math.min(concurrency, array.length);\n\t\tconst pool = new Array<Promise<any>>(poolSize);\n\t\t// Les promesses sont augmentées pour stocker le résultat puis retourner leur index dans le pool\n\t\tfor (let i = 0; i < poolSize; i++) pool[i] = mapper(array[i], i).then((result) => {\n\t\t\tresults[i] = result;\n\t\t\treturn i\n\t\t});\n\n\t\tlet activeCount = poolSize;\n\t\tlet i = poolSize;\n\n\t\twhile (activeCount) {\n\t\t\t// Utilisation d'un pool filtré pour la course lors du désemplissement\n\t\t\tconst racePool = activeCount === poolSize ? pool : pool.filter((p) => p);\n\t\t\tconst resolvedIdx = await Promise.race(racePool);\n\n\t\t\tif (i < array.length) {\n\t\t\t\t// Remplacement dans le pool de la promesse résolue par une nouvelle promesse augmentée\n\t\t\t\t((index: number) => {\n\t\t\t\t\tpool[resolvedIdx] = mapper(array[index], index).then((result) => {\n\t\t\t\t\t\tresults[index] = result;\n\t\t\t\t\t\treturn resolvedIdx;\n\t\t\t\t\t});\n\t\t\t\t})(i);\n\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tpool[resolvedIdx] = null;\n\t\t\t\tactiveCount--;\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t},\n\n\t/**\n\t * Transforme un tableau en dictionnaire. La clé est construit par une fonction en paramètre\n\t * @param array Tableau à transformer\n\t * @param getKey Fonction retournant la clé associée à chaque entrée du tableau, si retourne null l'entrée est éliminée.\n\t */\n\treduceToDict<T>(array: T[], getKey: (index: number, array?: T[]) => string | null): Dict<T> {\n\t\treturn array.reduce<Dict<T>>((dict, item, index, array) => {\n\t\t\tconst key = getKey(index, array);\n\t\t\tif (key != null) dict[key] = item;\n\t\t\treturn dict;\n\t\t}, {})\n\t}\n};\n\n\nexport const enum EBytesUnits {\n\tbytes, ko, mo, go, to, po\n}\n\nexport const LOCALE = {\n\t/**\n\t * Retourne le code de langue dans la lanhue courante de l'application\n\t * @param language : fr, fr-FR, ...\n\t * FIXME : exploiter Intl.DisplayNames de ECMAScript 2020\n\t */\n\tlanguageToName: function (language: string): string {\n\t\tconst baseLang = language.split(\"-\")[0];\n\t\tif (ISOLANGLIST.has(baseLang))\n\t\t\treturn ISOLANGLIST.get(baseLang).name;\n\t\treturn language;\n\t},\n\t/**\n\t * Retourne le code de langue dans la langue native du language\n\t * @param language : fr, fr-FR, ...\n\t * FIXME : exploiter Intl.DisplayNames de ECMAScript 2020\n\t */\n\tnativeLanguageToName: function (language: string): string {\n\t\tconst baseLang = language.split(\"-\")[0];\n\t\tif (ISOLANGLIST.has(baseLang))\n\t\t\treturn ISOLANGLIST.get(baseLang).nativeName;\n\t\treturn language;\n\t},\n\n\t/** Fonction de comparaison par défaut adapté à la locale pour le tri. */\n\tSORT_CMP: Intl.Collator('fr'),\n\n\t/**\n\t * Libellé d'une durée approximative entre deux dates.\n\t * @param addSign n'affiche aucun sign, le sign '-' si négatif, et/ou '+' si positif.\n\t */\n\tformatMinDuration: function (date1: Date, date2: Date, shortFormat?: boolean, addSign?: '-' | '+-'): string {\n\t\tconst diffSec = Math.abs(date2.getTime() - date1.getTime()) / 1000;\n\t\tconst sign = addSign ? (date2.getTime() > date1.getTime() ? addSign.indexOf('+') >= 0 ? '+' : '' : addSign.indexOf('-') >= 0 ? '-' : '') : '';\n\n\t\tconst diffYear = Math.floor(diffSec / 31536000); //365 * 86400\n\t\tif (diffYear >= 1) return shortFormat ? `${sign}${diffYear}a.` : diffYear > 1 ? `${sign}${diffYear} ans` : `1 an`;\n\n\t\tconst diffMonth = Math.floor(diffSec / 2592000); //30 * 86400\n\t\tif (diffMonth >= 1) return shortFormat ? `${sign}${diffMonth}M.` : diffMonth > 1 ? `${sign}${diffMonth} mois` : `1 mois`;\n\n\t\tconst diffDay = Math.floor(diffSec / 86400);\n\t\tif (diffDay >= 7) {\n\t\t\tconst week = Math.floor(diffDay / 7);\n\t\t\treturn shortFormat ? `${sign}${week}sem.` : diffDay >= 14 ? `${sign}${week} semaines` : `1 semaine`;\n\t\t}\n\t\tif (diffDay >= 1) return shortFormat ? `${sign}${diffDay}j.` : diffDay > 1 ? `${sign}${diffDay} jours` : `1 jour`;\n\n\t\tconst diffHour = Math.floor(diffSec / 3600);\n\t\tif (diffHour >= 1) return shortFormat ? `${sign}${diffHour}h.` : diffHour > 1 ? `${sign}${diffHour} heures` : `1 heure`;\n\n\t\tconst diffMin = Math.floor(diffSec / 60);\n\t\tif (diffMin >= 1) return shortFormat ? `${sign}${diffMin}min.` : diffMin > 1 ? `${sign}${diffMin} minutes` : `1 minute`;\n\n\t\treturn \"\"; // délai < 60s trop court\n\t},\n\n\t/**\n\t * Donne une forme lisible string d'un number de bytes\n\t * @param bytes\n\t * @param forceUnit : force l'unitée désirée. Par défaut, l'unité la plus pertinente est utilisée\n\t * @param showUnity : affiche/masque l'unité\n\t * @param numberOptions : paramètres d'affichage du chiffre\n\t */\n\tformatByteSize(bytes: number, forceUnit?: EBytesUnits, showUnity: boolean = true, numberOptions?: Intl.NumberFormatOptions): string {\n\t\tlet scaleLevel: EBytesUnits = 0;\n\t\tif (bytes == null || bytes < 0) return \"-\";\n\t\twhile ((bytes > 1024 || (forceUnit && scaleLevel < forceUnit)) && scaleLevel < EBytesUnits.po) {\n\t\t\tbytes = bytes / 1024\n\t\t\tscaleLevel++;\n\t\t}\n\t\tconst bytesStr = bytes.toLocaleString(\"fr\", numberOptions || {maximumFractionDigits: 2});\n\t\tif (!showUnity) return bytesStr;\n\n\t\tlet scaleStr;\n\t\tswitch (scaleLevel) {\n\t\tcase EBytesUnits.bytes :\n\t\t\tscaleStr = bytes > 1 ? \"Octets\" : \"Octet\";\n\t\t\tbreak;\n\t\tcase EBytesUnits.ko :\n\t\t\tscaleStr = \"Ko\";\n\t\t\tbreak;\n\t\tcase EBytesUnits.mo :\n\t\t\tscaleStr = \"Mo\";\n\t\t\tbreak;\n\t\tcase EBytesUnits.go :\n\t\t\tscaleStr = \"Go\";\n\t\t\tbreak;\n\t\tcase EBytesUnits.to :\n\t\t\tscaleStr = \"To\";\n\t\t\tbreak;\n\t\tcase EBytesUnits.po :\n\t\t\tscaleStr = \"Po\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tscaleStr = \"-\";\n\t\t\tbreak;\n\t\t}\n\t\treturn `${bytesStr} ${scaleStr}`;\n\t},\n\n\t/**\n\t * Formatter d'une date sous forme numérique avec précision jusqu'à la seconde.\n\t */\n\tformatDateDigitsToSec: new Intl.DateTimeFormat('fr', {\n\t\tyear: 'numeric', month: 'numeric', day: 'numeric',\n\t\thour: 'numeric', minute: 'numeric', second: 'numeric',\n\t})\n};\n\nconst ISOLANGLIST = new Map<string, { name: string, nativeName: string }>();\nISOLANGLIST.set(\"fr\", {name: \"Français\", nativeName: \"Français\"});\nISOLANGLIST.set(\"en\", {name: \"Anglais\", nativeName: \"English\"});\nISOLANGLIST.set(\"es\", {name: \"Espagnol\", nativeName: \"Español\"});\nISOLANGLIST.set(\"ar\", {name: \"Arabe\", nativeName: \"العربية\"});\n"]}