{"version":3,"sources":["/@lib@/commons/utils/htmlLit.ts"],"names":["AttributeCommitter","BooleanAttributePart","DefaultTemplateProcessor","directive","EventPart","NodePart","parts","PropertyCommitter","render","reparentNodes","templateFactory","TemplateResult","until","BaseElement","DOM","range","document","createRange","setStart","documentElement","ContextualTemplateResult","[object Object]","template","createElement","content","appendChild","createContextualFragment","this","getHTML","e","Error","AttrPrefixTemplateProcessor","element","name","strings","options","slice","eventContext","InitPart","ConstructorPart","value","initialize","attrPrefixTemplateProcessor","xhtml","values","SVGTemplateResult","SVG_NS","super","getTemplateElement","svgElement","firstChild","removeChild","svg","renderAppend","result","container","part","get","undefined","set","Object","assign","appendInto","setValue","commit"],"mappings":"OACQA,mBAAoBC,qBAAsBC,yBAA0BC,UAAWC,UAAWC,SAAgBC,MAAOC,kBAAmBC,OAAQC,cAAeC,gBAAiBC,mBAAe;OAC3LC,UAAM;OACNC,gBAAY;OACZC,QAAI;AAEZ,MAAMC,MAAQC,SAASC;AACvBF,MAAMG,SAASF,SAASG,gBAAiB;AAEzC,MAAMC,iCAAiCT,eACtCU,qBACC,IACC,MAAMC,SAAWN,SAASO,cAAc;AACxCD,SAASE,QAAQC,YAAYV,MAAMW,yBAAyBC,KAAKC;AACjE,OAAON,SACN,MAAOO,GACR,MAAMC,MAAM,0BAA4BH,KAAKC,aAKhD,MAAMG,oCAAoC7B,yBACzCmB,2BACCW,QAAkBC,KAAcC,QAChCC,SACA,GAAIF,KAAK,KAAO,IAAK,CACpB,OAAQA,KAAK,IACb,IAAK,IACJ,OAAO,IAAI1B,kBAAkByB,QAASC,KAAKG,MAAM,GAAIF,SAAS5B;AAC/D,IAAK,IACJ,MAAO,CAAC,IAAIF,UAAU4B,QAASC,KAAKG,MAAM,GAAID,QAAQE;AACvD,IAAK,IACJ,MAAO,CAAC,IAAIpC,qBAAqB+B,QAASC,KAAKG,MAAM,GAAIF;AAC1D,IAAK,IACJ,MAAO,CAAC,IAAII,SAASN;AACtB,IAAK,IACJ,MAAO,CAAC,IAAIO,gBAAgBP,WAG9B,OAAO,IAAIhC,mBAAmBgC,QAASC,KAAMC,SAAS5B,OAIxD,MAAMgC,SAILjB,YAAoBW,SAAAL,KAAAK,QAAAA,QAEpBX,SAASmB,OACRb,KAAKa,MAAQA,MAGdnB,SACC,GAAIM,KAAKK,mBAAmBnB,YAAa,CAExCc,KAAKK,QAAQS,WAAWd,KAAKa;AAC7Bb,KAAKK,QAAU;AACfL,KAAKa,MAAQ,OAKhB,MAAMD,gBAILlB,YAAoBW,SAAAL,KAAAK,QAAAA,QAEpBX,SAASmB,OACRb,KAAKa,MAAQA,MAGdnB,SACCM,KAAKa,MAAMb,KAAKK,UAIlB,MAAMU,4BAA8B,IAAIX;OAEjC,MAAMY,MAAQ,CAACT,WAAkCU,SACvD,IAAIxB,yBAAyBc,QAASU,OAAQ,QAASF;AAGxD,MAAMG,0BAA0BlC,eAC/BU,UACC,MAAO,eAAeP,IAAIgC,WAAWC,MAAMnB,kBAE5CP,qBACC,MAAMC,SAAWyB,MAAMC;AACvB,MAAMxB,QAAUF,SAASE;AACzB,MAAMyB,WAAazB,QAAQ0B;AAC3B1B,QAAQ2B,YAAYF;AACpBxC,cAAce,QAASyB,WAAWC;AAClC,OAAO5B,iBAIF,MAAM8B,IAAM,CAAClB,WAAkCU,SACrD,IAAIC,kBAAkBX,QAASU,OAAQ,MAAOF;OAOxC,MAAMW,aAAe,CAACC,OAAwBC,UAAuCpB,WAC3F,IAAIqB,KAAOlD,MAAMmD,IAAIF;AACrB,GAAIC,OAASE,UAAW,CACvBpD,MAAMqD,IAAIJ,UAAWC,KAAO,IAAInD,SAAQuD,OAAAC,OAAA,CAAEnD,gBAAAA,iBAAoByB;AAC9DqB,KAAKM,WAAWP,WAEjBC,KAAKO,SAAST;AACdE,KAAKQ;OAGErD,eAAgBH,OAAQL,UAAWS","sourcesContent":["import {RenderOptions} from 'res/litHtml/lib/render-options';\nimport {AttributeCommitter, BooleanAttributePart, DefaultTemplateProcessor, directive, EventPart, NodePart, Part, parts, PropertyCommitter, render, reparentNodes, templateFactory, TemplateResult} from \"res/litHtml/lit-html\";\nimport {until} from \"res/litHtml/directives/until\";\nimport {BaseElement} from \"back/commons/basis\";\nimport {DOM} from \"lib/commons/xml/dom\";\n\nconst range = document.createRange();\nrange.setStart(document.documentElement, 0);\n\nclass ContextualTemplateResult extends TemplateResult {\n\tgetTemplateElement(): HTMLTemplateElement {\n\t\ttry {\n\t\t\tconst template = document.createElement('template');\n\t\t\ttemplate.content.appendChild(range.createContextualFragment(this.getHTML()));\n\t\t\treturn template;\n\t\t} catch (e) {\n\t\t\tthrow Error(\"Invalid lit template : \" + this.getHTML());\n\t\t}\n\t}\n}\n\nclass AttrPrefixTemplateProcessor extends DefaultTemplateProcessor {\n\thandleAttributeExpressions(\n\t\telement: Element, name: string, strings: string[],\n\t\toptions: RenderOptions): Part[] {\n\t\tif (name[1] === '.') {\n\t\t\tswitch (name[0]) {\n\t\t\tcase 'p':\n\t\t\t\treturn new PropertyCommitter(element, name.slice(2), strings).parts;\n\t\t\tcase 'e':\n\t\t\t\treturn [new EventPart(element, name.slice(2), options.eventContext)];\n\t\t\tcase 'b':\n\t\t\t\treturn [new BooleanAttributePart(element, name.slice(2), strings)];\n\t\t\tcase 'i':\n\t\t\t\treturn [new InitPart(element)];\n\t\t\tcase 'c':\n\t\t\t\treturn [new ConstructorPart(element)];\n\t\t\t}\n\t\t}\n\t\treturn new AttributeCommitter(element, name, strings).parts;\n\t}\n}\n\nclass InitPart implements Part {\n\n\tvalue: any;\n\n\tconstructor(private element: Element) {}\n\n\tsetValue(value: any) {\n\t\tthis.value = value;\n\t}\n\n\tcommit() {\n\t\tif (this.element instanceof BaseElement) {\n\t\t\t//on init au commit pour que les précédents attributs aient été déjà affectés.\n\t\t\tthis.element.initialize(this.value);\n\t\t\tthis.element = null;\n\t\t\tthis.value = null;\n\t\t}\n\t}\n}\n\nclass ConstructorPart implements Part {\n\n\tvalue: (element: Element) => void;\n\n\tconstructor(private element: Element) {}\n\n\tsetValue(value: any) {\n\t\tthis.value = value;\n\t}\n\n\tcommit() {\n\t\tthis.value(this.element);\n\t}\n}\n\nconst attrPrefixTemplateProcessor = new AttrPrefixTemplateProcessor();\n\nexport const xhtml = (strings: TemplateStringsArray, ...values: any[]) =>\n\tnew ContextualTemplateResult(strings, values, 'xhtml', attrPrefixTemplateProcessor);\n\n\nclass SVGTemplateResult extends TemplateResult {\n\tgetHTML() {\n\t\treturn `<svg xmlns=\"${DOM.SVG_NS}\">${super.getHTML()}</svg>`;\n\t}\n\tgetTemplateElement() {\n\t\tconst template = super.getTemplateElement();\n\t\tconst content = template.content;\n\t\tconst svgElement = content.firstChild;\n\t\tcontent.removeChild(svgElement);\n\t\treparentNodes(content, svgElement.firstChild);\n\t\treturn template;\n\t}\n}\n\nexport const svg = (strings: TemplateStringsArray, ...values: any[]) =>\n\tnew SVGTemplateResult(strings, values, 'svg', attrPrefixTemplateProcessor);\n/**\n * Variante de render() qui ajoute les noeuds aux fils existants au lieu de les supprimer.\n * Très pratique pour les shadowRoot qui ont un ou plusieurs tag <style> au début.\n * Les appels suivants à renderAppend() remplaceront les noeuds ajoutés au 1er\n * appel.\n */\nexport const renderAppend = (result: TemplateResult, container: Element | DocumentFragment, options?: Partial<RenderOptions>) => {\n\tlet part = parts.get(container);\n\tif (part === undefined) {\n\t\tparts.set(container, part = new NodePart({templateFactory, ...options}));\n\t\tpart.appendInto(container);\n\t}\n\tpart.setValue(result);\n\tpart.commit();\n};\n\nexport {TemplateResult, render, directive, until};\n"]}