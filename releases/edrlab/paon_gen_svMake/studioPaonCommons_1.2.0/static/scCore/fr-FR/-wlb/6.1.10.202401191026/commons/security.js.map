{"version":3,"sources":["/@lib@/commons/security.ts"],"names":["ESrcRights","SEC","createSub","ctx","srcRoles","systemRights","businessObject","SecurityCtx","account","isSuperAdmin","[object Object]","this","Array","isArray","split","DEFAULT_ROLE_NAME","srcRi","MAIN_ROLES_PREFIX","DEFAULT_ROLES","FALLBACK_ROLE_NAME","FALLBACK_ROLES","injectFallbackRole","pRoles","find","role","startsWith","push"],"mappings":"OA0BA,IAAkBA,YAAlB,SAAkBA,YACjBA,WAAAA,WAAA,QAAA,GAAA;AACAA,WAAAA,WAAA,gBAAA,GAAA;AACAA,WAAAA,WAAA,SAAA,GAAA;AACAA,WAAAA,WAAA,UAAA,GAAA;AACAA,WAAAA,WAAA,kBAAA,IAAA;AACAA,WAAAA,WAAA,cAAA,IAAA;AACAA,WAAAA,WAAA,gBAAA,IAAA;AACAA,WAAAA,WAAA,kBAAA,KAAA;AACAA,WAAAA,WAAA,QAAA,KAAA;AACAA,WAAAA,WAAA,WAAA,KAAA;AACAA,WAAAA,WAAA,SAAA,GAAA;AACAA,WAAAA,WAAA,OAAA,KAAA,OAZD,CAAkBA,aAAAA,WAAU;OAgBtB,IAAWC,KAAjB,SAAiBA,KAEhB,SAAgBC,UAAUC,IAAkBC,SAA6BC,aAAuBC,gBAC/F,OAAO,IAAIC,YAAaJ,IAAoBK,QAASJ,SAAUD,IAAIM,aAAcH,eAAgBD,cADlFJ,IAAAC,UAASA;AAOzB,MAAaK,YAoBZG,YAAYF,QAAiBJ,SAA6BK,aAAwBH,eAAsBD,cAEvGM,KAAKH,QAAUA,SAAW;AAC1B,GAAIJ,WAAa,GAAI,CACpBO,KAAKP,SAAW,QACV,GAAIA,UAAY,KAAM,CAC5BO,KAAKP,SAAWQ,MAAMC,QAAQT,UAAYA,SAAWA,SAASU,MAAM,SAC9D,CACNH,KAAKP,SAAW,CAACH,IAAAc,mBAElB,GAAIV,cAAgB,KAAMM,KAAKK,MAAQX;AACvCM,KAAKF,aAAeA,eAAiB;AACrCE,KAAKL,eAAiBA,eAGvBI,WAAY,MAAO,wBAAwBC,KAAKH,4BAA4BG,KAAKL,mBAhC1EC,YAAAL,UAAYA;AAHPD,IAAAM,YAAWA;AAyCXN,IAAAgB,kBAAoB;AAIpBhB,IAAAc,kBAAoB;AAEpBd,IAAAiB,cAAgB,CAACjB,IAAAc;AAIjBd,IAAAkB,mBAAqB;AAErBlB,IAAAmB,eAAiB,CAACnB,IAAAkB;AAQ/B,SAAgBE,mBAAmBC,QAClC,IAAKA,OAAQ,MAAO;AACpB,IAAKA,OAAOC,KAAMC,MAASA,KAAKC,WAAWxB,IAAAgB,oBAC1CK,OAAOI,KAAKzB,IAAAkB;AACb,OAAOG,OAJQrB,IAAAoB,mBAAkBA,oBAtEnC,CAAiBpB,MAAAA,IAAG","sourcesContent":["/**\n * Contexte de sécurité associant les propriétés minimales du user connecté\n * et d'un objet métier permettant d'évaluer des permissions.\n */\nimport {ROLES} from \"lib/commons/roles\";\n\nexport interface ISecurityCtx {\n\n\t/** Liste de roles du user pour l'objet métier de ce contexte. */\n\tsrcRoles: string[];\n\n\t/** Droits systèmes de l'objet métier (ex: un item de l'historique est toujours read-only). voir Api Src. */\n\tsrcRi?: ESrcRights;\n\n\t/** Le user connecté est-il superAdmin ? (un user superAdmin court-circuite l'évaluation des permissions). */\n\tisSuperAdmin: boolean;\n\n\t/** Account du user connecté. */\n\taccount: string;\n}\n\nexport interface ISecurityCtxPointer {\n\tsecurityCtx?: ISecurityCtx;\n}\n\n/** cf com.scenari.src.feature.rights.SrcFeatureRights */\nexport const enum ESrcRights {\n\tread = 1,\n\tlistChildren = 2,\n\twrite = 4,\n\tremove = 8,\n\tremoveChildren = 16,\n\tcreateFile = 32,\n\tcreateFolder = 64,\n\tcreateChildren = 128,\n\tmove = 256,\n\tUPDATES = write | remove | removeChildren | createFile | createFolder | createChildren | move,\n\tREADS = read | listChildren,\n\tALL = READS | UPDATES\n}\n\n\nexport namespace SEC {\n\n\texport function createSub(ctx:ISecurityCtx, srcRoles: string | string[], systemRights?: number, businessObject?: any):SecurityCtx {\n\t\treturn new SecurityCtx((ctx as SecurityCtx).account, srcRoles, ctx.isSuperAdmin, businessObject, systemRights);\n\t}\n\n\t/**\n\t * Classe implémentant ISecurityCtx.\n\t */\n\texport class SecurityCtx implements ISecurityCtx {\n\n\t\t/** @deprecated TODOsc7 a suppr.*/\n\t\tstatic createSub = createSub\n\n\t\tsrcRoles: string[];\n\t\tsrcRi: number;\n\t\tisSuperAdmin: boolean;\n\t\taccount: string;\n\n\t\t/** Mémoire de l'objet métier associé (pour debug) */\n\t\tbusinessObject: any;\n\n\t\t/**\n\t\t * @param srcRoles\n\t\t *    - Si \"\" : aucun rôle de défini dans ce contexte. reg.hasPerm() retournera donc toujours false avec ce contexte.\n\t\t *    - Si string: liste de rôles séparés par des espaces\n\t\t *    - (array)  liste de rôles\n\t\t *    - null ou undefined : le contexte ne gère pas les rôles. Le rôle ~default est donc utilisé\n\t\t */\n\t\tconstructor(account: string, srcRoles: string | string[], isSuperAdmin?: boolean, businessObject?: any, systemRights?: number) {\n\t\t\t//Public properties\n\t\t\tthis.account = account || \"\";\n\t\t\tif (srcRoles === \"\") {\n\t\t\t\tthis.srcRoles = [];\n\t\t\t} else if (srcRoles != null) {\n\t\t\t\tthis.srcRoles = Array.isArray(srcRoles) ? srcRoles : srcRoles.split(\" \");\n\t\t\t} else {\n\t\t\t\tthis.srcRoles = [DEFAULT_ROLE_NAME];\n\t\t\t}\n\t\t\tif (systemRights != null) this.srcRi = systemRights;\n\t\t\tthis.isSuperAdmin = isSuperAdmin === true;\n\t\t\tthis.businessObject = businessObject;\n\t\t}\n\n\t\ttoString() {return `SecurityCtx{account:'${this.account}', businessObject:${this.businessObject}}`}\n\n\t}\n\n\t/** Préfix des rôles \"main\". TOut utilisateur *doit* posséder un et un seul rôle main\n\t * dans sa lise des rôles résolus */\n\texport const MAIN_ROLES_PREFIX = \"main:\";\n\n\t/** Rôle global *racine*\n\t * Remarque : utilisé également comme rôle courant dans les contextes sans gestion de rôle (ex: SCchain-standalone) */\n\texport const DEFAULT_ROLE_NAME = \"~default\";\n\n\texport const DEFAULT_ROLES = [DEFAULT_ROLE_NAME];\n\n\t/** Rôle par défaut \"main\" dans les contextes *authentifiés*\n\t * Remarque : extend DEFAULT_ROLE_NAME */\n\texport const FALLBACK_ROLE_NAME = \"main:~fallback\";\n\n\texport const FALLBACK_ROLES = [FALLBACK_ROLE_NAME];\n\n\t/** Injecte le rôle FALLBACK_ROLES dans pRoles si la liste des rôles ne possède pas de rôle \"main:\"\n\t * Remarque : cette fonction est à utiliser dans les contextes *avec* gestion de rôles\n\t * @see  eu.scenari.commons.security.RolesSet.injectFallback\n\t * @param pRoles : liste des rôles à analyser/compléter\n\t * @return pRoles ou [FALLBACK_ROLE_NAME] si pRoles est null\n\t */\n\texport function injectFallbackRole(pRoles: string[]): string[] {\n\t\tif (!pRoles) return [];\n\t\tif (!pRoles.find((role) => role.startsWith(MAIN_ROLES_PREFIX)))\n\t\t\tpRoles.push(FALLBACK_ROLE_NAME)\n\t\treturn pRoles;\n\t}\n\n\t/*\n\t export function getReadableAllowedSystemRights(right: number): string {\n\t let result = [];\n\t if ((right & 1) == 1) result.push(\"read\");\n\t if ((right & 2) == 2) result.push(\"listChildren\");\n\t if ((right & 4) == 4) result.push(\"write\");\n\t if ((right & 8) == 8) result.push(\"remove\");\n\t if ((right & 16) == 16) result.push(\"onChildren_Remove\");\n\t if ((right & 32) == 32) result.push(\"createFile\");\n\t if ((right & 64) == 64) result.push(\"createFolder\");\n\t if ((right & 128) == 128) result.push(\"onChildren_Create\");\n\t if ((right & 256) == 256) result.push(\"move\");\n\t return result.join(\", \");\n\t }\n\n\t export function getReadableDeniedSystemRights(right: number): string {\n\t let result = [];\n\t if ((right & 1) == 0) result.push(\"read\");\n\t if ((right & 2) == 0) result.push(\"listChildren\");\n\t if ((right & 4) == 0) result.push(\"write\");\n\t if ((right & 8) == 0) result.push(\"remove\");\n\t if ((right & 16) == 0) result.push(\"onChildren_Remove\");\n\t if ((right & 32) == 0) result.push(\"createFile\");\n\t if ((right & 64) == 0) result.push(\"createFolder\");\n\t if ((right & 128) == 0) result.push(\"onChildren_Create\");\n\t if ((right & 256) == 0) result.push(\"move\");\n\t return result.join(\", \");\n\t }\n\t */\n}\n"]}