{"version":3,"sources":["/@lib@/wsp/lcTask.ts"],"names":["SRC","ItemTypeTask","IO","DOM","SrcExecTransition","CDM","LIFECYCLE","UNKNOWN_STATE","DEFAULT_STATE","isTransAvailable","trans","lcState","itModel","lcProv","targetState","restrictForItemTypes","indexOf","getLcStates","has","restrictFromStates","hasLcOnItem","shortDesc","lcSt","emptySt","getLcState","name","tr","getLcTransitions","values","listTransitions","r","trMap","push","listAllTransitionActions","overrideExec","EInvolvement","ETaskStage","ExecTrans","[object Object]","this","doc","elt","createElementNS","TASK","TASK_NS","setAttribute","SetTitle","title","SetDeadline","dt","SetScheduleDt","SetDescription","root","importNode","AddComment","PutUserResp","account","resp","RemoveUserResp","isTask","sd","itSgn","includes","TAG_setDescription","TAG_addComment","async","saveTask","wsp","uiContext","refUri","updates","isAvailable","waitForAvailable","XMLDocument","documentElement","sharedXmlDoc","updt","toDom","appendChild","isNewSrcUri","extractItModelFromNewSrcUri","opts","srcNm","substring","wspServer","config","tasksUrl","fetchJson","qs","code","stringify","method","body","ser","deleteTask","srcIds","fd","FormData","append","join","fetchVoid","getDescriptionFromContent","lastUpdt","lastElementChild","order","firstElementChild","localName","namespaceURI","nextElementSibling","previousElementSibling","getDeadlineFromContent","getAttribute","getScheduledDtFromContent","getUsersFromContent","set","Set","add","delete","getInvolvementForAccounts","accounts","taskDesc","wspMetaUi","rspUsrs","inv","none","filterResps","filter","involvedUser","find","usr","itemType","getItemType","forEach","rspUsers","entryInv","findInvolvementForResps","taskType","respsCodes","i","length","all","valueOf","datas","resps","pRespDef","involvementRules","pRule","ifState","test","addInv","hideContextField","field","hidden","setHidden","label","findPreviousSibling","n","parent","parentElement","classList","contains"],"mappings":"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","sourcesContent":["import {JSrcFields, SRC, srcId, srcRef} from \"lib/wsp/src\";\nimport {IDatasLcSimpleTransition, ILcProvider, ItemTypeTask, WspMetaUi} from \"lib/wsp/wspMetaUi\";\nimport {Wsp} from \"lib/wsp/wsp\";\nimport {IO} from \"lib/commons/io/io\";\nimport {DOM} from \"lib/commons/xml/dom\";\nimport {SrcExecTransition} from \"back/wsp/actions/lcTaskActions\";\nimport {IShortDescCtx} from \"lib/wsp/item\";\nimport {JLastDatas} from \"lib/commons/lastDatas\";\nimport {CDM} from \"lib/commons/utils/cdm\";\n\n//************* LC **************\n\n\n/** Cycles de vies (NOTE: commun à tous les items de type task ou pas). */\nexport namespace LIFECYCLE {\n\texport const UNKNOWN_STATE = \"?\";\n\texport const DEFAULT_STATE = \"\";\n\n\t/** Evalue si une transition est disponible pour un item ou une task donnée. */\n\texport function isTransAvailable(trans: IDatasLcSimpleTransition, lcState: string, itModel: string, lcProv: ILcProvider): boolean {\n\t\tif (lcState === trans.targetState) return false; //ce src est déjà dans le state cible de cette transition.\n\t\tif (trans.restrictForItemTypes && trans.restrictForItemTypes.indexOf(itModel) < 0) return false;\n\t\tif (lcState && !lcProv.getLcStates().has(lcState)) lcState = LIFECYCLE.UNKNOWN_STATE;\n\t\tif (trans.restrictFromStates && trans.restrictFromStates.indexOf(lcState || LIFECYCLE.DEFAULT_STATE) < 0) return false;\n\t\t//if(trans.excludeFromStates && trans.excludeFromStates.indexOf(lcState||LIFECYCLE.DEFAULT_STATE)>=0) return false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * Evalue si cet item dispose d'un cycle de vie :\n\t * - un état est défini sur l'item et si cet état est \"\", vérifie que cet état vide a un name explicite\n\t * - OU une transition est disponible.\n\t */\n\texport function hasLcOnItem(shortDesc: JSrcFields, lcProv: ILcProvider) {\n\t\tif (shortDesc.lcSt == null) return false; //le backend ne propose pas le LC (fs)\n\t\tif (lcProv.getLcStates() === null) return false; //le wspMetaUi (ie lcProv) ne définit aucun cycle de vie\n\t\tif (shortDesc.lcSt) return true; // lc !== \"\", note même si inconnu (chgt de modèle) on affiche pour permettre de revenir dans un état connu\n\t\tif (shortDesc.lcSt === \"\") {\n\t\t\t//Lc vide est-il configuré comme visible ?\n\t\t\tconst emptySt = lcProv.getLcState(\"\");\n\t\t\tif (emptySt && emptySt.name) return true; //pas de lc mais lc vide définit avec un libellé\n\t\t}\n\t\tfor (const tr of lcProv.getLcTransitions().values()) if (isTransAvailable(tr, shortDesc.lcSt, shortDesc.itModel, lcProv)) return true;\n\t\treturn false;\n\t}\n\n\texport function listTransitions(shortDesc: JSrcFields, lcProv: ILcProvider): IDatasLcSimpleTransition[] {\n\t\tconst r: IDatasLcSimpleTransition[] = [];\n\t\tconst trMap = lcProv.getLcTransitions();\n\t\tif (trMap) for (const tr of trMap.values()) if (isTransAvailable(tr, shortDesc.lcSt, shortDesc.itModel, lcProv)) r.push(tr);\n\t\treturn r;\n\t}\n\n\texport function listAllTransitionActions<C extends IShortDescCtx>(lcProv: ILcProvider, overrideExec?: (ctx: C, ev?: Event) => any): SrcExecTransition<C>[] {\n\t\tconst r: SrcExecTransition<C>[] = [];\n\t\tconst trMap = lcProv.getLcTransitions();\n\t\tif (trMap) for (const tr of trMap.values()) r.push(new SrcExecTransition(tr, lcProv, overrideExec));\n\t\treturn r;\n\t}\n}\n\n//************* Tasks **************\n\n/** Involvements */\nexport const enum EInvolvement {\n\t'none' = 0,\n\t'executor' = 1,\n\t'follower' = 2,\n\t'all' = 3\n}\n\n/** Etat d'une tâche. */\nexport const enum ETaskStage {\n\t'completed' = 'completed',\n\t'pending' = 'pending',\n\t'forthcoming' = 'forthcoming'\n}\n\n\n/** Données initialies à la création d'une task ou à la restauration d'une task. */\nexport interface JTaskStates extends JLastDatas {\n\n\ttrans?: string\n\n\tti?: string\n\n\tscheduledDt?: number\n\n\tdeadlinedDt?: number\n\n\tresps?: {\n\t\t[resp: string]: string[] /* accounts */\n\t}\n\n\t/** Fragment XML correctement formé (ns inclus). */\n\tdesc?: string\n\n\t/** Fragment XML correctement formé (ns inclus). */\n\tcmt?: string\n}\n\n/** Actions élémentaires pour modifier une task. */\nexport interface IUpdateTask {\n\ttoDom(doc: Document): Element\n}\n\nexport class ExecTrans implements IUpdateTask {\n\tconstructor(public trans: string) {}\n\n\ttoDom(doc: Document): Element {\n\t\tconst elt = doc.createElementNS(TASK.TASK_NS, \"stk:execTransition\");\n\t\telt.setAttribute(\"transition\", this.trans);\n\t\treturn elt;\n\t}\n}\n\nexport class SetTitle implements IUpdateTask {\n\tconstructor(public title: string) {}\n\n\ttoDom(doc: Document): Element {\n\t\tconst elt = doc.createElementNS(TASK.TASK_NS, \"stk:setTitle\");\n\t\telt.setAttribute(\"newTitle\", this.title);\n\t\treturn elt;\n\t}\n}\n\nexport class SetDeadline implements IUpdateTask {\n\tconstructor(public dt: string) {}\n\n\ttoDom(doc: Document): Element {\n\t\tconst elt = doc.createElementNS(TASK.TASK_NS, \"stk:setDeadline\");\n\t\telt.setAttribute(\"newDt\", this.dt);\n\t\treturn elt;\n\t}\n}\n\nexport class SetScheduleDt implements IUpdateTask {\n\tconstructor(public dt: string) {}\n\n\ttoDom(doc: Document): Element {\n\t\tconst elt = doc.createElementNS(TASK.TASK_NS, \"stk:setScheduledDt\");\n\t\telt.setAttribute(\"newDt\", this.dt);\n\t\treturn elt;\n\t}\n}\n\nexport class SetDescription implements IUpdateTask {\n\tconstructor(public root: Element) {}\n\n\ttoDom(doc: Document): Element {\n\t\treturn doc.importNode(this.root, true);\n\t}\n}\n\nexport class AddComment implements IUpdateTask {\n\tconstructor(public root: Element) {}\n\n\ttoDom(doc: Document): Element {\n\t\treturn doc.importNode(this.root, true);\n\t}\n}\n\nexport class PutUserResp implements IUpdateTask {\n\tconstructor(public account: string, public resp: string) {}\n\n\ttoDom(doc: Document): Element {\n\t\tconst elt = doc.createElementNS(TASK.TASK_NS, \"stk:putUser\");\n\t\telt.setAttribute(\"account\", this.account);\n\t\telt.setAttribute(\"resp\", this.resp);\n\t\treturn elt;\n\t}\n}\n\nexport class RemoveUserResp implements IUpdateTask {\n\tconstructor(public account: string, public resp: string) {}\n\n\ttoDom(doc: Document): Element {\n\t\tconst elt = doc.createElementNS(TASK.TASK_NS, \"stk:removeUser\");\n\t\telt.setAttribute(\"account\", this.account);\n\t\telt.setAttribute(\"resp\", this.resp);\n\t\treturn elt;\n\t}\n}\n\nexport namespace TASK {\n\n\texport function isTask(sd: JSrcFields) {\n\t\treturn sd && sd.itSgn && sd.itSgn.includes(\"#Task\");\n\t}\n\n\texport const TASK_NS = \"scenari.eu:task:1.0\";\n\texport const TAG_setDescription = \"stk:setDescription\";\n\texport const TAG_addComment = \"stk:addComment\";\n\n\t/** Ne retourne que le srcUri, utile en création de tasks. */\n\texport async function saveTask(wsp: Wsp, uiContext: HTMLElement, refUri: srcRef, updates: IUpdateTask[] | XMLDocument): Promise<JSrcFields> {\n\t\tif (!wsp.isAvailable) await wsp.waitForAvailable(uiContext);\n\t\tlet root: Element;\n\t\tif (updates instanceof XMLDocument) {\n\t\t\troot = updates.documentElement;\n\t\t} else {\n\t\t\tconst doc = DOM.sharedXmlDoc();\n\t\t\troot = doc.createElementNS(TASK.TASK_NS, \"stk:updateTask\");\n\t\t\tfor (const updt of updates) {\n\t\t\t\tconst elt = updt.toDom(doc);\n\t\t\t\tif (elt) root.appendChild(elt);\n\t\t\t}\n\t\t}\n\t\tif (SRC.isNewSrcUri(refUri)) {\n\t\t\tconst itModel = SRC.extractItModelFromNewSrcUri(refUri);\n\t\t\tconst opts = {srcNm: itModel.substring(4)/*jump stk_*/ + \".tk\"};\n\t\t\treturn wsp.wspServer.config.tasksUrl.fetchJson<JSrcFields>(IO.qs(\"cdaction\", \"AddTask\", \"param\", wsp.code, \"options\", CDM.stringify(opts), \"fields\", \"srcUri\"), {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tbody: DOM.ser(root)\n\t\t\t});\n\t\t} else {\n\t\t\treturn wsp.wspServer.config.tasksUrl.fetchJson<JSrcFields>(IO.qs(\"cdaction\", \"UpdateTask\", \"param\", wsp.code, \"taskRefUri\", refUri, \"fields\", \"srcUri\"), {\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tbody: DOM.ser(root)\n\t\t\t});\n\t\t}\n\t}\n\n\texport async function deleteTask(wsp: Wsp, uiContext: HTMLElement, srcIds: srcId[]): Promise<void> {\n\t\tif (!wsp.isAvailable) await wsp.waitForAvailable(uiContext);\n\t\tconst fd = new FormData();\n\t\tfd.append(\"taskSrcIds\", srcIds.join('\\t'));\n\t\treturn wsp.wspServer.config.tasksUrl.fetchVoid(IO.qs(\"cdaction\", \"DeleteTasks\", \"param\", wsp.code), {method: \"POST\", body: fd});\n\t}\n\n\t/** Recherche la description de la tâche, ie le dernier tag stk:setDescription dans le contenu */\n\texport function getDescriptionFromContent(doc: Document): Element {\n\t\tif (doc) {\n\t\t\tlet lastUpdt = doc.documentElement.lastElementChild;\n\t\t\twhile (lastUpdt) {\n\t\t\t\tlet order = lastUpdt.firstElementChild;\n\t\t\t\twhile (order) {\n\t\t\t\t\tif (order.localName === \"setDescription\" && order.namespaceURI === TASK_NS) return order;\n\t\t\t\t\torder = order.nextElementSibling;\n\t\t\t\t}\n\t\t\t\tlastUpdt = lastUpdt.previousElementSibling;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Recherche la deadline de la task (dernier tag stk:setDeadline dans le contenu) */\n\texport function getDeadlineFromContent(doc: Document): string {\n\t\tif (doc) {\n\t\t\tlet lastUpdt = doc.documentElement.lastElementChild;\n\t\t\twhile (lastUpdt) {\n\t\t\t\tlet order = lastUpdt.firstElementChild;\n\t\t\t\twhile (order) {\n\t\t\t\t\tif (order.localName === \"setDeadline\" && order.namespaceURI === TASK_NS) return order.getAttribute(\"newDt\");\n\t\t\t\t\torder = order.nextElementSibling;\n\t\t\t\t}\n\t\t\t\tlastUpdt = lastUpdt.previousElementSibling;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Recherche la date de planif de la task (dernier tag stk:setScheduledDt dans le contenu). */\n\texport function getScheduledDtFromContent(doc: Document): string {\n\t\tif (doc) {\n\t\t\tlet lastUpdt = doc.documentElement.lastElementChild;\n\t\t\twhile (lastUpdt) {\n\t\t\t\tlet order = lastUpdt.firstElementChild;\n\t\t\t\twhile (order) {\n\t\t\t\t\tif (order.localName === \"setScheduledDt\" && order.namespaceURI === TASK_NS) return order.getAttribute(\"newDt\");\n\t\t\t\t\torder = order.nextElementSibling;\n\t\t\t\t}\n\t\t\t\tlastUpdt = lastUpdt.previousElementSibling;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/** Retourne le ou les users avec une resp donnée à partir de l'historique. */\n\texport function getUsersFromContent(doc: Document, resp: string): Set<string> {\n\t\tconst set = new Set<string>();\n\t\tif (doc) {\n\t\t\tlet updt = doc.documentElement.firstElementChild;\n\t\t\twhile (updt) {\n\t\t\t\tlet order = updt.firstElementChild;\n\t\t\t\twhile (order) {\n\t\t\t\t\tif (order.localName === \"putUser\" && order.namespaceURI === TASK_NS) {\n\t\t\t\t\t\tif (order.getAttribute(\"resp\").indexOf(resp) >= 0) set.add(order.getAttribute(\"account\"));\n\t\t\t\t\t} else if (order.localName === \"removeUser\" && order.namespaceURI === TASK_NS) {\n\t\t\t\t\t\tif (order.getAttribute(\"resp\").indexOf(resp) >= 0) set.delete(order.getAttribute(\"account\"));\n\t\t\t\t\t}\n\t\t\t\t\torder = order.nextElementSibling;\n\t\t\t\t}\n\t\t\t\tupdt = updt.nextElementSibling;\n\t\t\t}\n\t\t}\n\t\treturn set;\n\t}\n\n\t/** Retourne l'implication d'une liste de users pour une task donnée. */\n\texport function getInvolvementForAccounts(accounts: string[] | '*', taskDesc: JSrcFields, wspMetaUi: WspMetaUi): EInvolvement {\n\t\tif (taskDesc && taskDesc.rspUsrs && accounts && wspMetaUi) {\n\t\t\tlet inv: EInvolvement = EInvolvement.none;\n\t\t\tconst filterResps = accounts == '*' ? taskDesc.rspUsrs : taskDesc.rspUsrs.filter((involvedUser) => {return accounts.find((account) => account == involvedUser.usr && involvedUser.resp)});\n\t\t\tif (filterResps) {\n\t\t\t\tconst itemType = wspMetaUi.getItemType(taskDesc.itModel);\n\t\t\t\tfilterResps.forEach((rspUsers) => {\n\t\t\t\t\tconst entryInv = itemType instanceof ItemTypeTask ? TASK.findInvolvementForResps(itemType, rspUsers.resp, taskDesc) : EInvolvement.none;\n\t\t\t\t\tinv = inv | entryInv;\n\t\t\t\t});\n\t\t\t\treturn inv;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\texport function findInvolvementForResps(taskType: ItemTypeTask, respsCodes: string[], taskDesc: JSrcFields): EInvolvement {\n\t\tlet inv: EInvolvement = EInvolvement.none;\n\t\tif (respsCodes) for (let i = 0; i < respsCodes.length && inv !== EInvolvement.all.valueOf(); i++) {\n\t\t\tconst resp = taskType.datas.resps ? taskType.datas.resps.find((pRespDef) => pRespDef.code === respsCodes[i]) : null;\n\t\t\tif (resp && resp.involvementRules) {\n\t\t\t\tresp.involvementRules.forEach((pRule) => {\n\t\t\t\t\tif (pRule.ifState) {\n\t\t\t\t\t\tif (taskDesc && pRule.ifState.test(taskDesc.lcSt))\n\t\t\t\t\t\t\tinv |= pRule.addInv;\n\t\t\t\t\t} else\n\t\t\t\t\t\tinv |= pRule.addInv;\n\t\t\t\t\tif (inv === EInvolvement.all.valueOf()) return EInvolvement.all;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn inv;\n\t}\n\n\n\t/** Masque un field et son contexte graphique : son label précédent voir ses containers s'ils contiennent la class \"childDep\". */\n\texport function hideContextField(field: HTMLElement, hidden: boolean) {\n\t\tDOM.setHidden(field, hidden);\n\t\tconst label = DOM.findPreviousSibling(field, (n: Node): n is HTMLElement => n.localName === \"label\");\n\t\tif (label) DOM.setHidden(label, hidden);\n\t\tlet parent = field.parentElement;\n\t\twhile (parent && parent.classList.contains(\"childDep\")) {\n\t\t\tDOM.setHidden(parent, hidden);\n\t\t\tparent = parent.parentElement;\n\t\t}\n\t}\n\n}\n"]}