{"version":3,"sources":["/@lib@/commons/lastDatas.ts"],"names":["DOMSH","EventMgr","isLastDatasBuilder","o","buildLastDatas","isLastDatasHolder","getParentLastDatas","LASTDATAS","buildLastDatasHooks","buildDocumentLastDatas","datas","document","body","emit","from","includeFrom","Element","shadowRoot","tw","ownerDocument","createTreeWalker","nextNode","currentNode","nextSibling","parentNode","forChild","parent","findLogicalFlatParent","getLastDatas","key"],"mappings":"OAAQA,UAAM;OACNC,aAAS;OAqBX,SAAUC,mBAAmBC,GAAiC,OAAOA,UAAYA,EAAEC,iBAAmB,kBAatG,SAAUC,kBAAkBF,GAAgC,OAAOA,UAAYA,EAAEG,qBAAuB,kBAYxG,IAAWC,WAAjB,SAAiBA,WAEHA,UAAAC,oBAAsB,IAAIP;AAGvC,SAAgBQ,yBACf,MAAMC,MAAQN,eAAe,GAAIO,SAASC,KAAM;AAChDL,UAAAC,oBAAoBK,KAAKH;AACzB,OAAOA,MAHQH,UAAAE,uBAAsBA;AAUtC,SAAgBL,eAAeM,MAAmBI,KAAYC,aAC7D,IAAKD,KAAM,OAAOJ;AAClB,GAAIK,aAAeb,mBAAmBY,MAAO,CAC5CA,KAAKV,eAAeM,WACd,CACN,GAAIK,aAAeD,gBAAgBE,SAAWF,KAAKG,WAAYb,eAAeM,MAAOI,KAAKG;AAC1F,MAAMC,GAAKJ,KAAKK,cAAcC,iBAAiBN;AAC/C,GAAII,GAAGG,WAAY,MAAO,KAAM,CAC/B,GAAInB,mBAAmBgB,GAAGI,aAAc,CACvCJ,GAAGI,YAAYlB,eAAeM;AAE9B,OAAQQ,GAAGK,cAAe,GAAIL,GAAGM,eAAiBV,KAAM,OAAOJ,UACzD,CACN,GAAKQ,GAAGI,YAAwBL,WAAYb,eAAeM,MAAQQ,GAAGI,YAAwBL;AAC9F,IAAKC,GAAGG,WAAY,OAAOX,QAI9B,OAAOA,MAlBQH,UAAAH,eAAcA;AAwB9B,SAAgBE,mBAAmBmB,UAClC,MAAMC,OAAS1B,MAAM2B,sBAAsBF,SAAU,KAAMpB;AAC3D,OAAOqB,OAASA,OAAOpB,mBAAmBmB,UAAY,KAFvClB,UAAAD,mBAAkBA;AAWlC,SAAgBsB,aAAmCH,SAAuBI,KACzE,GAAIA,KAAO,KAAM,OAAO;AACxB,MAAMH,OAASpB,mBAAmBmB;AAClC,OAAOC,OAASA,OAAOG,KAAO,KAHftB,UAAAqB,aAAYA,cAlD7B,CAAiBrB,YAAAA,UAAS","sourcesContent":["import {DOMSH} from \"lib/commons/xml/domsh\";\nimport {EventMgr} from \"lib/commons/events\";\n\n\n/**\n * Propriétés json de l'état précis d'un contexte graphique en vue de pouvoir être restaurée ultérieurement.\n */\nexport type JLastDatas = { [k: string]: Jsonisable }\n\n/**\n * Construit un json de l'état en cours du widget en vue d'une restauration ultérieure.\n */\nexport interface ILastDatasBuilder {\n\t/**\n\t * Si cette fonction est déclarée sur un élément dom, l'appelant ne parcourera pas ses noeuds fils et shadows,\n\t * c'est à l'implémentation de cette fonction de le gérer.\n\t *\n\t * @see LASTDATAS.buildLastDatas()\n\t */\n\tbuildLastDatas?(parentLastDatas: JLastDatas): void\n}\n\nexport function isLastDatasBuilder(o: any): o is ILastDatasBuilder {return o && typeof o.buildLastDatas === 'function'}\n\n/**\n * Doit être implémenté par les containers de sous-widgets qui ajoutent un niveau de profondeur\n * à l'arbre des lastDatas via ILastDatasBuilder.buildLastDatas().\n *\n * Permet aux  sous-widgets de retrouver le \"même\" parentLastDatas qui avait été passé\n * en paramètre à ILastDatasBuilder.buildLastDatas(parentLastDatas: JLastDatas).\n */\nexport interface ILastDatasHolder extends HTMLElement {\n\tgetParentLastDatas(forChild: HTMLElement): JLastDatas | null\n}\n\nexport function isLastDatasHolder(o: any): o is ILastDatasHolder {return o && typeof o.getParentLastDatas === 'function'}\n\n/** Paramètres d'initialisation d'un élément pour déclarer des lastDatas. */\nexport interface OLastDatasInit {\n\n\t/** Key à utiliser pour le buildLastDatas() */\n\tlastDatasKey?: string\n\n\t/** lastDatas pour l'initialisation (correspondant à l'objet pointé par lastDatasKey). */\n\tlastDatas?: JLastDatas\n}\n\nexport namespace LASTDATAS {\n\n\texport const buildLastDatasHooks = new EventMgr<(datas: JLastDatas) => void>();\n\n\t/** Construction de tous les lastDatas pour la page entière. */\n\texport function buildDocumentLastDatas(): JLastDatas {\n\t\tconst datas = buildLastDatas({}, document.body, true);\n\t\tbuildLastDatasHooks.emit(datas);\n\t\treturn datas;\n\t}\n\n\t/**\n\t * Parcourt la descendance de from pour exécuter tous les ILastDatasBuilder.buildLastDatas()\n\t * contenus dans from.\n\t */\n\texport function buildLastDatas(datas: JLastDatas, from: Node, includeFrom?: boolean): JLastDatas {\n\t\tif (!from) return datas;\n\t\tif (includeFrom && isLastDatasBuilder(from)) {\n\t\t\tfrom.buildLastDatas(datas);\n\t\t} else {\n\t\t\tif (includeFrom && from instanceof Element && from.shadowRoot) buildLastDatas(datas, from.shadowRoot);\n\t\t\tconst tw = from.ownerDocument.createTreeWalker(from);\n\t\t\tif (tw.nextNode()) while (true) {\n\t\t\t\tif (isLastDatasBuilder(tw.currentNode)) {\n\t\t\t\t\ttw.currentNode.buildLastDatas(datas);\n\t\t\t\t\t//On ne parcourt pas les fils.\n\t\t\t\t\twhile (!tw.nextSibling()) if (tw.parentNode() === from) return datas;\n\t\t\t\t} else {\n\t\t\t\t\tif ((tw.currentNode as Element).shadowRoot) buildLastDatas(datas, (tw.currentNode as Element).shadowRoot);\n\t\t\t\t\tif (!tw.nextNode()) return datas;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn datas;\n\t}\n\n\t/**\n\t * Retrouve dans le contexte le parentLastDatas pour relier les propriétés srockées dans le lastDatas.\n\t */\n\texport function getParentLastDatas(forChild: HTMLElement): JLastDatas | null {\n\t\tconst parent = DOMSH.findLogicalFlatParent(forChild, null, isLastDatasHolder);\n\t\treturn parent ? parent.getParentLastDatas(forChild) : null;\n\t}\n\n\t/**\n\t *  Usage type (cf IEltInitable.buildInitFromAtts()) :\n\t *  buildInitFromAtts(init){\n\t * \t\tinit.lastDatas = LASTDATAS.getLastDatas<JLDXxx>(this, this.getAttribute(\"last-datas\"));\n\t * \t}\n\t */\n\texport function getLastDatas<T extends JLastDatas>(forChild: HTMLElement, key: string): T | null {\n\t\tif (key == null) return null;\n\t\tconst parent = getParentLastDatas(forChild);\n\t\treturn parent ? parent[key] : null;\n\t}\n}\n"]}