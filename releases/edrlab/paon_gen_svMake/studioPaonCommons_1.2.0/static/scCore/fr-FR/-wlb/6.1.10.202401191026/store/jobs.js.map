{"version":3,"sources":["/@lib@/store/jobs.tsx"],"names":["JSX","JobBuilderAction","UiJobFactory","InputArea","InputChoiceArea","SelectArea","LANG","RelaunchCidTaskBaseJobFactory","[object Object]","id","super","this","_processings","_choiceRebuildVersions","setUiJobSng","setLabel","setJobFactoryCode","setJobBuilder","addJobDataValidity","async","props","ctx","length","preconditions","addJobDataBuilder","datasPending","jobsParameters","forEach","code","offset","processing","getProcessings","find","entry","isVcb","_rebuildAllVersions","undefined","addJobDialogAreas","processindsDataSet","sort","prA","prB","name","localeCompare","proc","label","setMultiple","setDataset","setRequired","getChoiceRebuildVersions","mostRecent","disabled","all","setDefaultValue","push","choice","job","target","jobProps","uiProps","UI_PROPS","list","appendChild","createElement","processingsStr","procObj","processings","join","str","rbv","_a","updateRawContent","action","wspTypes","migrRule","matchKey","from","to","renameTo","subList","remOptions","exts","addOptions","options","extsArray","opt","RemoveTrashedJobFactory","jobBuilder","getJobBuilder","setPlanned","addBaseJobDatas","stopAfterFailures","updatePersistMetas","key","value","SINGLETON","RebuildEsIndexJobFactory","forceContentIndex","extractMetasFromContent","RemakeViewsJobFactory","_views","setDescription","overrideViews","redirectToPrevious","postconditions","dict","failure","viewsDataSet","view","selector","source","includes","matchCodeView","forceRemakeInMetas","builtBefore","Date","now","RegExp","escape4Regexp","buildLongDescForJob","viewsStr","selectorStr","viewObj","views","ContentAsNewJobFactory","ReindexActLogsJobFactory","setInputType"],"mappings":"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","sourcesContent":["import {IRegPointer, IUiEnv} from \"lib/commons/registry\";\nimport {JSX} from \"lib/commons/xml/dom\";\nimport {IExecutorInUniversePointer, IJobBuilderActionContext, JJob, JobBuilderAction, UiJobFactory} from \"lib/core/executor\";\nimport {Dataset, InputArea, InputChoiceArea, SelectArea} from \"lib/commons/areas\";\nimport {LANG} from \"lib/commons/lang\";\n\n\n/** RelaunchCidTask de base générique */\nexport class RelaunchCidTaskBaseJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>> extends UiJobFactory<C, IJobBuilderActionContext> {\n\tconstructor(id: string) {\n\t\tsuper();\n\t\tthis.setUiJobSng([id]);\n\t\tthis.setLabel(id);\n\t\tthis.setJobFactoryCode(\"relaunchCidTasks\");\n\t\tthis.setJobBuilder(new JobBuilderAction(this)\n\t\t\t.addJobDataValidity(async (props, ctx) => {\n\t\t\t\tif (this._processings && this._processings.length > 0) {\n\t\t\t\t\tif (!props.preconditions || props.preconditions === \"\")\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.addJobDataBuilder('preconditions', async (datasPending, jobsParameters, ctx) => {\n\t\t\t\t// - preconditions\n\t\t\t\tif (jobsParameters._processings) {\n\t\t\t\t\tdatasPending.preconditions = \"\";\n\t\t\t\t\tjobsParameters._processings.forEach((code: string, offset: number) => {\n\t\t\t\t\t\tif (offset > 0)\n\t\t\t\t\t\t\tdatasPending.preconditions += \"|\";\n\t\t\t\t\t\tdatasPending.preconditions += \"(persistMeta(processing,\" + code + \")\";\n\t\t\t\t\t\tlet processing = this.getProcessings().find(entry => entry.code == code);\n\t\t\t\t\t\tif (!processing.isVcb || jobsParameters._rebuildAllVersions !== 'all')\n\t\t\t\t\t\t\tdatasPending.preconditions += \" &headInUrlTree\";\n\t\t\t\t\t\tdatasPending.preconditions += \")\";\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// Clean\n\t\t\t\tdatasPending._processings = datasPending._rebuildAllVersions = undefined;\n\t\t\t}, 10)\n\t\t\t.addJobDialogAreas([(ctx) => {\n\t\t\t\tif (this.getProcessings().length > 0) {\n\t\t\t\t\tlet processindsDataSet: Dataset<any> = {};\n\t\t\t\t\tthis.getProcessings().sort((prA, prB) => prA.name.localeCompare(prB.name)).forEach((proc) => processindsDataSet[proc.code] = {label: proc.name + (proc.isVcb ? \"*\" : \"\")});\n\t\t\t\t\treturn new SelectArea(\"_processings\")\n\t\t\t\t\t\t.setMultiple(true)\n\t\t\t\t\t\t.setLabel(\"Types de ressources\")\n\t\t\t\t\t\t.setDataset(processindsDataSet)\n\t\t\t\t\t\t.setRequired(true)\n\t\t\t\t}\n\t\t\t},\n\t\t\t\t(ctx) => {\n\t\t\t\t\tif (this.getChoiceRebuildVersions()) {\n\t\t\t\t\t\treturn new InputChoiceArea(\"_rebuildAllVersions\")\n\t\t\t\t\t\t\t.setLabel(\"Versions des ressources\")\n\t\t\t\t\t\t\t.setDataset({mostRecent: {label: \"La plus récente uniquement\", disabled: false}, all: {label: \"Toutes (si disponibles : *)\"}})\n\t\t\t\t\t\t\t.setDefaultValue('mostRecent')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]))\n\t}\n\n\t/** Choix des processings */\n\tprotected _processings: { code: string, name: string, isVcb: boolean }[] = [];\n\n\taddChoiceProcessing(code: string, name: string, isVcb: boolean): this {\n\t\tthis._processings.push({code, name, isVcb});\n\t\treturn this;\n\t}\n\n\tgetProcessings(): { code: string, name: string, isVcb: boolean }[] {\n\t\treturn this._processings;\n\t}\n\n\t/** Choix de rebuild des versions (si vcb) */\n\tprotected _choiceRebuildVersions: boolean = false;\n\n\taddChoiceRebuildVersions(choice: boolean) {\n\t\tthis._choiceRebuildVersions = choice;\n\t}\n\n\tgetChoiceRebuildVersions(): boolean {\n\t\treturn this._choiceRebuildVersions;\n\t}\n\n\tasync buildLongDescForJob(ctx: C, job: JJob, target: HTMLElement): Promise<void> {\n\t\tif (job && job.jobProps) {\n\t\t\tconst uiProps = job.jobProps[JobBuilderAction.UI_PROPS];\n\t\t\tlet list = target.appendChild(<ul/>);\n\t\t\tif (job.jobProps[JobBuilderAction.UI_PROPS]) {\n\t\t\t\t// - processings\n\t\t\t\tif (uiProps._processings) {\n\t\t\t\t\tlet processingsStr: string[] = [];\n\t\t\t\t\tuiProps._processings.forEach((proc: string) => {\n\t\t\t\t\t\tconst procObj = this.getProcessings().find((entry) => entry.code === proc);\n\t\t\t\t\t\tprocessingsStr.push(procObj ? procObj.name : proc);\n\t\t\t\t\t});\n\t\t\t\t\tif (processingsStr.length > 0) {\n\t\t\t\t\t\tprocessingsStr = processingsStr.sort();\n\t\t\t\t\t\tconst processings = processingsStr.join(\", \");\n\t\t\t\t\t\tconst str = `Traitement(s) : ${processings}`;\n\t\t\t\t\t\tlist.appendChild(<li>{str}</li>);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// - choiceRebuildVersions\n\t\t\t\tif (this.getChoiceRebuildVersions()) {\n\t\t\t\t\tlet rbv = uiProps._rebuildAllVersions === 'all' ? \"oui\" : \"non\";\n\t\t\t\t\tconst str = `Traitement des versions antérieures (si pertinent) : ${rbv}`;\n\t\t\t\t\tlist.appendChild(<li>{str}</li>);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// - updateRawContent/scarMigrate\n\t\t\tif (job.jobProps.updateRawContent?.action == 'scarMigrate') {\n\t\t\t\tconst wspTypes = job.jobProps.updateRawContent.wspTypes;\n\t\t\t\tif (wspTypes) {\n\t\t\t\t\twspTypes.forEach((migrRule: any) => {\n\t\t\t\t\t\tif (migrRule.matchKey == '.*') {\n\t\t\t\t\t\t\tlist.appendChild(<li>Migration des versions mediums et mineures</li>);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst from = migrRule.matchKey;\n\t\t\t\t\t\t\tconst to = migrRule.renameTo;\n\t\t\t\t\t\t\tlet str = `Migration de '${from}' vers '${to}'`;\n\t\t\t\t\t\t\tlist.appendChild(<li>{str}</li>);\n\t\t\t\t\t\t\tconst subList = list.appendChild(<ul/>);\n\t\t\t\t\t\t\tif (migrRule.remOptions) {\n\t\t\t\t\t\t\t\tconst exts = migrRule.remOptions.join(', ');\n\t\t\t\t\t\t\t\tstr = migrRule.remOptions.length > 1 ? `Suppression des extensions '${exts}'` : `Suppression de l'extension '${exts}'`;\n\t\t\t\t\t\t\t\tsubList.appendChild(<li>{str}</li>);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (migrRule.addOptions) {\n\t\t\t\t\t\t\t\tconst exts = migrRule.addOptions.join(', ');\n\t\t\t\t\t\t\t\tstr = migrRule.remOptions.length > 1 ? `Ajout des extensions '${exts}'` : `Ajout de l'extension '${exts}'`;\n\t\t\t\t\t\t\t\tsubList.appendChild(<li>{str}</li>);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (migrRule.options) {\n\t\t\t\t\t\t\t\tlet extsArray: string[] = [];\n\t\t\t\t\t\t\t\tmigrRule.options.forEach((opt: any) => {\n\t\t\t\t\t\t\t\t\textsArray.push(opt.matchKey);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst exts = extsArray.join(', ');\n\t\t\t\t\t\t\t\tstr = extsArray.length > 1 ? `Migration des extensions '${exts}'` : `Migration de l'extension '${exts}'`;\n\t\t\t\t\t\t\t\tsubList.appendChild(<li>{str}</li>);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Suppression des ressources en corbeille */\nexport class RemoveTrashedJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>> extends RelaunchCidTaskBaseJobFactory<C> {\n\tstatic SINGLETON = new RemoveTrashedJobFactory();\n\n\tconstructor(id: string = \"removeTrashedJob\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Suppression des documents en corbeille\");\n\t\t// FIXME rôle dédié coté univers et ici\n\t\tconst jobBuilder = this.getJobBuilder();\n\t\tjobBuilder.setPlanned(\"byUser\")\n\t\t\t.addBaseJobDatas({\n\t\t\t\t\tpreconditions: \"headInUrlTree&persistMeta(trashed,true)\",\n\t\t\t\t\tstopAfterFailures: 50,\n\t\t\t\t\tupdatePersistMetas: [\n\t\t\t\t\t\t{action: \"replace\", key: \"action\", value: \"remove\"}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t);\n\t}\n}\n\n/** Clean de l'index ES */\nexport class RebuildEsIndexJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>> extends RelaunchCidTaskBaseJobFactory<C> {\n\n\tconstructor(id: string = \"rebuildEsIndexJob\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Réindexation Elasticsearch\");\n\t\t// FIXME rôle dédié coté univers et ici\n\t\tconst jobBuilder = this.getJobBuilder();\n\t\tjobBuilder.setPlanned(\"byUser\")\n\t\t\t.addBaseJobDatas({\n\t\t\t\t\tstopAfterFailures: 50,\n\t\t\t\t\tforceContentIndex: true,\n\t\t\t\t\textractMetasFromContent: true,\n\t\t\t\t}\n\t\t\t);\n\t};\n\n}\n\n/** Reconstruction des vues */\nexport class RemakeViewsJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>> extends RelaunchCidTaskBaseJobFactory<C> {\n\tconstructor(id: string = \"remakeViewsJob\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Reconstruction des vues des documents\");\n\t\tthis.setDescription(\"Reconstruction en masse des vues des documents sélectionnés\");\n\t\t// FIXME rôle dédié coté univers et ici\n\t\tconst jobBuilder = this.getJobBuilder();\n\t\tjobBuilder.setPlanned(\"byUser\")\n\t\t\t.addBaseJobDatas({\n\t\t\t\tstopAfterFailures: 50,\n\t\t\t\toverrideViews: [\n\t\t\t\t\t{redirectToPrevious: true,}\n\t\t\t\t],\n\t\t\t\tforceContentIndex: true,\n\t\t\t\textractMetasFromContent: true,\n\t\t\t\tpostconditions: \"atLeastOneViewForced\",\n\t\t\t\tupdatePersistMetas: [\n\t\t\t\t\t{action: \"translate\", key: \"state\", dict: {failure: \"new\"}}\n\t\t\t\t]\n\t\t\t})\n\t\t\t.addJobDialogAreas([(ctx) => {\n\t\t\t\tlet viewsDataSet: Dataset<any> = {};\n\t\t\t\tviewsDataSet[\"~.*\"] = {label: \"Toutes les vues\"};\n\t\t\t\tviewsDataSet[\"~news\"] = {label: \"Nouvelles vues uniquement\"};\n\t\t\t\tthis._views.forEach((view) => {\n\t\t\t\t\tconst name = view.name;\n\t\t\t\t\tviewsDataSet[view.selector.source] = {label: `Vue '${name}'`}\n\t\t\t\t});\n\t\t\t\treturn new SelectArea(\"_views\")\n\t\t\t\t\t.setMultiple(true)\n\t\t\t\t\t.setLabel(\"Vues\")\n\t\t\t\t\t.setDefaultValue([\"~new\"])\n\t\t\t\t\t.setDataset(viewsDataSet)\n\t\t\t\t\t.setRequired(true);\n\t\t\t}])\n\t\t\t.addJobDataBuilder('overrideViews', async (datasPending, jobsParameters, ctx) => {\n\t\t\t\t// - overrideViews\n\t\t\t\tdatasPending.overrideViews = [];\n\t\t\t\tif (jobsParameters._views.includes(\"~.*\")) {\n\t\t\t\t\tdatasPending.overrideViews.push({\n\t\t\t\t\t\tmatchCodeView: \".*\",\n\t\t\t\t\t\tforceRemakeInMetas: true,\n\t\t\t\t\t\tbuiltBefore: Date.now()\n\t\t\t\t\t});\n\t\t\t\t} else if (jobsParameters._views.includes(\"~news\")) {\n\t\t\t\t\tdatasPending.overrideViews.push({\n\t\t\t\t\t\tmatchCodeView: \".*\",\n\t\t\t\t\t\tredirectToPrevious: true,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tdatasPending.overrideViews.push({\n\t\t\t\t\t\tmatchCodeView: '^(' + jobsParameters._views.join('|') + ')$',\n\t\t\t\t\t\tforceRemakeInMetas: true,\n\t\t\t\t\t\tbuiltBefore: Date.now()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// clean\n\t\t\t\tdatasPending._views = undefined;\n\t\t\t}, 10)\n\t};\n\n\t/** Choix des views à rebuilder */\n\tprotected _views: { selector: RegExp, name: string }[] = [];\n\n\taddChoiceView(name: string, code: string | RegExp) {\n\t\tlet selector: RegExp;\n\t\tif (typeof code === \"string\")\n\t\t\tselector = new RegExp(LANG.escape4Regexp(code));\n\t\telse\n\t\t\tselector = code;\n\t\tthis._views.push({selector, name});\n\t}\n\n\tasync buildLongDescForJob(ctx: C, job: JJob, target: HTMLElement): Promise<void> {\n\t\tawait super.buildLongDescForJob(ctx, job, target);\n\t\tif (job && job.jobProps && job.jobProps[JobBuilderAction.UI_PROPS]) {\n\t\t\tconst uiProps = job.jobProps[JobBuilderAction.UI_PROPS];\n\t\t\tlet list = target.appendChild(<ul/>);\n\t\t\tif (uiProps._views) {\n\t\t\t\tlet viewsStr: string[] = [];\n\t\t\t\tif (uiProps._views.includes(\"~.*\")) {\n\t\t\t\t\tviewsStr.push(\"toutes\");\n\t\t\t\t} else if (uiProps._views.includes(\"~news\")) {\n\t\t\t\t\tviewsStr.push(\"nouvelles uniquement\");\n\t\t\t\t} else {\n\t\t\t\t\tuiProps._views.forEach((selectorStr: string) => {\n\t\t\t\t\t\tconst viewObj = this._views.find((entry) => entry.selector.source === selectorStr);\n\t\t\t\t\t\tviewsStr.push(viewObj ? viewObj.name : selectorStr);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (viewsStr.length > 0) {\n\t\t\t\t\tviewsStr = viewsStr.sort();\n\t\t\t\t\tconst views = viewsStr.join(\", \");\n\t\t\t\t\tconst str = `Vue(s) : ${views}`;\n\t\t\t\t\tlist.appendChild(<li>{str}</li>);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/** Reconstruction de type updateRawContent=oldRawContentAsNew */\nexport class ContentAsNewJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>> extends RelaunchCidTaskBaseJobFactory<C> {\n\tconstructor(id: string = \"remakeAllAsNewContentJob\") {\n\t\tsuper(id);\n\t\tthis.setLabel(\"Reconstruction intégrale des documents\");\n\t\tthis.setDescription(\"Reconstruction intégrale des documents, comme si son contenu avait été ré-importé\");\n\n\t\tconst jobBuilder = this.getJobBuilder();\n\t\tjobBuilder.setPlanned(\"byUser\")\n\t\t\t.addBaseJobDatas({\n\t\t\t\tstopAfterFailures: 50,\n\t\t\t\tupdateRawContent: {action: \"oldRawContentAsNew\"},\n\t\t\t});\n\t};\n\n}\n\n/** RelaunchCidTask de base générique */\nexport class ReindexActLogsJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>> extends UiJobFactory<C, IJobBuilderActionContext> {\n\tconstructor(id: string) {\n\t\tsuper();\n\t\tthis.setUiJobSng([id]);\n\t\tthis.setLabel(id);\n\t\tthis.setJobFactoryCode(\"reindexActLogs\");\n\t\tthis.setJobBuilder(new JobBuilderAction(this)\n\t\t\t.addJobDataValidity(async (props, ctx) => {return true;})\n\t\t\t.addJobDialogAreas([(ctx) => {\n\t\t\t\treturn new InputArea(\"from\").setInputType(\"date\").setLabel(\"Depuis\").setRequired(false);\n\t\t\t},\n\t\t\t\t(ctx) => {\n\t\t\t\t\treturn new InputArea(\"to\").setInputType(\"date\").setLabel(\"Au\").setRequired(false);\n\t\t\t\t}\n\t\t\t]))\n\t}\n}"]}