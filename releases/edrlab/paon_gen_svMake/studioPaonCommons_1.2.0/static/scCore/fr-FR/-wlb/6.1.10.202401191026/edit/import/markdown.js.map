{"version":3,"sources":["/@lib@/edit/import/markdown.ts"],"names":["markdownParse","str","arr","replace","split","i","j","length","parse_line","rtn","push","trim","rtnS","join","fixes","preg_replace","rules","r","v","lastIndex","matches","exec","regExp","subject","k","l","m","flags","indexOf","chars","header","level","item","line"],"mappings":"OAwBM,SAAUA,cAAcC,KAC7B,MAAMC,IAAMD,IAAIE,QAAQ,KAAM,QAAQC,MAAM;AAC5C,IAAIC,EAAI;AACR,IAAIC,EAAIJ,IAAIK;AACZ,GAAID,IAAM,EAAG,CAEZ,OAAOE,WAAWN,IAAIG,IAGvB,MAAMI,IAAM;AACZ,KAAOJ,EAAIC,EAAGD,IAAK,CAClBI,IAAIC,KAAKF,WAAW,KAAON,IAAIG,GAAGM,OAAS,OAE5C,IAAIC,KAAOH,IAAII,KAAK;AACpB,IAAKR,EAAI,EAAGC,EAAIQ,MAAMP,OAAQF,EAAIC,EAAGD,IAAK,CACzCO,KAAOG,aAAaD,MAAMT,GAAG,GAAIS,MAAMT,GAAG,GAAIO,MAE/C,OAAOA,KAIR,SAASJ,WAAWP,KACnB,IAAK,IAAII,EAAI,EAAGC,EAAIU,MAAMT,OAAQF,EAAIC,EAAGD,IAAK,CAC7C,MAAMY,EAAID,MAAMX,GAAG;AACnB,MAAMa,EAAIF,MAAMX,GAAG;AACnB,UAAWa,GAAK,WAAY,CAC3BD,EAAEE,WAAa;AACf,MAAMC,QAAUH,EAAEI,KAAKpB;AACvB,GAAImB,UAAY,KAAM,CACrB,GAAIA,QAAQb,OAAS,EAAG,CACvBN,IAAMc,aAAaE,EAAGC,EAAEE,QAAQ,GAAIA,QAAQ,IAAKnB,SAC3C,CACNA,IAAMc,aAAaE,EAAGC,EAAEE,QAAQ,IAAKnB,WAGjC,CACNA,IAAMc,aAAaE,EAAGC,EAAGjB,MAG3B,OAAOA,IAAIU,OAqBZ,SAASI,aAAaO,OAAgBnB,QAAiBoB,SACtD,MAAMlB,EAAI;AACV,IAAIC,EAAI,EAAGkB,EAAI,EAAGC,EAAIF,QAASG;AAC/B,GAAIJ,OAAOK,MAAMC,QAAQ,MAAQ,EAAG,CACnCN,OAAOH,WAAc;AACrB,EAAG,CACFO,EAAIJ,OAAOD,KAAKE;AAChB,GAAIG,IAAM,KAAM;AAChBrB,EAAEK,KAAKgB,SACC,UACH,CACNA,EAAIJ,OAAOD,KAAKE;AAChB,GAAIG,IAAM,KAAMrB,EAAEK,KAAKgB,GAGxB,IAAKpB,EAAID,EAAEE,OAAS,EAAGD,GAAK,EAAGA,IAAK,CACnC,IAAKoB,EAAIvB,QAASqB,EAAInB,EAAEC,GAAGC,OAAQiB,GAAK,EAAGA,IAAKE,EAAIA,EAAEvB,QAAQ,KAAOqB,EAAI,IAAKnB,EAAEC,GAAGkB,IAAIrB,QAAQ,IAAMqB,EAAGnB,EAAEC,GAAGkB,IAAIrB,QAAQ,KAAOqB,EAAGnB,EAAEC,GAAGkB;AACxIC,EAAIA,EAAEtB,QAAQE,EAAEC,GAAG,GAAIoB,GAExB,OAAOD,EAGR,MAAMT,MAA6D,CAElE,CAAC,cAAe,CAACa,MAAeC,UAC/B,MAAMC,MAAQF,MAAMtB;AACpB,MAAO,KAAOwB,MAAQ,IAAMD,OAAOnB,OAAS,MAAQoB,MAAQ,MAG7D,CAAC,2BAA4B,+BAE7B,CAAC,0BAA2B,yBAE5B,CAAC,mBAAoB,wBACrB,CAAC,iBAAkB,wBAEnB,CAAC,oBAAqB,gBACtB,CAAC,gBAAiB,gBAElB,CAAC,mBAAoB,kBAErB,CAAC,aAAc,cAEf,CAAC,cAAe,SAAUC,MACzB,MAAO,aAAeA,KAAKrB,OAAS,iBAGrC,CAAC,kBAAmB,SAAUqB,MAC7B,MAAO,aAAeA,KAAKrB,OAAS,iBAGrC,CAAC,aAAc,SAAUV,KACxB,MAAO,eAAiBA,IAAIU,OAAS,kBAGtC,CAAC,cAAe,SAAUsB,MACzBA,KAAOA,KAAKtB;AACZ,GAAIsB,KAAK,KAAO,IAAK,CACpB,OAAOA,KAER,MAAO,QAAUA,KAAO;AAI1B,MAAMnB,MAA6B,CAClC,CAAC,gBAAiB,MAClB,CAAC,gBAAiB,MAClB,CAAC,gCAAiC","sourcesContent":["/** Pour import dynamique du module. */\nexport interface IMarkdownParser {\n\tmarkdownParse(str: string): string\n}\n\n/**\n * Basic Markdown Parser\n * https://gist.github.com/fuzzyfox/5843166\n *\n * This function parses a small subset of the Markdown language as defined by\n * [John Gruber](http://daringfireball.net/projects/markdown). It's very basic\n * and needs to be refactored a little, and there are plans to add more support\n * for the rest of the language in the near future.\n *\n * This implimentation is based loosely on\n * [slimdown.php](https://gist.github.com/jbroadway/2836900) by Johnny Broadway.\n *\n * @version 0.1\n * @author William Duyck <fuzzyfox0@gmail.com>\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License 2.0\n *\n * @param  {String} str A Markdown string to be converted to HTML.\n * @return {String}     The HTML for the given Markdown.\n */\nexport function markdownParse(str: string): string {\n\tconst arr = str.replace(/</g, '&lt;').split('\\n');\n\tlet i = 0;\n\tlet j = arr.length;\n\tif (j === 1) {\n\t\t//inline\n\t\treturn parse_line(arr[i]);\n\t}\n\t//multiLines\n\tconst rtn = [];\n\tfor (; i < j; i++) {\n\t\trtn.push(parse_line(\"\\n\" + arr[i].trim() + \"\\n\"));\n\t}\n\tlet rtnS = rtn.join('\\n');\n\tfor (i = 0, j = fixes.length; i < j; i++) {\n\t\trtnS = preg_replace(fixes[i][0], fixes[i][1], rtnS);\n\t}\n\treturn rtnS;\n}\n\n\nfunction parse_line(str: string) {\n\tfor (let i = 0, j = rules.length; i < j; i++) {\n\t\tconst r = rules[i][0];\n\t\tconst v = rules[i][1];\n\t\tif (typeof v == 'function') {\n\t\t\tr.lastIndex = -1;\n\t\t\tconst matches = r.exec(str);\n\t\t\tif (matches !== null) {\n\t\t\t\tif (matches.length > 1) {\n\t\t\t\t\tstr = preg_replace(r, v(matches[1], matches[2]), str);\n\t\t\t\t} else {\n\t\t\t\t\tstr = preg_replace(r, v(matches[0]), str);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tstr = preg_replace(r, v, str);\n\t\t}\n\t}\n\treturn str.trim();\n}\n\n/**\n * preg_replace (from PHP) in JavaScript!\n *\n * This is basically a pattern replace. You can use a regex pattern to search and\n * another for the replace. For more information see the PHP docs on the original\n * function (http://php.net/manual/en/function.preg-replace.php), and for more on\n * JavaScript flavour regex visit http://www.regular-expressions.info/javascript.html\n *\n * NOTE: Unlike the PHP version, this function only deals with string inputs. No arrays.\n *\n * @author  William Duyck <fuzzyfox0@gmail.com>\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License 2.0\n *\n * @param  {String}  pattern  The pattern to search for.\n * @param  {String}  replace  The string to replace.\n * @param  {String}  subject  The string to search and replace.\n * @return  {String}  If matches are found, the new subject will be returned.\n */\nfunction preg_replace(regExp: RegExp, replace: string, subject: string) {\n\tconst i = [];\n\tlet j = 0, k = 0, l = subject, m;\n\tif (regExp.flags.indexOf(\"g\") >= 0) {\n\t\tregExp.lastIndex  = -1;\n\t\tdo {\n\t\t\tm = regExp.exec(subject);\n\t\t\tif (m === null) break;\n\t\t\ti.push(m);\n\t\t} while (true);\n\t} else {\n\t\tm = regExp.exec(subject);\n\t\tif (m !== null) i.push(m);\n\t}\n\n\tfor (j = i.length - 1; j > -1; j--) {\n\t\tfor (m = replace, k = i[j].length; k > -1; k--) m = m.replace(\"${\" + k + \"}\", i[j][k]).replace(\"$\" + k, i[j][k]).replace(\"\\\\\" + k, i[j][k]);\n\t\tl = l.replace(i[j][0], m)\n\t}\n\treturn l\n}\n\nconst rules: ([RegExp, string | ((...args: any[]) => string)])[] = [\n\t// headers\n\t[/\\n(#+)(.*)/g, (chars: string, header: string) => {\n\t\tconst level = chars.length;\n\t\treturn '<h' + level + '>' + header.trim() + '</h' + level + '>';\n\t}],\n\t// images\n\t[/!\\[([^\\[]+)]\\(([^(]+)\\)/g, '<img src=\\\"\\\\2\\\" alt=\\\"\\\\1\\\" />'],\n\t// link\n\t[/\\[([^\\[]+)]\\(([^(]+)\\)/g, '<a href=\\\"\\\\2\\\">\\\\1</a>'],\n\t// bold\n\t[/\\b(__)(.*?)\\1\\b/g, '<strong>\\\\2</strong>'],\n\t[/(\\*\\*)(.*?)\\1/g, '<strong>\\\\2</strong>'],\n\t// emphasis\n\t[/\\b([_])(.*?)\\1\\b/g, '<em>\\\\2</em>'],\n\t[/([*])(.*?)\\1/g, '<em>\\\\2</em>'],\n\t// strike\n\t[/\\b(~~)(.*?)\\1\\b/g, '<del>\\\\2</del>'],\n\t// quote\n\t[/:\"(.*?)\":/g, '<q>\\\\1</q>'],\n\t// unordered list\n\t[/\\n[*-](.*)/g, function (item: string) {\n\t\treturn '<ul>\\n<li>' + item.trim() + '</li>\\n</ul>';\n\t}],\n\t// ordered list\n\t[/\\n[0-9]+\\.(.*)/g, function (item: string) {\n\t\treturn '<ol>\\n<li>' + item.trim() + '</li>\\n</ol>';\n\t}],\n\t// blockquote\n\t[/\\n\\\\>(.*)/g, function (str: string) {\n\t\treturn '<blockquote>' + str.trim() + '</blockquote>';\n\t}],\n\t// paragraphs\n\t[/\\n[^\\n]+\\n/g, function (line: string) {\n\t\tline = line.trim();\n\t\tif (line[0] === '<') {\n\t\t\treturn line;\n\t\t}\n\t\treturn '\\n<p>' + line + '</p>\\n';\n\t}]\n];\n\nconst fixes:([RegExp, string])[] = [\n\t[/<\\/ul>\\n<ul>/g, '\\n'],\n\t[/<\\/ol>\\n<ol>/g, '\\n'],\n\t[/<\\/blockquote>\\n<blockquote>/g, \"\\n\"]\n];"]}