{"version":3,"sources":["/@lib@/store/collab.ts"],"names":["Action","ActionMenu","REG","ERROR","POPUP","USER","ActionBtn","DepotLcProv","[object Object]","this","_states","_transitions","adminTree","cidServer","_cidSrv","_adminUT","path","transitionKey","transition","getTransition","req","cidMetas","olderPath","lc","code","returnProps","resp","syncSend","scCidSessStatus","to","i","getTransitionIndex","push","key","length","state","getStateIndex","prc","availbleTr","Array","isValidTrans","LC_KEY","DepotLcTransition","init","label","iconUrl","restrictFromStates","prcWhiteList","allowFromAllPrcs","showPerms","enablePerms","indexOf","DepotLcState","icon","DepotResListTransition","super","_description","reg","_reg","lstn","env","nodeInfosChange","on","refreshNode","bind","_a","nodeInfosPending","then","ctx","isEnabled","action","getActions","ni","nodeInfos","_state","lifecycle","getState","metas","_label","_icon","list","transitions","listAvailableTransitions","tr","values","ResExecTransition","DepotResAction","id","isVisible","checkResPerms","_visResPerms","_enableResPerms","perms","hasPermission","roles","isArray","requireResVisiblePerm","requireResEnabledPerm","trans","overrideExec","execute","ev","preActions","mergeLists","_id","preAction","preActionRes","result","Promise","executeTransition","reportError","msg","ChangeUserResp","uiContext","parent","ChangeUserRespBtn","initialize","findReg","actionContext","skin","getSkin","skinOver","getSkinOver","role","UserSelector","import","usersRaw","userSelector","userGrid","usersSrv","universe","useUsers","grid","selType","filterTypeInputVisibility","selectAndCloseOnDblClick","startSel","getUserSet","users","showMenuFromEvent","uiRoot","initWidth","onNextClose","usersAr","user","account","JSON","stringify","cid","registerSkin","_hideLabel","onResChange","connectedCallback","_onResChange","removeListener","niNew","getLabel","getId","getPrimaryName","getUser","customElements","define"],"mappings":"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","sourcesContent":["import {DepotCidSrv, JDepotCidResult, ODepotCidRequest} from \"lib/store/cid\";\nimport {JNodeInfos, UrlTreeSrv} from \"lib/store/urlTree\";\nimport {JCidMetas} from \"lib/store/res\";\nimport {Action, ActionMenu, EButtonUiContext, IAction} from \"lib/commons/actions\";\nimport {IReg, IRegPointer, REG} from \"lib/commons/registry\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {JUser, USER} from \"lib/core/user\";\nimport {IDepotResEnv, IDepotResUiEnv} from \"lib/store/depot\";\nimport {ActionBtn} from \"back/commons/widgets/buttons\";\n\nexport class DepotLcProv {\n\tstatic readonly LC_KEY = \"lc\";\n\n\tprotected _transitions: Array<DepotLcTransition>;\n\tprotected _states: Array<DepotLcState>;\n\tprotected _cidSrv: DepotCidSrv;\n\tprotected _adminUT: UrlTreeSrv;\n\n\tconstructor() {\n\t\tthis._states = [];\n\t\tthis._transitions = [];\n\t}\n\n\tconfigure(adminTree: UrlTreeSrv, cidServer: DepotCidSrv) {\n\t\tthis._cidSrv = cidServer;\n\t\tthis._adminUT = adminTree;\n\t}\n\n\tasync executeTransition(path: string, transitionKey: string): Promise<DepotLcState> {\n\t\tconst transition = this.getTransition(transitionKey);\n\t\tconst req: ODepotCidRequest<JCidMetas, JDepotCidResult> = {\n\t\t\tcidMetas: {\n\t\t\t\tolderPath: path,\n\t\t\t\tlc: transition.code\n\t\t\t},\n\t\t\treturnProps: ['scCidSessStatus']\n\t\t};\n\t\tconst resp = await this._cidSrv.syncSend(req);\n\t\tif (resp.scCidSessStatus == \"commited\") return transition.to;\n\t\telse return null;\n\t}\n\n\taddTransition(transition: DepotLcTransition) {\n\t\tconst i = this.getTransitionIndex(transition.code);\n\t\tif (i == null) this._transitions.push(transition);\n\t\telse this._transitions[i] = transition;\n\t}\n\n\tgetTransition(key: string): DepotLcTransition {\n\t\tconst i = this.getTransitionIndex(key);\n\t\treturn i == null ? null : this._transitions[i];\n\t}\n\n\tgetTransitionIndex(key: string): number {\n\t\tfor (let i = 0; i < this._transitions.length; i++) {\n\t\t\tif (this._transitions[i].code == key) return i;\n\t\t}\n\t\treturn null;\n\t}\n\n\taddState(state: DepotLcState) {\n\t\tconst i = this.getStateIndex(state.code);\n\t\tif (i == null) this._states.push(state);\n\t\telse this._states[i] = state;\n\t}\n\n\tgetState(key: string): DepotLcState {\n\t\tconst i = this.getStateIndex(key);\n\t\treturn i == null ? null : this._states[i];\n\t}\n\n\tgetStateIndex(key: string): number {\n\t\tfor (let i = 0; i < this._states.length; i++) {\n\t\t\tif (this._states[i].code == key) return i;\n\t\t}\n\t\treturn null;\n\t}\n\n\tlistAvailableTransitions(state: string, prc: string): Array<DepotLcTransition> {\n\t\tlet availbleTr = new Array<DepotLcTransition>();\n\t\tfor (let i = 0; i < this._transitions.length; i++) {\n\t\t\tif (this._transitions[i].isValidTrans(state, prc)) availbleTr.push(this._transitions[i]);\n\t\t}\n\t\treturn availbleTr;\n\t}\n}\n\nexport interface ODepotLcTransitionConfig {\n\tcode: string\n\tlabel: string\n\trestrictFromStates: Array<string>\n\tprcWhiteList: Array<string>\n\tallowFromAllPrcs: boolean\n\tto: DepotLcState\n\tshowPerms?: Array<string>\n\tenablePerms?: Array<string>\n\ticonUrl?: string\n}\n\nexport class DepotLcTransition {\n\tcode: string;\n\tlabel: string;\n\trestrictFromStates: Array<string>;\n\tprcWhiteList: Array<string>;\n\tallowFromAllPrcs: boolean;\n\tshowPerms?: Array<string>;\n\tenablePerms?: Array<string>;\n\tto: DepotLcState;\n\ticonUrl: string;\n\n\tconstructor(init: ODepotLcTransitionConfig) {\n\t\tthis.code = init.code;\n\t\tthis.label = init.label;\n\t\tthis.iconUrl = init.iconUrl;\n\t\tthis.restrictFromStates = init.restrictFromStates || null;\n\t\tthis.to = init.to;\n\t\tthis.prcWhiteList = init.prcWhiteList || [];\n\t\tthis.allowFromAllPrcs = init.allowFromAllPrcs || false;\n\t\tthis.showPerms = init.showPerms || null;\n\t\tthis.enablePerms = init.enablePerms || null;\n\t\tthis.iconUrl = init.iconUrl || null;\n\t}\n\n\tisValidTrans(state: string, prc: string): boolean {\n\t\tif (this.restrictFromStates.indexOf(state) === -1) return false;\n\t\tif (this.allowFromAllPrcs === false && this.prcWhiteList.indexOf(prc) === -1) return false;\n\t\treturn true;\n\t}\n}\n\nexport class DepotLcState {\n\tcode: string;\n\tlabel: string;\n\ticon: string;\n\n\tconstructor(code: string, label?: string, icon?: string) {\n\t\tthis.code = code;\n\t\tthis.label = label;\n\t\tthis.icon = icon;\n\t}\n}\n\n\n/**\n * Menu des transitions exécutables d'une ressource du depot.\n *\n * Action à embarquer en dehors d'un framework Wui Depot\n * (référence explicite à depotlcProv et récup du nodeInfos).\n */\nexport class DepotResListTransition<C extends IRegPointer<IDepotResEnv>> extends ActionMenu<C> {\n\tprotected _reg: IReg<IDepotResEnv>;\n\n\tprotected _state: DepotLcState;\n\n\tconstructor() {\n\t\tsuper('itemListTransition');\n\t\tthis._description = \"Changer d'état...\";\n\t}\n\n\tinit(reg: IReg<IDepotResEnv>): DepotResListTransition<C> {\n\t\tthis._reg = reg;\n\t\tconst lstn = reg.env.nodeInfosChange;\n\t\tif (lstn) lstn.on(\"nodeChange\", this.refreshNode.bind(this));\n\t\telse reg.env.nodeInfosPending?.then(this.refreshNode.bind(this))\n\t\tthis.refreshNode();\n\t\treturn this;\n\t}\n\n\tisEnabled(ctx: C): boolean {\n\t\tif (!super.isEnabled(ctx)) return false;\n\t\tfor (const action of this.getActions()) {\n\t\t\tif (action.isEnabled(ctx)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\trefreshNode() {\n\t\tconst ni = this._reg.env.nodeInfos;\n\t\tthis._state = ni ? this._reg.env.lifecycle.getState(ni.metas.lc) : null;\n\t\tthis._label = this._state ? this._state.label : \"Chargement en cours...\";\n\t\tthis._icon = this._state ? this._state.icon : null;\n\t}\n\n\tgetActions(): IAction<C>[] {\n\t\tlet list = [];\n\t\tif (this._reg.env.nodeInfos == null) return [];\n\t\tif (!this._state) return [];\n\t\tconst transitions = this._reg.env.lifecycle.listAvailableTransitions(this._state.code, this._reg.env.nodeInfos.prc);\n\t\tif (transitions != null) for (const tr of transitions.values()) list.push(new ResExecTransition(tr));\n\t\treturn list;\n\t}\n}\n\nexport abstract class DepotResAction<C extends IRegPointer<IDepotResEnv>> extends Action<C> {\n\n\t/* Perm appliquée pour évaluer la visibilité de l'action. */\n\tprotected _visResPerms: string[];\n\n\t/* Perm appliquée pour évaluer l'activation de l'action. */\n\tprotected _enableResPerms: string[];\n\n\tconstructor(id: string) {\n\t\tsuper(id);\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!super.isVisible(ctx)) return false;\n\t\treturn this.checkResPerms(this._visResPerms, ctx);\n\t}\n\n\tisEnabled(ctx: C): boolean {\n\t\tif (!super.isEnabled(ctx)) return false;\n\t\treturn this.checkResPerms(this._enableResPerms, ctx);\n\t}\n\n\tcheckResPerms(perms: string | string[], ctx: C): boolean {\n\t\tif (!ctx.reg.env.nodeInfos) return false;\n\t\tif (perms && ctx.reg.env.path) {\n\t\t\treturn ctx.reg.hasPermission(perms, ctx.reg.env.nodeInfos.roles);\n\t\t}\n\t\treturn true\n\t}\n\n\trequireResVisiblePerm(perms: string | string[]): this {\n\t\tif (perms) {\n\t\t\tif (Array.isArray(perms)) {\n\t\t\t\tfor (let i = 0; i < perms.length; i++) this.requireResVisiblePerm(perms[i]);\n\t\t\t} else {\n\t\t\t\tif (!this._visResPerms) this._visResPerms = [];\n\t\t\t\tif (this._visResPerms.indexOf(perms) == -1) this._visResPerms.push(perms);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\trequireResEnabledPerm(perms: string | string[]): this {\n\t\tif (perms) {\n\t\t\tif (Array.isArray(perms)) {\n\t\t\t\tfor (let i = 0; i < perms.length; i++) this.requireResEnabledPerm(perms[i]);\n\t\t\t} else {\n\t\t\t\tif (!this._enableResPerms) this._enableResPerms = [];\n\t\t\t\tif (this._enableResPerms.indexOf(perms) == -1) this._enableResPerms.push(perms);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}\n\n/**\n * Action d'exécution d'une transition\n */\nexport class ResExecTransition<C extends IRegPointer<IDepotResEnv>> extends DepotResAction<C> {\n\n\tconstructor(public trans: DepotLcTransition, overrideExec?: (ctx: C, ev?: Event) => any) {\n\t\tsuper(trans.code);\n\t\tif (trans.showPerms) this.requireResVisiblePerm(trans.showPerms);\n\t\tif (trans.enablePerms) this.requireResEnabledPerm(trans.enablePerms);\n\t\tthis._label = trans.label;\n\t\tthis._icon = trans.iconUrl;\n\t\tif (overrideExec) this.execute = overrideExec;\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\tconst preActions = ctx.reg.mergeLists<(transition: ResExecTransition<C>) => boolean | Promise<boolean>>(\"lc:transitions:pre:actions\", \"lc:transitions:\" + this._id + \":pre:actions\");\n\t\tif (preActions) for (const preAction of preActions) {\n\t\t\tconst preActionRes = preAction(this);\n\t\t\tconst result = preActionRes instanceof Promise ? await preActionRes : preActionRes;\n\t\t\tif (result === false) return;\n\t\t}\n\t\tconst state: DepotLcState = await ctx.reg.env.lifecycle.executeTransition(ctx.reg.env.path, this._id);\n\t\tif (state == null) {\n\t\t\treturn ERROR.reportError({msg: \"Une erreur est survenue durant le changement d'état.\"});\n\t\t}\n\t}\n}\n\nexport class ChangeUserResp<C extends IRegPointer<IDepotResUiEnv>> extends DepotResAction<C> {\n\n\tconstructor(code: string, overrideExec?: (ctx: never, ev?: Event) => any) {\n\t\tsuper(code);\n\t\tif (overrideExec) this.execute = overrideExec;\n\t}\n\n\tbuildCustomButton(ctx: C, uiContext: EButtonUiContext, parent?: Element): Element | null | undefined {\n\t\treturn new ChangeUserRespBtn().initialize({\n\t\t\treg: REG.findReg(parent, ctx),\n\t\t\taction: this,\n\t\t\tactionContext: ctx,\n\t\t\tskin: this.getSkin(ctx),\n\t\t\tskinOver: this.getSkinOver(ctx),\n\t\t\tuiContext: uiContext,\n\t\t\trole: uiContext === 'menu' ? 'menuitem' : 'button'\n\t\t});\n\t}\n\n\tasync execute(ctx: C, ev?: Event) {\n\t\t//const self = DOMSH.findHost<TaskFieldUsers>(this);\n\t\tconst {UserSelector} = await import(\"back/core/dialogs/userSelector.js\");\n\t\tconst usersRaw: string[] = ctx.reg.env.nodeInfos.metas[this._id];\n\t\tconst userSelector = new UserSelector().initialize({\n\t\t\treg: ctx.reg,\n\t\t\tuserGrid: {\n\t\t\t\tusersSrv: ctx.reg.env.universe.useUsers,\n\t\t\t\tgrid: {selType: \"multi\", skinOver: \"userRespSelector\"},\n\t\t\t\tfilterTypeInputVisibility: true,\n\t\t\t},\n\t\t\tselectAndCloseOnDblClick: true,\n\t\t\tstartSel: usersRaw != null && usersRaw.length ? await ctx.reg.env.universe.useUsers.getUserSet(usersRaw) : []\n\t\t});\n\t\tconst users = await POPUP.showMenuFromEvent<JUser[]>(userSelector, ev || ctx.reg.env.uiRoot, ctx.reg.env.uiRoot, null, { initWidth: '20em'}).onNextClose();\n\t\tif (users) {\n\t\t\tlet usersAr = [];\n\t\t\tfor (const user of users) usersAr.push(user.account);\n\t\t\tconst req: ODepotCidRequest<JCidMetas, JDepotCidResult> = {\n\t\t\t\tcidMetas: {\n\t\t\t\t\tolderPath: ctx.reg.env.path,\n\t\t\t\t},\n\t\t\t\treturnProps: ['scCidSessStatus']\n\t\t\t};\n\t\t\treq.cidMetas[this._id] = JSON.stringify(usersAr);\n\t\t\tconst resp = await ctx.reg.env.universe.cid.syncSend(req);\n\t\t\tif (resp.scCidSessStatus !== \"commited\") return ERROR.reportError({msg: \"Une erreur est survenue durant le changement de responsabilité.\"});\n\t\t}\n\t}\n}\n\nREG.reg.registerSkin('userRespSelector', 1, /* language=CSS */`\n.inSel {\n\tbackground-color: var(--row-inSel-bgcolor);\n}\n`);\n\n\nclass ChangeUserRespBtn extends ActionBtn<IRegPointer<IDepotResUiEnv>> {\n\t_hideLabel = false;\n\n\tconnectedCallback() {\n\t\tif (this.actionContext.reg.env.nodeInfos !== null) this.onResChange(this.actionContext.reg.env.nodeInfos);\n\t\tsuper.connectedCallback();\n\t\tconst lstn = this.actionContext.reg.env.nodeInfosChange;\n\t\tif (lstn) lstn.on(\"nodeChange\", (this._onResChange = this.onResChange.bind(this)));\n\t\telse this.actionContext.reg.env.nodeInfosPending?.then((ni: JNodeInfos) => {this.onResChange(ni)});\n\t}\n\n\tdisconnectedCallback() {\n\t\tif (this._onResChange) {\n\t\t\tthis.actionContext.reg.env.nodeInfosChange.removeListener(\"nodeChange\", this._onResChange);\n\t\t\tthis._onResChange = null;\n\t\t}\n\t}\n\n\tasync onResChange(niNew: JNodeInfos) {\n\t\tif (niNew) {\n\t\t\tlet label = this.action.getLabel(this.actionContext);\n\t\t\tconst users = niNew.metas[this.action.getId()];\n\t\t\tif (users && users.length > 0) {\n\t\t\t\tlabel += USER.getPrimaryName(await this.actionContext.reg.env.universe.useUsers.getUser(users[0]));\n\t\t\t\tif (users.length > 1) label += \"...\";\n\t\t\t} else label = \"Aucun\";\n\t\t\tthis.label = label;\n\t\t} else {\n\t\t\tthis.label = \"\";\n\t\t}\n\t}\n\n\tprotected _onResChange: (niNew: JNodeInfos, niOld: JNodeInfos) => void;\n}\n\ncustomElements.define('store-resp-changeuser', ChangeUserRespBtn);"]}