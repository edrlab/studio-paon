{"version":3,"sources":["/@lib@/wsp/wspHouse.ts"],"names":["DocHolder","XmlTypedHouse","UndirtyMsgOt","ResetStatesMsg","RoadEnd","PlaceDocHolder","[object Object]","house","place","super","this","_docHolders","add","notUsedSince","batch","lockedBy","doBatch","console","warn","filter","willUndo","Promise","resolve","willRedo","delete","close","publicDoors","length","Date","now","wspsLive","_saveHouse","WspXmlHouse","root","doc","wsp","srcRefMap","Map","WspXmlSlaveHouse","msg","fromDoor","type","props","Object","assign","srcFields","datas","body","wspServer","_removeHouse","onMsg","RoadExecFrameWs","execFrame","_ws","_house","m","asJson","houseId","id","svc","sendReq","sendMsg","config","JSON","stringify","slaveClosed","door"],"mappings":"OAAQA,cAAU;OACVC,kBAAc;OAGFC,iBAAa;OAGmBC,eAAgBC,YAAQ;OAOtE,MAAOC,uBAAuBL,UAInCM,YAAYC,MAA+BC,OAC1CC,MAAMF;AADoCG,KAAAF,MAAAA;AAE1CA,MAAMG,YAAYC,IAAIF;AACtBA,KAAKH,MAAMM,aAAe,EAM3BP,iBACC,OAAO,IAAID,eAAeK,KAAKH,MAAOG,KAAKF,OAG5CF,QAAQQ,OACP,GAAIJ,KAAKH,MAAMQ,UAAY,KAAMN,MAAMO,QAAQF;KAC1CG,QAAQC,KAAK,uDAGnBZ,SAASa,QACR,GAAIT,KAAKH,MAAMQ,UAAY,KAAM,OAAON,MAAMW,SAASD;KAClDF,QAAQC,KAAK;AAClB,OAAOG,QAAQC,QAAQ,OAGxBhB,SAASa,QACR,GAAIT,KAAKH,MAAMQ,UAAY,KAAM,OAAON,MAAMc,SAASJ;KAClDF,QAAQC,KAAK;AAClB,OAAOG,QAAQC,QAAQ,OAGxBhB,QACCI,KAAKF,MAAMG,YAAYa,OAAOd;AAC9B,MAAMH,MAAQG,KAAKH;AACnBE,MAAMgB;AACN,GAAIlB,MAAMmB,YAAYC,SAAW,EAAGpB,MAAMM,aAAee,KAAKC,MAG/DvB,OACC,OAAOI,KAAKF,MAAMsB,SAASC,WAAWrB,KAAKH,MAAOG,KAAKF,eAInD,MAAOwB,oBAAoB/B,cAgBhCK,SAAS2B,MACR,MAAMC,IAAMD;AACZ,IAAKC,IAAIC,IAAK,CACbD,IAAIC,IAAMzB,KAAKyB;AACfD,IAAIE,UAAY,IAAIC,aAKjB,MAAOC,yBAAyBN,YACrC1B,MAAMiC,IAAUC,UACf,GAAID,IAAIE,OAASvC,aAAauC,KAAM,CACnC,MAAMC,MAASH,IAAiCG;AAChD,GAAIA,MAAOC,OAAOC,OAAOlC,KAAKmC,UAAWH,YACnC,GAAIH,eAAepC,gBAAkBoC,IAAIO,MAAMC,OAAS,KAAM,CAEpErC,KAAKyB,IAAIa,UAAUlB,SAASmB,aAAavC;AACzC,OAEDD,MAAMyC,MAAMX,IAAKC,kBAIb,MAAOW,wBAAwB/C,QAKpCE,YAAY8C,UAAyB7C,OACpCE;AACAC,KAAK2C,IAAMD;AACX1C,KAAK4C,OAAS/C,MAGfD,YAA8BiC,KAC7B,MAAMgB,EAAIhB,IAAIiB;AACdD,EAAEE,QAAU/C,KAAK4C,OAAOI;AACxBH,EAAEI,IAAM;AAER,OAAOjD,KAAK2C,IAAIO,QAAWL,GAM5BjD,SAASiC,KACR,MAAMgB,EAAIhB,IAAIiB;AACdD,EAAEE,QAAU/C,KAAK4C,OAAOI;AACxBH,EAAEI,IAAM;AACRjD,KAAK2C,IAAIQ,QAAQN,GAIlBjD,WAAWC,MAAcuD,QACxB,OAAO,IAAIX,gBAAgBzC,KAAK2C,IAAK9C,OAGtCD,aACCI,KAAK2C,IAAIQ,QAAQE,KAAKC,UAAU,CAC/BL,IAAK,OACLF,QAAS/C,KAAK4C,OAAOI,GACrBO,YAAa;AAEdvD,KAAKwD,KAAO","sourcesContent":["import {DocHolder} from \"lib/edit/docHolder\";\nimport {XmlTypedHouse} from \"lib/edit/ot/xmlTypedHouse\";\nimport {EventsMgr, IEventsMgr} from \"lib/commons/events\";\nimport {XmlBatch} from \"lib/edit/ot/xmlHouse\";\nimport {IMsgFilter, UndirtyMsgOt} from \"lib/edit/ot/houseOt\";\nimport {JSrcFields} from \"lib/wsp/src\";\nimport {ICollabLock, IPlaceDocHolder, IWspXmlHouse, IWspXmlHouseEvents, WspsLivePlace} from \"lib/wsp/wspsLive\";\nimport {House, IDoorBase, IReply, Msg, ODoorConfig, ResetStatesMsg, RoadEnd} from \"lib/edit/ot/urban\";\nimport {IWsExecFrame} from \"lib/core/universe\";\nimport {JWspWorkingState, Wsp, wspId, wspRef, wspUri} from \"lib/wsp/wsp\";\nimport {ItemType} from \"lib/wsp/wspMetaUi\";\nimport {IDocumentInWspHouse} from \"back/wsp/widgets/wed/schemaMetaWsp\";\n\n\nexport class PlaceDocHolder extends DocHolder implements IPlaceDocHolder {\n\n\thouse: IWspXmlHouse;\n\n\tconstructor(house: XmlTypedHouse, readonly place: WspsLivePlace) {\n\t\tsuper(house);\n\t\tplace._docHolders.add(this);\n\t\tthis.house.notUsedSince = 0;\n\t}\n\n\t// @ts-ignore\n\thouseLstn: IEventsMgr<IWspXmlHouseEvents>;\n\n\tcloneDocHolder(): PlaceDocHolder {\n\t\treturn new PlaceDocHolder(this.house, this.place);\n\t}\n\n\tdoBatch(batch: XmlBatch) {\n\t\tif (this.house.lockedBy == null) super.doBatch(batch);\n\t\telse console.warn(\"doBatch() called on PlaceDocHolder in locked state.\");\n\t}\n\n\twillUndo(filter?: IMsgFilter): Promise<boolean> {\n\t\tif (this.house.lockedBy == null) return super.willUndo(filter);\n\t\telse console.warn(\"willUndo() called on PlaceDocHolder in locked state.\");\n\t\treturn Promise.resolve(false);\n\t}\n\n\twillRedo(filter?: IMsgFilter): Promise<boolean> {\n\t\tif (this.house.lockedBy == null) return super.willRedo(filter);\n\t\telse console.warn(\"willRedo() called on PlaceDocHolder in locked state.\");\n\t\treturn Promise.resolve(false);\n\t}\n\n\tclose() {\n\t\tthis.place._docHolders.delete(this);\n\t\tconst house = this.house;\n\t\tsuper.close();\n\t\tif (house.publicDoors.length === 0) house.notUsedSince = Date.now();\n\t}\n\n\tsave(): Promise<void> {\n\t\treturn this.place.wspsLive._saveHouse(this.house, this.place);\n\t}\n}\n\nexport class WspXmlHouse extends XmlTypedHouse implements IWspXmlHouse {\n\tlisteners: EventsMgr<IWspXmlHouseEvents>\n\tid: wspRef\n\twspUri: wspUri\n\twspId?: wspId\n\twspRef: wspRef;\n\twspUriItem: wspUri\n\twsp: Wsp\n\titemType: ItemType\n\tsrcFields: JSrcFields\n\tlockedBy?: ICollabLock\n\tstates?: JWspWorkingState[]\n\tnotUsedSince: number\n\tkilled: boolean\n\tsaveTimer?: number\n\n\txInitDom(root: Node) {\n\t\tconst doc = root as IDocumentInWspHouse;\n\t\tif (!doc.wsp) {\n\t\t\tdoc.wsp = this.wsp;\n\t\t\tdoc.srcRefMap = new Map();\n\t\t}\n\t}\n}\n\nexport class WspXmlSlaveHouse extends WspXmlHouse {\n\tonMsg(msg: Msg, fromDoor: IDoorBase) {\n\t\tif (msg.type === UndirtyMsgOt.type) {\n\t\t\tconst props = (msg as UndirtyMsgOt<JSrcFields>).props;\n\t\t\tif (props) Object.assign(this.srcFields, props); //mise à jour des champs srcDt, srcStamp...\n\t\t} else if (msg instanceof ResetStatesMsg && msg.datas.body === null) {\n\t\t\t//body null = suppression de la house / de l'item.\n\t\t\tthis.wsp.wspServer.wspsLive._removeHouse(this);\n\t\t\treturn;\n\t\t}\n\t\tsuper.onMsg(msg, fromDoor);\n\t}\n}\n\nexport class RoadExecFrameWs extends RoadEnd {\n\n\tprotected _ws: IWsExecFrame;\n\tprotected _house: House;\n\n\tconstructor(execFrame: IWsExecFrame, house: House) {\n\t\tsuper();\n\t\tthis._ws = execFrame;\n\t\tthis._house = house;\n\t}\n\n\tpushRequest<R extends IReply>(msg: Msg): Promise<R> {\n\t\tconst m = msg.asJson() as JMoanClientMsg;\n\t\tm.houseId = this._house.id;\n\t\tm.svc = \"moan\";\n\t\t// m.repWId = ++this._counter; // Pas d'usage de repWId -> forId, Req/Rep géré par l'execFrame\n\t\treturn this._ws.sendReq<R>(m);\n\t\t// const r = await this._ws.sendReq<R>(m);\n\t\t// r.forId = m.repWId;\n\t\t// return r;\n\t}\n\n\txPushMsg(msg: Msg) {\n\t\tconst m = msg.asJson() as JMoanClientMsg;\n\t\tm.houseId = this._house.id;\n\t\tm.svc = \"moan\";\n\t\tthis._ws.sendMsg(m);\n\t}\n\n\n\tnewRoadFor(house: House, config?: ODoorConfig): RoadEnd {\n\t\treturn new RoadExecFrameWs(this._ws, house);\n\t}\n\n\tdoorClosed() {\n\t\tthis._ws.sendMsg(JSON.stringify({\n\t\t\tsvc: 'moan',\n\t\t\thouseId: this._house.id,\n\t\t\tslaveClosed: true\n\t\t} as JMoanCloseClientMsg));\n\t\tthis.door = null;\n\t}\n}\n\ninterface JMoanClientMsg extends Msg {\n\tsvc: 'moan'\n\thouseId: wspRef\n}\n\n\ninterface JMoanCloseClientMsg extends JMoanClientMsg {\n\tslaveClosed: true\n}\n"]}