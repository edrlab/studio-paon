{"version":3,"sources":["/@lib@/commons/registry.ts"],"names":["SEC","EventMgr","isRegPointer","pointer","reg","REG","getReg","ctx","Node","findRegFromDom","findReg","from","n","logicalParent","assignedSlot","parentElement","parentNode","ShadowRoot","host","async","findScPermLibPath","permCode","SC_PERMS","import","createSubReg","fromUi","businessObject","subReg","SubReg","Reg","copyFrom","createSubRegMixed","uiReg","bizReg","removeSkin","skin","ch","firstElementChild","nextElementSibling","localName","getAttribute","remove","[object Object]","fromSubReg","this","_prefLevels","Object","create","_prefs","_lists","_svcs","_roles","addRolePermList","role","DEFAULT_ROLE_NAME","title","priority","allow","FALLBACK_ROLE_NAME","superRole","deny","env","_perms","_volatileUS","cache","_cache","Map","onRegClose","_onRegClose","emitCatched","isClosed","permName","parentPerm","systemRights","perm","parent","console","warn","Perm","perms","security","and","securityCtx","hasPermission","srcRoles","isSuperAdmin","srcRi","roleNames","_a","hasSystemRights","rolesNames","noAuthentication","DEFAULT_ROLES","FALLBACK_ROLES","Array","isArray","l","length","i","p","evalPermission","undefined","evalSystemRights","key","v","u","_persistUS","defaultVal","level","getPrefLevel","LEVELAUTH_USER","getPref","_getPersistUserData","Infinity","getUserData","code","levelAuthority","value","currentLevel","codeList","codeEntry","valueEntry","sortKey","list","entry","codeSvc","REDIRECT_TO_SVC","svc","svcDef","_insertSvcInOverrideChain","override","styles","registerSvc","SKIN_PREFIX","SkinHolder","overlaySvc","rolePermList","r","setPerm","pre","erase","other","copyTo","assign","nm","getOwnPropertyNames","setPref","lst","values","addSvcToList","addToList","description","val","entries","defaultValue","_getListEntries","result","push","sort","sortEntries","k","getSvc","splice","cdLists","getList","mergedList","mergedEntry","getListAsMap","ifNone","_setOverridenSvc","e","error","document","installSkin","createStyleElt","permRi","r1","r2","getRoleProperty","permHier","access","getRolePermAccess","name","lev","Number","NEGATIVE_INFINITY","keys","propName","roleName","cd","cdEntry","obj","newRole","titleLevel","priorityLevel","superRoleLevel","setPermLevel","sortKeyLevel","descriptionLevel","rootPermName","permNode","children","getPermsTree","isOverride","subSvcDef","setOverridenSvc","envKeys","closed","JSON","stringify","getRegDef","parentReg","super","getPersistUserStates","prototype","apply","arguments","getEntryListLevel","getSvcLevel","getRolePropertyLevel","getRolePermLevel","parentList","hasRoles","getRoleNames","indexOf","getRolePermNames","LEVELAUTH_CORE","LEVELAUTH_CLIENT","LEVELAUTH_PORTAL","LEVELAUTH_PORTAL_FREE","LEVELAUTH_MODEL","LEVELAUTH_EXT","LEVELAUTH_MODEL_FREE","LEVELAUTH_RTL_OVR","e1","e2","toString","IS_skinStyleElt","HTMLStyleElement","skinHolder","overridenSkinHolder","log","root","styleSheets","style","ownerNode","_styleHolder","getSkinIfExist","stylesRoot","Document","head","firstNotSkin","insertBefore","firstChild","styleElt","createElement","body","sub","textContent","reverse","join","dataset","appendChild","setAttribute","content","cloneNode"],"mappings":"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","sourcesContent":["import {ESrcRights, ISecurityCtx, ISecurityCtxPointer, SEC} from 'lib/commons/security';\nimport {EventMgr} from \"lib/commons/events\";\n\n\nexport interface IRegPointer<ENV> {\n\treg?: IReg<ENV>\n}\n\nexport interface IRegsPointer<ENV> {\n\tregs?: IReg<ENV>[]\n}\n\nexport function isRegPointer(pointer: any): pointer is IRegPointer<any> {return pointer && pointer.reg != null}\n\n/** Registre associé à un contexte graphique racine. */\nexport interface IUiEnv {\n\tuiRoot?: HTMLElement\n}\n\nexport interface IAuthenticatedEnv {\n\tnoAuthentication?: boolean\n}\n\n/**\n * Arbre DOM \"logique\".\n * Pour des raisons graphiques, un noeud Html doit parfois être décroché de son contexte parent \"logique\",\n * notamment pour la gestion du fenêtrage.\n * Cette propriété permet de privilégier le parent \"logique\" au parent \"physique\".\n *\n * NOTE : devrait être déclaré dans DOM, mais nécessaire dans le bootstrap.\n */\nexport interface IDomLogical extends Node {\n\tlogicalParent?: Element\n}\n\n/**\n * Accès en lecture aux données personnelles du user.\n */\nexport interface IUserDatas {\n\n\tgetUserData<T extends Jsonisable>(key: string, defaultVal?: T): T\n}\n\n/**\n * Fournisseur persitant de données personelles.\n * Utilisé pour toute les natures de userDatas (globalStates, globalUserPref,\n * localStates, localUserPref).\n */\nexport interface IPersistUserDatas extends IUserDatas {\n\t/** Modification des states. Pour supprimer un state, passer undefined en value. */\n\tsetUserDatas(datas: Dict<Jsonisable>): Promise<void>\n}\n\n\n/**\n * Registre central permettant de gérer :\n * <ul>\n * <li> des variables d'environnement,\n * <li> un arbre de permissions,\n * <li> les données personnelles du user\n * <li> des points d'extensions : propriétés associées à un \"levelAutority\" pour les mécanismes de surcharge de configuration.\n * </ul>\n *\n * Les points d'extensions (extPoints) du registre sont de différentes natures :\n * <ul>\n * <li>Pref : Simples valeurs (string, int, bolean).\n *      Syntaxe des codes de prefs : \"aaa.bbb.ccc\".\n * <li>List : Liste ordonnée d'objets JS. Chaque entrée dans la liste possède un code (CdEntry) et peut donc\n *      être surchargé individuellement. Chaque entrée peut aussi être une redirection dynamique vers un Svc.\n *      Syntaxe des codes de listes : \"aaa:bbb:ccc\".\n *      Syntaxe des codes des entrées de listes : \"aaaBbbCcc\".\n * <li>Svc : Service, ie un objet JS singleton (object, function ou class).\n *      Un Svc est chargé à l'init, accessible en synchrone.\n *      Syntaxe des codes de Svc en camelCase : \"aaaBbbCcc\".\n * <li>Skin : Fragments de styles pour être injécté dans le contexte d'un élément.\n *      Syntaxe des codes de skin: \"name-du-custom-element\", \"name-du-custom-element/sousPartie\", \"context/name-du-custom-element\", \"codeViewOuCodeArea\".\n *      Tous ces codes sont automatiquement préfixés de SKIN_PREFIX et intégrés dans les Svc, ce qui permet de les intégrer\n *      dans des Listes : addSvcToList('myList', 'entryCode', 1, 'skin:codeViewOuCodeArea')\n * <li>RolePermList : configuration des rôles et des leurs permissions.\n * </ul>\n *\n * Les points d'extension sont déclarés avec un niveau d'autorité (LevelAuthority).\n * Le LevelAuthority permet de préserver uniquement la déclaration du point d'extension avec le niveau le plus élevé.\n * L'ordre chronologique de déclaration des surcharges d'un extPoint n'est donc pas important (avant sa 1ère utilisation).\n *\n * Des sous-registres (cf SubReg) peuvent être définis permettant de surcharger / enrichir un registre.\n * Les modifications apportées au registre de ce sous-contexte restent localisées à celui-ci\n * tout en bénéficiant des caractéristiques du registre parent. Les sous-registres sont récurisifs et\n * peuvent donc constituer un arbre de sous-registres.\n *\n */\nexport interface IReg<ENV> extends IUserDatas, IRegPointer<ENV> {\n\n\t/** Environnement de ce registre, hérite de l'environnement de son Reg parent (chaine des prototypes). */\n\treadonly env: ENV\n\n\t/**\n\t * Objects résolus placés ici en cache, spécifiques à chaque Reg, indépendant de son Reg parent.\n\t * Exemple d'objet : AccelKeyMgr, listes mergées fréquemment utilisées, etc.\n\t */\n\treadonly cache: Map<any, any>\n\n\t/** Registre parent. */\n\treadonly parentReg?: IReg<any>\n\n\t/** Pour que le reg puisse servir de contexte aux actions, areas... */\n\treadonly reg: this\n\n\t/**\n\t * Créé une permission dans ce registre.\n\t *\n\t * @param parentPerm Name d'une permission.\n\t * @return Un objet de type Perm.\n\t */\n\tnewPerm(permName: string, parentPerm: string, systemRights: ESrcRights): REG.Perm\n\n\t/** Retourne une permission enregistrée. */\n\tgetPerm(permName: string): REG.Perm\n\n\t/**\n\t * Evalue 1 ou N permissions dans le contexte de sécurité de ce registre ou celui passé en paramètre.\n\t *\n\t * @param perms Perm ou tableau de Perms.\n\t * @param security Contexte de sécurité. Si null ou undefined, (this.env as ISecurityCtxPointer).securityCtx est utilisé.\n\t * @param and Opérateur appliqué entre les permissions. 'or' par défaut.\n\t *\n\t * @return boolean true / false\n\t *   (si evalPermission() retourne null, true est retourné et un warn est loggé : erreur de paramétrage).\n\t */\n\thasPerm(perms: string | string[], security?: ISecurityCtx, and?: boolean): boolean\n\n\t/**\n\t * Evalue 1 ou N permissions en fonction des roles et de droits systèmes d'un objet métier.\n\t *\n\t * @param perms Perm ou tableau de Perms.\n\t * @param roleNames Tableau JS de names de roles (string).\n\t *    si null ou undefined : les permission sont testées sur ['~default']\n\t * @param isSuperAdmin\n\t * \t\tsi null, reprend cette propriété du securityCtx courant,\n\t * \t\tsi undefined : équivaut à false\n\t * @param systemRights Integer correspondant aux droits systèmes (voir Api Src.ESrcRights)\n\t * @param and Opérateur appliqué entre les permissions. 'or' par défaut.\n\t *\n\t * @return boolean true / false\n\t *   (si evalPermission() retourne null, true est retourné et un warn est loggé : erreur de paramétrage).\n\t */\n\thasPermission(perms: string | string[], roleNames: string[], isSuperAdmin?: boolean | null, systemRights?: ESrcRights, and?: boolean): boolean\n\n\t/**\n\t * Evalue une si les droits systèmes d'un objet métier donné sont autorisés.\n\t *\n\t * @param perms Perm ou tableau de Perms.\n\t * @param systemRights Integer correspondant aux droits systèmes (voir Api Src.ESrcRights).\n\t *    Si non spécifié, c'est le ISecurityCtx par défaut du registre qui est utilisé.\n\t */\n\thasSystemRights(perms: string | string[], systemRights?: ESrcRights, and?: boolean): boolean\n\n\t/**\n\t * Affectation dynamique des données personnelles du user par les composants.\n\t * Ces données sont issues de l'analyse des lastStates, du hash de l'URL...\n\t */\n\tsetVolatileUserStates(key: string, v: Jsonisable): void\n\n\t/**\n\t * Affecte le fournisseur de données personnelles persistantes.\n\t * Chaque registre ne référence qu'un seul fournisseur de données personnelles persistantes.\n\t * C'est la hiérarchie des registres qui constitue la pile du globalUserState et des\n\t * localUserStates relatifs aux objets métiers.\n\t */\n\tsetPersistUserStates(u: IPersistUserDatas): void\n\n\t/** Retourne le 1er PersistUserDatas défini dans ce registre ou dans un registre parent. */\n\tgetPersistUserStates(): IPersistUserDatas\n\n\t/**\n\t * Affecte la valeur à une pref pour un certain niveau d'autorité.\n\t * Le format des codes des prefs est de type \"aaa.bbb.ccc\".\n\t *\n\t * @param code Code de la pref à affecter.\n\t * @param levelAuthority Niveau d'autorité associée à cette affectation.\n\t * @param value Valeur à associer à la pref (string, number, boolean ou null)\n\t * @return true si la valeur a été prise en compte, false si une valeur de niveau supérieur ou égal existe déjà.\n\t */\n\tsetPref(code: string, levelAuthority: number, value: REG.JPrefValue): boolean\n\n\t/**\n\t * Déclare une nouvelle entrée dans une liste pour un certain niveau d'autorité.\n\t *\n\t * @param codeList Code la liste dans laquelle ajouter l'entrée.\n\t * @param codeEntry Code de l'entrée dans la liste.\n\t * @param levelAuthority Niveau d'autorité associée à cette affectation.\n\t * @param valueEntry Valeur de l'entrée, null est autorisé et élimine l'entrée de la liste.\n\t * @param sortKey Clé pour trier la liste, 0 par défaut.\n\t * @return true si la valeur a été prise en compte, false si une valeur de niveau supérieur ou égal existe déjà.\n\t */\n\taddToList(codeList: string, codeEntry: string, levelAuthority: number, valueEntry: any, sortKey?: number): boolean\n\n\t/**\n\t * Déclare une nouvelle entrée sous forme de redisrection vers un svc\n\t * dans une liste pour un certain niveau d'autorité.\n\t *\n\t * @param codeList Code la liste dans laquelle ajouter l'entrée.\n\t * @param codeEntry Code de l'entrée dans la liste correspondant au code de service.\n\t * @param levelAuthority Niveau d'autorité associée à cette affectation.\n\t * @param codeSvc Code du service pointé, null est autorisé et élimine l'entrée de la liste.\n\t * @param sortKey Clé pour trier la liste, 0 par défaut.\n\t * @return true si la valeur a été prise en compte, false si une valeur de niveau supérieur ou égal existe déjà.\n\t */\n\taddSvcToList(codeList: string, codeEntry: string, levelAuthority: number, codeSvc: string, sortKey?: number): boolean\n\n\t/**\n\t * Déclare un service pour un certain niveau d'autorité.\n\t *\n\t * @param code Code du service.\n\t * @param levelAuthority Niveau d'autorité associée à cette affectation.\n\t * @param svc Objet JS correspondant à ce service.\n\t * @return true si ce svc a été pris en compte, false si un svc de niveau supérieur ou égal existe déjà.\n\t */\n\tregisterSvc<S>(code: string, levelAuthority: number, svc: S): boolean\n\n\t/**\n\t * Déclare un service pour un certain niveau d'autorité qui est un wrapper\n\t * du Svc de niveau d'autorité inférieur.\n\t * Ces Svc de type surcharge *doivent* avoir une méthode setOverridenSvc(svc) qui sera\n\t * appelé à chaque récupération de ce service via getSvc(code).\n\t *\n\t * @param code Code du service.\n\t * @param levelAuthority Niveau d'autorité associée à cette affectation.\n\t * @param svc Objet JS correspondant à ce service.\n\t * @return true si ce svc a été pris en compte, false si un svc de niveau supérieur ou égal existe déjà.\n\t */\n\toverlaySvc(code: string, levelAuthority: number, svc: REG.IOverridingSvc): boolean\n\n\t/**\n\t * Déclare un ensemble de styles.\n\t * Syntaxe des codes de skin: \"custom-element-name\", \"custom-element-name/subPart\", \"usageContext/custom-element-name\", \"codeViewOrCodeArea\".\n\t * Tous ces codes sont automatiquement préfixés de SKIN_PREFIX et intégrés dans les Svc, ce qui pourrait permettre de les intégrer\n\t * dans des Listes via reg.addSvcToList('myList', 'entryCode', 1, 'skin:codeViewOrCodeArea')\n\t */\n\tregisterSkin(code: string, levelAuthority: number, styles: string): void\n\n\t/**\n\t * Surcharge un ensemble de styles. Les nouvelles règles seront concaténées après les styles surchargés.\n\t * Le niveau d'autorité spécifie l'ordre de surcharge.\n\t */\n\toverlaySkin(code: string, levelAuthority: number, styles: string): void\n\n\t/**\n\t * Ajoute ou surcharge un ou plusieurs rôles dans ce registre.\n\t * Chaque propriété du role et chaque permission sont associés au niveau d'autorité levelAuthority.\n\t * Il est donc possible de surcharger précisément une propriété d'un role ou un triplet role-perm-access\n\t * (le tableau \"erase\" n'est utilisé que pour annuler un triplet d'un levelAuthority inférieur).\n\t *\n\t * @param levelAuthority Niveau d'autorité associée à cette affectation.\n\t */\n\taddRolePermList(rolePermList: REG.IRoleDef | REG.IRoleDef[], levelAuthority: number): void\n\n\tcopyFrom(other: IReg<any>): this\n\n\tcopyTo(other: IReg<any>): void\n\n\t/**\n\t * Retourne une pref de type String, Int ou Boolean.\n\t *\n\t * @param code Code de la pref\n\t * @param defaultValue Valeur par défaut si cette pref n'existe pas\n\t * @return La pref recherchée ou defaultValue, sinon undefined.\n\t */\n\tgetPref<P extends REG.JPrefValue>(code: string, defaultValue?: P): P\n\n\t/**\n\t * Retourne une liste ordonnée d'objets sous forme d'un tableau JS.\n\t * @return un tableau ou null si la liste n'existe pas.\n\t */\n\tgetList<T>(codeList: string): T[] | null\n\n\t/**\n\t * Retourne une map d'objets sous forme d'un objet JS.\n\t * @return un objet Js ou null si la liste n'existe pas.\n\t */\n\tgetListAsMap<T>(codeList: string): Dict<T> | null\n\n\t/**\n\t * Retourne true si la liste existe et contient au moins une entrée.\n\t */\n\tisListFilled(codeList: string): boolean\n\n\t/**\n\t * Retourne une liste ordonnée d'objets (sous forme d'un tableau JS) issue d'une fusion de plusieurs listes.\n\t * Lorsque plusieurs listes définissent la même entrée (cdEntry identique), c'est le niveau d'autorité le plus\n\t * élevé qui l'emporte et l'entrée de la 1ère liste si le niveau d'autorité est identique.\n\t * @param codeLists Tableau de codes de listes à fusionner.\n\t * @return un tableau ordonné des entrées (éventuellement vide, ne retourne jamais null).\n\t */\n\tmergeLists<T>(...codeLists: string[]): T[]\n\n\t/**\n\t * Retourne une map d'objets (sous forme d'un objet JS) issue d'une fusion de plusieurs listes.\n\t * Lorsque plusieurs listes définissent la même entrée (cdEntry identique), c'est le niveau d'autorité le plus\n\t * élevé qui l'emporte et l'entrée de la 1ère liste si le niveau d'autorité est identique.\n\t * @param cdLists un tableau de codes de listes à fusionner.\n\t * @return un objet de type dictionnaire (éventuellement vide, ne retourne jamais null).\n\t */\n\tmergeListsAsMap<T>(...cdLists: string[]): Dict<T>\n\n\t/**\n\t * Retourne un service (Objet Js singletion dans le contexte de ce registre).\n\t *\n\t * @param code Code du service.\n\t * @return Le svc ou null si il a été surchargé en 'null', ifNone ou undefined si svc non trouvé.\n\t */\n\tgetSvc<T>(code: string, ifNone?: T): T | null | undefined\n\n\tinstallSkin(code: string, from: Node): HTMLStyleElement\n\n\tcreateSkin(code: string): HTMLStyleElement\n\n\t/**\n\t * Efface tous les extPoints et perms configurés pour re-init.\n\t * Exemple : reload du wsp et de son wspMetaUi qui vont redéfinir les extPoints (de ce SubReg).\n\t * ATTENTION : les subReg héritant de celui-ci sont obsolets et ne doivent plus être utilisés.\n\t */\n\tresetExtPoints(): void\n\n\t/**\n\t * Fermeture de ce registre. Désabonnement à tous les listeners externes et libération des ressources.\n\t * Une fois le registre est inutilisable, tous les extPoints env et caches sont supprimés pour aider le GC.\n\t * ATTENTION : les subReg héritant de celui-ci sont obsolets et ne doivent plus être utilisés.\n\t */\n\tclose(): void\n\n\tisClosed: boolean,\n\n\t/** Callback(s) à appeler à l'appel de close() de ce registre. */\n\tonRegClose: EventMgr<() => void>\n\n\t/**\n\t * Retourne une définition json de ce registre. Pour debug.\n\t */\n\tgetRegDef(): REG.JRegDef\n}\n\nexport namespace REG {\n\n\t/**\n\t * Récupère le reg à partir d'un objet contexte qui pourrait être un IRegPointer<ENV>\n\t * ou un Node | IDomLogical dont ce noeud ou un de ces ancêtres logiques peut implémenter IRegPointer<ENV>.\n\t * A défaut retourne REG.reg.\n\t */\n\texport function getReg<ENV>(ctx: any): IReg<ENV> {\n\t\tif (ctx instanceof Node) return findRegFromDom(ctx) || reg;\n\t\treturn ctx ? (ctx as IRegPointer<any>).reg || reg : reg;\n\t}\n\n\t/**\n\t * Recherche un registre dans le contexte d'un noeud DOM, mais privilégie la recherche\n\t * dans un objet contexte si disponible.\n\t */\n\texport function findReg<ENV>(from: Node | IDomLogical, ctx?: IRegPointer<any>): IReg<ENV> {\n\t\tif (ctx) {\n\t\t\tif (ctx.reg) return ctx.reg;\n\t\t\tif (ctx instanceof Node) return findRegFromDom(ctx) || findRegFromDom(from) || reg;\n\t\t}\n\t\treturn findRegFromDom(from) || reg;\n\t}\n\n\t/** */\n\tfunction findRegFromDom<ENV>(from: Node | IDomLogical): IReg<ENV> {\n\t\tlet n = from;\n\t\twhile (n) {\n\t\t\tif (isRegPointer(n)) return n.reg;\n\t\t\tn = 'logicalParent' in n ? n.logicalParent\n\t\t\t\t: (n as Element | Text).assignedSlot\n\t\t\t\t|| n.parentElement\n\t\t\t\t|| (n.parentNode instanceof ShadowRoot ? n.parentNode.host : null);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Recherche la librairie de déclaration d'une perm scenari donnée (pour load) */\n\texport async function findScPermLibPath(permCode: string): Promise<string | undefined> {\n\t\tlet {SC_PERMS} = await import(\"lib/commons/utils/scPerms.js\");\n\t\treturn (SC_PERMS as any)[permCode];\n\t}\n\n\t/** Création d'un SubReg à partir du registre graphique contextuel à un node combiné à un registre d'un objet métier. */\n\texport function createSubReg<ENV>(fromUi: Node | IReg<any>, businessObject?: IRegPointer<any> | IReg<any>): IReg<ENV> {\n\t\tconst subReg = new SubReg<ENV>(fromUi instanceof REG.Reg ? fromUi : REG.findReg(fromUi as Node) as Reg<any>);\n\t\tif (businessObject instanceof REG.Reg) subReg.copyFrom(businessObject);\n\t\telse if (isRegPointer(businessObject)) subReg.copyFrom(businessObject.reg);\n\t\treturn subReg;\n\t}\n\n\t/** Création d'un SubReg en mixant deux reg (et exploitant le typage automatique de TS) */\n\texport function createSubRegMixed<EUI, EBIZ>(uiReg: IReg<EUI>, bizReg: IReg<EBIZ>): IReg<EUI & EBIZ> {\n\t\treturn new SubReg<EUI & EBIZ>(uiReg as Reg<EUI>).copyFrom(bizReg);\n\t}\n\n\texport function removeSkin(skin: string, from: Node & ParentNode) {\n\t\twhile (from.parentNode) from = from.parentNode;\n\t\tfor (let ch = from.firstElementChild; ch; ch = ch.nextElementSibling) {\n\t\t\tif (ch.localName === \"style\" && ch.getAttribute(\"data-code\") === skin) {\n\t\t\t\tch.remove();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\texport class Reg<ENV> implements IReg<ENV> {\n\n\t\tenv: ENV;\n\n\t\tprotected _cache: Map<any, any>;\n\t\tget cache(): Map<any, any> {return this._cache || (this._cache = new Map())}\n\n\t\tparentReg?: Reg<any>;\n\n\t\tget reg(): this {return this}\n\n\t\t/** Map des permissions du registre. */\n\t\tprotected _perms: Dict<Perm>;\n\n\t\t/**\n\t\t * Données personnelles persistantes. Chaque registre ne possède qu'un seul persitant userState.\n\t\t * La hiérarchie des registres constitue la pile du globalUserState et des localUserStates.\n\t\t */\n\t\tprotected _persistUS: IPersistUserDatas;\n\n\t\t/** Données personnelles du user modifiées par les composants (lastStates, url hash...). */\n\t\tprotected _volatileUS: Dict<Jsonisable>;\n\n\t\t//Structures internes de type extPoints\n\t\tprotected _prefLevels: { [code: string]: number } = Object.create(null);\n\t\tprotected _prefs: { [code: string]: JPrefValue } = Object.create(null);\n\t\tprotected _lists: { [codeList: string]: IList } = Object.create(null);\n\t\tprotected _svcs: { [codeSvc: string]: ISvcDef } = Object.create(null);\n\t\tprotected _roles: { [codeRole: string]: IRoleStruct } = Object.create(null);\n\n\t\tconstructor(fromSubReg?: boolean) {\n\t\t\tif (!fromSubReg) {\n\t\t\t\t/* Role ~default\n\t\t\t\t * \t> porte le paramétrage applicatif via le systeme de droits\n\t\t\t\t *  > role utilisé qd le contexte ne gère pas de droits (chain, home, ...)\n\t\t\t\t */\n\t\t\t\tthis.addRolePermList({role: SEC.DEFAULT_ROLE_NAME, title: SEC.DEFAULT_ROLE_NAME, priority: 0, allow: [\"DO\", \"DATA\"]}, 1);\n\t\t\t\tthis.addRolePermList({role: SEC.FALLBACK_ROLE_NAME, title: SEC.FALLBACK_ROLE_NAME, superRole: SEC.DEFAULT_ROLE_NAME, priority: 0, allow: [\"use\"], deny: [\"DO\", \"DATA\"]}, 1);\n\n\t\t\t\tthis.env = Object.create(null);\n\t\t\t\tthis._perms = Object.create(null);\n\t\t\t\tthis._volatileUS = Object.create(null);\n\t\t\t}\n\t\t}\n\n\t\tget onRegClose(): EventMgr<() => void> {return this._onRegClose || (this._onRegClose = new EventMgr())}\n\n\t\tprotected _onRegClose: EventMgr<() => void>;\n\n\t\tclose() {\n\t\t\t//clos userData et autres ICloseable inscrits dans un listener 'onRegClose'.\n\t\t\tif (this._onRegClose) this._onRegClose.emitCatched();\n\t\t\tthis._onRegClose = null; //Marque ce reg clos.\n\t\t\t//help GC -- NON provoque trop d'erreures liées à des traitements post-cloture\n\t\t\t//this.env = this.cache = this._onRegClose = this._prefLevels = this._prefs = this._lists = this._svcs = this._roles = this._perms = this._volatileUS = undefined;\n\t\t}\n\n\t\tget isClosed() {return this._onRegClose === null}\n\n\t\tresetExtPoints() {\n\t\t\tthis._prefLevels = Object.create(null);\n\t\t\tthis._prefs = Object.create(null);\n\t\t\tthis._lists = Object.create(null);\n\t\t\tthis._svcs = Object.create(null);\n\t\t\tthis._roles = Object.create(null);\n\t\t\tthis._perms = Object.create(null);\n\t\t\tthis._volatileUS = Object.create(null);\n\t\t}\n\n\t\tnewPerm(permName: string, parentPerm: string, systemRights: ESrcRights): Perm {\n\t\t\tlet perm = this._perms[permName];\n\t\t\tif (perm) return perm;\n\t\t\tconst parent = this._perms[parentPerm];\n\t\t\tif (parentPerm && !parent) console.warn(\"Parent permission '\" + parentPerm + \"' of '\" + permName + \"' not found in \" + this);\n\t\t\tperm = new Perm(permName, parent, systemRights);\n\t\t\tthis._perms[permName] = perm;\n\t\t\treturn perm;\n\t\t}\n\n\t\tgetPerm(permName: string): Perm {\n\t\t\treturn this._perms[permName];\n\t\t}\n\n\t\thasPerm(perms: string | string[], security?: ISecurityCtx, and?: boolean): boolean {\n\t\t\tif (!security) security = (this.env as ISecurityCtxPointer).securityCtx;\n\t\t\tif (!security) return false; //pas de contexte de sécurité initialisé, on désactive toutes les perms.\n\t\t\treturn this.hasPermission(perms, security.srcRoles, security.isSuperAdmin, security.srcRi, and);\n\t\t}\n\n\t\thasPermission(perms: string | string[], roleNames: string[], isSuperAdmin?: boolean | null, systemRights?: ESrcRights, and?: boolean): boolean {\n\t\t\tif (isSuperAdmin === null) {\n\t\t\t\tconst security = (this.env as ISecurityCtxPointer)?.securityCtx;\n\t\t\t\tisSuperAdmin = security ? security.isSuperAdmin : false;\n\t\t\t}\n\t\t\tif (isSuperAdmin) return this.hasSystemRights(perms, systemRights, and) !== false;\n\t\t\tconst rolesNames = roleNames || ((this.env as IAuthenticatedEnv).noAuthentication ? SEC.DEFAULT_ROLES : SEC.FALLBACK_ROLES);\n\t\t\tif (Array.isArray(perms)) {\n\t\t\t\tconst l = perms.length;\n\t\t\t\tif (l === 0) return true;\n\t\t\t\tif (and) {\n\t\t\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\t\t\tconst p = this.evalPermission(perms[i], roleNames, systemRights);\n\t\t\t\t\t\tif (p === false) return false;\n\t\t\t\t\t\tif (p == null) console.warn(\"Permission '\" + perms[i] + \"' not declared for roles : \" + rolesNames);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\t\t\tconst p = this.evalPermission(perms[i], roleNames, systemRights);\n\t\t\t\t\t\tif (p === true) return true;\n\t\t\t\t\t\tif (p == null) console.warn(\"Permission '\" + perms[i] + \"' not declared for roles : \" + rolesNames);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst p = this.evalPermission(perms, rolesNames, systemRights);\n\t\t\tif (p == null) console.warn(\"Permission '\" + perms + \"' not declared for roles : \" + rolesNames);\n\t\t\treturn p !== false;\n\t\t}\n\n\t\thasSystemRights(perms: string | string[], systemRights?: ESrcRights, and?: boolean): boolean {\n\t\t\tif (systemRights === undefined) {\n\t\t\t\tconst security = (this.env as ISecurityCtxPointer).securityCtx;\n\t\t\t\tif (!security) return true;\n\t\t\t\tsystemRights = security.srcRi;\n\t\t\t}\n\t\t\tif (Array.isArray(perms)) {\n\t\t\t\tconst l = perms.length;\n\t\t\t\tif (l === 0) return true;\n\t\t\t\tif (and) {\n\t\t\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\t\t\tconst p = this.evalSystemRights(perms[i], systemRights);\n\t\t\t\t\t\tif (p === false) return false;\n\t\t\t\t\t\tif (p == null) console.warn(\"Permission '\" + perms[i] + \"' not declared\");\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\t\t\tconst p = this.evalSystemRights(perms[i], systemRights);\n\t\t\t\t\t\tif (p === true) return true;\n\t\t\t\t\t\tif (p == null) console.warn(\"Permission '\" + perms[i] + \"' not declared\");\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.evalSystemRights(perms, systemRights) !== false;\n\t\t}\n\n\t\t//############################ UserDatas #############################\n\n\t\tsetVolatileUserStates(key: string, v: Jsonisable) {\n\t\t\tthis._volatileUS[key] = v;\n\t\t}\n\n\t\tsetPersistUserStates(u: IPersistUserDatas) {\n\t\t\tthis._persistUS = u;\n\t\t}\n\n\t\tgetPersistUserStates(): IPersistUserDatas {return this._persistUS}\n\n\t\tgetUserData<T extends Jsonisable>(key: string, defaultVal?: T): T {\n\t\t\tconst level = this.getPrefLevel(key);\n\t\t\tif (level >= LEVELAUTH_USER) return this.getPref(key);\n\t\t\tlet v = this._volatileUS[key];\n\t\t\tif (v !== undefined) return v;\n\t\t\tv = this._getPersistUserData(key);\n\t\t\tif (v !== undefined) return v;\n\t\t\tif (level !== -Infinity) return this.getPref(key);\n\t\t\treturn defaultVal;\n\t\t}\n\n\t\t/* protected */\n\t\t_getPersistUserData(key: string): Jsonisable | undefined {\n\t\t\tif (this._persistUS) return this._persistUS.getUserData(key);\n\t\t}\n\n\t\t//############################ Affectations des extPoints #############################\n\n\t\tsetPref(code: string, levelAuthority: number, value: JPrefValue): boolean {\n\t\t\tconst currentLevel = this._prefLevels[code];\n\t\t\tif (currentLevel == null || currentLevel < levelAuthority) {\n\t\t\t\tthis._prefLevels[code] = levelAuthority;\n\t\t\t\tthis._prefs[code] = value;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\taddToList(codeList: string, codeEntry: string, levelAuthority: number, valueEntry: any, sortKey = 0): boolean {\n\t\t\tlet list = this._lists[codeList];\n\t\t\tif (!list) {\n\t\t\t\tlist = this._lists[codeList] = Object.create(null);\n\t\t\t}\n\t\t\tconst entry = list[codeEntry];\n\t\t\tif (!entry || entry.level < levelAuthority) {\n\t\t\t\tlist[codeEntry] = {\n\t\t\t\t\tlevel: levelAuthority,\n\t\t\t\t\tcode: codeEntry,\n\t\t\t\t\tvalue: valueEntry,\n\t\t\t\t\tsortKey: sortKey\n\t\t\t\t};\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\taddSvcToList(codeList: string, codeEntry: string, levelAuthority: number, codeSvc: string, sortKey = 0): boolean {\n\t\t\tlet list = this._lists[codeList];\n\t\t\tif (!list) {\n\t\t\t\tlist = this._lists[codeList] = Object.create(null);\n\t\t\t}\n\t\t\tconst entry = list[codeEntry];\n\t\t\tif (!entry || entry.level < levelAuthority) {\n\t\t\t\tlist[codeEntry] = {\n\t\t\t\t\tlevel: levelAuthority,\n\t\t\t\t\tcode: codeEntry,\n\t\t\t\t\tcodeSvc: codeSvc,\n\t\t\t\t\tvalue: codeSvc != null ? REDIRECT_TO_SVC : null,\n\t\t\t\t\tsortKey: sortKey\n\t\t\t\t};\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tregisterSvc<S>(code: string, levelAuthority: number, svc: S): boolean {\n\t\t\tconst svcDef = this._svcs[code];\n\t\t\tif (!svcDef || svcDef.level < levelAuthority) {\n\t\t\t\tthis._svcs[code] = {\n\t\t\t\t\tsvc: svc,\n\t\t\t\t\tlevel: levelAuthority\n\t\t\t\t};\n\t\t\t\treturn true;\n\t\t\t} else if (\"override\" in svcDef) {\n\t\t\t\treturn this._insertSvcInOverrideChain(svcDef, svc, levelAuthority);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\toverlaySvc(code: string, levelAuthority: number, svc: IOverridingSvc): boolean {\n\t\t\tconst svcDef = this._svcs[code];\n\t\t\tif (!svcDef || svcDef.level < levelAuthority) {\n\t\t\t\tthis._svcs[code] = {\n\t\t\t\t\tsvc: svc,\n\t\t\t\t\tlevel: levelAuthority,\n\t\t\t\t\toverride: svcDef\n\t\t\t\t};\n\t\t\t\treturn true;\n\t\t\t} else if (\"override\" in svcDef) {\n\t\t\t\treturn this._insertSvcInOverrideChain(svcDef, svc, levelAuthority, true);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tregisterSkin(code: string, levelAuthority: number, styles: string) {\n\t\t\tthis.registerSvc(SKIN_PREFIX + code, levelAuthority, new SkinHolder(code, styles));\n\t\t}\n\n\t\toverlaySkin(code: string, levelAuthority: number, styles: string) {\n\t\t\tthis.overlaySvc(SKIN_PREFIX + code, levelAuthority, new SkinHolder(code, styles));\n\t\t}\n\n\t\taddRolePermList(rolePermList: IRoleDef | IRoleDef[], levelAuthority: number): void {\n\t\t\tif (Array.isArray(rolePermList)) {\n\t\t\t\tfor (const i in rolePermList) this.addRolePermList(rolePermList[i], levelAuthority);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//log.info(\"will Add role::::::::::::\\n\"+JSON.stringify(rolePermList));\n\t\t\tif (!rolePermList.role) return;\n\t\t\tlet r = this._roles[rolePermList.role];\n\t\t\tif (!r) r = this._roles[rolePermList.role] = {role: rolePermList.role, perms: Object.create(null)};\n\t\t\tif (\"title\" in rolePermList) {\n\t\t\t\tif (!r.title || r.title.level < levelAuthority) r.title = {level: levelAuthority, value: rolePermList.title}\n\t\t\t}\n\t\t\tif (\"priority\" in rolePermList) {\n\t\t\t\tif (!r.priority || r.priority.level < levelAuthority) r.priority = {level: levelAuthority, value: rolePermList.priority}\n\t\t\t}\n\t\t\tif (\"superRole\" in rolePermList) {\n\t\t\t\tif (!r.superRole || r.superRole.level < levelAuthority) r.superRole = {level: levelAuthority, value: rolePermList.superRole}\n\t\t\t}\n\t\t\tif (\"setPerm\" in rolePermList) {\n\t\t\t\tif (!r.setPerm || r.setPerm.level < levelAuthority) r.setPerm = {level: levelAuthority, value: rolePermList.setPerm}\n\t\t\t}\n\t\t\tif (rolePermList.deny) for (let i = 0, l = rolePermList.deny.length; i < l; i++) {\n\t\t\t\tconst permName = rolePermList.deny[i];\n\t\t\t\tconst pre = r.perms[permName];\n\t\t\t\tif (!pre || pre.level < levelAuthority) r.perms[permName] = {level: levelAuthority, value: false}\n\t\t\t}\n\t\t\tif (rolePermList.allow) for (let i = 0, l = rolePermList.allow.length; i < l; i++) {\n\t\t\t\tconst permName = rolePermList.allow[i];\n\t\t\t\tconst pre = r.perms[permName];\n\t\t\t\tif (!pre || pre.level < levelAuthority) r.perms[permName] = {level: levelAuthority, value: true}\n\t\t\t}\n\t\t\tif (rolePermList.erase) for (let i = 0, l = rolePermList.erase.length; i < l; i++) {\n\t\t\t\tconst permName = rolePermList.erase[i];\n\t\t\t\tconst pre = r.perms[permName];\n\t\t\t\tif (!pre || pre.level < levelAuthority) r.perms[permName] = {level: levelAuthority, value: null}\n\t\t\t}\n\t\t\t//log.info(\"Role:::\\n\"+JSON.stringify(r));\n\t\t}\n\n\n\t\tcopyFrom(other: IReg<any>): this {\n\t\t\tif (other) other.copyTo(this);\n\t\t\treturn this;\n\t\t}\n\n\t\tcopyTo(other: Reg<any>) {\n\t\t\tObject.assign(other.env, this.env);\n\t\t\tObject.assign(other._perms, this._perms);\n\t\t\tfor (const nm of Object.getOwnPropertyNames(this._prefs)) {\n\t\t\t\tother.setPref(nm, this._prefLevels[nm], this._prefs[nm]);\n\t\t\t}\n\t\t\tfor (const nm of Object.getOwnPropertyNames(this._svcs)) {\n\t\t\t\tconst svc = this._svcs[nm];\n\t\t\t\tif ('override' in svc) {\n\t\t\t\t\tother.overlaySvc(nm, svc.level, svc.svc);\n\t\t\t\t} else {\n\t\t\t\t\tother.registerSvc(nm, svc.level, svc.svc);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const nm of Object.getOwnPropertyNames(this._lists)) {\n\t\t\t\tconst lst = this._lists[nm];\n\t\t\t\tfor (const entry of Object.values(lst)) {\n\t\t\t\t\tif (entry.value === REDIRECT_TO_SVC) other.addSvcToList(nm, entry.code, entry.level, entry.codeSvc, entry.sortKey);\n\t\t\t\t\telse other.addToList(nm, entry.code, entry.level, entry.value, entry.sortKey);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const nm of Object.getOwnPropertyNames(this._roles)) {\n\t\t\t\tconst role: IRoleStruct = this._roles[nm];\n\t\t\t\tif (\"title\" in role) other.addRolePermList({role: nm, title: role.title.value}, role.title.level);\n\t\t\t\tif (\"description\" in role) other.addRolePermList({role: nm, description: role.description.value}, role.description.level);\n\t\t\t\tif (\"priority\" in role) other.addRolePermList({role: nm, priority: role.priority.value}, role.priority.level);\n\t\t\t\tif (\"sortKey\" in role) other.addRolePermList({role: nm, sortKey: role.sortKey.value}, role.sortKey.level);\n\t\t\t\tif (\"superRole\" in role) other.addRolePermList({role: nm, superRole: role.superRole.value}, role.superRole.level);\n\t\t\t\tif (\"setPerm\" in role) other.addRolePermList({role: nm, setPerm: role.setPerm.value}, role.setPerm.level);\n\t\t\t\tfor (const [perm, val] of Object.entries(role.perms)) {\n\t\t\t\t\tif (val.value === true) {\n\t\t\t\t\t\tother.addRolePermList({role: nm, allow: [perm]}, val.level);\n\t\t\t\t\t} else if (val.value === false) {\n\t\t\t\t\t\tother.addRolePermList({role: nm, deny: [perm]}, val.level);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tother.addRolePermList({role: nm, erase: [perm]}, val.level);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//############################ Lecture des extPoints #############################\n\n\t\tgetPref<P extends REG.JPrefValue>(code: string, defaultValue?: P): P {\n\t\t\treturn (code in this._prefs) ? this._prefs[code] as P : defaultValue;\n\t\t}\n\n\t\tgetList<T>(codeList: string): T[] {\n\t\t\tconst list = this._getListEntries(codeList);\n\t\t\tif (!list) return null;\n\n\t\t\tconst result: any[] = [];\n\t\t\tfor (const code in list) {\n\t\t\t\tif (list[code].value != null) result.push(list[code]);\n\t\t\t}\n\t\t\tresult.sort(sortEntries);\n\t\t\tlet i, k;\n\t\t\tfor (i = 0, k = 0; i < result.length; i++) {\n\t\t\t\tlet val = result[i].value;\n\t\t\t\tif (val === REDIRECT_TO_SVC) {\n\t\t\t\t\tval = this.getSvc(result[i].codeSvc);\n\t\t\t\t\tif (val) result[k++] = val;\n\t\t\t\t} else {\n\t\t\t\t\tresult[k++] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (k < i) result.splice(k);\n\t\t\treturn result;\n\t\t}\n\n\t\tgetListAsMap<T>(codeList: string): Dict<T> {\n\t\t\tconst list = this._getListEntries(codeList);\n\t\t\tif (!list) return null;\n\n\t\t\tconst result: Dict<T> = Object.create(null);\n\t\t\tfor (const code in list) {\n\t\t\t\tconst entry = list[code];\n\t\t\t\tif (entry.value != null) result[entry.code] = entry.value === REDIRECT_TO_SVC ? this.getSvc(entry.codeSvc) : entry.value;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tisListFilled(codeList: string): boolean {\n\t\t\tconst list = this._getListEntries(codeList);\n\t\t\tif (!list) return false;\n\t\t\tfor (const code in list) {\n\t\t\t\tif (list[code].value != null) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tmergeLists<T>(...cdLists: string[]): T[] {\n\t\t\tif (cdLists.length === 1) return this.getList(cdLists[0]) || [];\n\t\t\tconst mergedList: Dict<IListEntry> = Object.create(null);\n\t\t\tfor (let i = 0; i < cdLists.length; i++) {\n\t\t\t\tconst list = this._getListEntries(cdLists[i]);\n\t\t\t\tif (list) {\n\t\t\t\t\tfor (const code in list) {\n\t\t\t\t\t\tconst entry = list[code];\n\t\t\t\t\t\tconst mergedEntry = mergedList[entry.code];\n\t\t\t\t\t\tif (!mergedEntry || mergedEntry.level < entry.level) {\n\t\t\t\t\t\t\tmergedList[entry.code] = entry;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst result: any[] = [];\n\t\t\tfor (const code in mergedList) {\n\t\t\t\tconst entry = mergedList[code];\n\t\t\t\tif (entry.value != null) result.push(entry);\n\t\t\t}\n\t\t\tresult.sort(sortEntries);\n\t\t\tlet i, k;\n\t\t\tfor (i = 0, k = 0; i < result.length; i++) {\n\t\t\t\tlet val = result[i].value;\n\t\t\t\tif (val === REDIRECT_TO_SVC) {\n\t\t\t\t\tval = this.getSvc(result[i].codeSvc);\n\t\t\t\t\tif (val) result[k++] = val;\n\t\t\t\t} else {\n\t\t\t\t\tresult[k++] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (k < i) result.splice(k);\n\n\t\t\treturn result;\n\t\t}\n\n\t\tmergeListsAsMap<T>(...cdLists: string[]): Dict<T> {\n\t\t\tif (cdLists.length === 1) return this.getListAsMap(cdLists[0]) || Object.create(null);\n\t\t\tconst mergedList: IList = Object.create(null);\n\t\t\tfor (let i = 0; i < cdLists.length; i++) {\n\t\t\t\tconst list = this._getListEntries(cdLists[i]);\n\t\t\t\tif (list) {\n\t\t\t\t\tfor (const code in list) {\n\t\t\t\t\t\tconst entry = list[code];\n\t\t\t\t\t\tconst mergedEntry = mergedList[entry.code];\n\t\t\t\t\t\tif (!mergedEntry || mergedEntry.level < entry.level) {\n\t\t\t\t\t\t\tmergedList[entry.code] = entry;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result: Dict<T> = Object.create(null);\n\t\t\tfor (const code in mergedList) {\n\t\t\t\tconst entry = mergedList[code];\n\t\t\t\tif (entry.value != null) result[entry.code] = entry.value === REDIRECT_TO_SVC ? this.getSvc(entry.codeSvc) : entry.value;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tgetSvc<T>(code: string, ifNone?: T): T | null | undefined {\n\t\t\ttry {\n\t\t\t\tconst svcDef = this._svcs[code];\n\t\t\t\tif (!svcDef) return ifNone;\n\t\t\t\tif (svcDef.svc == null) return svcDef.svc; //null ou undefined\n\t\t\t\tif (\"override\" in svcDef) this._setOverridenSvc(code, svcDef);\n\t\t\t\treturn svcDef.svc;\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(\"Load lib \" + code + \" failed::\", e);\n\t\t\t\treturn ifNone;\n\t\t\t}\n\t\t}\n\n\t\tinstallSkin(code: string, from: Node = document): HTMLStyleElement {\n\t\t\twhile (from.parentNode) from = from.parentNode;\n\t\t\tconst skin = this.getSvc(SKIN_PREFIX + code);\n\t\t\treturn skin instanceof SkinHolder ? skin.installSkin(from as Document | ShadowRoot) : null;\n\t\t}\n\n\t\tcreateSkin(code: string): HTMLStyleElement {\n\t\t\tconst skin = this.getSvc(SKIN_PREFIX + code);\n\t\t\treturn skin instanceof SkinHolder ? skin.createStyleElt() : null;\n\t\t}\n\n\t\t/**\n\t\t * Evalue une ou plusieurs permissions en fonction de roles et de droits systèmes associés à un objet.\n\t\t *\n\t\t * @param perm Objet ou tableau d'objet de type Perm issu de module SECURITY.\n\t\t * @param roleNames Tableau de names de roles (string).\n\t\t * @param systemRights Integer correspondant aux droits systèmes (voir Api Src)\n\t\t *\n\t\t * @return boolean true, false ou null (ce qui correspond normalement à une erreur de paramétrage).\n\t\t */\n\t\tevalPermission(perm: string, roleNames: string[], systemRights?: ESrcRights): boolean | null {\n\t\t\tconst p: Perm = this._perms[perm];\n\t\t\tif (!p) return null;\n\n\t\t\t//System rights\n\t\t\tif (systemRights != null) {\n\t\t\t\t//log.info(\"evalPermission:::\"+pPerms+\" for roles:::\"+pRoleNames);\n\t\t\t\tlet permRi = p;\n\t\t\t\twhile (permRi) {\n\t\t\t\t\tif (permRi.systemRights > 0 && ~(~permRi.systemRights | systemRights) != 0) return false;\n\t\t\t\t\tpermRi = permRi.parent;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!roleNames || roleNames.length === 0) return false;\n\t\t\tif (roleNames.length > 1) {\n\t\t\t\troleNames.sort((r1, r2) => {\n\t\t\t\t\treturn (this.getRoleProperty(r2, \"priority\") as number || 0) - (this.getRoleProperty(r1, \"priority\") as number || 0);\n\t\t\t\t});\n\t\t\t}\n\t\t\t//log.info(\"evalPermission:::\"+perms+\" for roles:::\"+roleNames);\n\t\t\tfor (let i = 0, l = roleNames.length; i < l; i++) {\n\t\t\t\tlet permHier = p;\n\t\t\t\twhile (permHier) {\n\t\t\t\t\tlet r = roleNames[i];\n\t\t\t\t\twhile (r) {\n\t\t\t\t\t\tconst access = this.getRolePermAccess(r, permHier.name);\n\t\t\t\t\t\t//log.info(\"evalPermission:::\"+permHier+\" for role:::\"+r+\" result:::\"+access+\" --\\n\"+JSON.stringify(this.roles[r]));\n\t\t\t\t\t\tif (access == true) return true;\n\t\t\t\t\t\tif (access == false) return false;\n\t\t\t\t\t\tr = this.getRoleProperty(r, \"superRole\") as \"string\";\n\t\t\t\t\t}\n\t\t\t\t\tpermHier = permHier.parent;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tevalSystemRights(perm: string, systemRights: ESrcRights): boolean | null {\n\t\t\tconst p = this._perms[perm];\n\t\t\tif (!p) return null;\n\t\t\tif (systemRights == null) return true;\n\t\t\t//log.info(\"evalPermission:::\"+pPerms+\" for roles:::\"+pRoleNames);\n\t\t\tlet permRi = p;\n\t\t\twhile (permRi) {\n\t\t\t\tif (permRi.systemRights > 0 && ~(~permRi.systemRights | systemRights) != 0) return false;\n\t\t\t\tpermRi = permRi.parent;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t//##################### Usages avancés / internes ######################\n\n\t\t/**\n\t\t * Retourne le niveau d'autorité actuel d'une pref.\n\t\t *\n\t\t * @return Number.NEGATIVE_INFINITY si indifini.\n\t\t */\n\t\tgetPrefLevel(code: string): number {\n\t\t\tconst lev = this._prefLevels[code];\n\t\t\treturn lev != undefined ? lev : Number.NEGATIVE_INFINITY;\n\t\t}\n\n\t\t/**\n\t\t * Retourne le niveau d'autorité actuel d'un service.\n\t\t *\n\t\t * @return Number.NEGATIVE_INFINITY si indifini.\n\t\t */\n\t\tgetSvcLevel(code: string): number {\n\t\t\tconst svc = this._svcs[code];\n\t\t\treturn svc ? svc.level : Number.NEGATIVE_INFINITY;\n\t\t}\n\n\t\t/**\n\t\t * Retourne le niveau d'autorité actuel d'une entrée d'une liste.\n\t\t *\n\t\t * @return Number.NEGATIVE_INFINITY si indifini.\n\t\t */\n\t\tgetEntryListLevel(codeList: string, codeEntry: string): number {\n\t\t\tconst list = this._lists[codeList];\n\t\t\tif (!list) return Number.NEGATIVE_INFINITY;\n\t\t\tconst entry = list[codeEntry];\n\t\t\tif (!entry) return Number.NEGATIVE_INFINITY;\n\t\t\treturn entry.level;\n\t\t}\n\n\t\t/**\n\t\t * Usage avancé / interne\n\t\t * Teste s'il existe des rôles\n\t\t *\n\t\t * @return true si au moins un role est défini\n\t\t */\n\t\thasRoles(): boolean {\n\t\t\tfor (const i in this._roles) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Usage avancé / interne\n\t\t * Retourne la liste des rôles définies\n\t\t *\n\t\t * @return tableau des noms des rôles.\n\t\t */\n\t\tgetRoleNames(): string[] {\n\t\t\treturn Object.keys(this._roles);\n\t\t}\n\n\t\t/**\n\t\t * Usage avancé / interne.\n\t\t * Retourne une propriété (title, priority, superRole...) d'un role.\n\t\t *\n\t\t * @return undefined si cette propriété ou ce role n'existe pas.\n\t\t */\n\t\tgetRoleProperty(role: string, propName: keyof IRoleValues): string | number | boolean | undefined {\n\t\t\tconst r = this._roles[role];\n\t\t\tif (!r) return undefined;\n\t\t\tconst p = r[propName];\n\t\t\tif (!p) return undefined;\n\t\t\treturn p.value;\n\t\t}\n\n\t\t/**\n\t\t * Usage avancé / interne\n\t\t * Retourne la liste des permissions définies pour ce role\n\t\t *\n\t\t * @return tableau des noms des permissions ou undefined si ce role n'est pas trouvé.\n\t\t */\n\t\tgetRolePermNames(role: string): string[] | undefined {\n\t\t\tconst r = this._roles[role];\n\t\t\tif (!r) return undefined;\n\t\t\treturn r.perms ? Object.keys(r.perms) : [];\n\t\t}\n\n\t\t/**\n\t\t * Usage avancé / interne.\n\t\t * Retourne un accès pour un couple role / permission.\n\t\t *\n\t\t * @return true, false, null (erase) ou undefined si ce couple n'exite pas.\n\t\t */\n\t\tgetRolePermAccess(roleName: string, permName: string): boolean | null | undefined {\n\t\t\tconst r = this._roles[roleName];\n\t\t\tif (!r) return undefined;\n\t\t\tconst p = r.perms[permName];\n\t\t\tif (!p) return undefined;\n\t\t\treturn p.value;\n\t\t}\n\n\t\t/**\n\t\t * Usage avancé / interne. Retourne le level une propriété (title, priority, extend, alternateGrou, visible, ...) d'un role.\n\t\t *\n\t\t * @return Number.NEGATIVE_INFINITY si cette propriété ou ce role n'existe pas.\n\t\t */\n\t\tgetRolePropertyLevel(roleName: string, propName: keyof IRoleValues): number {\n\t\t\tconst r = this._roles[roleName];\n\t\t\tif (!r) return Number.NEGATIVE_INFINITY;\n\t\t\tconst p = r[propName];\n\t\t\tif (!p) return Number.NEGATIVE_INFINITY;\n\t\t\treturn p.level;\n\t\t}\n\n\t\t/**\n\t\t * Usage avancé / interne. Retourne le level d'une permission associée à un role.\n\t\t *\n\t\t * @return Number.NEGATIVE_INFINITY si ce couple role-permission n'est pas définit.\n\t\t */\n\t\tgetRolePermLevel(roleName: string, permName: string): number {\n\t\t\tconst r = this._roles[roleName];\n\t\t\tif (!r) return Number.NEGATIVE_INFINITY;\n\t\t\tconst p = r.perms[permName];\n\t\t\tif (!p) return Number.NEGATIVE_INFINITY;\n\t\t\treturn p.level;\n\t\t}\n\n\t\t/**\n\t\t * Retourne un tableau avec toutes les prefs.\n\t\t * TODO @param pWithInherited intègre les valeurs des registres parents.\n\t\t */\n\t\tdumpPrefs(): { cd: string, value: string | number | Array<Jsonisable> | boolean, level: number }[] {\n\t\t\tconst result = [];\n\t\t\tfor (const code in this._prefs) {\n\t\t\t\tresult.push({cd: code, value: this._prefs[code], level: this._prefLevels[code]});\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * Retourne un tableau avec tous les Svc.\n\t\t * TODO @param pWithInherited intègre les valeurs des registres parents.\n\t\t */\n\t\tdumpSvcs(): { cd: string, value: any, level: number }[] {\n\t\t\tconst result = [];\n\t\t\tfor (const code in this._svcs) {\n\t\t\t\tconst svc = this._svcs[code];\n\t\t\t\tresult.push({cd: code, value: svc.svc, level: svc.level});\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * Retourne un tableau avec toutes les List.\n\t\t * TODO @param pWithInherited intègre les valeurs des registres parents.\n\t\t */\n\t\tdumpLists(): { cd: string, cdEntry: string, value: any, sortKey: number, level: number }[] {\n\t\t\tconst result = [];\n\t\t\tfor (const code in this._lists) {\n\t\t\t\tconst list: IList = this._lists[code]; //this.xGetListEntries(codeList);\n\t\t\t\tfor (const cdEntry in list) {\n\t\t\t\t\tconst entry: IListEntry = list[cdEntry];\n\t\t\t\t\tconst obj = {\n\t\t\t\t\t\tcd: code,\n\t\t\t\t\t\tcdEntry: cdEntry,\n\t\t\t\t\t\tvalue: entry.value,\n\t\t\t\t\t\tsortKey: entry.sortKey,\n\t\t\t\t\t\tlevel: entry.level\n\t\t\t\t\t};\n\t\t\t\t\tif (obj.value === REDIRECT_TO_SVC) obj.value = this.getSvc(entry.codeSvc);\n\t\t\t\t\tresult.push(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * Retourne un tableau des roles avac leurs permissions associées :\n\t\t *\n\t\t * TODO @param withInherited intègre les valeurs des registres parents.\n\t\t */\n\t\tdumpRolePermList(): IRoleDump[] {\n\t\t\tconst result = [];\n\t\t\tfor (const roleName in this._roles) {\n\t\t\t\tconst role: IRoleStruct = this._roles[roleName];\n\t\t\t\tconst newRole: IRoleDump = {role: roleName};\n\t\t\t\tif (role.title) {\n\t\t\t\t\tnewRole.title = role.title.value;\n\t\t\t\t\tnewRole.titleLevel = role.title.level;\n\t\t\t\t}\n\t\t\t\tif (role.priority) {\n\t\t\t\t\tnewRole.priority = role.priority.value;\n\t\t\t\t\tnewRole.priorityLevel = role.priority.level;\n\t\t\t\t}\n\t\t\t\tif (role.superRole) {\n\t\t\t\t\tnewRole.superRole = role.superRole.value;\n\t\t\t\t\tnewRole.superRoleLevel = role.superRole.level;\n\t\t\t\t}\n\t\t\t\tif (role.setPerm) {\n\t\t\t\t\tnewRole.setPerm = role.setPerm.value;\n\t\t\t\t\tnewRole.setPermLevel = role.setPerm.level;\n\t\t\t\t}\n\t\t\t\tif (role.sortKey) {\n\t\t\t\t\tnewRole.sortKey = role.sortKey.value;\n\t\t\t\t\tnewRole.sortKeyLevel = role.sortKey.level;\n\t\t\t\t}\n\t\t\t\tif (role.description) {\n\t\t\t\t\tnewRole.description = role.description.value;\n\t\t\t\t\tnewRole.descriptionLevel = role.description.level;\n\t\t\t\t}\n\t\t\t\tfor (const [nm, val] of Object.entries(role.perms)) {\n\t\t\t\t\tif (val.value === true) {\n\t\t\t\t\t\tif (!newRole.allow) newRole.allow = [nm];\n\t\t\t\t\t\telse newRole.allow.push(nm);\n\t\t\t\t\t} else if (val.value === false) {\n\t\t\t\t\t\tif (!newRole.deny) newRole.deny = [nm];\n\t\t\t\t\t\telse newRole.deny.push(nm);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!newRole.erase) newRole.erase = [nm];\n\t\t\t\t\t\telse newRole.erase.push(nm);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(newRole);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\n\t\t/** Construit un arbre des perms combinant les perms avec tous les registres ancêtres.*/\n\t\tgetPermsTree(rootPermName: string): IPermNode {\n\t\t\tconst perm = this._perms[rootPermName || \"DO\"];\n\t\t\tif (perm) return null;\n\t\t\tconst permNode: IPermNode = {\n\t\t\t\tname: perm.name,\n\t\t\t\tsystemRights: perm.systemRights\n\t\t\t};\n\t\t\tfor (const key in this._perms) {\n\t\t\t\tconst parent = this._perms[key].parent;\n\t\t\t\tif (parent && parent === perm) {\n\t\t\t\t\tif (!permNode.children) permNode.children = [];\n\t\t\t\t\tpermNode.children.push(this.getPermsTree(key));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn permNode;\n\t\t}\n\n\n\t\t/**\n\t\t * Isolement du getter d'une liste pour permettre la fusion dans SubReg.\n\t\t */\n\t\t_getListEntries(codeList: string): IList {\n\t\t\treturn this._lists[codeList];\n\t\t}\n\n\t\t/** Utilié par l'enregistrement de Svc */\n\t\tprotected _insertSvcInOverrideChain(parent: ISvcDef, svc: any, levelAuthority: number, isOverride?: boolean): boolean {\n\t\t\tif (!parent.override || parent.override.level < levelAuthority) {\n\t\t\t\tif (isOverride) {\n\t\t\t\t\tparent.override = {\n\t\t\t\t\t\tsvc: svc,\n\t\t\t\t\t\tlevel: levelAuthority,\n\t\t\t\t\t\toverride: parent.override\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparent.override = {\n\t\t\t\t\t\tsvc: svc,\n\t\t\t\t\t\tlevel: levelAuthority\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else if (\"override\" in parent.override) {\n\t\t\t\treturn this._insertSvcInOverrideChain(parent.override, svc, levelAuthority);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/** Affectation du svc surchargé au svc courant. */\n\n\t\t/* protected */\n\t\t_setOverridenSvc(code: string, svcDef: ISvcDef) {\n\t\t\tconst subSvcDef = svcDef.override;\n\t\t\tif (subSvcDef && subSvcDef.svc) {\n\t\t\t\tthis._setOverridenSvc(code, subSvcDef); //chainage des override\n\t\t\t\tsvcDef.svc.setOverridenSvc(subSvcDef.svc);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Retourne une définition json de ce registre. Pour debug\n\t\t */\n\t\tgetRegDef(): JRegDef {\n\t\t\treturn this.env ? {envKeys: Object.getOwnPropertyNames(this.env)} : {closed: true};\n\t\t}\n\n\t\ttoString() {return JSON.stringify(this.getRegDef())}\n\t}\n\n\n\t/**\n\t * SubReg : registre qui surcharge un registre parent.\n\t *\n\t * XXX Attention, avec cette impl, une modification ultérieure de l'extPoints parent\n\t * (avec un niveau d'autorité supérieur) sur un point d'extension surchargé dans\n\t * le SubReg ne sera pas pris en compte. Est-ce un pb ou une feature ? discutable,\n\t * pas forcément abérrant...\n\t *\n\t */\n\tclass SubReg<ENV> extends Reg<ENV> {\n\n\t\tconstructor(parentReg: Reg<any>) {\n\t\t\tsuper(true);\n\t\t\tthis.parentReg = parentReg;\n\t\t\tthis.env = Object.create(this.parentReg.env as any) as ENV;\n\t\t\tthis._perms = Object.create((this.parentReg as any)._perms);\n\t\t\tthis._volatileUS = Object.create((this.parentReg as any)._volatileUS);\n\t\t}\n\n\t\tget isClosed() {return this._onRegClose === null || this.parentReg.isClosed}\n\n\t\tresetExtPoints() {\n\t\t\tthis._prefLevels = Object.create(null);\n\t\t\tthis._prefs = Object.create(null);\n\t\t\tthis._lists = Object.create(null);\n\t\t\tthis._svcs = Object.create(null);\n\t\t\tthis._roles = Object.create(null);\n\t\t\tthis._perms = Object.create((this.parentReg as any)._perms);\n\t\t\tthis._volatileUS = Object.create((this.parentReg as any)._volatileUS);\n\t\t}\n\n\t\tgetPersistUserStates(): IPersistUserDatas {\n\t\t\tif (this._persistUS) return this._persistUS;\n\t\t\treturn this.parentReg.getPersistUserStates();\n\t\t}\n\n\t\tsetPref(code: string, levelAuthority: number, value: JPrefValue): boolean {\n\t\t\tif (this.parentReg.getPrefLevel(code) >= levelAuthority) return false;\n\t\t\treturn Reg.prototype.setPref.apply(this, arguments); //call super\n\t\t}\n\n\t\taddToList(codeList: string, codeEntry: string, levelAuthority: number, valueEntry: any, sortKey = 0): boolean {\n\t\t\tif (this.parentReg.getEntryListLevel(codeList, codeEntry) >= levelAuthority) return false;\n\t\t\treturn Reg.prototype.addToList.apply(this, arguments); //call super\n\t\t}\n\n\t\taddSvcToList(codeList: string, codeEntry: string, levelAuthority: number, codeSvc: string, sortKey = 0): boolean {\n\t\t\tif (this.parentReg.getEntryListLevel(codeList, codeEntry) >= levelAuthority) return false;\n\t\t\treturn Reg.prototype.addSvcToList.apply(this, arguments); //call super\n\t\t}\n\n\t\tregisterSvc<S>(code: string, levelAuthority: number, svc: S): boolean {\n\t\t\tif (this.parentReg.getSvcLevel(code) >= levelAuthority) return false;\n\t\t\treturn Reg.prototype.registerSvc.apply(this, arguments); //call super\n\t\t}\n\n\t\toverlaySvc(code: string, levelAuthority: number, svc: IOverridingSvc): boolean {\n\t\t\tif (this.parentReg.getSvcLevel(code) >= levelAuthority) return false;\n\t\t\treturn Reg.prototype.overlaySvc.apply(this, arguments); //call super\n\t\t}\n\n\t\t/*\n\t\t\t\tdescription?: IStringValue\n\t\t */\n\t\taddRolePermList(rolePermList: any, levelAuthority: number): void {\n\t\t\tif (Array.isArray(rolePermList)) {\n\t\t\t\tfor (let i = 0; i < rolePermList.length; i++) this.addRolePermList(rolePermList[i], levelAuthority);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst roleName = rolePermList.role;\n\t\t\tif (!roleName) return;\n\t\t\tlet r = this._roles[roleName];\n\t\t\tif (!r) r = this._roles[roleName] = {role: roleName, perms: Object.create(null)};\n\t\t\tif (\"sortKey\" in rolePermList) {\n\t\t\t\tif (this.parentReg.getRolePropertyLevel(roleName, \"sortKey\") < levelAuthority) {\n\t\t\t\t\tif (!r.sortKey || r.sortKey.level < levelAuthority) {\n\t\t\t\t\t\tr.sortKey = {level: levelAuthority, value: rolePermList.sortKey}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\"description\" in rolePermList) {\n\t\t\t\tif (this.parentReg.getRolePropertyLevel(roleName, \"description\") < levelAuthority) {\n\t\t\t\t\tif (!r.description || r.description.level < levelAuthority) {\n\t\t\t\t\t\tr.description = {level: levelAuthority, value: rolePermList.description}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\"title\" in rolePermList) {\n\t\t\t\tif (this.parentReg.getRolePropertyLevel(roleName, \"title\") < levelAuthority) {\n\t\t\t\t\tif (!r.title || r.title.level < levelAuthority) {\n\t\t\t\t\t\tr.title = {level: levelAuthority, value: rolePermList.title}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\"description\" in rolePermList) {\n\t\t\t\tif (this.parentReg.getRolePropertyLevel(roleName, \"description\") < levelAuthority) {\n\t\t\t\t\tif (!r.description || r.description.level < levelAuthority) {\n\t\t\t\t\t\tr.description = {level: levelAuthority, value: rolePermList.description}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\"priority\" in rolePermList) {\n\t\t\t\tif (this.parentReg.getRolePropertyLevel(roleName, \"priority\") < levelAuthority) {\n\t\t\t\t\tif (!r.priority || r.priority.level < levelAuthority) {\n\t\t\t\t\t\tr.priority = {level: levelAuthority, value: rolePermList.priority}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\"superRole\" in rolePermList) {\n\t\t\t\tif (this.parentReg.getRolePropertyLevel(roleName, \"superRole\") < levelAuthority) {\n\t\t\t\t\tif (!r.superRole || r.superRole.level < levelAuthority) {\n\t\t\t\t\t\tr.superRole = {level: levelAuthority, value: rolePermList.superRole}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\"setPerm\" in rolePermList) {\n\t\t\t\tif (this.parentReg.getRolePropertyLevel(roleName, \"setPerm\") < levelAuthority) {\n\t\t\t\t\tif (!r.setPerm || r.setPerm.level < levelAuthority) {\n\t\t\t\t\t\tr.setPerm = {level: levelAuthority, value: rolePermList.setPerm}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rolePermList.deny) for (let i = 0, l = rolePermList.deny.length; i < l; i++) {\n\t\t\t\tconst permName = rolePermList.deny[i];\n\t\t\t\tif (this.parentReg.getRolePermLevel(roleName, permName) < levelAuthority) {\n\t\t\t\t\tconst pre = r.perms[permName];\n\t\t\t\t\tif (!pre || pre.level < levelAuthority) {\n\t\t\t\t\t\tr.perms[permName] = {level: levelAuthority, value: false}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rolePermList.allow) for (let i = 0, l = rolePermList.allow.length; i < l; i++) {\n\t\t\t\tconst permName = rolePermList.allow[i];\n\t\t\t\tif (this.parentReg.getRolePermLevel(roleName, permName) < levelAuthority) {\n\t\t\t\t\tconst pre = r.perms[permName];\n\t\t\t\t\tif (!pre || pre.level < levelAuthority) {\n\t\t\t\t\t\tr.perms[permName] = {level: levelAuthority, value: true}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rolePermList.erase) for (let i = 0, l = rolePermList.erase.length; i < l; i++) {\n\t\t\t\tconst permName = rolePermList.erase[i];\n\t\t\t\tif (this.parentReg.getRolePermLevel(roleName, permName) < levelAuthority) {\n\t\t\t\t\tconst pre = r.perms[permName];\n\t\t\t\t\tif (!pre || pre.level < levelAuthority) {\n\t\t\t\t\t\tr.perms[permName] = {level: levelAuthority, value: null}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tgetPref<P extends REG.JPrefValue>(code: string, defaultValue?: P): P {\n\t\t\treturn (code in this._prefs) ? super.getPref(code) : this.parentReg.getPref(code, defaultValue);\n\t\t}\n\n\t\tgetSvc<T>(code: string, ifNone?: T): T | null | undefined {\n\t\t\treturn (code in this._svcs) ? super.getSvc(code, ifNone) : this.parentReg.getSvc(code, ifNone);\n\t\t}\n\n\t\tgetPrefLevel(code: string): number {\n\t\t\treturn (code in this._prefLevels) ? super.getPrefLevel(code) : this.parentReg.getPrefLevel(code);\n\t\t}\n\n\t\tgetSvcLevel(code: string): number {\n\t\t\treturn (code in this._svcs) ? super.getSvcLevel(code) : this.parentReg.getSvcLevel(code);\n\t\t}\n\n\t\tgetEntryListLevel(codeList: string, codeEntry: string): number {\n\t\t\tconst list = this._lists[codeList];\n\t\t\tif (!list) return this.parentReg.getEntryListLevel(codeList, codeEntry);\n\t\t\tconst entry = list[codeEntry];\n\t\t\tif (!entry) return this.parentReg.getEntryListLevel(codeList, codeEntry);\n\t\t\treturn entry.level;\n\t\t}\n\n\t\t/* protected */\n\t\t_getListEntries(codeList: string): IList {\n\t\t\tconst parentList = this.parentReg._getListEntries(codeList);\n\t\t\tif (!parentList) return this._lists[codeList];\n\t\t\tconst list = this._lists[codeList];\n\t\t\tif (!list) return parentList;\n\t\t\t//on fusionne les 2 listes\n\t\t\tconst result: Dict<IListEntry> = Object.create(null);\n\t\t\tfor (const code in list) {\n\t\t\t\tconst entry = list[code];\n\t\t\t\tresult[entry.code] = entry;\n\t\t\t}\n\t\t\tfor (const code in parentList) {\n\t\t\t\tconst entry = parentList[code];\n\t\t\t\tif (!(entry.code in result)) result[entry.code] = entry;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/* protected */\n\t\t_setOverridenSvc(code: string, svcDef: ISvcDef) {\n\t\t\tconst subSvcDef = svcDef.override;\n\t\t\tif (subSvcDef) {\n\t\t\t\tReg.prototype._setOverridenSvc.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tsvcDef.svc.setOverridenSvc(this.parentReg.getSvc(code));\n\t\t\t}\n\t\t}\n\n\t\t/* protected */\n\t\t_getPersistUserData(key: string): Jsonisable | undefined {\n\t\t\tif (this._persistUS) {\n\t\t\t\tconst v = this._persistUS.getUserData(key);\n\t\t\t\tif (v !== undefined) return v;\n\t\t\t}\n\t\t\treturn this.parentReg._getPersistUserData(key);\n\t\t}\n\n\t\thasRoles() {\n\t\t\tfor (const i in this._roles) return true;\n\t\t\treturn this.parentReg.hasRoles();\n\t\t}\n\n\t\tgetRoleNames() {\n\t\t\tconst roleNames = this.parentReg.getRoleNames();\n\t\t\tfor (const i in this._roles) {\n\t\t\t\tif (roleNames.indexOf(i) == -1) roleNames.push(i);\n\t\t\t}\n\t\t\treturn roleNames;\n\t\t}\n\n\t\tgetRoleProperty(role: string, propName: keyof IRoleValues): string | number | boolean | undefined {\n\t\t\tconst r = this._roles[role];\n\t\t\tif (!r) return this.parentReg.getRoleProperty(role, propName);\n\t\t\tconst p = r[propName];\n\t\t\tif (!p) return this.parentReg.getRoleProperty(role, propName);\n\t\t\treturn p.value;\n\t\t}\n\n\t\tgetRolePermNames(role: string): string[] | undefined {\n\t\t\tconst r = this._roles[role];\n\t\t\tif (!r) return this.parentReg.getRolePermNames(role);\n\t\t\treturn r.perms ? Object.keys(r.perms) : [];\n\t\t}\n\n\t\tgetRolePermAccess(role: string, permName: string): boolean | undefined {\n\t\t\tconst r = this._roles[role];\n\t\t\tif (!r) return this.parentReg.getRolePermAccess(role, permName);\n\t\t\tconst p = r.perms[permName];\n\t\t\tif (!p) return this.parentReg.getRolePermAccess(role, permName);\n\t\t\treturn p.value;\n\t\t}\n\n\t\tgetRolePropertyLevel(roleName: string, propName: keyof IRoleValues): number {\n\t\t\tconst r = this._roles[roleName];\n\t\t\tif (!r) return this.parentReg.getRolePropertyLevel(roleName, propName);\n\t\t\tconst p = r[propName];\n\t\t\tif (!p) return this.parentReg.getRolePropertyLevel(roleName, propName);\n\t\t\treturn p.level;\n\t\t}\n\n\t\tgetRolePermLevel(roleName: string, permName: string): number {\n\t\t\tconst r = this._roles[roleName];\n\t\t\tif (!r) return this.parentReg.getRolePermLevel(roleName, permName);\n\t\t\tconst p = r.perms[permName];\n\t\t\tif (!p) return this.parentReg.getRolePermLevel(roleName, permName);\n\t\t\treturn p.level;\n\t\t}\n\n\t\tgetRegDef(): JRegDef {\n\t\t\treturn this.env ? {envKeys: Object.getOwnPropertyNames(this.env), parent: this.parentReg.getRegDef()} : {closed: true, parent: this.parentReg.getRegDef()};\n\t\t}\n\t}\n\n\texport type JPrefValue = Jsonisable\n\n\t/**\n\t * Interface à implémenter pour les svc surchargeant un autre.\n\t */\n\texport interface IOverridingSvc {\n\t\tsetOverridenSvc(overridenSvc: any): any;\n\t}\n\n\n\t/**\n\t * Level authority minimal, par défaut utilisé dans le code de base.\n\t */\n\texport const LEVELAUTH_CORE = 1;\n\n\t/**\n\t * Level authority standard utilisé par la config du device (client electron, browser...)\n\t */\n\texport const LEVELAUTH_CLIENT = 11;\n\n\t/**\n\t * Level authority standard utilisé par la config du portal\n\t */\n\texport const LEVELAUTH_PORTAL = 21;\n\n\t/**\n\t * Level authority standard utilisé par la config free du portal\n\t */\n\texport const LEVELAUTH_PORTAL_FREE = 31;\n\n\t/**\n\t * Level authority standard utilisé par la config du modèle\n\t */\n\texport const LEVELAUTH_MODEL = 101;\n\n\t/**\n\t * Level authority standard utilisé par la config des extensions du modèle\n\t */\n\texport const LEVELAUTH_EXT = 111;\n\n\t/**\n\t * Level authority standard utilisé par la config des codes free des modèles\n\t */\n\texport const LEVELAUTH_MODEL_FREE = 121;\n\n\t/**\n\t * Level authority correspondant aux spécifications du user (prefs users)).\n\t * Un level supérieur déclaré dans une configuration interdirait la personnalisation de la pref par le user.\n\t * TODO : enregistrement centralisé sur serveur associé à ce level.\n\t */\n\texport const LEVELAUTH_USER = 1001;\n\n\t/** Level authority dédié aux overrides RTL : logique de surcharge de l'existant => placés à la fin */\n\texport const LEVELAUTH_RTL_OVR = 2001;\n\n\t/** Constante interne. */\n\tconst REDIRECT_TO_SVC = Object.create(null);\n\n\tfunction sortEntries(e1: IListEntry, e2: IListEntry): number {\n\t\treturn e1.sortKey - e2.sortKey;\n\t}\n\n\texport interface JRegDef {\n\t\tenvKeys?: string[]\n\t\tparent?: JRegDef\n\t\tclosed?: true\n\t}\n\n\texport interface IListEntry {\n\t\tcode: string\n\t\tcodeSvc?: string\n\t\tlevel: number\n\t\tvalue: any\n\t\tsortKey: number\n\t}\n\n\texport type IList = { [codeEntry: string]: IListEntry }\n\n\texport interface ISvcDef {\n\t\tsvc: any,\n\t\tlevel: number,\n\t\toverride?: ISvcDef\n\t}\n\n\t/** Déclaration d'un role avec reg.addRolePermList(). */\n\texport interface IRoleDef {\n\t\trole: string\n\t\ttitle?: string\n\t\tdescription?: string\n\t\tpriority?: number\n\t\tsortKey?: number\n\t\tsuperRole?: string\n\t\tallow?: string[]\n\t\tdeny?: string[]\n\t\terase?: string[]\n\t\t/* Optionnel, permission requise pour utiliser ce role (ajout, suppression, ...) */\n\t\tsetPerm?: string\n\t}\n\n\texport interface IRoleDump extends IRoleDef {\n\t\ttitleLevel?: number\n\t\tdescriptionLevel?: number\n\t\tpriorityLevel?: number\n\t\tsortKeyLevel?: number\n\t\tsuperRoleLevel?: number\n\t\tsetPermLevel?: number\n\t\tallowLevels?: number[]\n\t\tdenyLevels?: number[]\n\t\teraseLevels?: number[]\n\t}\n\n\texport interface IPermNode {\n\t\tname: string;\n\t\tsystemRights: number;\n\t\tchildren?: IPermNode[];\n\t}\n\n\t/** Propriétés des rôles interrogeables. */\n\texport interface IRoleValues {\n\t\ttitle?: IStringValue\n\t\tdescription?: IStringValue\n\t\tpriority?: INumberValue\n\t\tsortKey?: INumberValue\n\t\tsuperRole?: IStringValue\n\t\tsetPerm?: IStringValue\n\t}\n\n\t/** Structure interne de stockage. */\n\texport interface IRoleStruct extends IRoleValues {\n\t\trole: string\n\t\tperms: { [perm: string]: IBoolValue }\n\t}\n\n\texport interface IStringValue {\n\t\tvalue: string | null\n\t\tlevel: number\n\t}\n\n\texport interface INumberValue {\n\t\tvalue: number | null\n\t\tlevel: number\n\t}\n\n\texport interface IBoolValue {\n\t\tvalue: boolean | null\n\t\tlevel: number\n\t}\n\n\n\texport class Perm {\n\t\tconstructor(readonly name: string, readonly parent?: Perm, readonly systemRights: number = 0) {\n\t\t}\n\n\t\ttoString(): string {return `${this.parent ? this.parent.toString() : ''}/${this.name}`}\n\t}\n\n\tinterface ISkinStyleElement extends HTMLStyleElement {\n\t\t_styleHolder: SkinHolder;\n\t}\n\n\texport const IS_skinStyleElt = function (n: Node): n is ISkinStyleElement { return n instanceof HTMLStyleElement && '_styleHolder' in n };\n\n\texport class SkinHolder implements IOverridingSvc {\n\n\t\tcode: string;\n\n\t\tstyles: string;\n\n\t\toverridenSkinHolder: SkinHolder;\n\n\t\tprotected cache: HTMLStyleElement;\n\n\t\tconstructor(code: string, styles: string) {\n\t\t\tthis.code = code;\n\t\t\tthis.styles = styles;\n\t\t}\n\n\t\tsetOverridenSvc(skinHolder: SkinHolder) {\n\t\t\tif (this.overridenSkinHolder !== skinHolder) {\n\t\t\t\tif (this.cache) {\n\t\t\t\t\tconsole.log(`WARNING: SkinHolder already used but not stabilized in extPoints: ${this.styles}`);\n\t\t\t\t\tthis.cache = null;\n\t\t\t\t}\n\t\t\t\tthis.overridenSkinHolder = skinHolder;\n\t\t\t}\n\t\t}\n\n\n\t\tgetSkinIfExist(root: Document | ShadowRoot): ISkinStyleElement {\n\t\t\t//check si ce style est déjà inclus.\n\t\t\tfor (let i = 0; i < root.styleSheets.length; i++) {\n\t\t\t\tconst style = root.styleSheets[i].ownerNode as any;\n\t\t\t\tif (style._styleHolder === this) return style;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tinstallSkin(root: Document | ShadowRoot = document): HTMLStyleElement {\n\t\t\t//check si ce style est déjà inclus.\n\t\t\tlet style = this.getSkinIfExist(root);\n\t\t\tif (style) return style;\n\t\t\tstyle = this.createStyleElt();\n\t\t\t//sinon, on l'installe\n\t\t\tconst stylesRoot = root instanceof Document ? root.head : root;\n\t\t\tif (stylesRoot.firstElementChild && IS_skinStyleElt(stylesRoot.firstElementChild)) {\n\t\t\t\tlet firstNotSkin = stylesRoot.firstElementChild as Element;\n\t\t\t\twhile (firstNotSkin && IS_skinStyleElt(firstNotSkin)) firstNotSkin = firstNotSkin.nextElementSibling;\n\t\t\t\tstylesRoot.insertBefore(style, firstNotSkin);\n\t\t\t} else {\n\t\t\t\tstylesRoot.insertBefore(style, stylesRoot.firstChild);\n\t\t\t}\n\t\t\treturn style;\n\t\t}\n\n\t\tcreateStyleElt(): ISkinStyleElement {\n\t\t\tif (!this.cache) {\n\t\t\t\tconst styleElt = document.createElement('style');\n\t\t\t\tif (this.overridenSkinHolder) {\n\t\t\t\t\tconst body = [this.styles];\n\t\t\t\t\tlet sub = this.overridenSkinHolder;\n\t\t\t\t\twhile (sub) {\n\t\t\t\t\t\tbody.push(sub.styles);\n\t\t\t\t\t\tsub = sub.overridenSkinHolder;\n\t\t\t\t\t}\n\t\t\t\t\tstyleElt.textContent = body.reverse().join('\\n');\n\t\t\t\t} else {\n\t\t\t\t\tstyleElt.textContent = this.styles;\n\t\t\t\t}\n\t\t\t\tstyleElt.dataset.code = this.code;\n\t\t\t\tthis.cache = styleElt;\n\t\t\t\t//On l'ajoute dans un template du document pour optimisation du clonage des StyleSheets.\n\t\t\t\tif (!stylesRoot) {\n\t\t\t\t\tstylesRoot = document.head.appendChild(document.createElement('template'));\n\t\t\t\t\tstylesRoot.setAttribute('id', 'extPointsStyles');\n\t\t\t\t}\n\t\t\t\tstylesRoot.content.appendChild(styleElt);\n\t\t\t}\n\t\t\tconst styleElt = this.cache.cloneNode(true) as ISkinStyleElement;\n\t\t\tstyleElt._styleHolder = this;\n\t\t\treturn styleElt;\n\t\t}\n\n\t}\n\n\tlet stylesRoot: HTMLTemplateElement;\n\n\texport const SKIN_PREFIX = 'skin|';\n\n\n\t/** Registre racine. */\n\texport let reg: Reg<any> = new Reg();\n}\n\n\n/** Registre courant dans le contexte de la window. */\ndeclare global {\n\tinterface Window {\n\t\treg: IReg<any>;\n\t}\n}\n"]}