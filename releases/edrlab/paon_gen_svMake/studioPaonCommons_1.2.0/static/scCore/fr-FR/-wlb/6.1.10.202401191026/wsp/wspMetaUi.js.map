{"version":3,"sources":["/@lib@/wsp/wspMetaUi.ts"],"names":["generators","actions","htmlLit","xhtml","Area","EndPointResolver","IO","REG","DOM","JML","EItResp","EItStatus","ITEM","ESrcSt","SRC","WSP","ExportRes","ImportFolder","ImportRes","ETaskStage","DynGen","WspMetaUi","[object Object]","reg","wspTypeUrl","wspOptionUrls","this","_dataItemTypes","_itemTypesMap","_weds","_icon","createSubReg","chain","env","universe","wspServer","wspMeta","wspTypeEP","buildWspTypeUiEndPoint","wspType","wspOptionEPs","wspOptions","map","opt","wspMetaUi","postConfigs","_currrentWspTypeEP","next","importJs","configWspMeta","UTILS","wpsOptUrl","push","length","newPostConfigs","config","override","getSvc","hasResps","addToList","hasTasks","_itemLifeCycle","flagItemsWithTasks","wspTypeRes","a","key","lang","version","target","adminWspUrl","resolve","join","endPoint","resolver","clone","setBase","addEndPoint","freeze","itemTypeNull","_itemTypeNull","ItemTypeNull","itemTypeNotFound","_itemTypeNotFound","ItemTypeNotFound","itemTypeFallback","_itemTypeFallback","ItemTypeFallback","itModel","itemType","undefined","datas","family","EItemTypeFamily","xml","ItemTypeXml","res","ItemTypeRes","folder","ItemTypeFolder","task","ItemTypeTask","undef","ItemTypeUndef","ItemTypeOther","configItemType","_itemTypesSet","md","data","getItemType","model","lcStates","find","st","taskStage","forthcoming","_listRespsTasks","_listRespsItems","mapTasks","Map","mapItems","resps","forEach","resp","set","code","Array","from","values","reducer","findOrCreateFolder","parent","ch","isDirItemType","dir","sortKey","label","closed","children","itemTypesFiltered","getItemTypes","reduce","tree","folders","classification","sort","e1","e2","r","type","asDoc","getModel","_defaultResIconFile","skinUrl","url","_defaultResIconFolder","_defaultResIconOpenFolder","src","_spaceIcon","_spaceOpenIcon","wed","path","lcName","LC_DEFAULT_NAME","get","lcTrans","lcTransGroupOrder","hasGen","gens","gen","genNodeType","sgns","itType","itData","sgn","RegExp","_helpSrc","_helpOptionsSrc","_helpDbProv","async","getHelpLocalDb","HelpLocalDb","import","helpDb","HelpUnionDb","optHelp","db","title","dataItemType","wedDef","close","open","ico","name","lcState","icon","iconUrl","tr","groupOrder","source","JSON","stringify","_a","v","ItemType","indexOf","shortDesc","itSt","warnings","wspResUrl","iconsPng","errors","conflict","rspSt","_iconPngValid","iconsPngOpen","_iconPngOpenValid","ctx","Error","configReg","getDataSrcMainView","mainViewCode","setPref","LEVELAUTH_MODEL","cnvs","convertors","i","cnv","ItemMainConvert","c1","c2","getLabel","localeCompare","strict","mainView","otherMainViews","isolatedView","srcUri","schema","getGenericSchema","_schema","getSchema","finalizeDatasEditor","editors","xmlEditor","d","help","helpDbProv","getHelpDbProv","outlineView","indexKey","getWedDef","toString","endP","wsp","fields","utils","preview","previewMini","tag","srcSt","isHistoryOrTrashUri","dynGen","initialize","w","c","codeGen","srcRefSub","gp","params","onViewShown","setAttr","h","init","transform","getStreamStampedUrl","srcRef","srcDt","getMainStreamSrcUri","poster","wspSrcUrl","qs","contentType","ext","itemExt","isArray","fileName","exts","getExtensions","entry","matchExt","supports","s","support","sup","keyEditor","currentSpace","currentExt","isFree","tpl","itemNameTpl","replace","extractLeafFromUri","str","num","format","match","Date","date","k","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","idx","itemCode","isValidCodeItem","space","codeItem","options","secCtx","perms","hasPerm","filter","cloneList","to","genNature","illusUrl","illus","genNode","Object","create","codeGenStack","list","found","g","child","getPub","editor","parentCodeGenStack","insertBefore","removeGenerator","findIndex","splice","convertor","mainview","itemTab","removeMainViewSubTab","mv","sts","subTabs","supportModel","newContentBuilder","setAsDoc","resView","defaultItemMainAreaRes","defaultItemMainAreaXml","_tagRoot","getSgn","docShortDesc","docType","supDef","doc","jmlToDom","createNewDoc","createWithCtIdInAtt","id","wspSvcUrl","fetchText","method","documentElement","setAttribute","remoteUrl","scLocation","findNext","n","nodeName","textContent","ser","super","SINGLETON","resTypes","acc","prev","ct","emptyUrls","resEmptyUrl","keys","fetchBlob","withoutFolderMorphology","getUriResType","EUriResType","root","addLeafToUri","extractItemResPath","PATH_META","resExtsMatcher","test","resType","t","defaultItemMainAreaFolder","file","entries","iconResFolder","getDefaultResFolderIcon","iconResFile","getDefaultResFileIcon","getIcon","iconResFolderOpen","getDefaultResFolderOpenIcon","getIconOpen","endsWith","defaultTaskMainArea","commentSchema","_commentSchema","descriptionSchema","_descriptionSchema","buildLcStates","_lcStates","buildLcTrans","_lcTrans","buildCreateTrans","_createTrans","acts","onCreate","act","auth","currentAuthenticatedUser","addUserToResp","currentAccount","shortDescs","desc","detailsTpl","trans","createTrans","feature","features","LIT","loadFreeLib","ETaskFeatures","LC_STATE_DEFAULT_KEY","LC_STATE_DEFAULT_NAME","lib","then","module","initFreeLib","called","SrcMainArea","tagName","titleAsLabel","_label","itTi","lastDatas","document","createElement","area","areaContext","skin","skinMainView","skinOver","skinOverMainView","lastDatasKey","getLastDatasKey","genRng","asEndPoint","ep","SKMETALIB","mdWsp","mdSk","SKMETALIB_WSP","SchemaBuilder","RelaxNgSchemaBuilder","buildRelaxNgFromUrl","types","Action","dataConvertor","requireVisiblePerm","perm","ev","mod","exec","executor","controlBeforeExecute","algo","convertBySwitchTag","convertByXsl","setLabel","actTi","getTitle"],"mappings":"UAEYA,eAAU;UACVC,YAAO;UAEPC,YAAO;OACKC,UAAM;OAKtBC,SAAK;OACLC,iBAAoCC,OAAkB;OAEnCC,QAAI;OAEvBC,QAAI;OACJC,QAAI;OAGJC,QAASC,UAA0BC,SAAe;OAClDC,OAAoBC,QAAY;OACYC,QAAyB;;;OAWrEC,UAAWC,aAAcC,cAAU;OAGrBC,eAAwB;OAGtCC,WAAO;OAiBT,MAAOC,UAsIZC,YAAsBC,IAAsBC,WAAuBC,eA5CzDC,KAAAC,eAAuC;AACvCD,KAAAE,cAAgC;AAIhCF,KAAAG,MAAuB;AAgCvBH,KAAAI,MAAgB;AAQzBJ,KAAKH,IAAMhB,IAAIwB,aAAaR;AAC5BG,KAAKM,MAAQT,IAAIU,IAAIC,SAASC,UAAUH;AACxCN,KAAKF,WAAaA;AAClBE,KAAKD,cAAgBA,cAvItBH,6BAA6Ba,UAAmBC,SAC/C,MAAMC,UAAYhB,UAAUiB,uBAAuBH,UAAWC,QAAQG;AACtE,MAAMC,aAAeJ,QAAQK,WAAaL,QAAQK,WAAWC,IAAKC,KAAQtB,UAAUiB,uBAAuBH,UAAWQ,IAAKN,YAAc;AACzI,MAAMO,UAAY,IAAIvB,UAAUc,UAAUZ,IAAKc,UAAWG;AAE1D,IAAIK;AACJD,UAAUE,mBAAqBT;AAC/B,MAAMU,iBAAoBV,UAAUW,SAAS,eAAiCC,cAAcL,UAAWP,UAAWa;AAClH,GAAIH,KAAMF,YAAc,CAACE;AACzB,GAAIP,aAAc,IAAK,MAAMW,aAAaX,aAAc,CACvDI,UAAUE,mBAAqBK;AAC/B,MAAMJ,iBAAoBI,UAAUH,SAAS,iBAAmCC,cAAcL,UAAWO,UAAWD;AACpH,GAAIH,MAAOF,cAAgBA,YAAc,KAAKO,KAAKL,MAEpDH,UAAUE,mBAAqB;AAC/B,OAAOD,cAAW,MAAXA,mBAAW,OAAA,EAAXA,YAAaQ,QAAS,EAAG,CAC/B,IAAIC;AACJ,IAAK,MAAMC,UAAUV,YAAa,CACjC,MAAME,WAAaQ,OAAOX,UAAWM;AACrC,GAAIH,MAAOO,iBAAmBA,eAAiB,KAAKF,KAAKL,MAE1DF,YAAcS,eAKf,MAAME,SAAWZ,UAAUrB,IAAIkC,OAAO;AACtC,GAAID,eAAgBA,SAASrB,UAAWS,UAAWM;AAEnDN,UAAUc,SAAWA,SAASd,UAAUjB;AACxC,GAAIiB,UAAUc,SAAU,CAEvBd,UAAUrB,IAAIoC,UAAU,sBAAuB,QAAS,EAAG;AAE3Df,UAAUrB,IAAIoC,UAAU,qBAAsB,UAAW,EAAG,WAG7D,KAAM,aAAcf,WAAYA,UAAUgB,SAAWA,SAAShB,UAAUjB;AACxE,GAAIiB,UAAUiB,gBAAkBjB,UAAUgB,SAAU,CAEnDhB,UAAUrB,IAAIoC,UAAU,sBAAuB,OAAQ,EAAG;AAE1Df,UAAUrB,IAAIoC,UAAU,qBAAsB,OAAQ,EAAG;AACzDf,UAAUrB,IAAIoC,UAAU,qBAAsB,OAAQ,EAAG,QAE1D,GAAIf,UAAUgB,SAAU,CAEvBhB,UAAUrB,IAAIoC,UAAU,sBAAuB,QAAS,EAAG;AAC3D,GAAIf,UAAUkB,mBAAoBlB,UAAUrB,IAAIoC,UAAU,sBAAuB,YAAa,EAAG;AAEjGf,UAAUrB,IAAIoC,UAAU,qBAAsB,UAAW,EAAG;AAC5Df,UAAUrB,IAAIoC,UAAU,qBAAsB,SAAU,EAAG;AAC3Df,UAAUrB,IAAIoC,UAAU,qBAAsB,WAAY,EAAG;AAC7Df,UAAUrB,IAAIoC,UAAU,qBAAsB,aAAc,EAAG,cAKhE,OAAOf,UAIRtB,8BAA8Ba,UAAmBI,QAAmBwB,YAEnE,MAAMC,EAAc;AACpBA,EAAEZ,KAAK,QAASb,QAAQ0B,IAAK;AAC7B,GAAI1B,QAAQ2B,KAAMF,EAAEZ,KAAK,IAAKb,QAAQ2B;AACtCF,EAAEZ,KAAK,MAAOb,QAAQ4B,QAAS,MAAO5B,QAAQ4B,QAAS;AACvD,MAAMC,OAASjC,UAAUoB,OAAOc,YAAYC,QAAQN,EAAEO,KAAK;AAC3D,MAAMC,SAAWrC,UAAUZ,IAAIU,IAAIwC,SAASC,QAAQC,QAAQP,QAAQQ,YAAY,SAAUR;AAC1F,GAAIL,WAAYS,SAASI,YAAY,aAAcb,YAAYc;AAC/D,OAAOL,SAwCRM,mBAA8B,OAAOpD,KAAKqD,gBAAkBrD,KAAKqD,cAAgB,IAAIC,aAAatD,OAIlGuD,uBAAkC,OAAOvD,KAAKwD,oBAAsBxD,KAAKwD,kBAAoB,IAAIC,iBAAiBzD,OAOlH0D,uBAAkC,OAAO1D,KAAK2D,oBAAsB3D,KAAK2D,kBAAoB,IAAIC,iBAAiB5D,OAiBlHJ,YAAYiE,SACX,GAAIA,SAAW,KAAM,OAAO7D,KAAKuD;AACjC,IAAIO,SAAW9D,KAAKE,cAAc2D;AAClC,GAAIC,WAAaC,UAAW,CAC3B,MAAMC,MAAQhE,KAAKC,eAAe4D;AAClC,GAAIG,MAAO,CACV,OAAQA,MAAMC,QACd,KAAKC,gBAAgBC,IACpBL,SAAW,IAAIM,YAAYpE,KAAMgE;AACjC;AACD,KAAKE,gBAAgBG,IACpBP,SAAW,IAAIQ,YAAYtE,KAAMgE;AACjC;AACD,KAAKE,gBAAgBK,OACpBT,SAAW,IAAIU,eAAexE,KAAMgE;AACpC;AACD,KAAKE,gBAAgBO,KACpBX,SAAW,IAAIY,aAAa1E,KAAMgE;AAClC;AACD,KAAKE,gBAAgBS,MACpBb,SAAW,IAAIc,cAAc5E,KAAMgE;AACnC;AACD,QACCF,SAAW,IAAIe,cAAc7E,KAAMgE,OAEpC,GAAIA,MAAMc,eAAgBhB,SAAWE,MAAMc,eAAehB;AAC1D9D,KAAKE,cAAc2D,SAAWC,aACxB,CACN9D,KAAKE,cAAc2D,SAAW,MAGhC,OAAOC,UAAY9D,KAAK0D,iBAIzB9D,eACC,GAAII,KAAK+E,eAAiB,KAAM,CAC/B/E,KAAK+E,cAAgB;AACrB,IAAK,MAAMC,MAAMhF,KAAKC,eAAgB,CACrC,MAAMgF,KAAOjF,KAAKC,eAAe+E;AACjC,GAAIC,KAAMjF,KAAK+E,cAAcrD,KAAK1B,KAAKkF,YAAYD,KAAKE,SAG1D,OAAOnF,KAAK+E,cAUbnF,sBACC,IAAK,MAAMoF,MAAMhF,KAAKC,eAAgB,CACrC,MAAMgF,KAAOjF,KAAKC,eAAe+E;AACjC,IAAIC,OAAI,MAAJA,YAAI,OAAA,EAAJA,KAAMhB,UAAWC,gBAAgBO,KAAM,CAC1C,GAAIQ,KAAKG,SAASC,KAAMC,IAAOA,GAAGC,YAAc9F,WAAW+F,aAAc,OAAO,MAGlF,OAAO,MAaR5F,UAAUqE,OAA0B,QACnC,IAAKjE,KAAKyF,kBAAoBzF,KAAK0F,gBAAiB,CACnD,MAAMC,SAAW,IAAIC;AACrB,MAAMC,SAAW,IAAID;AACrB,IAAK,MAAMZ,MAAMhF,KAAKC,eAAgB,CACrC,MAAM6F,MAAQ9F,KAAKC,eAAe+E,IAAIc;AACtC,GAAIA,MAAO,CACVA,MAAMC,QAASC,OACd,GAAIhG,KAAKC,eAAe+E,IAAIf,SAAW,OACtC0B,SAASM,IAAID,KAAKE,KAAMF;KAExBH,SAASI,IAAID,KAAKE,KAAMF,SAI5BhG,KAAKyF,gBAAkBU,MAAMC,KAAKT,SAASU;AAC3CrG,KAAK0F,gBAAkBS,MAAMC,KAAKP,SAASQ,UAE5C,OAAOpC,SAAW,OAASjE,KAAKyF,gBAAkBzF,KAAK0F,gBAOxD9F,iBAAiB0G,SAChB,SAASC,mBAAmBC,OAAqCjC,QAChE,IAAK,MAAMkC,MAAMD,OAAQ,CACxB,GAAIE,cAAcD,KAAOA,GAAGP,OAAS3B,OAAO2B,KAAM,CAEjD,OAAOO,IAIT,MAAME,IAAM,CACXT,KAAM3B,OAAO2B,KACbU,QAASrC,OAAOqC,QAChBC,MAAOtC,OAAOsC,MACdC,OAAQvC,OAAOuC,OACfC,SAAU;AAEXP,OAAO9E,KAAKiF;AACZ,OAAOA,IAIR,IAAIK;AACJ,GAAIV,QAAS,CACZU,kBAAoB;AACpBhH,KAAKiH,eAAeC,OAAOZ,QAASU,wBAEpCA,kBAAoBhH,KAAKiH;AAG1B,MAAME,KAAO;AACbH,kBAAkBjB,QAASjC,WAC1B,IAAI0C,OAASW;AACb,MAAMC,QAAUtD,SAASE,MAAMqD;AAC/B,GAAID,SAAW,KAAM,CACpB,IAAK,MAAM7C,UAAU6C,QAASZ,OAASD,mBAAmBC,OAAQjC,QAAQwC;AAC1EP,OAAO9E,KAAKoC;AAKd,SAASwD,KAAKd,QACbA,OAAOc,MAAK,SAAUC,GAA6BC,IAA8B,OAAOD,GAAGX,SAAWY,GAAGZ,QAAU,EAAIW,GAAGX,QAAUY,GAAGZ,QAAU,GAAK;AACtJ,IAAK,MAAMH,MAAMD,OAAQ,GAAIE,cAAcD,IAAKa,KAAKb,GAAGM,UAGzDO,KAAKH;AACL,OAAOA,KAIRvH,eACC,IAAI6H;AACJ,IAAK,MAAMC,QAAQ1H,KAAKiH,eAAgB,CACvC,GAAIS,KAAK1D,MAAM2D,MAAO,CACrB,IAAKF,EAAGA,EAAI,CAACC,KAAKE;KACbH,EAAE/F,KAAKgG,KAAKE,aAGnB,OAAOH,EAGR7H,wBACC,IAAKI,KAAK6H,oBAAqB7H,KAAK6H,oBAAsB7H,KAAKM,MAAMuB,OAAOiG,QAAQC,IAAM;AAC1F,OAAO/H,KAAK6H,oBAGbjI,0BACC,IAAKI,KAAKgI,sBAAuBhI,KAAKgI,sBAAwBhI,KAAKM,MAAMuB,OAAOiG,QAAQC,IAAM;AAC9F,OAAO/H,KAAKgI,sBAGbpI,8BACC,IAAKI,KAAKiI,0BAA2BjI,KAAKiI,0BAA4BjI,KAAKM,MAAMuB,OAAOiG,QAAQC,IAAM;AACtG,OAAO/H,KAAKiI,0BAGbrI,aAAasI,KACZ,IAAKlI,KAAKmI,WAAYnI,KAAKmI,WAAanI,KAAKM,MAAMuB,OAAOiG,QAAQC,IAAM;AACxE,OAAO/H,KAAKmI,WAGbvI,iBAAiBsI,KAChB,IAAKlI,KAAKoI,eAAgBpI,KAAKoI,eAAiBpI,KAAKM,MAAMuB,OAAOiG,QAAQC,IAAM;AAChF,OAAO/H,KAAKoI,eAMbxI,UACC,OAAOI,KAAKI,MAGbR,UAAU2C,KACT,MAAM8F,IAAMrI,KAAKG,MAAMoC;AACvB,GAAI8F,IAAK,OAAOA;AAChB,OAAO9F,MAAQ,SAAW,CAAC+F,KAAM,iCAAmC,KAGrE1I,YACC,OAAOI,KAAKmC,eAAeoG,QAAUC,gBAGtC5I,cACC,OAAOI,KAAKmC,eAAiBnC,KAAKmC,eAAeiD,SAAW,KAG7DxF,WAAWsG,MACV,OAAOlG,KAAKmC,eAAiBnC,KAAKmC,eAAeiD,SAASqD,IAAIvC,MAAQ,KAGvEtG,oBAAoBsG,MACnB,OAAOlG,KAAKmC,eAAiBnC,KAAKmC,eAAeiD,SAASqD,IAAIvC,OAASlG,KAAKmC,eAAeiD,SAASqD,IAAI,KAAO,KAGhH7I,gBAAgBsG,MACf,OAAOlG,KAAKmC,eAAiBnC,KAAKmC,eAAeuG,QAAQD,IAAIvC,MAAQ,KAGtEtG,mBACC,OAAOI,KAAKmC,eAAiBnC,KAAKmC,eAAeuG,QAAU,KAG5D9I,6BACC,OAAOI,KAAKmC,eAAkBnC,KAAKmC,eAAewG,mBAAqB,IAAO,KAO/E/I,wBACC,MAAMgJ,OAAUC,OACf,GAAIA,KAAM,IAAK,IAAIC,OAAOD,KAAM,CAC/B,GAAIC,IAAIC,cAAgB,OAASD,IAAIC,cAAgB,MAAO,OAAO;AACnE,GAAID,IAAIrC,IAAMmC,OAAOE,IAAIrC,IAAK,OAAO,KAEtC,OAAO;AAER,IAAIuC,KAAO;AACX,IAAK,IAAIC,UAAUjJ,KAAKiH,eAAgB,CACvC,IAAIiC,OAASD,OAAOjF;AACpB,GAAI4E,OAAOM,OAAO5K,YAAa0K,KAAKtH,KAAKwH,OAAOC,KAEjD,OAAOH,KAAKrH,OAAS,EAAI,IAAIyH,OAAOJ,KAAKnG,KAAK,MAAQ,KAGvDjD,YAAsB,OAAOI,KAAKqJ,UAAY,MAAQrJ,KAAKsJ,iBAAmB,KAE9E1J,gBACC,IAAKI,KAAKuJ,YAAavJ,KAAKuJ,YAAcC,UACzC,MAAMC,eAACA,eAAcC,YAAEA,mBAAqBC,OAAM;AAClD,IAAIC,OAAsB5J,KAAKqJ,SAAWI,eAAezJ,KAAKqJ,UAAY;AAC1E,GAAIrJ,KAAKsJ,gBAAiB,CACzB,MAAMO,YAACA,mBAAqBF,OAAM;AAClC,MAAM3I,IAAM,IAAI4E;AAChB5F,KAAKsJ,gBAAgBvD,QAAS+D,SAAY9I,IAAIiF,IAAI6D,QAAQvH,IAAK,CAACwH,GAAIN,eAAeK,QAAQhH,SAAU8G,OAAQE,QAAQvH,KAAMyH,MAAOF,QAAQE;AAC1I,OAAO,IAAIH,YAAY7J,KAAKH,IAAK+J,OAAQ5I,KAE1C,OAAO4I;AAER,OAAO5J,KAAKuJ,YAOb3J,YAAYqK,cACXjK,KAAKC,eAAegK,aAAa9E,OAAS8E,aAI3CrK,OAAO2C,IAAa2H,QACnBlK,KAAKG,MAAMoC,KAAO2H,OAInBtK,aAAauK,MAAeC,MAC3BpK,KAAKmI,WAAagC;AAClBnK,KAAKoI,eAAiBgC,KAIvBxK,QAAQyK,KACPrK,KAAKI,MAAQiK,IAIdzK,cAAc0K,MACb,IAAKtK,KAAKmC,eAAgBnC,KAAKmC,eAAiB,CAACiD,SAAU,IAAIQ,IAAO8C,QAAS,IAAI9C;AACnF5F,KAAKmC,eAAeoG,OAAS+B,KAI9B1K,kBAAkB2K,SACjB,IAAKvK,KAAKmC,eAAgBnC,KAAKmC,eAAiB,CAACiD,SAAU,IAAIQ,IAAO8C,QAAS,IAAI9C;AACnF,IAAK,MAAMN,MAAMiF,QAAS,CACzB,GAAIjF,GAAGkF,KAAMlF,GAAGmF,QAAUzK,KAAKoB,mBAAmBwB,QAAQ0C,GAAGkF,MAAMzC;AACnE/H,KAAKmC,eAAeiD,SAASa,IAAIX,GAAGY,KAAMZ,KAK5C1F,kBAAkB8I,SACjB,IAAK1I,KAAKmC,eAAgBnC,KAAKmC,eAAiB,CAACiD,SAAU,IAAIQ,IAAO8C,QAAS,IAAI9C;AACnF,IAAK,MAAM8E,MAAMhC,QAAS,CACzB,GAAIgC,GAAGF,KAAME,GAAGD,QAAUzK,KAAKoB,mBAAmBwB,QAAQ8H,GAAGF,MAAMzC;AACnE/H,KAAKmC,eAAeuG,QAAQzC,IAAIyE,GAAGxE,KAAMwE,KAK3C9K,yBAAyB+K,YACxB,IAAK3K,KAAKmC,eAAgBnC,KAAKmC,eAAiB,CAACiD,SAAU,IAAIQ,IAAO8C,QAAS,IAAI9C;AACnF5F,KAAKmC,eAAewG,kBAAoBgC,WASzC/K,aAAagL,OAAgBrI,IAAcyH,OAC1C,IAAKzH,IAAK,CACTvC,KAAKqJ,SAAWrJ,KAAKoB,mBAAmBwB,QAAQgI,YAC1C,CACN,IAAK5K,KAAKsJ,gBAAiBtJ,KAAKsJ,gBAAkB;AAClDtJ,KAAKsJ,gBAAgB5H,KAAK,CAACoB,SAAU9C,KAAKoB,mBAAmBwB,QAAQgI,QAASrI,IAAAA,IAAKyH,MAAAA,SAQrFpK;AACC,OAAOiL,KAAKC,UAAU,CAACjK,QAASb,KAAKF,WAAWiI,IAAKhH,YAAYgK,GAAA/K,KAAKD,iBAAa,MAAAgL,UAAA,OAAA,EAAAA,GAAE/J,IAAKgK,GAAMA,EAAEjD,eAMpG,IAAkB7D,iBAAlB,SAAkBA,iBACjBA,gBAAA,OAAA;AACAA,gBAAA,OAAA;AACAA,gBAAA,UAAA;AACAA,gBAAA,QAAA;AACAA,gBAAA,SAAA;AACAA,gBAAA,SAAA,SAND,CAAkBA,kBAAAA,gBAAe;OAU3B,MAAgB+G,SAWrBrL,YAA4Bc,QAAoCsD,OAApChE,KAAAU,QAAAA;AAAoCV,KAAAgE,MAAAA;AAC/DhE,KAAKH,IAAMhB,IAAIwB,aAA2BK,QAAQb;AAClDG,KAAKH,IAAIU,IAAIuD,SAAW9D,KAGzBJ,YAAqC,OAAOI,KAAKgE,MAAMC,OAEvDrE,YAAYqE,QACX,OAAOA,OAAOiH,QAAQlL,KAAKgE,MAAMC,SAAW,EAG7CrE,WAAoB,OAAOI,KAAKgE,MAAMmB,MAEtCvF,SAAkB,OAAOI,KAAKgE,MAAMmF,IAEpCvJ,SAASuL,WAAiC,OAAOnL,KAAKgE,MAAMgG,MAG5DpK,aAAsB,OAAO,KAE7BA,QAAQuL,WAEP,GAAIA,UAAW,OAAQA,UAAUC,MACjC,KAAKnM,UAAUoM,SACd,OAAOrL,KAAKgE,MAAMsH,UAAU1I,QAAQ5C,KAAKgE,MAAMuH,SAAW,kBAAkBxD;AAC7E,KAAK9I,UAAUuM,OACf,KAAKvM,UAAUwM,SACd,OAAOzL,KAAKgE,MAAMsH,UAAU1I,QAAQ5C,KAAKgE,MAAMuH,SAAW,gBAAgBxD,IAG3E,GAAIoD,UAAW,OAAQA,UAAUO,OACjC,KAAK1M,QAAQwM,OACZ,OAAOxL,KAAKgE,MAAMsH,UAAU1I,QAAQ5C,KAAKgE,MAAMuH,SAAW,gBAAgBxD,IAE3E,IAAK/H,KAAK2L,cAAe3L,KAAK2L,cAAgB3L,KAAKgE,MAAMsH,UAAU1I,QAAQ5C,KAAKgE,MAAMuH,SAAW,gBAAgBxD;AACjH,OAAO/H,KAAK2L,cAGb/L,YAAYuL,WAEX,GAAIA,UAAW,OAAQA,UAAUC,MACjC,KAAKnM,UAAUoM,SACd,OAAOrL,KAAKgE,MAAMsH,UAAU1I,SAAS5C,KAAKgE,MAAM4H,cAAgB5L,KAAKgE,MAAMuH,UAAY,kBAAkBxD;AAC1G,KAAK9I,UAAUuM,OACf,KAAKvM,UAAUwM,SACd,OAAOzL,KAAKgE,MAAMsH,UAAU1I,SAAS5C,KAAKgE,MAAM4H,cAAgB5L,KAAKgE,MAAMuH,UAAY,gBAAgBxD,IAGxG,GAAIoD,UAAW,OAAQA,UAAUO,OACjC,KAAK1M,QAAQwM,OACZ,OAAOxL,KAAKgE,MAAMsH,UAAU1I,SAAS5C,KAAKgE,MAAM4H,cAAgB5L,KAAKgE,MAAMuH,UAAY,gBAAgBxD,IAExG,IAAK/H,KAAK6L,kBAAmB7L,KAAK6L,kBAAoB7L,KAAKgE,MAAMsH,UAAU1I,SAAS5C,KAAKgE,MAAM4H,cAAgB5L,KAAKgE,MAAMuH,UAAY,gBAAgBxD;AACtJ,OAAO/H,KAAK6L,kBAGbjM,eAAekM,KAAgC,MAAMC,QAErDnM,qBAAqBkM,IAAkBjM;AACtC,MAAMmM,WAAYjB,GAAA/K,KAAKiM,mBAAmBH,IAAK,SAAK,MAAAf,UAAA,OAAA,EAAAA,GAAEiB;AACtD,GAAIA,UAAWA,UAAUnM;KACpB,GAAIiM,IAAII,aAAc,CAC1B,GAAIJ,IAAII,aAAahB,QAAQ,oBAAsB,EAAG,CACrDrL,IAAIsM,QAAQ,oBAAqBtN,IAAIuN,gBAAiB;AACtDvM,IAAIoC,UAAU,cAAe,OAAQpD,IAAIuN,gBAAiB,QAO7DxM,yBAAyBkM;AACxB,MAAMO,MAAOtB,GAAA/K,KAAKiM,mBAAmBH,IAAK,SAAK,MAAAf,UAAA,OAAA,EAAAA,GAAEuB;AACjD,IAAKD,KAAM,OAAO;AAClB,IAAK,IAAIE,EAAI,EAAGA,EAAIF,KAAK1K,OAAQ4K,IAAK,CACrC,MAAMC,IAAMH,KAAKE;AACjB,GAAI,aAAcC,IAAKH,KAAKE,GAAK,IAAIE,gBAAgBD,KAGtDH,KAAK/E,KAAK,CAACoF,GAAsCC,KAAyCD,GAAGE,SAASd,KAAKe,cAAcF,GAAGC,SAASd;AACrI,OAAOO,KAGRzM,mBAAmBkM,IAAkBgB,QACpC,IAAKhB,IAAII,aAAc,OAAOlM,KAAKgE,MAAM+I;AACzC,OAAO/M,KAAKgE,MAAMgJ,eAAiBhN,KAAKgE,MAAMgJ,eAAelB,IAAII,gBAAkBY,OAAS,KAAO9M,KAAKgE,MAAM+I,UAAYD,OAAS,KAAO9M,KAAKgE,MAAM+I,SAGtJnN,gBAAgBuL,WACf,OAAOnL,KAAKgE,MAAMiJ,aAGnBrN,oBAAoBuL,WACnB,OAAOA,UAAYA,UAAU+B,OAAS,KAGvCtN,iBAAiBuL,WAChB,OAAOA,UAAYA,UAAU+B,OAAS,KAGvCtN,YACC,IAAKI,KAAKgE,MAAMmJ,OAAQ,OAAOC;AAC/B,IAAKpN,KAAKqN,QAASrN,KAAKqN,QAAUC,UAAUtN,KAAKgE,MAAMsH,UAAU1I,QAAQ5C,KAAKgE,MAAMmJ;AACpF,OAAOnN,KAAKqN,QAObzN,UAAUsG,MACT,GAAIA,KAAM,OAAOlG,KAAKuN,oBAAoBvN,KAAKgE,MAAMwJ,QAAQtH;AAC7D,GAAIlG,KAAKgE,MAAM+I,SAAU,OAAO/M,KAAKuN,oBAAoBvN,KAAKgE,MAAMwJ,QAAQxN,KAAKgE,MAAM+I,SAASU;AAChG,OAAO,KAGE7N,oBAAoB8N,GAC7B,IAAIA,IAAC,MAADA,SAAC,OAAA,EAADA,EAAGC,QAASD,EAAEC,KAAKC,WAAY,CAClCF,EAAEC,KAAKC,WAAa5N,KAAKU,QAAQmN;AACjC,GAAIH,EAAEC,KAAKG,cAAgB/J,UAAW2J,EAAEC,KAAKG,YAAc,CAACC,SAAU,QAEvE,OAAOL,EAGR9N,OAAO2C,KACN,MAAM2H,OAASlK,KAAKU,QAAQsN,UAAUzL;AACtC,IAAK2H,OAAQ,MAAM6B,MAAM,mBAAmBxJ,uCAAuCvC,KAAKU,QAAQuN;AAChG,IAAIC,KAAOlO,KAAKgE,MAAMsH,UAAU1I,QAAQsH,OAAO5B;AAC/C,KAAM4F,gBAAgBvP,kBAAmBuP,KAAOlO,KAAKH,IAAIU,IAAIwC,SAASC,QAAQC,QAAQiL,MAAMhL,YAAY,SAAUlD,KAAKgE,MAAMsH;AAC7H,OAAO4C,KAGRtO,WAAWuO,IAAUC,OAAoBvO,IAA6BwO,OACrE,MAAMC,QAAUtO,KAAKgE,MAAMuK;AAC3B,IAAKD,QAAS,OAAOvK;AACrB,GAAIuK,QAAQE,MAAQ,qBAAsB,CAEzC,GAAIJ,OAAOK,MAAQ,GAAKvP,KAAKwP,oBAAoBN,OAAOlB,QAAS,OAAOnJ;AAExE,MAAM4K,QAAS,IAAIjP,QAASkP,WAAW,CACtC/O,IAAKA,KAAOG,KAAKH,IACjBgP,EAAGV,IAAIjI,KACP4I,EAAGR,QAAQS,QACXtH,EAAGvI,KAAK8P,UAAUZ,QAClBa,GAAIX,QAAQY;AAEbP,OAAOQ;AACPrQ,IAAIsQ,QAAQT,OAAQ,SAAUL,QAAQO,EAAI,SAASP,QAAQO,KAAO,KAAOP,QAAQe,EAAI,UAAUf,QAAQe,KAAO;AAC9GvQ,IAAIsQ,QAAQT,OAAQ,QAAS;AAC7B,OAAOlQ,KAAK,GAAGkQ,cACT,GAAIL,QAAQE,MAAQ,kBAAmB,CAC7C,OAAO/P,KAAK,gDAAgD6P,QAAQO,EAAI,SAASP,QAAQO,KAAO,KAAOP,QAAQe,EAAI,UAAUf,QAAQe,KAAO,eAAelB,kBAAkBC,eAAeE,QAAQgB,eAC9L,GAAIhB,QAAQE,MAAQ,gBAAiB,CAC3C,OAAO/P,KAAK,6CAA6C0P,kBAAkBC,wBAAwBE,QAAQiB,kBAAkBjB,QAAQgB,UAGtI,MAAMvH,IAAMuG,QAAQiB,UAAYlQ,IAAImQ,oBAAoBrB,IAAK/O,IAAIqQ,OAAOrB,QAASA,OAAOsB,MAAOpB,QAAQiB,WAAalQ,IAAImQ,oBAAoBrB,IAAKnO,KAAK2P,oBAAoBvB,QAASA,OAAOsB;AAC1L,OAAQpB,QAAQE,KAChB,IAAK,MACJ,OAAO/P,KAAK,yCAAyCsJ;AACtD,IAAK,QACJ,GAAIuG,QAAQsB,OAAQ,CACnB,MAAMA,OAASzB,IAAI1N,UAAUoB,OAAOgO,UAAYjR,GAAGkR,GAAG,WAAY,SAAU,QAAS3B,IAAIjI,KAAM,SAAU,SAAU,SAAU9G,IAAIqQ,OAAOrB,QAAS,YAAaE,QAAQsB,OAAQ,IAAKxB,OAAOsB;AAC1L,OAAOjR,KAAK,6CAA6CsJ,gBAAgB6H,uCAAuCtB,QAAQO,EAAI,SAASP,QAAQO,KAAO,KAAOP,QAAQe,EAAI,UAAUf,QAAQe,KAAO,cAC1L,CACN,OAAO5Q,KAAK,6CAA6CsJ,oCAAoCuG,QAAQO,EAAI,SAASP,QAAQO,KAAO,KAAOP,QAAQe,EAAI,UAAUf,QAAQe,KAAO,SAE/K,IAAK,QACJ,OAAO5Q,KAAK,6CAA6CsJ;AAC1D,IAAK,SACJ,OAAOtJ,KAAK,kDAAkD6P,QAAQO,EAAI,SAASP,QAAQO,KAAO,KAAOP,QAAQe,EAAI,UAAUf,QAAQe,KAAO,aAAatH,SAE5J,OAAOhE,UAIRnE,cAAcmQ,aACb,MAAMC,IAAMhQ,KAAKgE,MAAMiM;AACvB,GAAI9J,MAAM+J,QAAQF,KAAM,OAAOA,IAAIrO,OAAS,EAAIqO,IAAMA,IAAI;AAC1D,OAAOA,KAAO,OAIfpQ,YAAY0I,MAA0B,OAAOtI,KAAKgE,MAAMsH,UAAU1I,QAAQ0F,MAa1E1I,UAAUmQ,YAAsBI,UAA4B,OAAQ,EAapEvQ,SAASuQ,UACR,IAAKA,SAAU,OAAO;AACtB,MAAMC,KAAOpQ,KAAKqQ;AAClB,GAAID,MAAQ,KAAM,OAAO;AACzB,GAAIjK,MAAM+J,QAAQE,MAAO,OAAOA,KAAK/K,KAAMiL,OAAUlR,IAAImR,SAASJ,SAAUG,QAAU,KAAO;AAC7F,OAAOlR,IAAImR,SAASJ,SAAUC,MAAQ,KAAO,EAQ9CxQ,mBACC,IAAKI,KAAKgE,MAAM2D,MAAO,OAAO;AAC9B,MAAM6I,SAAWxQ,KAAKgE,MAAM2D,MAAM6I;AAClC,IAAKA,SAAU,OAAO;AACtB,OAAOA,SAASxP,IAAKyP,GAAMA,EAAE5M,SAI9BjE,iBAAiB8Q,SAChB,MAAMC,IAAM3Q,KAAKgE,MAAM2D,MAAM6I,SAASnL,KAAMoL,GAAMA,EAAE5M,UAAY6M,QAAQ9I;AACxE,OAAO+I,IAAMD,QAAQ1M,MAAMwJ,QAAQmD,IAAIC,WAAa,KASrDhR,oBAAoBuO,IAAU0C,aAA6BC,WAAoBC,QAC9E,IAAIC,IAAMhR,KAAKgE,MAAMiN,aAAe;AACpCD,IAAMA,IAAIE,QAAQ,gBAAiBL,aAAezR,IAAI+R,mBAAmBN,cAAgB;AACzF,GAAIG,IAAI9F,QAAQ,eAAiB,EAAG,CACnC,SAASkG,IAAIC,KAAsB,OAAOA,IAAM,EAAIA,IAAIpD,WAAa,IAAMoD,IAE3E,MAAMC,OAASN,IAAIO,MAAM,0BAA0B,IAAM;AACzD,MAAM7D,EAAI,IAAI8D;AACd,MAAMC,KAAOH,OAAOJ,QAAQ,QAAUQ,IACrC,OAAQA,GACR,IAAK,KACJ,OAAOhE,EAAEiE,cAAc1D;AACxB,IAAK,KACJ,OAAOmD,IAAI1D,EAAEkE,WAAa;AAC3B,IAAK,KACJ,OAAOR,IAAI1D,EAAEmE;AACd,IAAK,KACJ,OAAOT,IAAI1D,EAAEoE;AACd,IAAK,KACJ,OAAOV,IAAI1D,EAAEqE;AACd,IAAK,KACJ,OAAOX,IAAI1D,EAAEsE,cAEd,OAAON;AAERV,IAAMA,IAAIE,QAAQ,0BAA2BO,MAE9C,IAAIQ,IAAM;AACV,IAAI3H,KAAO0G;AACX,MAAO,KAAM,CACZ1G,KAAO0G,IAAIE,QAAQ,yBAA2Be,IAAM,EAAI,KAAOA,IAAM,GAAK,IAAMA,IAAMA,KAAO;AAC7F3H,KAAOA,KAAK4G,QAAQ,iBAAkBe,IAAM,GAAK,IAAMA,IAAMA,IAAIhE;AACjE,GAAI3D,OAAS0G,IAAK;AAClB,IAAKD,OAAQ;AACb,MAAMmB,SAAW5H,KAAOwG;AACxB,GAAI5R,KAAKiT,gBAAgBD,UAAW,CAEnC,GAAInB,cAAgBA,OAAOmB,UAAW;AACtCD,UACM,CAEN,OAGF,OAAO3H,KAWR1K,oBAAoBC,IAAsBuS,MAAsBC,SAAkBC,SACjF,MAAO,GAIR1S,cAAc2S,QACb,GAAIvS,KAAKgE,MAAM1F,WAAY,IAAK,MAAMwK,OAAO9I,KAAKgE,MAAM1F,WAAY,CACnE,IAAKwK,IAAI0J,OAASxS,KAAKH,IAAI4S,QAAQ3J,IAAI0J,MAAOD,QAAS,OAAO,KAE/D,OAAO,MAIR3S,aAAa2S,OAAsBG,QAClC,MAAMC,UAAY,CAACvM,KAAiDwM,MACnE,GAAIxM,KAAM,IAAK,MAAMpC,SAASoC,KAAM,CACnC,GAAIpC,MAAMwO,QAAUxS,KAAKH,IAAI4S,QAAQzO,MAAMwO,MAAOD,QAAS;AAC3D,GAAIG,SAAWA,OAAO1O,OAAQ;AAC9B,GAAIA,MAAM+E,cAAgB,MAAO,CAChC,IAAK/E,MAAMyG,QAAS,CACnB,GAAIzG,MAAMwG,KAAMxG,MAAMyG,QAAUzK,KAAKgE,MAAMsH,UAAU1I,QAAQoB,MAAMwG,MAAMzC;KACpE/D,MAAMyG,QAAU,oCAAoCzG,MAAM6O,WAAa,YAE7E,IAAK7O,MAAM8O,SAAU,CACpB,GAAI9O,MAAM+O,MAAO/O,MAAM8O,SAAW9S,KAAKgE,MAAMsH,UAAU1I,QAAQoB,MAAM+O,OAAOhL;KACvE/D,MAAM8O,SAAW,sCAAsC9O,MAAM6O,iBAGpE,MAAMG,QAAUC,OAAOC,OAAOlP;AAC9B,GAAIA,MAAMyC,GAAI,CACb,MAAMM,SAAW4L,UAAU3O,MAAMyC,GAAI;AACrC,GAAIzC,MAAM+E,cAAgB,OAAShC,SAASpF,SAAW,EAAG;AAC1DqR,QAAQvM,GAAKM,SAASpF,OAAS,EAAIoF,SAAW,KAE/C6L,GAAGlR,KAAKsR,SAET,OAAOJ;AAGR,OAAO5S,KAAKgE,MAAM1F,WAAaqU,UAAU3S,KAAKgE,MAAM1F,WAAY,IAAM,GAIvEsB,OAAOuT,aAAsBC,MAC5B,IAAKA,KAAM,OAAO;AAClB,IAAIC,MAAQD,KAAK/N,KAAMiO,GAAMA,EAAEH,eAAiBA;AAChD,GAAIE,MAAO,OAAOA;AAClB,IAAK,MAAME,SAASH,KAAM,CACzB,GAAIG,MAAM9M,GAAI,CACb4M,MAAQrT,KAAKwT,OAAOL,aAAcI,MAAM9M;AACxC,GAAI4M,MAAO,OAAOA,OAGpB,OAAO,KAIRzT,WACC,OAAOI,KAAKgE,MAAM8B,OAAS9F,KAAKgE,MAAM8B,MAAMnE,OAAS,EAItD/B,QAAQsG,MACP,MAAMJ,MAAQ9F,KAAKgE,MAAM8B;AACzB,GAAIA,MAAO,IAAK,MAAM2B,KAAK3B,MAAO,GAAI2B,EAAEvB,OAASA,KAAM,OAAOuB;AAC9D,OAAO,KAIR7H,UAAU2C,IAAakR,SACrBzT,KAAKgE,MAAMwJ,UAAYxN,KAAKgE,MAAMwJ,QAAU,KAAKjL,KAAOkR,OAI1D7T,aAAaoT,QAAgDU,mBAA6BC,cACzF3T,KAAK4T,gBAAgBZ,QAAQG;AAC7B,MAAM3M,OAASkN,mBAAqB1T,KAAKwT,OAAOE,mBAAoB1T,KAAKgE,MAAM1F,YAAc;AAC7F,MAAM8U,KAAO5M,OAASA,OAAOC,KAAOD,OAAOC,GAAK,IAAMzG,KAAKgE,MAAM1F,aAAe0B,KAAKgE,MAAM1F,WAAa;AACxG,MAAM+C,KAAOsS,aAAeP,KAAKS,UAAWP,GAAMA,EAAEH,aAAa5B,MAAMoC,gBAAkB;AACzF,GAAItS,KAAO,EAAG+R,KAAK1R,KAAKsR;KACnBI,KAAKU,OAAOzS,KAAM,EAAG2R,SAI3BpT,aAAamU,UAAmEjI,IAAmB,IAClG,MAAMkI,SAAWhU,KAAKiM,mBAAmBH,IAAK;AAC9C,GAAIkI,SAAU,CACb,IAAI3H,KAAO2H,SAAS1H;AACpB,IAAKD,KAAMA,KAAO2H,SAAS1H,WAAa;AACxCD,KAAK3K,KAAKqS,YAKZnU,gBAAgBuT,aAAsBC,KAAkDpT,KAAKgE,MAAM1F,YAAc,IAChH,MAAM2T,IAAMmB,KAAKS,UAAWP,GAAMA,EAAEH,eAAiBA;AACrD,GAAIlB,KAAO,EAAG,CACbmB,KAAKU,OAAO7B,IAAK;AACjB,OAAO,KAER,IAAK,MAAMsB,SAASH,KAAM,CACzB,GAAIG,MAAM9M,GAAI,GAAIzG,KAAK4T,gBAAgBT,aAAcI,MAAM9M,IAAK,OAAO,KAExE,OAAO,MAIR7G,kBAAkBqU,QAAwBN,cACzC3T,KAAKkU,qBAAqBD,QAAQ/N;AAClC,IAAIiO,GAAKnU,KAAKgE,MAAM+I;AACpB,IAAKoH,GAAIA,GAAKnU,KAAKgE,MAAM+I,SAAW;AACpC,IAAIqH,IAAMD,GAAGE;AACb,IAAKD,IAAKA,IAAMD,GAAGE,QAAU;AAC7B,MAAMhT,KAAOsS,aAAeS,IAAIP,UAAWvO,IAAOA,GAAGY,OAASyN,eAAiB;AAC/E,GAAItS,KAAO,EAAG+S,IAAI1S,KAAKuS;KAClBG,IAAIN,OAAOzS,KAAM,EAAG4S,SAI1BrU,qBAAqBsG,MACpB,MAAMiO,GAAKnU,KAAKgE,MAAM+I;AACtB,GAAIoH,IAAMA,GAAGE,QAAS,CACrB,MAAMpC,IAAMkC,GAAGE,QAAQR,UAAWvO,IAAOA,GAAGY,OAASA;AACrD,GAAI+L,KAAO,EAAG,CACbkC,GAAGE,QAAQP,OAAO7B,IAAK;AACvB,OAAO,MAGT,OAAO,MAIRrS,WACC,IAAKI,KAAKgE,MAAM2D,MAAO3H,KAAKgE,MAAM2D,MAAQ,GAqB3C/H,mBAAmB0U,aAAwB1D,UAAmB2D,mBAC7DvU,KAAKwU,YACJxU,KAAKgE,MAAM2D,MAAM6I,WAAaxQ,KAAKgE,MAAM2D,MAAM6I,SAAW,KAAK9O,KAAK,CACpEmC,QAASyQ,aAAa1M,WACtBgJ,UAAAA,UACA2D,kBAAAA,oBAMF3N,cAAe,OAAO5G,KAAKgE,MAAM4C,gBAI5B,MAAOxC,oBAAoB6G,SAIhCrL,eAAekM,KAAgC,OAAO9L,KAAKgE,MAAM+I,SAAS0H,QAAUC,uBAAyBC,uBAE7G/U,aACC,GAAII,KAAK4U,WAAa7Q,UAAW/D,KAAK4U,SAAW5U,KAAK6U,SAAS3D,QAAQ,qBAAsB;AAC7F,OAAOlR,KAAK4U,SAGbhV,UAAU8H,KAAcyI,UACvB,IAAKzI,OAASyI,SAAU,OAAO;AAE/B,IAAII,SAAWvQ,KAAKuQ,SAASJ;AAC7B,GAAII,UAAY,EACf,OAAOA;AAER,GAAI,CAAC,kBAAmB,YAAYrF,QAAQxD,OAAS,EACpD,OAAO;AACR,OAAQ,EAGT9H,oBAAoBC,IAAsBuS,MAAsBC,SAAkBC,SACjF,GAAIA,UAAO,MAAPA,eAAO,OAAA,EAAPA,QAASwC,aAAc,CAE1B,MAAMC,QAAU/U,KAAKU,QAAQwE,YAAYoN,QAAQwC,aAAajR;AAC9D,MAAMmR,OAASD,QAAQ/Q,MAAM2D,MAAM6I,SAASnL,KAAM2P,QAAWA,OAAOnR,UAAY7D,KAAK4H;AACrF,OAAOoN,OAAOT,kBAAkB1U,IAAIU,IAAI4N,IAAKiE,MAAOC,SAAUC,SAE/D,MAAMnF,aAAenN,KAAKsN;AAC1B,IAAKH,OAAQ,MAAO;AACpB,MAAM8H,IAAMlW,IAAImW,SAAS/H,OAAOgI;AAChC,GAAInV,KAAKgE,MAAMoR,oBAAqB,CAEnC,MAAMjH,IAAMtO,IAAIU,IAAI4N;AACpB,MAAMkH,SAAWlH,IAAI1N,UAAUoB,OAAOyT,UAAU1S,QAAQuL,IAAIjI,KAAO,SAASqP,UAAU3W,GAAGkR,GAAG,QAASuC,UAAW,CAACmD,OAAQ;AACzHP,IAAIQ,gBAAgBC,aAAa1V,KAAKgE,MAAMoR,oBAAqBC,IAElE,GAAI/C,UAAO,MAAPA,eAAO,OAAA,EAAPA,QAASqD,UAAW,CAEvB,MAAMC,WAAa9W,IAAI+W,SAASZ,IAAIQ,gBAAiBR,IAAIQ,gBAAkBK,GAA0BA,EAAEC,WAAa;AACpH,GAAIH,WAAYA,WAAWI,YAAc1D,QAAQqD,UAElD,OAAO7W,IAAImX,IAAIhB,MAUjB,MAAM3Q,oBAAoB2G,SAGzBrL,YAAYc,QAAoCsD,OAC/CkS,MAAMxV,QAASsD;AADgChE,KAAAgE,MAAAA;AAE/ChE,KAAKH,IAAIoC,UAAU,sBAAuB,SAAU,EAAGzC,UAAU2W,YAAa;AAC9EnW,KAAKH,IAAIoC,UAAU,sBAAuB,WAAY,EAAG3C,UAAU6W,YAAa,KAGjFvW,eAAekM,KAAgC,OAAO4I,uBAEtD9U,cAAcmQ,aACb,MAAMqG,SAAWpW,KAAKgE,MAAMoS;AAC5B,IAAKA,SAAU,OAAO;AACtB,MAAMhG,KAAOgG,SAASlP,OAAO,CAACmP,IAAKC,QAClC,IAAKvG,aAAeuG,KAAKC,GAAGrL,QAAQ6E,cAAgB,EAAGsG,IAAI3U,QAAQ4U,KAAKtG;AACxE,OAAOqG,KACL;AACH,OAAOjG,KAAKzO,OAAS,EAAIyO,KAAK,GAAKA,KAGpCxQ,oBAAoBC,IAAsBuS,MAAsBC,UAC/D,MAAMmE,UAAYxW,KAAKgE,MAAMyS;AAC7B,GAAID,UAAW,CACd,IAAK,MAAM9E,KAAKuB,OAAOyD,KAAKF,WAAY,CACvC,GAAIpX,IAAImR,SAAS8B,SAAUX,GAAI,OAAO1R,KAAKgE,MAAMsH,UAAU1I,QAAQ4T,UAAU9E,IAAIiF,YAElF,GAAIH,UAAU,KAAM,OAAOxW,KAAKgE,MAAMsH,UAAU1I,QAAQ4T,UAAU,MAAMG,YAEzE,MAAO,GAGR/W,oBAAoBuL,WACnB,IAAKA,UAAW,OAAO;AACvB,GAAInL,KAAKgE,MAAM4S,wBACd,OAAOzL,UAAU+B;AAClB,OAAQhO,KAAK2X,cAAc1L,YAC3B,KAAKjM,KAAK4X,YAAYC,KACrB,OAAO3X,IAAI4X,aAAa7L,UAAU+B,OAAQ9N,IAAI+R,mBAAmBhG,UAAU+B;AAC5E,KAAKhO,KAAK4X,YAAYvS,OACrB,OAAO,KAER,OAAO4G,UAAU+B,OAGlBtN,gBAAgBuL,WACf,GAAIjM,KAAK+X,mBAAmB9L,UAAU+B,SAAW5I,YAAY4S,UAAW,CAEvE,MAAO,CAAC1I,IAAK,kBAEd,OAAOxO,KAAKgE,MAAMiJ,aAGnBrN,iBAAiBuL,WAChB,IAAKA,UAAW,OAAO;AACvB,GAAInL,KAAKgE,MAAM4S,wBACd,OAAOzL,UAAU+B;AAClB,OAAOhO,KAAK2X,cAAc1L,aAAejM,KAAK4X,YAAYC,KAAO3X,IAAI4X,aAAa7L,UAAU+B,OAAQ5I,YAAY4S,WAAa/L,UAAU+B,OAGxItN,UAAU8H,KAAeyI,UACxB,IAAKnQ,KAAKgE,MAAMoS,WAAapW,KAAKgE,MAAMmT,eAAgB,CAEvD,GAAIhH,SAAU,OAAOA,SAASjF,QAAQ,KAAO,EAAI,GAAK;AACtD,OAAO,EAER,IAAKxD,OAASyI,SAAU,OAAO;AAE/B,IAAKnQ,KAAKgE,MAAMoS,UAAYpW,KAAKgE,MAAMmT,eAAgB,CACtD,IAAKhH,SAAU,OAAO;AACtB,OAAOnQ,KAAKgE,MAAMmT,eAAeC,KAAKjH,UAAY,GAAK,EAGxD,IAAII,SAAWvQ,KAAKuQ,SAASJ;AAC7B,GAAII,UAAY,EACf,OAAOA;AAER,IAAK,MAAM8G,WAAWrX,KAAKgE,MAAMoS,SAAU,CAC1C,GAAIiB,QAAQd,GAAI,IAAK,MAAMe,KAAKD,QAAQd,GAAI,GAAIe,IAAM5P,KAAM,OAAO,IAEpE,OAAQ,GA/EFpD,YAAA4S,UAAY;AAoFpB,MAAM1S,uBAAuByG,SAE5BrL,YAAYc,QAAoBsD,OAC/BkS,MAAMxV,QAASsD;AACfhE,KAAKH,IAAIoC,UAAU,sBAAuB,SAAU,EAAG1C,aAAa4W,YAAa,KAGlFvW,eAAekM,KAAgC,OAAOyL,0BAEtD3X,oBAAoBuL,WACnB,GAAIA,WAAajM,KAAK2X,cAAc1L,aAAejM,KAAK4X,YAAYU,KAAM,OAAOrM,UAAU+B;AAC3F,OAAO,KAGRtN,iBAAiBuL,WAChB,OAAO,KAGRvL,oBAAoBC,IAAsBuS,MAAsBC,SAAkBC,SACjF,MAAO,CAAChI,KAAM+H,SAAUoF,QAAS,IAGlC7X,QAAQuL,WACP,GAAIA,UAAW,OAAQjM,KAAK2X,cAAc1L,YAC1C,KAAKjM,KAAK4X,YAAYvS,OACrB,OAAOvE,KAAKgE,MAAM0T,eAAiB1X,KAAKU,QAAQiX;AACjD,KAAKzY,KAAK4X,YAAYU,KACrB,OAAOxX,KAAKgE,MAAM4T,aAAe5X,KAAKU,QAAQmX,wBAE/C,OAAO3B,MAAM4B,QAAQ3M,WAGtBvL,YAAYuL,WACX,GAAIA,UAAW,OAAQjM,KAAK2X,cAAc1L,YAC1C,KAAKjM,KAAK4X,YAAYvS,OACrB,OAAOvE,KAAKgE,MAAM+T,mBAAqB/X,KAAKU,QAAQsX;AACrD,KAAK9Y,KAAK4X,YAAYU,KACrB,OAAOxX,KAAKgE,MAAM4T,aAAe5X,KAAKU,QAAQmX,wBAE/C,OAAO3B,MAAM+B,YAAY9M,WAG1BvL,UAAU8H,KAAeyI,UACxB,GAAIzI,KAAM,OAAQ;AAClB,IAAKyI,SAAU,OAAO;AACtB,IAAKnQ,KAAKgE,MAAMiM,QAAS,OAAO;AAChC,UAAWjQ,KAAKgE,MAAMiM,UAAY,SAAU,OAAOE,SAAS+H,SAASlY,KAAKgE,MAAMiM,SAAW,KAAO;AAClG,OAAOjQ,KAAKgE,MAAMiM,QAAQ5K,KAAM2K,KAAQG,SAAS+H,SAASlI,MAAQ,KAAO,UAOrE,MAAOtL,qBAAqBuG,SAYjCrL,eAAekM,KAAgC,OAAOqM,oBAEtDvY,mBACC,IAAKI,KAAKgE,MAAMoU,cAAe,OAAOhL;AACtC,IAAKpN,KAAKqY,eAAgBrY,KAAKqY,eAAiB/K,UAAUtN,KAAKgE,MAAMsH,UAAU1I,QAAQ5C,KAAKgE,MAAMoU;AAClG,OAAOpY,KAAKqY,eAGbzY,sBACC,IAAKI,KAAKgE,MAAMsU,kBAAmB,OAAOlL;AAC1C,IAAKpN,KAAKuY,mBAAoBvY,KAAKuY,mBAAqBjL,UAAUtN,KAAKgE,MAAMsH,UAAU1I,QAAQ5C,KAAKgE,MAAMsU;AAC1G,OAAOtY,KAAKuY,mBAGb3Y,YACC,OAAOI,KAAKgE,MAAMuE,QAAUC,gBAG7B5I,cACCI,KAAKwY;AACL,OAAOxY,KAAKyY,UAGb7Y,WAAWsG,MACVlG,KAAKwY;AACL,OAAOxY,KAAKyY,UAAUhQ,IAAIvC,MAG3BtG,oBAAoBsG,MACnBlG,KAAKwY;AACL,OAAOxY,KAAKyY,UAAUhQ,IAAIvC,OAASlG,KAAKyY,UAAUhQ,IAAI,KAGvD7I,mBACCI,KAAK0Y;AACL,OAAO1Y,KAAK2Y,SAGb/Y,gBAAgBsG,MACflG,KAAK0Y;AACL,OAAO1Y,KAAK2Y,SAASlQ,IAAIvC,MAG1BtG,6BACCI,KAAKwY;AACL,OAAOxY,KAAK2Y,SAAY3Y,KAAKgE,MAAM2E,mBAAqB,IAAO,KAIhE/I,uBACCI,KAAK4Y;AACL,OAAO5Y,KAAK6Y,aAIbjZ,kBAAkBkM,KACjB,MAAMrE,EAAiB;AACvB,MAAMqR,KAAO9Y,KAAKgE,MAAM+U;AACxB,GAAID,KAAM,IAAK,MAAME,OAAOF,KAAM,CACjC,GAAI,kBAAmBE,IAAK,CAC3B,GAAIlN,IAAIjM,IAAIU,IAAIC,SAASyY,KAAKC,yBAA0B,CAEvD,IAAKzR,EAAE3B,MAAO2B,EAAE3B,MAAQ;AACxB2B,EAAE3B,MAAMkT,IAAIG,eAAiB,CAACrN,IAAIjM,IAAIU,IAAIC,SAASyY,KAAKG,sBAEnD,GAAI,eAAgBJ,IAAK,CAC/B,GAAIlN,IAAIuN,WAAW1X,OAAS,EAAG,CAC9B8F,EAAE6R,KAAON,IAAIO,WAAWrI,QAAQ,oBAAqB9R,IAAIqQ,OAAO3D,IAAIuN,WAAW,WAE1E,UAAWL,MAAQ,WAAY,CACrCA,IAAIlN,IAAK9L,KAAMyH,IAGjB,OAAOA,EAGE7H,gBACT,IAAKI,KAAKyY,UAAW,CACpBzY,KAAKyY,UAAY,IAAI7S;AACrB,IAAK,MAAMN,MAAMtF,KAAKgE,MAAMoB,SAAU,CACrC,GAAIE,GAAGkF,KAAMlF,GAAGmF,QAAUzK,KAAKgE,MAAMsH,UAAU1I,QAAQ0C,GAAGkF,MAAMzC;AAChE/H,KAAKyY,UAAUxS,IAAIX,GAAGY,KAAMZ,MAKrB1F,eACT,IAAKI,KAAK2Y,SAAU,CACnB3Y,KAAK2Y,SAAW,IAAI/S;AACpB,IAAK,MAAM4T,SAASxZ,KAAKgE,MAAM0E,QAAS,CACvC,GAAI8Q,MAAMhP,KAAMgP,MAAM/O,QAAUzK,KAAKgE,MAAMsH,UAAU1I,QAAQ4W,MAAMhP,MAAMzC;AACzE/H,KAAK2Y,SAAS1S,IAAIuT,MAAMtT,KAAMsT,SAKvB5Z,mBACT,IAAKI,KAAK6Y,aAAc,CACvB7Y,KAAK6Y,aAAe;AACpB,IAAK,MAAMW,SAASxZ,KAAKgE,MAAMyV,YAAa,CAC3C,GAAID,MAAMhP,KAAMgP,MAAM/O,QAAUzK,KAAKgE,MAAMsH,UAAU1I,QAAQ4W,MAAMhP,MAAMzC;AACzE/H,KAAK6Y,aAAanX,KAAK8X,SAM1B5Z,WAAW8Z;AACV,QAAO3O,GAAA/K,KAAKgE,MAAM2V,YAAQ,MAAA5O,UAAA,OAAA,EAAAA,GAAEG,QAAQwO,WAAY,GAYlD,MAAM7U,sBAAsBoG,SAE3BrL,YAAYc,QAAoBsD,OAC/BkS,MAAMxV,QAASsD;AACfhE,KAAKH,IAAIoC,UAAU,sBAAuB,WAAY,EAAG3C,UAAU6W,YAAa,KAGjFvW,oBAAoBC,IAAsBuS,MAAsBC,SAAkBC,SAEjF,OAAOtS,KAAKgE,MAAMoS,SAAW,GAAK,CAAC9L,KAAM+H,SAAUoF,QAAS,IAG7D7X,eAAekM,KAAgB,IAAAf;AAAgB,QAAOA,GAAAe,IAAIX,aAAS,MAAAJ,UAAA,OAAA,EAAAA,GAAE0D,SAAUtP,OAAOoF,OAASgT,0BAA4B7C,uBAE3H9U,oBAAoBuL,WACnB,IAAKA,UAAW,OAAO;AACvB,GAAIjM,KAAK2X,cAAc1L,aAAejM,KAAK4X,YAAYC,MAAQ5L,UAAUsD,QAAUtP,OAAOoF,OAAQ,CAEjG,OAAOnF,IAAI4X,aAAa7L,UAAU+B,OAAQ9N,IAAI+R,mBAAmBhG,UAAU+B,SAE5E,OAAO/B,UAAU+B,OAGlBtN,iBAAiBuL,WAChB,IAAKA,UAAW,OAAO;AACvB,GAAIjM,KAAK2X,cAAc1L,aAAejM,KAAK4X,YAAYC,MAAQ5L,UAAUsD,QAAUtP,OAAOoF,OAAQ,CAEjG,OAAOnF,IAAI4X,aAAa7L,UAAU+B,OAAQ5I,YAAY4S,WAEvD,OAAO/L,UAAU+B,QAOnB,MAAMtI,sBAAsBC,cAC3BjF,UAAU8H,KAAeyI,UACxB,IAAKnQ,KAAKgE,MAAMoS,SAAU,OAAO;AACjC,IAAK1O,OAASyI,SAAU,OAAO;AAE/B,IAAII,SAAWvQ,KAAKuQ,SAASJ;AAC7B,GAAII,UAAY,EACf,OAAOA;AAER,IAAK,MAAM8G,WAAWrX,KAAKgE,MAAMoS,SAAU,CAC1C,GAAIiB,QAAQd,GAAI,IAAK,MAAMe,KAAKD,QAAQd,GAAI,GAAIe,IAAM5P,KAAM,OAAO,EAEpE,OAAQ,EAGT9H,SAASuQ,UACR,IAAKA,SAAU,OAAO;AACtB,MAAMC,KAAOpQ,KAAKqQ;AAClB,GAAID,MAAQ,KAAM,OAAO;AACzB,GAAIjK,MAAM+J,QAAQE,MAAO,OAAOA,KAAK/K,KAAMiL,OAAUlR,IAAImR,SAASJ,SAAUG,QAAU,GAAK;AAC3F,OAAOlR,IAAImR,SAASJ,SAAUC,MAAQ,GAAK,GAK7C,MAAM9M,qBAAqB2H,SAC1BrL,YAAYiB,SACXqV,MAAMrV,QAAS,CACdyK,UAAWzK,QAAQf,WACnBqF,MAAO,UACP6E,MAAO,uBACPuB,SAAU1K,QAAQP,MAAMuB,OAAOiG,QAAQC,IAAM,iCAI/CnI,QAAQuL,WACP,OAAO+K,MAAM4B,QAAQ,MAGtBlY,YAAYuL,WACX,OAAO+K,MAAM+B,YAAY,OAK3B,MAAMxU,yBAAyBwH,SAC9BrL,YAAYiB,SACXqV,MAAMrV,QAAS,CACdyK,UAAWzK,QAAQf,WACnBqF,MAAO,cACP6E,MAAO,oBACPuB,SAAU1K,QAAQP,MAAMuB,OAAOiG,QAAQC,IAAM,qCAI/CnI,QAAQuL,WACP,OAAO+K,MAAM4B,QAAQ,MAGtBlY,YAAYuL,WACX,OAAO+K,MAAM+B,YAAY,OAK3B,MAAMrU,yBAAyBiB,cAC9BjF,YAAYiB,SACXqV,MAAMrV,QAAS,CACdyK,UAAWzK,QAAQf,WACnBqF,MAAO,WACP6E,MAAO,uBAITpK,QAAQuL,WACP,GAAIA,UAAW,OAAQjM,KAAK2X,cAAc1L,YAC1C,KAAKjM,KAAK4X,YAAYvS,OACrB,OAAOvE,KAAKgE,MAAM0T,eAAiB1X,KAAKU,QAAQiX;AACjD,KAAKzY,KAAK4X,YAAYU,KACrB,OAAOxX,KAAKgE,MAAM4T,aAAe5X,KAAKU,QAAQmX;AAC/C,QACC,GAAI1M,UAAUsD,QAAUtP,OAAOoF,OAAQ,OAAOvE,KAAKU,QAAQJ,MAAMuB,OAAOiG,QAAQC,IAAM,kDAEvF,OAAO/H,KAAKU,QAAQJ,MAAMuB,OAAOiG,QAAQC,IAAM,4CAGhDnI,YAAYuL,WACX,GAAIA,UAAW,OAAQjM,KAAK2X,cAAc1L,YAC1C,KAAKjM,KAAK4X,YAAYvS,OACrB,OAAOvE,KAAKgE,MAAM+T,mBAAqB/X,KAAKU,QAAQsX;AACrD,KAAK9Y,KAAK4X,YAAYU,KACrB,OAAOxX,KAAKgE,MAAM4T,aAAe5X,KAAKU,QAAQmX,wBAE/C,OAAO7X,KAAKU,QAAQJ,MAAMuB,OAAOiG,QAAQC,IAAM,8DAQ1C,MAAMvG,MAAQ,CACpBoY,IAAKpb,QACLC,MAAAA,MACAH,WAAAA,WACAC,QAAAA,QACAsb,YAAAA;OAmQD,IAAYC,eAAZ,SAAYA,eACXA,cAAA,YAAA;AACAA,cAAA,cAAA,cAFD,CAAYA,gBAAAA,cAAa;OAkBlB,MAAMC,qBAAuB;OAI7B,MAAMC,sBAAwB;OAG9B,MAAMxR,gBAAkB;OA2JxBgB,eAAeqQ,YAAYI,IAAgBpa,KACjD,OAAOoa,IAAI3Y,WAAW4Y,KAAK1Q,MAAO2Q,SACjC,GAAIA,OAAOC,cAAiBD,OAAOC,YAAoBC,OAAQ,OACxDF,OAAOC,YAAYva;AACxBsa,OAAOC,YAAoBC,OAAS,KAEtC,OAAOF,gBAuCH,SAAUzT,cAAcgH,GAA4B,OAAOA,GAAKvH,MAAM+J,QAAQxC,EAAE3G,iBA2IhF,MAAOuT,oBAAoB5b,KAMhCkB,YAAmB2a,QAAwBC,cAC1CtE,MAAMqE;AADYva,KAAAua,QAAAA;AAAwBva,KAAAwa,aAAAA,aAI3C5a,SAASkM,KACR,UAAW9L,KAAKya,SAAW,WAAY,OAAOza,KAAKya,OAAO3O,IAAK9L;AAC/D,OAAOA,KAAKwa,aAAe1O,IAAIX,UAAUuP,MAAQtb,IAAI+R,mBAAmBrF,IAAIX,UAAU+B,QAAU9N,IAAI+R,mBAAmBrF,IAAIX,UAAU+B,QAGtItN,QAAQkM,KACP,UAAW9L,KAAKI,QAAU,WAAY,OAAOJ,KAAKI,MAAM0L,IAAK9L;AAC7D,OAAO8L,IAAIjM,IAAIU,IAAIuD,SAASgU,QAAQhM,IAAIX,WAGzCvL,UAAUkM,IAAkB6O,WAC3B,OAAQC,SAASC,cAAc7a,KAAKua,SAAqB3L,WAAW,CACnE/O,IAAKiM,IAAIjM,IACTib,KAAM9a,KACN+a,YAAajP,IACbkP,KAAMhb,KAAKib,aACXC,SAAUlb,KAAKmb,iBACfC,aAAcpb,KAAKqb,gBAAgBvP,KACnC6O,UAAAA,aAKH,IAAIW;AAEJ,SAASlO,mBACR,IAAKkO,OAAQA,OAAShO,UAAU1O,GAAG2c,WAAW;AAC9C,OAAOD,OAIR9R,eAAe8D,UAAUkO,IACxB,IAAKC,UAAW,CACf,MAAMC,MAAQ/R,OAAM;AACpB,MAAMgS,KAAOhS,OAAM;AACnB8R,iBAAmBC,OAAOE;AAC1BC,qBAAuBF,MAAMG,qBAE9B,OAAO,IAAID,cAAcJ,WAAWM,oBAAoBP,IAGzD,IAAIC;AACJ,IAAII;AAEJ,SAAS3Z,SAAS8Z;AACjB,IAAK,MAAMhX,MAAMgX,MAAO,CACvB,KAAIjR,GAAAiR,MAAMhX,OAAG,MAAA+F,UAAA,OAAA,EAAAA,GAAE9G,UAAWC,gBAAgBO,KAAM,OAAO,KAExD,OAAO,MAGR,SAASzC,SAASga;AACjB,IAAK,MAAMhX,MAAMgX,MAAO,CACvB,MAAMlW,OAAQiF,GAAAiR,MAAMhX,OAAG,MAAA+F,UAAA,OAAA,EAAAA,GAAEjF;AACzB,GAAIA,OAASA,MAAMnE,OAAQ,OAAO,KAEnC,OAAO,MAGR,MAAM8K,wBAAwBlO,QAAQ0d,OAErCrc,YAAmBsc,eAClBhG;AADkBlW,KAAAkc,cAAAA;AAElBlc,KAAKya,OAASyB,cAAcrV;AAC5B7G,KAAKmc,mBAAmBD,cAAcE,MAGvCxc,cAAckM,IAA8BuQ,IAC3C,MAAMC,UAAY3S,OAAM;AACxB,MAAM4S,KAAOvc,KAAKkc,cAAcM;AAChC,GAAIxc,KAAKkc,cAAcO,6BAA+Bzc,KAAKkc,cAAcO,qBAAqB3Q,IAAKuQ,IAAK;AACxG,OAAQE,KAAKG,MACb,IAAK,SACJ,OAAOJ,IAAIK,mBAAmB7Q,IAAKyQ;AACpC,IAAK,MACJ,OAAOD,IAAIM,aAAa9Q,IAAKyQ,QAMhC,MAAM5H,uBAAyB,IAAI2F,YAAY;AAC/C,MAAM5F,uBAAyB,IAAI4F,YAAY;AAC/C,MAAM/C,0BAA4B,IAAI+C,YAAY;AAClD,MAAMnC,oBAAsB,IAAImC,YAAY,gBAAgBuC,SAAU/Q,KAAqBA,IAAIX,UAAU2R,OAAShR,IAAIjM,IAAIU,IAAIuD,SAASiZ","sourcesContent":["import {IWedEditor, OWedManagerConfig} from \"back/edit/wed/wedEditor\";\nimport {OWedEditorBoxConfig} from \"back/edit/wed/wedEditorBox\";\nimport * as generators from \"back/wsp/views/gen/genActions\";\nimport * as actions from \"lib/commons/actions\";\nimport {IAction} from \"lib/commons/actions\";\nimport * as htmlLit from \"lib/commons/utils/htmlLit\";\nimport {TemplateResult, xhtml} from \"lib/commons/utils/htmlLit\";\nimport {OItemImgInit} from \"back/wsp/views/item/itemImg\";\nimport {OItemVideoInit} from \"back/wsp/views/item/itemVideo\";\nimport {OItemXmlEdInit} from \"back/wsp/views/item/itemXmlEd\";\nimport {IItemUiEnv, ISrcMainCtx, SrcMain} from \"back/wsp/views/itemMain\";\nimport {Area} from \"lib/commons/areas\";\nimport {EndPointResolver, IBody, IEndPoint, IO, IPathResolver} from \"lib/commons/io/io\";\nimport {JLastDatas} from \"lib/commons/lastDatas\";\nimport {IReg, IRegPointer, REG} from 'lib/commons/registry';\nimport {ISecurityCtx} from \"lib/commons/security\";\nimport {DOM} from \"lib/commons/xml/dom\";\nimport {JML} from \"lib/commons/xml/jml\";\nimport {Schema} from \"lib/edit/schema/schema\";\nimport {ChainUniverse, IChainEnv} from \"lib/wsp/chain\";\nimport {EItResp, EItStatus, IShortDescCtx, ITEM, JGenInfo} from \"lib/wsp/item\";\nimport {ESrcSt, JSrcFields, SRC, srcUri} from \"lib/wsp/src\";\nimport {IWspEnv, IWspUiEnv, JWspType, JWspTypeInst, WSP, Wsp, WspSrv, wspUri} from \"lib/wsp/wsp\";\nimport \"back/wsp/widgets/remoteView\";\nimport \"back/wsp/widgets/codeView\";\nimport {OItemDynGenInit} from \"back/wsp/views/item/itemDynGen\";\nimport {OItemIframeInit} from \"back/wsp/views/item/itemIframe\";\nimport {OItemAudioInit} from \"back/wsp/views/item/itemAudio\";\nimport {OTaskDynGenInit} from \"back/wsp/views/task/taskDynGen\";\nimport {OTaskLayoutInit} from \"back/wsp/views/task/taskLayout\";\nimport {OTaskFieldInit, OTaskXmlFieldInit} from \"back/wsp/views/task/taskFields\";\nimport {OTaskCtDynGenInit, OTaskCtEditInit} from \"back/wsp/views/task/taskContent\";\nimport {CidProcess} from \"lib/core/cid\";\nimport {ExportRes, ImportFolder, ImportRes} from \"back/wsp/actions/itemActions\";\nimport {OItemRemoteInit} from \"back/wsp/views/item/itemRemote\";\nimport {ICidInfos} from \"back/core/widgets/cidUi\";\nimport {EInvolvement, ETaskStage, JTaskStates} from \"lib/wsp/lcTask\";\nimport {SkMetaLib} from \"lib/edit/schema/schemaMeta\";\nimport {RelaxNgSchemaBuilder} from \"lib/edit/schema/schemaBuilder\";\nimport {DynGen} from \"back/wsp/views/dynGen\";\nimport {OItemTxtInit} from \"back/wsp/views/item/itemTxt\";\nimport {OFreeElementAsyncInit, OFreeElementInit} from \"back/commons/basis\";\nimport {OItemCodeEdInit} from \"back/wsp/views/item/itemCodeEd\";\nimport {helpId, IHelpDb} from \"back/help/helpApi\";\nimport {OHelpViewsInit} from \"back/help/views/helpViews\";\nimport {getHelpLocalDb, HelpLocalDb} from \"lib/help/helpLocalDb\";\nimport {IFolder} from \"lib/commons/io/files\";\n\n/**\n * Définit un modèle documentaire du point de vue Wui. Il combine un wspType et 0 à N wspOptions.\n * Le WspMetaUi :\n * - spécifie un sous-reg de IReg<IChainEnv>,\n * - fournit les ItemType du modèle. Chaque itemType possède son SubReg, fils de WspMetaUi.reg.\n *\n * A l'init d'un Wsp, le WspMetaUi.reg doit être copié dans Wsp.reg.\n */\nexport class WspMetaUi implements ILcProvider {\n\n\t/** Construit un WspMetaUi imbriquant un wspType et des wspOptions dans le contexte d'un ChainUniverse. */\n\tstatic async createWspMetaUi(wspServer: WspSrv, wspMeta: JWspTypeInst): Promise<WspMetaUi> {\n\t\tconst wspTypeEP = WspMetaUi.buildWspTypeUiEndPoint(wspServer, wspMeta.wspType);\n\t\tconst wspOptionEPs = wspMeta.wspOptions ? wspMeta.wspOptions.map((opt) => WspMetaUi.buildWspTypeUiEndPoint(wspServer, opt, wspTypeEP)) : null;\n\t\tconst wspMetaUi = new WspMetaUi(wspServer.reg, wspTypeEP, wspOptionEPs);\n\t\t//Chargement des modules\n\t\tlet postConfigs: postConfigWspMeta[];\n\t\twspMetaUi._currrentWspTypeEP = wspTypeEP;\n\t\tconst next = await (await wspTypeEP.importJs(\"wspType.js\") as IWspTypeModule).configWspMeta(wspMetaUi, wspTypeEP, UTILS);\n\t\tif (next) postConfigs = [next];\n\t\tif (wspOptionEPs) for (const wpsOptUrl of wspOptionEPs) {\n\t\t\twspMetaUi._currrentWspTypeEP = wpsOptUrl;\n\t\t\tconst next = await (await wpsOptUrl.importJs(\"wspOption.js\") as IWspTypeModule).configWspMeta(wspMetaUi, wpsOptUrl, UTILS);\n\t\t\tif (next) (postConfigs || (postConfigs = [])).push(next);\n\t\t}\n\t\twspMetaUi._currrentWspTypeEP = null;\n\t\twhile (postConfigs?.length > 0) {\n\t\t\tlet newPostConfigs: postConfigWspMeta[];\n\t\t\tfor (const config of postConfigs) {\n\t\t\t\tconst next = await config(wspMetaUi, UTILS);\n\t\t\t\tif (next) (newPostConfigs || (newPostConfigs = [])).push(next);\n\t\t\t}\n\t\t\tpostConfigs = newPostConfigs;\n\t\t}\n\n\t\t//Surcharge par le portlet via un svc overrideWspMetaUi.\n\t\t//Note: ce svc overrideWspMetaUi peut lui-même être surchargé dans le wspMetaUi.reg pour contrer une surcharge du portlet.\n\t\tconst override = wspMetaUi.reg.getSvc(\"overrideWspMetaUi\") as (wspServer: WspSrv, wspMetaUi: WspMetaUi, UTILS: {}) => Promise<void>;\n\t\tif (override) await override(wspServer, wspMetaUi, UTILS);\n\n\t\twspMetaUi.hasResps = hasResps(wspMetaUi._dataItemTypes);\n\t\tif (wspMetaUi.hasResps) {\n\t\t\t//Ajout des champs longDesc/shortDesc\n\t\t\twspMetaUi.reg.addToList('srcFields:shortDesc', 'rspSt', 1, 'rspSt');\n\n\t\t\twspMetaUi.reg.addToList('srcFields:longDesc', 'rspUsrs', 1, 'rspUsrs');\n\t\t}\n\n\t\tif (!(\"hasTasks\" in wspMetaUi)) wspMetaUi.hasTasks = hasTasks(wspMetaUi._dataItemTypes);\n\t\tif (wspMetaUi._itemLifeCycle || wspMetaUi.hasTasks) {\n\t\t\t//Ajout des champs shortDesc\n\t\t\twspMetaUi.reg.addToList('srcFields:shortDesc', 'lcSt', 1, 'lcSt');\n\t\t\t//Ajout des champs longDesc\n\t\t\twspMetaUi.reg.addToList('srcFields:longDesc', 'lcDt', 1, 'lcDt');\n\t\t\twspMetaUi.reg.addToList('srcFields:longDesc', 'lcBy', 1, 'lcBy');\n\t\t}\n\t\tif (wspMetaUi.hasTasks) {\n\t\t\t//shortDesc\n\t\t\twspMetaUi.reg.addToList('srcFields:shortDesc', 'actTi', 1, 'actTi'); //pour tasks\n\t\t\tif (wspMetaUi.flagItemsWithTasks) wspMetaUi.reg.addToList('srcFields:shortDesc', 'tkPending', 1, 'tkPending'); //flag sur items\n\t\t\t//longDesc\n\t\t\twspMetaUi.reg.addToList('srcFields:longDesc', 'rspUsrs', 1, 'rspUsrs'); //pour tasks\n\t\t\twspMetaUi.reg.addToList('srcFields:longDesc', 'actCts', 1, 'actCts'); //pour tasks\n\t\t\twspMetaUi.reg.addToList('srcFields:longDesc', 'actStage', 1, 'actStage'); //pour tasks\n\t\t\twspMetaUi.reg.addToList('srcFields:longDesc', 'tkDeadline', 1, 'tkDeadline'); //pour tasks\n\t\t}\n\n\t\t//TODO pour alléger les imports initiaux charge dynamiquement les libs complémentaires en fonction des\n\t\t// propriétés des itemsTypes effectivement déclarés. Exemples : remoteView, DynGen\n\t\treturn wspMetaUi;\n\t}\n\n\t/** Construit le EndPoint de téléchargement d'un wspType.js, incluant ses préfix de résolution \"wspRes\" et \"wspTypeRes\" (pour les otions). */\n\tstatic buildWspTypeUiEndPoint(wspServer: WspSrv, wspType: JWspType, wspTypeRes?: IEndPoint): IEndPoint {\n\t\t//keyWspType + \".wui.wsp~\"+lang+\"#\"+version+\"/wspType.js\"\n\t\tconst a: string[] = [];\n\t\ta.push(\"show!\", wspType.key, \".wui.wsp\");\n\t\tif (wspType.lang) a.push(\"~\", wspType.lang);\n\t\ta.push(\"%23\", wspType.version, \"%23\", wspType.version, \"/\");\n\t\tconst target = wspServer.config.adminWspUrl.resolve(a.join(\"\"));\n\t\tconst endPoint = wspServer.reg.env.resolver.clone().setBase(target).addEndPoint(\"wspRes\", target);\n\t\tif (wspTypeRes) endPoint.addEndPoint(\"wspTypeRes\", wspTypeRes).freeze();\n\t\treturn endPoint;\n\t}\n\n\t/** Sous-registre du reg de l'univers chain propre à ce wspMetaUi. Sa config sera copié dans chaque wsp cible. */\n\treadonly reg: IReg<IChainEnv>;\n\n\t/** = reg.env.universe.wspServer.chain */\n\treadonly chain: ChainUniverse;\n\n\t/** URL du module js spécifiant le modèle documentaire. */\n\treadonly wspTypeUrl: IEndPoint;\n\n\t/** URLs des module js spécifiant les extensions du modèle documentaire. */\n\treadonly wspOptionUrls?: IEndPoint[];\n\n\t/** Types d'items connus indexés par leur itModel. */\n\tprotected _dataItemTypes: Dict<IDatasItemType> = {};\n\tprotected _itemTypesMap: Dict<ItemType> = {};\n\tprotected _itemTypesSet: ItemType[];\n\n\t/** Map des définitions de fichiers Wed disponibles pour ce modèle documentaire. */\n\tprotected _weds: Dict<IWedDef> = {};\n\n\t/** Cycle de vie pour les items (hors tasks). */\n\tprotected _itemLifeCycle: {\n\t\t/** Intitulé de ce LC */\n\t\tlcName?: string;\n\t\t/** Liste des states possibles */\n\t\tlcStates: Map<string, IDatasLcState>;\n\t\t/** Liste des transitions possibles */\n\t\tlcTrans: Map<string, IDatasLcSimpleTransition>;\n\t\t/** Ordonnancement des groupes des transitions */\n\t\tlcTransGroupOrder?: string\n\t};\n\n\t/** EndPoint du wspType / wspOption en cours de configuration. */\n\tprotected _currrentWspTypeEP: IEndPoint;\n\n\t/** ItemType pour une uri nulle. */\n\tprotected _itemTypeNull: ItemType;\n\tget itemTypeNull(): ItemType {return this._itemTypeNull || (this._itemTypeNull = new ItemTypeNull(this))}\n\n\t/** ItemType pour un item non trouvé (uri spécifiée). */\n\tprotected _itemTypeNotFound: ItemType;\n\tget itemTypeNotFound(): ItemType {return this._itemTypeNotFound || (this._itemTypeNotFound = new ItemTypeNotFound(this))}\n\n\t/**\n\t * ItemType pour un item existant mais non reconnu dans le WspMeta.\n\t * A ne pas confondre avec une itemType de type UndefinedPrim déclaré dans le modèle et présent dans la liste _itemTypes.\n\t */\n\tprotected _itemTypeFallback: ItemType;\n\tget itemTypeFallback(): ItemType {return this._itemTypeFallback || (this._itemTypeFallback = new ItemTypeFallback(this))}\n\n\tprotected _icon: string = null;\n\tprotected _defaultResIconFile: string;\n\tprotected _defaultResIconFolder: string;\n\tprotected _defaultResIconOpenFolder: string;\n\tprotected _spaceIcon: string;\n\tprotected _spaceOpenIcon: string;\n\n\tprotected constructor(reg: IReg<IChainEnv>, wspTypeUrl: IEndPoint, wspOptionUrls: IEndPoint[]) {\n\t\tthis.reg = REG.createSubReg(reg);\n\t\tthis.chain = reg.env.universe.wspServer.chain;\n\t\tthis.wspTypeUrl = wspTypeUrl;\n\t\tthis.wspOptionUrls = wspOptionUrls;\n\t}\n\n\t/** Retourne un itemType par son itModel. */\n\tgetItemType(itModel: string): ItemType {\n\t\tif (itModel == null) return this.itemTypeNotFound;\n\t\tlet itemType = this._itemTypesMap[itModel];\n\t\tif (itemType === undefined) {\n\t\t\tconst datas = this._dataItemTypes[itModel];\n\t\t\tif (datas) {\n\t\t\t\tswitch (datas.family) {\n\t\t\t\tcase EItemTypeFamily.xml:\n\t\t\t\t\titemType = new ItemTypeXml(this, datas);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EItemTypeFamily.res:\n\t\t\t\t\titemType = new ItemTypeRes(this, datas);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EItemTypeFamily.folder:\n\t\t\t\t\titemType = new ItemTypeFolder(this, datas);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EItemTypeFamily.task:\n\t\t\t\t\titemType = new ItemTypeTask(this, datas);\n\t\t\t\t\tbreak;\n\t\t\t\tcase EItemTypeFamily.undef:\n\t\t\t\t\titemType = new ItemTypeUndef(this, datas);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault :\n\t\t\t\t\titemType = new ItemTypeOther(this, datas);\n\t\t\t\t}\n\t\t\t\tif (datas.configItemType) itemType = datas.configItemType(itemType);\n\t\t\t\tthis._itemTypesMap[itModel] = itemType;\n\t\t\t} else {\n\t\t\t\tthis._itemTypesMap[itModel] = null;\n\t\t\t}\n\t\t}\n\t\treturn itemType || this.itemTypeFallback;\n\t}\n\n\t/** Retourne tous les itemsTypes déclarés par le wspMeta (hors itemTypeFallback/Null/NotFound). */\n\tgetItemTypes(): ItemType[] {\n\t\tif (this._itemTypesSet == null) {\n\t\t\tthis._itemTypesSet = [];\n\t\t\tfor (const md in this._dataItemTypes) {\n\t\t\t\tconst data = this._dataItemTypes[md];\n\t\t\t\tif (data) this._itemTypesSet.push(this.getItemType(data.model));\n\t\t\t}\n\t\t}\n\t\treturn this._itemTypesSet;\n\t}\n\n\t/** Le modèle doc contient-il des responsabilités ? */\n\tpublic hasResps: boolean;\n\n\t/** Le modèle doc contient-il des tasks ? */\n\tpublic hasTasks: boolean;\n\n\t/** Le modèle doc contient-il au moins une tâche planifiable. */\n\thasForthcomingTasks(): boolean {\n\t\tfor (const md in this._dataItemTypes) {\n\t\t\tconst data = this._dataItemTypes[md] as IDatasTaskItemType;\n\t\t\tif (data?.family === EItemTypeFamily.task) {\n\t\t\t\tif (data.lcStates.find((st) => st.taskStage === ETaskStage.forthcoming)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Activation de la mise 'en gras' es items avec des tâches en cours.\n\t * Désactivé par défaut car cette information (field tkPending sur l'item) n'est pas correctement rafraichie\n\t * via les remontées d'events.\n\t */\n\tpublic flagItemsWithTasks: boolean;\n\n\t/** Retourne un set dédoublonné des resps déclarés dans les itemTypes\n\t * \tFIXME : déclarer les resps comme des objets globaux dans le wspMetaUi, avec def de propriétés supp dans chaque itemDef (required)\n\t */\n\tlistResps(family: 'task' | 'item' = 'item'): IDatasResp[] {\n\t\tif (!this._listRespsTasks || !this._listRespsItems) {\n\t\t\tconst mapTasks = new Map<String, IDatasResp>();\n\t\t\tconst mapItems = new Map<String, IDatasResp>();\n\t\t\tfor (const md in this._dataItemTypes) {\n\t\t\t\tconst resps = this._dataItemTypes[md].resps;\n\t\t\t\tif (resps) {\n\t\t\t\t\tresps.forEach((resp) => {\n\t\t\t\t\t\tif (this._dataItemTypes[md].family === \"task\")\n\t\t\t\t\t\t\tmapTasks.set(resp.code, resp)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmapItems.set(resp.code, resp)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._listRespsTasks = Array.from(mapTasks.values());\n\t\t\tthis._listRespsItems = Array.from(mapItems.values());\n\t\t}\n\t\treturn family === 'task' ? this._listRespsTasks : this._listRespsItems;\n\t}\n\n\tprivate _listRespsTasks: IDatasResp[];\n\n\tprivate _listRespsItems: IDatasResp[];\n\n\tgetItemTypesTree(reducer?: (acc: ItemType[], cur: ItemType, idx: number, src: ItemType[]) => ItemType[]): (IDirItemType | ItemType)[] {\n\t\tfunction findOrCreateFolder(parent: (IDirItemType | ItemType)[], folder: IDatasDirItemType): IDirItemType {\n\t\t\tfor (const ch of parent) {\n\t\t\t\tif (isDirItemType(ch) && ch.code === folder.code) {\n\t\t\t\t\t//todo merge IDatasDirItemType properties (surcharge des props du folder par les options), ajouter un level ?\n\t\t\t\t\treturn ch;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Pas trouvé, on l'ajoute\n\t\t\tconst dir = {\n\t\t\t\tcode: folder.code,\n\t\t\t\tsortKey: folder.sortKey,\n\t\t\t\tlabel: folder.label,\n\t\t\t\tclosed: folder.closed,\n\t\t\t\tchildren: []\n\t\t\t} as IDirItemType;\n\t\t\tparent.push(dir);\n\t\t\treturn dir;\n\t\t}\n\n\t\t// 0- On filtre le tree\n\t\tlet itemTypesFiltered: ItemType[];\n\t\tif (reducer) {\n\t\t\titemTypesFiltered = [];\n\t\t\tthis.getItemTypes().reduce(reducer, itemTypesFiltered);\n\t\t} else\n\t\t\titemTypesFiltered = this.getItemTypes();\n\n\t\t// 1- on peuple le tree\n\t\tconst tree = [] as (IDirItemType | ItemType)[];\n\t\titemTypesFiltered.forEach((itemType) => {\n\t\t\tlet parent = tree;\n\t\t\tconst folders = itemType.datas.classification;\n\t\t\tif (folders != null) {\n\t\t\t\tfor (const folder of folders) parent = findOrCreateFolder(parent, folder).children;\n\t\t\t\tparent.push(itemType);\n\t\t\t}\n\t\t})\n\n\t\t// 2- on tri\n\t\tfunction sort(parent: (IDirItemType | ItemType)[]) {\n\t\t\tparent.sort(function (e1: IDirItemType | ItemType, e2: IDirItemType | ItemType) {return e1.sortKey == e2.sortKey ? 0 : e1.sortKey > e2.sortKey ? 1 : -1});\n\t\t\tfor (const ch of parent) if (isDirItemType(ch)) sort(ch.children);\n\t\t}\n\n\t\tsort(tree);\n\t\treturn tree;\n\t}\n\n\t/** Fournit la liste des itModel vus comme des item-documents. */\n\tgetDocModels(): string[] | undefined {\n\t\tlet r: string[];\n\t\tfor (const type of this.getItemTypes()) {\n\t\t\tif (type.datas.asDoc) {\n\t\t\t\tif (!r) r = [type.getModel()];\n\t\t\t\telse r.push(type.getModel());\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\n\tgetDefaultResFileIcon(): string {\n\t\tif (!this._defaultResIconFile) this._defaultResIconFile = this.chain.config.skinUrl.url + \"wsp/itemType/icons/resFile/icovalid.png\";\n\t\treturn this._defaultResIconFile;\n\t}\n\n\tgetDefaultResFolderIcon(): string {\n\t\tif (!this._defaultResIconFolder) this._defaultResIconFolder = this.chain.config.skinUrl.url + \"wsp/itemType/icons/resFolder/icovalid.png\";\n\t\treturn this._defaultResIconFolder;\n\t}\n\n\tgetDefaultResFolderOpenIcon(): string {\n\t\tif (!this._defaultResIconOpenFolder) this._defaultResIconOpenFolder = this.chain.config.skinUrl.url + \"wsp/itemType/icons/resFolderOpen/icovalid.png\";\n\t\treturn this._defaultResIconOpenFolder;\n\t}\n\n\tgetSpaceIcon(src?: JSrcFields): string {\n\t\tif (!this._spaceIcon) this._spaceIcon = this.chain.config.skinUrl.url + \"wsp/itemType/icons/space/icovalid.png\";\n\t\treturn this._spaceIcon;\n\t}\n\n\tgetSpaceOpenIcon(src?: JSrcFields): string {\n\t\tif (!this._spaceOpenIcon) this._spaceOpenIcon = this.chain.config.skinUrl.url + \"wsp/itemType/icons/spaceOpen/icovalid.png\";\n\t\treturn this._spaceOpenIcon;\n\t}\n\n\t/**\n\t * Icône du wspDef / wspExt\n\t */\n\tgetIcon(): string | null {\n\t\treturn this._icon;\n\t}\n\n\tgetWedDef(key: string): IWedDef {\n\t\tconst wed = this._weds[key];\n\t\tif (wed) return wed;\n\t\treturn key === \"rawXml\" ? {path: \":back:modeling/rawXml.wed.xml\"} : null;\n\t}\n\n\tgetLcName(): string {\n\t\treturn this._itemLifeCycle.lcName || LC_DEFAULT_NAME;\n\t}\n\n\tgetLcStates(): Map<string, IDatasLcState> {\n\t\treturn this._itemLifeCycle ? this._itemLifeCycle.lcStates : null;\n\t}\n\n\tgetLcState(code: string): IDatasLcState {\n\t\treturn this._itemLifeCycle ? this._itemLifeCycle.lcStates.get(code) : null;\n\t}\n\n\tgetLcStateOrUnknown(code: string): IDatasLcState {\n\t\treturn this._itemLifeCycle ? this._itemLifeCycle.lcStates.get(code) || this._itemLifeCycle.lcStates.get(\"?\") : null;\n\t}\n\n\tgetLcTransition(code: string): IDatasLcSimpleTransition {\n\t\treturn this._itemLifeCycle ? this._itemLifeCycle.lcTrans.get(code) : null;\n\t}\n\n\tgetLcTransitions(): Map<string, IDatasLcSimpleTransition> {\n\t\treturn this._itemLifeCycle ? this._itemLifeCycle.lcTrans : null;\n\t}\n\n\tgetLcTransitionsGroupOrder(): string {\n\t\treturn this._itemLifeCycle ? (this._itemLifeCycle.lcTransGroupOrder || '*') : null;\n\t}\n\n\t/**\n\t * Retourne une regExp sur les signatures des items pour sélectionner ceux qui possèdent au moins 1 générator ou un déploiement.\n\t * ATTENTION : les perms sur les gen ne sont pas appliquées (dépend de chaque src, pas du niveau atelier).\n\t */\n\tgetGenOrCidSgnPattern(): RegExp {\n\t\tconst hasGen = (gens: IDatasItemGenNode[]): boolean => {\n\t\t\tif (gens) for (let gen of gens) {\n\t\t\t\tif (gen.genNodeType === 'gen' || gen.genNodeType === 'cid') return true;\n\t\t\t\tif (gen.ch && hasGen(gen.ch)) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tlet sgns = [] as string[];\n\t\tfor (let itType of this.getItemTypes()) {\n\t\t\tlet itData = itType.datas;\n\t\t\tif (hasGen(itData.generators)) sgns.push(itData.sgn);\n\t\t}\n\t\treturn sgns.length > 0 ? new RegExp(sgns.join('|')) : null;\n\t}\n\n\thasHelpDb(): boolean {return this._helpSrc != null || this._helpOptionsSrc != null}\n\n\tgetHelpDbProv(): () => Promise<IHelpDb | null> {\n\t\tif (!this._helpDbProv) this._helpDbProv = async (): Promise<IHelpDb | null> => {\n\t\t\tconst {getHelpLocalDb, HelpLocalDb} = await import(\"lib/help/helpLocalDb.js\");\n\t\t\tlet helpDb: HelpLocalDb = this._helpSrc ? getHelpLocalDb(this._helpSrc) : null;\n\t\t\tif (this._helpOptionsSrc) {\n\t\t\t\tconst {HelpUnionDb} = await import(\"lib/help/helpUnionDb.js\");\n\t\t\t\tconst map = new Map<string, { db: IHelpDb, title: string }>();\n\t\t\t\tthis._helpOptionsSrc.forEach((optHelp) => map.set(optHelp.key, {db: getHelpLocalDb(optHelp.endPoint, helpDb, optHelp.key), title: optHelp.title}));\n\t\t\t\treturn new HelpUnionDb(this.reg, helpDb, map);\n\t\t\t}\n\t\t\treturn helpDb;\n\t\t}\n\t\treturn this._helpDbProv;\n\t}\n\n\tprotected _helpDbProv: () => Promise<IHelpDb | null>;\n\n\n\t/** Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()*/\n\tsetItemType(dataItemType: IDatasItemType) {\n\t\tthis._dataItemTypes[dataItemType.model] = dataItemType;\n\t}\n\n\t/** Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()*/\n\tsetWed(key: string, wedDef: IWedDef) {\n\t\tthis._weds[key] = wedDef;\n\t}\n\n\t/** Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()*/\n\tsetSpaceIcon(close: string, open: string) {\n\t\tthis._spaceIcon = close;\n\t\tthis._spaceOpenIcon = open;\n\t}\n\n\t/** Icône associée au wspDef */\n\tsetIcon(ico: string) {\n\t\tthis._icon = ico;\n\t}\n\n\t/** Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()*/\n\tsetItemLcName(name: string) {\n\t\tif (!this._itemLifeCycle) this._itemLifeCycle = {lcStates: new Map(), lcTrans: new Map()};\n\t\tthis._itemLifeCycle.lcName = name;\n\t}\n\n\t/** Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()*/\n\taddItemLcState(...lcState: IDatasLcState[]) {\n\t\tif (!this._itemLifeCycle) this._itemLifeCycle = {lcStates: new Map(), lcTrans: new Map()};\n\t\tfor (const st of lcState) {\n\t\t\tif (st.icon) st.iconUrl = this._currrentWspTypeEP.resolve(st.icon).url;\n\t\t\tthis._itemLifeCycle.lcStates.set(st.code, st);\n\t\t}\n\t}\n\n\t/** Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()*/\n\taddItemLcTrans(...lcTrans: IDatasLcSimpleTransition[]) {\n\t\tif (!this._itemLifeCycle) this._itemLifeCycle = {lcStates: new Map(), lcTrans: new Map()};\n\t\tfor (const tr of lcTrans) {\n\t\t\tif (tr.icon) tr.iconUrl = this._currrentWspTypeEP.resolve(tr.icon).url;\n\t\t\tthis._itemLifeCycle.lcTrans.set(tr.code, tr);\n\t\t}\n\t}\n\n\t/** Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()*/\n\tsetItemLcTransGroupOrder(groupOrder: string) {\n\t\tif (!this._itemLifeCycle) this._itemLifeCycle = {lcStates: new Map(), lcTrans: new Map()};\n\t\tthis._itemLifeCycle.lcTransGroupOrder = groupOrder;\n\t}\n\n\t/**\n\t * Configure un système d'aide en ligne intégrée.\n\t * Appelé par les wspType.js / wspOption.js, dans IWspTypeModule.configWspMeta()\n\t * Les propriété key et title ne sont à utiliser que dans wspOption.js pour gérer l'agrégation dans\n\t * une Db unifiée.\n\t */\n\taddLocalHelp(source: string, key?: string, title?: string) {\n\t\tif (!key) {\n\t\t\tthis._helpSrc = this._currrentWspTypeEP.resolve(source);\n\t\t} else {\n\t\t\tif (!this._helpOptionsSrc) this._helpOptionsSrc = [];\n\t\t\tthis._helpOptionsSrc.push({endPoint: this._currrentWspTypeEP.resolve(source), key, title});\n\t\t}\n\t}\n\n\t/** URLs des sources d'aides */\n\tprotected _helpSrc: IEndPoint;\n\tprotected _helpOptionsSrc: { endPoint: IEndPoint, key: string, title?: string }[];\n\n\ttoString() {\n\t\treturn JSON.stringify({wspType: this.wspTypeUrl.url, wspOptions: this.wspOptionUrls?.map((v) => v.url)})\n\t}\n\n}\n\n/** Familles de type d'items. */\nexport const enum EItemTypeFamily {\n\t'xml' = 'xml',\n\t'res' = 'res',\n\t'folder' = 'folder',\n\t'task' = 'task',\n\t'undef' = 'undef',\n\t'other' = 'other'\n}\n\n/** Défini un type d'item. */\nexport abstract class ItemType {\n\n\t/** reg dédié à cet itemType. */\n\treg: IReg<IItemTypeEnv>;\n\n\tprotected _schema: Promise<Schema>;\n\n\tprotected _iconPngValid: string;\n\n\tprotected _iconPngOpenValid: string;\n\n\tconstructor(public readonly wspMeta: WspMetaUi, public readonly datas: IDatasItemType) {\n\t\tthis.reg = REG.createSubReg<IItemTypeEnv>(wspMeta.reg);\n\t\tthis.reg.env.itemType = this;\n\t}\n\n\tgetFamily(): EItemTypeFamily | null {return this.datas.family}\n\n\tisFamily(...family: EItemTypeFamily[]): boolean {\n\t\treturn family.indexOf(this.datas.family) >= 0;\n\t}\n\n\tgetModel(): string {return this.datas.model}\n\n\tgetSgn(): string {return this.datas.sgn}\n\n\tgetTitle(shortDesc?: JSrcFields): string {return this.datas.title}\n\n\t/** Pour les items xml, retourne le nodeName racine de cet item. */\n\tgetTagRoot(): string {return null}\n\n\tgetIcon(shortDesc?: JSrcFields): string {\n\t\t// Controle erreur \"itSt\"\n\t\tif (shortDesc) switch (shortDesc.itSt) {\n\t\tcase EItStatus.warnings:\n\t\t\treturn this.datas.wspResUrl.resolve(this.datas.iconsPng + \"icowarning.png\").url;\n\t\tcase EItStatus.errors:\n\t\tcase EItStatus.conflict:\n\t\t\treturn this.datas.wspResUrl.resolve(this.datas.iconsPng + \"icoerror.png\").url;\n\t\t}\n\t\t// Controle erreur \"rspSt\"\n\t\tif (shortDesc) switch (shortDesc.rspSt) {\n\t\tcase EItResp.errors:\n\t\t\treturn this.datas.wspResUrl.resolve(this.datas.iconsPng + \"icoerror.png\").url;\n\t\t}\n\t\tif (!this._iconPngValid) this._iconPngValid = this.datas.wspResUrl.resolve(this.datas.iconsPng + \"icovalid.png\").url;\n\t\treturn this._iconPngValid;\n\t}\n\n\tgetIconOpen(shortDesc?: JSrcFields): string {\n\t\t// Controle erreur \"itSt\"\n\t\tif (shortDesc) switch (shortDesc.itSt) {\n\t\tcase EItStatus.warnings:\n\t\t\treturn this.datas.wspResUrl.resolve((this.datas.iconsPngOpen || this.datas.iconsPng) + \"icowarning.png\").url;\n\t\tcase EItStatus.errors:\n\t\tcase EItStatus.conflict:\n\t\t\treturn this.datas.wspResUrl.resolve((this.datas.iconsPngOpen || this.datas.iconsPng) + \"icoerror.png\").url;\n\t\t}\n\t\t// Controle erreur \"rspSt\"\n\t\tif (shortDesc) switch (shortDesc.rspSt) {\n\t\tcase EItResp.errors:\n\t\t\treturn this.datas.wspResUrl.resolve((this.datas.iconsPngOpen || this.datas.iconsPng) + \"icoerror.png\").url;\n\t\t}\n\t\tif (!this._iconPngOpenValid) this._iconPngOpenValid = this.datas.wspResUrl.resolve((this.datas.iconsPngOpen || this.datas.iconsPng) + \"icovalid.png\").url;\n\t\treturn this._iconPngOpenValid;\n\t}\n\n\tgetSrcMainArea(ctx: ISrcMainCtx): SrcMainArea {throw Error(/*to implement*/)}\n\n\tconfigRegForMainView(ctx: ISrcMainCtx, reg: IReg<IItemUiEnv>) {\n\t\tconst configReg = this.getDataSrcMainView(ctx, true)?.configReg;\n\t\tif (configReg) configReg(reg);\n\t\telse if (ctx.mainViewCode) {\n\t\t\tif (ctx.mainViewCode.indexOf(\":hideWspStruct:\") >= 0) {\n\t\t\t\treg.setPref(\"wsp.hideWspStruct\", REG.LEVELAUTH_MODEL, true);\n\t\t\t\treg.addToList(\"ribbon:item\", \"refs\", REG.LEVELAUTH_MODEL, null);\n\t\t\t\t// reg.addToList(\"actions:wsp:shortDesc\", \"renameSrc\", REG.LEVELAUTH_MODEL, null);\n\t\t\t\t// reg.addToList(\"accelkeys:wsp:shortDesc\", \"F2\", 1, null);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetConvertersForMainView(ctx: ISrcMainCtx): IAction<IRegPointer<IItemUiEnv>>[] | null {\n\t\tconst cnvs = this.getDataSrcMainView(ctx, true)?.convertors;\n\t\tif (!cnvs) return null;\n\t\tfor (let i = 0; i < cnvs.length; i++) {\n\t\t\tconst cnv = cnvs[i];\n\t\t\tif ('executor' in cnv) cnvs[i] = new ItemMainConvert(cnv);\n\t\t}\n\t\t// EVOL : prévoir une clef de trie explicite (besoin : liste construite par le wspDef mais aussi potentiellement par l'extDef)\n\t\tcnvs.sort((c1: IAction<IRegPointer<IItemUiEnv>>, c2: IAction<IRegPointer<IItemUiEnv>>) => c1.getLabel(ctx).localeCompare(c2.getLabel(ctx)))\n\t\treturn cnvs as IAction<IRegPointer<IItemUiEnv>>[];\n\t}\n\n\tgetDataSrcMainView(ctx: ISrcMainCtx, strict?: boolean): IDataSrcMainView {\n\t\tif (!ctx.mainViewCode) return this.datas.mainView;\n\t\treturn this.datas.otherMainViews ? this.datas.otherMainViews[ctx.mainViewCode] || (strict ? null : this.datas.mainView) : strict ? null : this.datas.mainView;\n\t}\n\n\tgetIsolatedView(shortDesc: JSrcFields): IDatasSrcView | null {\n\t\treturn this.datas.isolatedView;\n\t}\n\n\tgetMainStreamSrcUri(shortDesc: JSrcFields): srcUri | null {\n\t\treturn shortDesc ? shortDesc.srcUri : null;\n\t}\n\n\tgetMainXmlSrcUri(shortDesc: JSrcFields): string | null {\n\t\treturn shortDesc ? shortDesc.srcUri : null;\n\t}\n\n\tgetSchema(): Promise<Schema> {\n\t\tif (!this.datas.schema) return getGenericSchema();\n\t\tif (!this._schema) this._schema = getSchema(this.datas.wspResUrl.resolve(this.datas.schema));\n\t\treturn this._schema;\n\t}\n\n\t/**\n\t * Si code null ou \"\", retourne l'éditeur principal de la mainView.\n\t * (à voir si on rend explicite un éditeur par défaut utilisé pour afficher l'éditeur en isolé).\n\t */\n\tgetEditor(code?: string | null): IDatasEditor | null {\n\t\tif (code) return this.finalizeDatasEditor(this.datas.editors[code]);\n\t\tif (this.datas.mainView) return this.finalizeDatasEditor(this.datas.editors[this.datas.mainView.xmlEditor]);\n\t\treturn null;\n\t}\n\n\tprotected finalizeDatasEditor(d: IDatasEditor | null): IDatasEditor | null {\n\t\tif (d?.help && !d.help.helpDbProv) {\n\t\t\td.help.helpDbProv = this.wspMeta.getHelpDbProv();\n\t\t\tif (d.help.outlineView === undefined) d.help.outlineView = {indexKey: \"home\"};\n\t\t}\n\t\treturn d;\n\t}\n\n\tgetWed(key: string): IEndPoint & IPathResolver {\n\t\tconst wedDef = this.wspMeta.getWedDef(key);\n\t\tif (!wedDef) throw Error(`Wed editor key '${key}' do not exist in this wspMetaUi ${this.wspMeta.toString()}`);\n\t\tlet endP = this.datas.wspResUrl.resolve(wedDef.path);\n\t\tif (!(endP instanceof EndPointResolver)) endP = this.reg.env.resolver.clone().setBase(endP).addEndPoint(\"wspRes\", this.datas.wspResUrl);\n\t\treturn endP as EndPointResolver;\n\t}\n\n\tgetPreview(wsp: Wsp, fields: JSrcFields, reg: IReg<IWspUiEnv> | null, utils: typeof UTILS): TemplateResult | undefined {\n\t\tconst preview = this.datas.previewMini;\n\t\tif (!preview) return undefined;\n\t\tif (preview.tag === \"wsp-dyngen-preview\") {\n\t\t\t// /wspCode/cdGen/refUri'xxx'skin'yy'/co\n\t\t\tif (fields.srcSt < 0 || ITEM.isHistoryOrTrashUri(fields.srcUri)) return undefined;\n\t\t\t//const url = wsp.wspServer.config.itemDynGenUrl.url + `${encodeURIComponent(wsp.code)}/${preview.codeGen}/${encodeURIComponent(CDM.stringify({refUri: DYNGEN.encodeUrl2(SRC.srcRef(fields)), ...preview.params}))}/co/`;\n\t\t\tconst dynGen = new DynGen().initialize({\n\t\t\t\treg: reg || this.reg,\n\t\t\t\tw: wsp.code,\n\t\t\t\tc: preview.codeGen,\n\t\t\t\tr: ITEM.srcRefSub(fields),\n\t\t\t\tgp: preview.params,\n\t\t\t});\n\t\t\tdynGen.onViewShown();\n\t\t\tDOM.setAttr(dynGen, \"style\", (preview.w ? `width:${preview.w};` : '') + (preview.h ? `height:${preview.h};` : ''));\n\t\t\tDOM.setAttr(dynGen, \"class\", \"itemPreview dynGenView\");\n\t\t\treturn xhtml`${dynGen}`;\n\t\t} else if (preview.tag === \"wsp-remote-view\") {\n\t\t\treturn xhtml`<wsp-remote-view class=\"itemPreview\" style=\"${(preview.w ? `width:${preview.w};` : '') + (preview.h ? `height:${preview.h};` : '')}\" p.wsp=\"${wsp}\" p.fields=\"${fields}\" i.=\"${preview.init}\"/>`;\n\t\t} else if (preview.tag === \"wsp-code-view\") {\n\t\t\treturn xhtml`<wsp-code-view class=\"itemPreview\" p.wsp=\"${wsp}\" p.fields=\"${fields}\" p.transform=\"${preview.transform}\" i.=\"${preview.init}\"/>`;\n\t\t}\n\n\t\tconst url = preview.transform ? WSP.getStreamStampedUrl(wsp, SRC.srcRef(fields), fields.srcDt, preview.transform) : WSP.getStreamStampedUrl(wsp, this.getMainStreamSrcUri(fields), fields.srcDt);\n\t\tswitch (preview.tag) {\n\t\tcase 'img':\n\t\t\treturn xhtml`<img class=\"itemPreview imgView\" src=\"${url}\"/>`;\n\t\tcase 'video':\n\t\t\tif (preview.poster) {\n\t\t\t\tconst poster = wsp.wspServer.config.wspSrcUrl + IO.qs(\"cdaction\", \"GetSrc\", \"param\", wsp.code, \"format\", 'stream', \"refUri\", SRC.srcRef(fields), \"transform\", preview.poster, \"t\", fields.srcDt);\n\t\t\t\treturn xhtml`<video class=\"itemPreview videoView\" src=\"${url}\" poster=\"${poster}\" controls=\"controls\" style=\"${(preview.w ? `width:${preview.w};` : '') + (preview.h ? `height:${preview.h};` : '')}\" />`;\n\t\t\t} else {\n\t\t\t\treturn xhtml`<video class=\"itemPreview videoView\" src=\"${url}\" controls=\"controls\" style=\"${(preview.w ? `width:${preview.w};` : '') + (preview.h ? `height:${preview.h};` : '')}\"/>`;\n\t\t\t}\n\t\tcase 'audio':\n\t\t\treturn xhtml`<audio class=\"itemPreview audioView\" src=\"${url}\" controls=\"controls\"/>`;\n\t\tcase 'iframe':\n\t\t\treturn xhtml`<iframe class=\"itemPreview iframeView\" style=\"${(preview.w ? `width:${preview.w};` : '') + (preview.h ? `height:${preview.h};` : '')}\" src=\"${url}\"/>`;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/** Retourne la ou les extensions autorisées. Ex: \".png\", \".xml\". */\n\tgetExtensions(contentType?: string): string | string[] {\n\t\tconst ext = this.datas.itemExt;\n\t\tif (Array.isArray(ext)) return ext.length > 1 ? ext : ext[0];\n\t\treturn ext || \".xml\"\n\t}\n\n\t/** Résoud un path dans le contexte du pack de déclaration de cet itemType. */\n\tresolvePath(path: string): IEndPoint {return this.datas.wspResUrl.resolve(path)}\n\n\t/**\n\t * Evalue la concordance avec un fichier externe en cours d'import (drad session, presse-papier)\n\t * <br/>Retourne une certitude :\n\t * <ul>\n\t * <li>-1 = ne matche pas</li>\n\t * <li>0 = n'a pas pu être déterminé</li>\n\t * <li>1 = undefPrim</li>\n\t * <li>2 = match de type \"toutes les extensions\", ou \"tous les types\" (sauf éventuellement une liste noire)</li>\n\t * <li>100 = match avec certitude maximale</li>\n\t * </ul>\n\t */\n\tmatchType(contentType?: string, fileName?: string): number {return -1}\n\n\t/**\n\t * Evalue si l'extension de fileName appartient à la liste des extensions de cet itemType\n\t * Retourne une certitude :\n\t * <ul>\n\t * <li>-1 = ne matche pas</li>\n\t * <li>0 = n'a pas pu être déterminé</li>\n\t * <li>1 = undefPrim</li>\n\t * <li>2 = match de type \"toutes les extensions\", ou \"tous les types\"</li>\n\t * <li>100 = match avec certitude maximale</li>\n\t * </ul>\n\t */\n\tmatchExt(fileName?: string): number {\n\t\tif (!fileName) return 0;\n\t\tconst exts = this.getExtensions();\n\t\tif (exts == null) return 2;\n\t\tif (Array.isArray(exts)) return exts.find((entry) => SRC.matchExt(fileName, entry)) ? 100 : -1;\n\t\treturn SRC.matchExt(fileName, exts) ? 100 : -1\n\t}\n\n\t/**\n\t * Pour les items de type \"Document\", fournit la liste des itModel vus comme des supports\n\t * de générateurs de cet item-document.\n\t * Retourne null si cet itemType n'a pas d'itemTypes de support associés mais directement des générateurs.\n\t */\n\tgetSupportModels(): string[] | null {\n\t\tif (!this.datas.asDoc) return null;\n\t\tconst supports = this.datas.asDoc.supports;\n\t\tif (!supports) return null;\n\t\treturn supports.map((s) => s.itModel);\n\t}\n\n\t/** Pour les items de type \"Document\", fournit son éditeur masquant son lien vers son document. */\n\tgetSupportEditor(support: ItemType): IDatasEditor {\n\t\tconst sup = this.datas.asDoc.supports.find((s) => s.itModel === support.getModel());\n\t\treturn sup ? support.datas.editors[sup.keyEditor] : null;\n\t}\n\n\t/**\n\t * Retourne un name par défaut pour ce type d'item et cette extension (itemCode = itemName + itemExtension).\n\t *\n\t * @param currentSpace Si null, création d'un code pour airItem, donc pas de check d'existance sur le serveur.\n\t * @param currentExt Extension sélectionnée pour cet ItemType (Ex:\"png\").\n\t */\n\tasync buildItemName(wsp: Wsp, currentSpace: null | string, currentExt: string, isFree?: (itemCode: string) => Promise<boolean>): Promise<string> {\n\t\tlet tpl = this.datas.itemNameTpl || \"{folder}_{counter}\";\n\t\ttpl = tpl.replace(/(\\{folder\\})/g, currentSpace ? SRC.extractLeafFromUri(currentSpace) : \"\");\n\t\tif (tpl.indexOf(\"{dateStamp\") > -1) {\n\t\t\tfunction str(num: number): string {return num > 9 ? num.toString() : '0' + num}\n\n\t\t\tconst format = tpl.match(/\\{dateStamp ([^\\}]*)\\}/)[1] || \"%Y-%m-%d\";\n\t\t\tconst d = new Date();\n\t\t\tconst date = format.replace(/(%.)/g, (k: string): string => {\n\t\t\t\tswitch (k) {\n\t\t\t\tcase \"%Y\":\n\t\t\t\t\treturn d.getFullYear().toString();\n\t\t\t\tcase \"%m\":\n\t\t\t\t\treturn str(d.getMonth() + 1);\n\t\t\t\tcase \"%d\":\n\t\t\t\t\treturn str(d.getDate());\n\t\t\t\tcase \"%H\":\n\t\t\t\t\treturn str(d.getHours());\n\t\t\t\tcase \"%M\":\n\t\t\t\t\treturn str(d.getMinutes());\n\t\t\t\tcase \"%S\":\n\t\t\t\t\treturn str(d.getSeconds());\n\t\t\t\t}\n\t\t\t\treturn k\n\t\t\t});\n\t\t\ttpl = tpl.replace(/(\\{dateStamp [^\\}]*\\})/g, date);\n\t\t}\n\t\tlet idx = 1;\n\t\tlet name = tpl;\n\t\twhile (true) {\n\t\t\tname = tpl.replace(/(\\{optionalCounter\\})/g, (idx > 1 ? \"_\" + (idx < 10 ? \"0\" + idx : idx) : \"\"));\n\t\t\tname = name.replace(/(\\{counter\\})/g, idx < 10 ? \"0\" + idx : idx.toString());\n\t\t\tif (name === tpl) break; //pas de compteur dans le template, on accepte ce name sans recherche d'un code unique.\n\t\t\tif (!isFree) break; //pas de controle si l'uri est dispo.\n\t\t\tconst itemCode = name + currentExt;\n\t\t\tif (ITEM.isValidCodeItem(itemCode)) {\n\t\t\t\t//le template a produit un nom valide\n\t\t\t\tif (isFree && await isFree(itemCode)) break;\n\t\t\t\tidx++;\n\t\t\t} else {\n\t\t\t\t//le template a produit un nom invalide\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn name;\n\t}\n\n\t/**\n\t * Retourne le body à utiliser pour créer un nouvel item mono-flux ou une structure de IFolder.\n\t * Impl par défaut : fichier vide.\n\t * @return\n\t * \t- null: action abandonnée\n\t * \t- \"\": fichier vide, 0 octets\n\t * \t- {name:codeItem, entries:[]}: dossier vide\n\t */\n\tasync getNewContent(reg: IReg<IWspUiEnv>, space: null | string, codeItem: string, options?: ONewContent): Promise<IBody | IFolder | null> {\n\t\treturn \"\";\n\t}\n\n\n\thasGenerators(secCtx: ISecurityCtx) {\n\t\tif (this.datas.generators) for (const gen of this.datas.generators) {\n\t\t\tif (!gen.perms || this.reg.hasPerm(gen.perms, secCtx)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/** Construit un arbre de IItemPubNode en fonction des permissions courantes.*/\n\tbuildPubTree(secCtx: ISecurityCtx, filter?: (it: IDatasItemGenNode | IDatasItemCidNode) => boolean): IItemPubNode[] {\n\t\tconst cloneList = (from: (IDatasItemGenNode & IDatasItemCidNode)[], to: IItemPubNode[]): IItemPubNode[] => {\n\t\t\tif (from) for (const datas of from) {\n\t\t\t\tif (datas.perms && !this.reg.hasPerm(datas.perms, secCtx)) continue;\n\t\t\t\tif (filter && !filter(datas)) continue;\n\t\t\t\tif (datas.genNodeType !== 'dir') {\n\t\t\t\t\tif (!datas.iconUrl) {\n\t\t\t\t\t\tif (datas.icon) datas.iconUrl = this.datas.wspResUrl.resolve(datas.icon).url;\n\t\t\t\t\t\telse datas.iconUrl = `/@skin@/wsp/views/generators/gen_${datas.genNature || 'cid'}.svg`;\n\t\t\t\t\t}\n\t\t\t\t\tif (!datas.illusUrl) {\n\t\t\t\t\t\tif (datas.illus) datas.illusUrl = this.datas.wspResUrl.resolve(datas.illus).url;\n\t\t\t\t\t\telse datas.illusUrl = `/@skin@/wsp/views/generators/illus_${datas.genNature}.png`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst genNode = Object.create(datas) as IItemPubNode;\n\t\t\t\tif (datas.ch) {\n\t\t\t\t\tconst children = cloneList(datas.ch, []);\n\t\t\t\t\tif (datas.genNodeType === 'dir' && children.length === 0) continue; //un dir sans fils, on saute\n\t\t\t\t\tgenNode.ch = children.length > 0 ? children : null;\n\t\t\t\t}\n\t\t\t\tto.push(genNode);\n\t\t\t}\n\t\t\treturn to;\n\t\t};\n\n\t\treturn this.datas.generators ? cloneList(this.datas.generators, []) : [];\n\t}\n\n\t/** Recherche un générator déclaré par son code dans une liste donnée. */\n\tgetPub(codeGenStack: string, list: IDatasItemPubNode[]): IDatasItemPubNode {\n\t\tif (!list) return null;\n\t\tlet found = list.find((g) => g.codeGenStack === codeGenStack);\n\t\tif (found) return found;\n\t\tfor (const child of list) {\n\t\t\tif (child.ch) {\n\t\t\t\tfound = this.getPub(codeGenStack, child.ch);\n\t\t\t\tif (found) return found;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/** Responsabilities : retourne true si cet itemType gère les responsabilities. */\n\thasResps(): boolean {\n\t\treturn this.datas.resps && this.datas.resps.length > 0;\n\t}\n\n\t/** Responsabilities : retourne la configuration d'une responsabilité sur cet item ou task. */\n\tgetResp(code: string): IDatasResp {\n\t\tconst resps = this.datas.resps;\n\t\tif (resps) for (const r of resps) if (r.code === code) return r;\n\t\treturn null;\n\t}\n\n\t/** Utilisé par les extensions pour ajouter ou remplacer un éditor. */\n\tsetEditor(key: string, editor: IDatasEditor) {\n\t\t(this.datas.editors || (this.datas.editors = {}))[key] = editor;\n\t}\n\n\t/** Utilisé par les extensions pour remplacer ou insérer un générateur dans l'arbre. */\n\taddGenerator(genNode: IDatasItemGenNode | IDatasItemCidNode, parentCodeGenStack?: string, insertBefore?: RegExp | string) {\n\t\tthis.removeGenerator(genNode.codeGenStack);\n\t\tconst parent = parentCodeGenStack ? this.getPub(parentCodeGenStack, this.datas.generators) : null;\n\t\tconst list = parent ? parent.ch || (parent.ch = []) : this.datas.generators || (this.datas.generators = []);\n\t\tconst next = insertBefore ? list.findIndex((g) => g.codeGenStack.match(insertBefore)) : -1;\n\t\tif (next < 0) list.push(genNode);\n\t\telse list.splice(next, 0, genNode);\n\t}\n\n\t/** Utilisé par les extensions pour ajouter un convertor */\n\taddConvertor(convertor: IDatasItemConvertor | IAction<IRegPointer<IItemUiEnv>>, ctx: ISrcMainCtx = {} as ISrcMainCtx) {\n\t\tconst mainview = this.getDataSrcMainView(ctx, true);\n\t\tif (mainview) {\n\t\t\tlet cnvs = mainview.convertors;\n\t\t\tif (!cnvs) cnvs = mainview.convertors = []\n\t\t\tcnvs.push(convertor);\n\t\t}\n\t}\n\n\t/** Utilisé par les extensions pour supprimer un générateur (voir un dir complet) dans l'arbre. */\n\tremoveGenerator(codeGenStack: string, list: (IDatasItemGenNode | IDatasItemCidNode)[] = this.datas.generators || []): boolean {\n\t\tconst idx = list.findIndex((g) => g.codeGenStack === codeGenStack);\n\t\tif (idx >= 0) {\n\t\t\tlist.splice(idx, 1);\n\t\t\treturn true;\n\t\t}\n\t\tfor (const child of list) {\n\t\t\tif (child.ch) if (this.removeGenerator(codeGenStack, child.ch)) return true\n\t\t}\n\t\treturn false;\n\t}\n\n\t/** Utilisé par les extensions pour remplacer ou insérer un subTab dans la mainView. */\n\taddMainViewSubTab(itemTab: IDatasItemTab, insertBefore?: string) {\n\t\tthis.removeMainViewSubTab(itemTab.code);\n\t\tlet mv = this.datas.mainView;\n\t\tif (!mv) mv = this.datas.mainView = {};\n\t\tlet sts = mv.subTabs;\n\t\tif (!sts) sts = mv.subTabs = [];\n\t\tconst next = insertBefore ? sts.findIndex((st) => st.code === insertBefore) : -1;\n\t\tif (next < 0) sts.push(itemTab);\n\t\telse sts.splice(next, 0, itemTab);\n\t}\n\n\t/** Utilisé par les extensions pour supprimer un subTab dans la mainView. */\n\tremoveMainViewSubTab(code: string): boolean {\n\t\tconst mv = this.datas.mainView;\n\t\tif (mv && mv.subTabs) {\n\t\t\tconst idx = mv.subTabs.findIndex((st) => st.code === code);\n\t\t\tif (idx >= 0) {\n\t\t\t\tmv.subTabs.splice(idx, 1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/** Utilisé par les extensions pour forcer un itemType existant en tant que \"document\". */\n\tsetAsDoc() {\n\t\tif (!this.datas.asDoc) this.datas.asDoc = {};\n\t}\n\n\t/** Utilisé par les extensions pour que cet item-type soit vu comme un \"support\" du document docModel.\n\t *    Contexte : itemType *support*\n\t */\n\n\t/* non utilisé\n\taddDocument(docModel: ItemType, keyEditor: string, newContentBuilder: (wsp: Wsp, space: null | string, codeItem: string, options?: ONewContent) => Promise<IBody | null>) {\n\t\tdocModel.setAsDoc();\n\t\t(docModel.datas.asDoc.supports || (docModel.datas.asDoc.supports = [])).push({\n\t\t\titModel: this.getModel(),\n\t\t\tkeyEditor,\n\t\t\tnewContentBuilder\n\t\t});\n\t}\n\t*/\n\n\t/** Utilisé par les extensions pour ajouter un support au \"document\" courant\n\t *    Contexte : itemType *document*\n\t */\n\taddDocumentSupport(supportModel: ItemType, keyEditor: string, newContentBuilder: (wsp: Wsp, space: null | string, codeItem: string, options?: ONewContent) => Promise<IBody | null>) {\n\t\tthis.setAsDoc();\n\t\t(this.datas.asDoc.supports || (this.datas.asDoc.supports = [])).push({\n\t\t\titModel: supportModel.getModel(),\n\t\t\tkeyEditor,\n\t\t\tnewContentBuilder\n\t\t});\n\t}\n\n\n\t/** interne pour, algo de tri de l'arbre. */\n\tget sortKey() {return this.datas.sortKey}\n}\n\n\nexport class ItemTypeXml extends ItemType {\n\n\tprotected _tagRoot: string;\n\n\tgetSrcMainArea(ctx: ISrcMainCtx): SrcMainArea {return this.datas.mainView.resView ? defaultItemMainAreaRes : defaultItemMainAreaXml}\n\n\tgetTagRoot(): string {\n\t\tif (this._tagRoot === undefined) this._tagRoot = this.getSgn().replace(/@([^_]*)_([^#]*).*/, \"$1:$2\");\n\t\treturn this._tagRoot;\n\t}\n\n\tmatchType(type: string, fileName?: string): number {\n\t\tif (!type && !fileName) return 0;\n\t\t// Ext\n\t\tlet matchExt = this.matchExt(fileName);\n\t\tif (matchExt != 0)\n\t\t\treturn matchExt;\n\t\t// Mime\n\t\tif ([\"application/xml\", \"text/xml\"].indexOf(type) > -1)\n\t\t\treturn 100;\n\t\treturn -1\n\t}\n\n\tasync getNewContent(reg: IReg<IWspUiEnv>, space: null | string, codeItem: string, options?: ONewContent): Promise<IBody | null> {\n\t\tif (options?.docShortDesc) {\n\t\t\t//Création d'un support associé au document.\n\t\t\tconst docType = this.wspMeta.getItemType(options.docShortDesc.itModel);\n\t\t\tconst supDef = docType.datas.asDoc.supports.find((supDef) => supDef.itModel === this.getModel());\n\t\t\treturn supDef.newContentBuilder(reg.env.wsp, space, codeItem, options);\n\t\t}\n\t\tconst schema = await this.getSchema();\n\t\tif (!schema) return \"<x/>\";\n\t\tconst doc = JML.jmlToDom(schema.createNewDoc());\n\t\tif (this.datas.createWithCtIdInAtt) {\n\t\t\t//Interrogation du svc ctId du wsp\n\t\t\tconst wsp = reg.env.wsp;\n\t\t\tconst id = await wsp.wspServer.config.wspSvcUrl.resolve(wsp.code + \"/ctId\").fetchText(IO.qs(\"param\", codeItem), {method: \"POST\"});\n\t\t\tdoc.documentElement.setAttribute(this.datas.createWithCtIdInAtt, id);\n\t\t}\n\t\tif (options?.remoteUrl) {\n\t\t\t//RemotePrim\n\t\t\tconst scLocation = DOM.findNext(doc.documentElement, doc.documentElement, (n: Node): n is Element => n.nodeName === \"sc:location\");\n\t\t\tif (scLocation) scLocation.textContent = options.remoteUrl;\n\t\t}\n\t\treturn DOM.ser(doc);\n\t}\n\n}\n\n/** Spécialisation d'un ItemType de famille 'res'. */\nexport interface IDatasItemTypeRes extends IDatasItemType {\n\t/** ressource qui n'est pas embedded dans un folder. Usage : modeling */\n\twithoutFolderMorphology?: boolean\n}\nclass ItemTypeRes extends ItemType {\n\tstatic PATH_META = \"meta.xml\";\n\n\tconstructor(wspMeta: WspMetaUi, public readonly datas: IDatasItemTypeRes) {\n\t\tsuper(wspMeta, datas);\n\t\tthis.reg.addToList(\"actions:item:burger\", \"import\", 1, ImportRes.SINGLETON(), 100);\n\t\tthis.reg.addToList(\"actions:item:burger\", \"download\", 1, ExportRes.SINGLETON(), 101);\n\t}\n\n\tgetSrcMainArea(ctx: ISrcMainCtx): SrcMainArea {return defaultItemMainAreaRes}\n\n\tgetExtensions(contentType?: string): string | string[] {\n\t\tconst resTypes = this.datas.resTypes;\n\t\tif (!resTypes) return null;\n\t\tconst exts = resTypes.reduce((acc, prev) => {\n\t\t\tif (!contentType || prev.ct.indexOf(contentType) >= 0) acc.push(...prev.ext);\n\t\t\treturn acc;\n\t\t}, []);\n\t\treturn exts.length < 2 ? exts[0] : exts;\n\t}\n\n\tasync getNewContent(reg: IReg<IWspUiEnv>, space: null | string, codeItem: string): Promise<IBody | null> {\n\t\tconst emptyUrls = this.datas.resEmptyUrl;\n\t\tif (emptyUrls) {\n\t\t\tfor (const k of Object.keys(emptyUrls)) {\n\t\t\t\tif (SRC.matchExt(codeItem, k)) return this.datas.wspResUrl.resolve(emptyUrls[k]).fetchBlob();\n\t\t\t}\n\t\t\tif (emptyUrls['*']) return this.datas.wspResUrl.resolve(emptyUrls['*']).fetchBlob();\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tgetMainStreamSrcUri(shortDesc: JSrcFields) {\n\t\tif (!shortDesc) return null;\n\t\tif (this.datas.withoutFolderMorphology)\n\t\t\treturn shortDesc.srcUri\n\t\tswitch (ITEM.getUriResType(shortDesc)) {\n\t\tcase ITEM.EUriResType.root :\n\t\t\treturn SRC.addLeafToUri(shortDesc.srcUri, SRC.extractLeafFromUri(shortDesc.srcUri));\n\t\tcase ITEM.EUriResType.folder :\n\t\t\treturn null;\n\t\t}\n\t\treturn shortDesc.srcUri;\n\t}\n\n\tgetIsolatedView(shortDesc: JSrcFields): IDatasSrcView | null {\n\t\tif (ITEM.extractItemResPath(shortDesc.srcUri) == ItemTypeRes.PATH_META) {\n\t\t\t//Vue isolée des metas.\n\t\t\treturn {tag: \"wsp-item-xmled\"}\n\t\t}\n\t\treturn this.datas.isolatedView;\n\t}\n\n\tgetMainXmlSrcUri(shortDesc: JSrcFields): string | null {\n\t\tif (!shortDesc) return null;\n\t\tif (this.datas.withoutFolderMorphology)\n\t\t\treturn shortDesc.srcUri;\n\t\treturn ITEM.getUriResType(shortDesc) === ITEM.EUriResType.root ? SRC.addLeafToUri(shortDesc.srcUri, ItemTypeRes.PATH_META) : shortDesc.srcUri;\n\t}\n\n\tmatchType(type?: string, fileName?: string): number {\n\t\tif (!this.datas.resTypes && !this.datas.resExtsMatcher) {\n\t\t\t//Toutes les extensions\n\t\t\tif (fileName) return fileName.indexOf(\".\") > 0 ? 2 : -1; //le name d'un item doit toujours contenir un \".\"\n\t\t\treturn 2; //pas d'info on refusera après.\n\t\t}\n\t\tif (!type && !fileName) return 0;\n\t\t// resExtsMatcher\n\t\tif (!this.datas.resTypes && this.datas.resExtsMatcher) {\n\t\t\tif (!fileName) return 0;\n\t\t\treturn this.datas.resExtsMatcher.test(fileName) ? 2 : -1;\n\t\t}\n\t\t// Ext\n\t\tlet matchExt = this.matchExt(fileName);\n\t\tif (matchExt != 0)\n\t\t\treturn matchExt;\n\t\t// Type\n\t\tfor (const resType of this.datas.resTypes) {\n\t\t\tif (resType.ct) for (const t of resType.ct) if (t === type) return 100;\n\t\t}\n\t\treturn -1;\n\t}\n}\n\n/** Spécialisation d'un ItemType de famille 'folder'. */\nclass ItemTypeFolder extends ItemType {\n\n\tconstructor(wspMeta: WspMetaUi, datas: IDatasItemType) {\n\t\tsuper(wspMeta, datas);\n\t\tthis.reg.addToList(\"actions:item:burger\", \"import\", 1, ImportFolder.SINGLETON(), 100);\n\t}\n\n\tgetSrcMainArea(ctx: ISrcMainCtx): SrcMainArea {return defaultItemMainAreaFolder}\n\n\tgetMainStreamSrcUri(shortDesc: JSrcFields) {\n\t\tif (shortDesc && ITEM.getUriResType(shortDesc) === ITEM.EUriResType.file) return shortDesc.srcUri;\n\t\treturn null;\n\t}\n\n\tgetMainXmlSrcUri(shortDesc: JSrcFields): string | null {\n\t\treturn null;\n\t}\n\n\tasync getNewContent(reg: IReg<IWspUiEnv>, space: string | null, codeItem: string, options?: ONewContent): Promise<IBody | IFolder | null> {\n\t\treturn {name: codeItem, entries: []};\n\t}\n\n\tgetIcon(shortDesc?: JSrcFields): string {\n\t\tif (shortDesc) switch (ITEM.getUriResType(shortDesc)) {\n\t\tcase ITEM.EUriResType.folder :\n\t\t\treturn this.datas.iconResFolder || this.wspMeta.getDefaultResFolderIcon();\n\t\tcase ITEM.EUriResType.file :\n\t\t\treturn this.datas.iconResFile || this.wspMeta.getDefaultResFileIcon();\n\t\t}\n\t\treturn super.getIcon(shortDesc);\n\t}\n\n\tgetIconOpen(shortDesc?: JSrcFields): string {\n\t\tif (shortDesc) switch (ITEM.getUriResType(shortDesc)) {\n\t\tcase ITEM.EUriResType.folder  :\n\t\t\treturn this.datas.iconResFolderOpen || this.wspMeta.getDefaultResFolderOpenIcon();\n\t\tcase ITEM.EUriResType.file:\n\t\t\treturn this.datas.iconResFile || this.wspMeta.getDefaultResFileIcon();\n\t\t}\n\t\treturn super.getIconOpen(shortDesc);\n\t}\n\n\tmatchType(type?: string, fileName?: string): number {\n\t\tif (type) return -1; //Si mimeType recherché, on élimine les items folders.\n\t\tif (!fileName) return 0;\n\t\tif (!this.datas.itemExt) return 2; //Toutes les extensions\n\t\tif (typeof this.datas.itemExt === \"string\") return fileName.endsWith(this.datas.itemExt) ? 100 : -1;\n\t\treturn this.datas.itemExt.find((ext) => fileName.endsWith(ext)) ? 100 : -1;\n\t}\n}\n\n/**\n * ItemType pour les tasks.\n */\nexport class ItemTypeTask extends ItemType implements ILcProvider {\n\n\tdatas: IDatasTaskItemType;\n\n\tprotected _descriptionSchema: Promise<Schema>;\n\n\tprotected _commentSchema: Promise<Schema>;\n\n\tprotected _lcStates: Map<string, IDatasLcState>;\n\tprotected _lcTrans: Map<string, IDatasLcSimpleTransition>;\n\tprotected _createTrans: IDatasLcSimpleTransition[];\n\n\tgetSrcMainArea(ctx: ISrcMainCtx): SrcMainArea {return defaultTaskMainArea}\n\n\tgetCommentSchema(): Promise<Schema> {\n\t\tif (!this.datas.commentSchema) return getGenericSchema();\n\t\tif (!this._commentSchema) this._commentSchema = getSchema(this.datas.wspResUrl.resolve(this.datas.commentSchema));\n\t\treturn this._commentSchema;\n\t}\n\n\tgetDesriptionSchema(): Promise<Schema> {\n\t\tif (!this.datas.descriptionSchema) return getGenericSchema();\n\t\tif (!this._descriptionSchema) this._descriptionSchema = getSchema(this.datas.wspResUrl.resolve(this.datas.descriptionSchema));\n\t\treturn this._descriptionSchema;\n\t}\n\n\tgetLcName(): string {\n\t\treturn this.datas.lcName || LC_DEFAULT_NAME;\n\t}\n\n\tgetLcStates(): Map<string, IDatasLcState> {\n\t\tthis.buildLcStates();\n\t\treturn this._lcStates;\n\t}\n\n\tgetLcState(code: string): IDatasLcState {\n\t\tthis.buildLcStates();\n\t\treturn this._lcStates.get(code);\n\t}\n\n\tgetLcStateOrUnknown(code: string): IDatasLcState {\n\t\tthis.buildLcStates();\n\t\treturn this._lcStates.get(code) || this._lcStates.get(\"?\");\n\t}\n\n\tgetLcTransitions(): Map<string, IDatasLcSimpleTransition> {\n\t\tthis.buildLcTrans();\n\t\treturn this._lcTrans;\n\t}\n\n\tgetLcTransition(code: string): IDatasLcSimpleTransition {\n\t\tthis.buildLcTrans();\n\t\treturn this._lcTrans.get(code);\n\t}\n\n\tgetLcTransitionsGroupOrder(): string {\n\t\tthis.buildLcStates();\n\t\treturn this._lcTrans ? (this.datas.lcTransGroupOrder || '*') : null;\n\t}\n\n\t/** Transitions pour la création d'une task. */\n\tgetCreateTransitions(): IDatasLcSimpleTransition[] {\n\t\tthis.buildCreateTrans();\n\t\treturn this._createTrans;\n\t}\n\n\t/** Etat initial d'une task à la création. */\n\tgetTaskInitStates(ctx: ITaskCreationCtx): JTaskStates {\n\t\tconst r: JTaskStates = {};\n\t\tconst acts = this.datas.onCreate;\n\t\tif (acts) for (const act of acts) {\n\t\t\tif ('addUserToResp' in act) {\n\t\t\t\tif (ctx.reg.env.universe.auth.currentAuthenticatedUser) {\n\t\t\t\t\t//user bien authentifé.\n\t\t\t\t\tif (!r.resps) r.resps = {};\n\t\t\t\t\tr.resps[act.addUserToResp] = [ctx.reg.env.universe.auth.currentAccount];\n\t\t\t\t}\n\t\t\t} else if ('detailsTpl' in act) {\n\t\t\t\tif (ctx.shortDescs.length > 0) {\n\t\t\t\t\tr.desc = act.detailsTpl.replace(\"${currentItemUri}\", SRC.srcRef(ctx.shortDescs[0]));\n\t\t\t\t}\n\t\t\t} else if (typeof act === 'function') {\n\t\t\t\tact(ctx, this, r);\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\n\tprotected buildLcStates() {\n\t\tif (!this._lcStates) {\n\t\t\tthis._lcStates = new Map();\n\t\t\tfor (const st of this.datas.lcStates) {\n\t\t\t\tif (st.icon) st.iconUrl = this.datas.wspResUrl.resolve(st.icon).url;\n\t\t\t\tthis._lcStates.set(st.code, st);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected buildLcTrans() {\n\t\tif (!this._lcTrans) {\n\t\t\tthis._lcTrans = new Map();\n\t\t\tfor (const trans of this.datas.lcTrans) {\n\t\t\t\tif (trans.icon) trans.iconUrl = this.datas.wspResUrl.resolve(trans.icon).url;\n\t\t\t\tthis._lcTrans.set(trans.code, trans);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected buildCreateTrans() {\n\t\tif (!this._createTrans) {\n\t\t\tthis._createTrans = [];\n\t\t\tfor (const trans of this.datas.createTrans) {\n\t\t\t\tif (trans.icon) trans.iconUrl = this.datas.wspResUrl.resolve(trans.icon).url;\n\t\t\t\tthis._createTrans.push(trans);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Retourne true si cet it gère la feature. */\n\thasFeature(feature: ETaskFeatures): boolean {\n\t\treturn this.datas.features?.indexOf(feature) > -1;\n\t}\n\n}\n\n/** Contexte pour la création d'un task. */\nexport interface ITaskCreationCtx extends IShortDescCtx {\n}\n\n/** Spécialisation d'un ItemType de famille 'other'.\n *    Cet item peut être un simple fichier OU un folder (ancienne ressource devenue inconnue)\n **/\nclass ItemTypeOther extends ItemType {\n\n\tconstructor(wspMeta: WspMetaUi, datas: IDatasItemType) {\n\t\tsuper(wspMeta, datas);\n\t\tthis.reg.addToList(\"actions:item:burger\", \"download\", 1, ExportRes.SINGLETON(), 101);\n\t}\n\n\tasync getNewContent(reg: IReg<IWspUiEnv>, space: string | null, codeItem: string, options?: ONewContent): Promise<IBody | IFolder> {\n\t\t//Si des mimeTypes sont déclarés alors fichier vide, sinon c'est un dossier vide.\n\t\treturn this.datas.resTypes ? \"\" : {name: codeItem, entries: []};\n\t}\n\n\tgetSrcMainArea(ctx: ISrcMainCtx): SrcMainArea {return ctx.shortDesc?.srcSt === ESrcSt.folder ? defaultItemMainAreaFolder : defaultItemMainAreaRes}\n\n\tgetMainStreamSrcUri(shortDesc: JSrcFields) {\n\t\tif (!shortDesc) return null;\n\t\tif (ITEM.getUriResType(shortDesc) === ITEM.EUriResType.root && shortDesc.srcSt === ESrcSt.folder) {\n\t\t\t// probabilité forte que ce soit une ancienne ressource aujourd'hui d'un type inconnu\n\t\t\treturn SRC.addLeafToUri(shortDesc.srcUri, SRC.extractLeafFromUri(shortDesc.srcUri));\n\t\t}\n\t\treturn shortDesc.srcUri;\n\t}\n\n\tgetMainXmlSrcUri(shortDesc: JSrcFields): string | null {\n\t\tif (!shortDesc) return null;\n\t\tif (ITEM.getUriResType(shortDesc) === ITEM.EUriResType.root && shortDesc.srcSt === ESrcSt.folder) {\n\t\t\t// probabilité forte que ce soit une ancienne ressource aujourd'hui d'un type inconnu\n\t\t\treturn SRC.addLeafToUri(shortDesc.srcUri, ItemTypeRes.PATH_META);\n\t\t}\n\t\treturn shortDesc.srcUri;\n\t}\n\n}\n\n/** Spécialisation d'un ItemType de famille 'undef'\n * Cet item peut être un simple fichier OU un folder*/\nclass ItemTypeUndef extends ItemTypeOther {\n\tmatchType(type?: string, fileName?: string): number {\n\t\tif (!this.datas.resTypes) return 1; //Toutes les extensions\n\t\tif (!type && !fileName) return 0;\n\t\t// Ext\n\t\tlet matchExt = this.matchExt(fileName);\n\t\tif (matchExt != 0)\n\t\t\treturn matchExt;\n\t\t// Type\n\t\tfor (const resType of this.datas.resTypes) {\n\t\t\tif (resType.ct) for (const t of resType.ct) if (t === type) return 1;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tmatchExt(fileName?: string): number {\n\t\tif (!fileName) return 0;\n\t\tconst exts = this.getExtensions();\n\t\tif (exts == null) return 1;\n\t\tif (Array.isArray(exts)) return exts.find((entry) => SRC.matchExt(fileName, entry)) ? 1 : -1;\n\t\treturn SRC.matchExt(fileName, exts) ? 1 : -1;\n\t}\n}\n\n/** Type d'item associé à une uri nulle. */\nclass ItemTypeNull extends ItemType {\n\tconstructor(wspType: WspMetaUi) {\n\t\tsuper(wspType, {\n\t\t\twspResUrl: wspType.wspTypeUrl,\n\t\t\tmodel: \"sc_null\",\n\t\t\ttitle: \"Item non renseigné\",\n\t\t\ticonsPng: wspType.chain.config.skinUrl.url + \"wsp/itemType/icons/itemNull/\"\n\t\t})\n\t}\n\n\tgetIcon(shortDesc?: JSrcFields): string {\n\t\treturn super.getIcon(null);\n\t}\n\n\tgetIconOpen(shortDesc?: JSrcFields): string {\n\t\treturn super.getIconOpen(null);\n\t}\n}\n\n/** Type d'item associé à une uri non null mais ne correspondant à aucun item. */\nclass ItemTypeNotFound extends ItemType {\n\tconstructor(wspType: WspMetaUi) {\n\t\tsuper(wspType, {\n\t\t\twspResUrl: wspType.wspTypeUrl,\n\t\t\tmodel: \"sc_notFound\",\n\t\t\ttitle: \"Item non trouvé\",\n\t\t\ticonsPng: wspType.chain.config.skinUrl.url + \"wsp/itemType/icons/itemNotFound/\"\n\t\t})\n\t}\n\n\tgetIcon(shortDesc?: JSrcFields): string {\n\t\treturn super.getIcon(null);\n\t}\n\n\tgetIconOpen(shortDesc?: JSrcFields): string {\n\t\treturn super.getIconOpen(null);\n\t}\n}\n\n/** Type d'item associé à une uri existante non reconnue par le WspType. */\nclass ItemTypeFallback extends ItemTypeOther {\n\tconstructor(wspType: WspMetaUi) {\n\t\tsuper(wspType, {\n\t\t\twspResUrl: wspType.wspTypeUrl,\n\t\t\tmodel: \"sc_undef\",\n\t\t\ttitle: \"Item non reconnu\"\n\t\t})\n\t}\n\n\tgetIcon(shortDesc?: JSrcFields): string {\n\t\tif (shortDesc) switch (ITEM.getUriResType(shortDesc)) {\n\t\tcase ITEM.EUriResType.folder :\n\t\t\treturn this.datas.iconResFolder || this.wspMeta.getDefaultResFolderIcon();\n\t\tcase ITEM.EUriResType.file :\n\t\t\treturn this.datas.iconResFile || this.wspMeta.getDefaultResFileIcon();\n\t\tdefault:\n\t\t\tif (shortDesc.srcSt === ESrcSt.folder) return this.wspMeta.chain.config.skinUrl.url + \"wsp/itemType/icons/itemUndefFolder/icovalid.png\"\n\t\t}\n\t\treturn this.wspMeta.chain.config.skinUrl.url + \"wsp/itemType/icons/itemUndef/icovalid.png\"\n\t}\n\n\tgetIconOpen(shortDesc?: JSrcFields): string {\n\t\tif (shortDesc) switch (ITEM.getUriResType(shortDesc)) {\n\t\tcase ITEM.EUriResType.folder  :\n\t\t\treturn this.datas.iconResFolderOpen || this.wspMeta.getDefaultResFolderOpenIcon();\n\t\tcase ITEM.EUriResType.file:\n\t\t\treturn this.datas.iconResFile || this.wspMeta.getDefaultResFileIcon();\n\t\t}\n\t\treturn this.wspMeta.chain.config.skinUrl.url + \"wsp/itemType/icons/itemUndefFolderOpen/icovalid.png\"\n\t}\n}\n\n/**\n * Librairies utilitaires pour la config.\n * Evite des chargements async inutiles dans les wspType.js et wspOption.js\n */\nexport const UTILS = {\n\tLIT: htmlLit,\n\txhtml,\n\tgenerators,\n\tactions,\n\tloadFreeLib\n};\n\n/**\n * Initialise ce modèle documentaire ou cette extension de modèle.\n * Le module js issu du wsppack doit exporter une fonction nommée 'configWspType'.\n *\n * A minima, peuple le wspType.reg list 'itemTypes' d'objets IDatasItemType, le codeEntry de la liste étant le code du modèle.\n * TODO A spécifier :\n * - critères de recherches\n * - ...\n * Pour savoir ce qui doit vraiment être peuplé, des prefs du registre pourront être exploités.\n *\n * @return En général retourne null, voir Promise<void>.\n * Dans le cas d'extensions qui a besoin d'attendre qu'une autre extension soit initialisée,\n * une fonction configWspMeta peut être retournée et sera executée aprrès que toutes les\n * extensions soient chargées.\n */\ninterface IWspTypeModule {\n\tconfigWspMeta(wspMeta: WspMetaUi, wspResUrl: IEndPoint, utils: typeof UTILS): null | Promise<void | postConfigWspMeta>;\n}\n\ntype postConfigWspMeta = (wspMeta: WspMetaUi, utils: typeof UTILS) => null | Promise<void | postConfigWspMeta>\n\n/** Fournisseur d'un système de lifeCycle : WspMetaUi pour les items et ItemTypeTask pour les tâches. */\nexport interface ILcProvider {\n\tgetLcName(): string\n\n\tgetLcStates(): Map<string, IDatasLcState> | null\n\n\tgetLcState(code: string): IDatasLcState | null\n\n\tgetLcStateOrUnknown(code: string): IDatasLcState | null\n\n\tgetLcTransitions(): Map<string, IDatasLcSimpleTransition> | null\n\n\tgetLcTransition(code: string): IDatasLcSimpleTransition | null\n\n\tgetLcTransitionsGroupOrder(): string | null\n}\n\n\n/** Modèle d'item issu d'un IWspPackModule, obtenu via wspType.reg.getList<IDatasItemType>('itemTypes'). */\nexport interface IDatasItemType {\n\tmodel: string\n\ttitle: string\n\tfamily?: EItemTypeFamily\n\tsgn?: string\n\tdesc?: string\n\thelpId?: helpId\n\n\t/** Hierarchie des dossisers parent pour afficher ce type d'item. */\n\tclassification?: IDatasDirItemType[]\n\n\t/** Ordre dans le dossier.*/\n\tsortKey?: string\n\n\t/** URL Schema XML pour les itemTypes de famille XML ou res (metas). */\n\tschema?: string\n\n\t/** Editors disponibles pour cet itemType. */\n\teditors?: Dict<IDatasEditor>\n\n\t/** Impose un mode readOnly, indépendamment de la gestion des roles (pour compat 4.2, à suppr en SC5.1?) */\n\treadOnly?: boolean\n\n\t/** Impose le fait que cet item n'apparaisse pas dans les fenêtres de création d'item */\n\tnoCreator?: boolean\n\n\t/** Permissions de création de l'item */\n\tpermsCreator?: string[]\n\n\t/** Template pour la construction d'un name (ie 1ère partie du code de l'item avant l'extension) d'un item en création. */\n\titemNameTpl?: string\n\n\t/**\n\t * Extension des items pour family 'xml' et 'folder'.\n\t * Extension du code de l'item ou liste d'extensions autorisées pour ce type d'items.\n\t * Ex: \".folder\" ou [\".folder\", \".dossier\"]\n\t */\n\titemExt?: string | string[]\n\n\t/**\n\t * Extensions et Content-types des items pour family==='res'\n\t * Si non renseigné, signifie que l'itemType accepte *toutes* les extensions (qui valident resExtsMatcher si défini)\n\t */\n\tresTypes?: {\n\t\t/**\n\t\t * Extensions possibles du code de l'item compatibles avec les content-types définis.\n\t\t * Ex: [\".png\"] ou [\".jpg\", \".jpeg\"]\n\t\t */\n\t\text: string[]\n\t\t/** Content-types possibles pour ces extensions. */\n\t\tct: string[]\n\t}[]\n\n\t/**\n\t * Rêgle de validation des extensions pour family==='res'\n\t * Remarque : n'a de sens que si resTypes n'est pas renseigné\n\t */\n\tresExtsMatcher?: RegExp,\n\n\t/** Liste des responsabilités de l'item.*/\n\tresps?: IDatasResp[]\n\n\t/** URL d'un contenu vide pour family==='res'. La key est l'extension. Ex: {\"ods\": \".../empty.ods\"}\n\t *    la clef \"*\" est utilisée par défaut, si aucun emptyUrl est défini explicitement pour l'extension\n\t * */\n\tresEmptyUrl?: Dict<string>\n\n\t/** URL du dossier d'icones png (doit se terminer par un '/'). */\n\ticonsPng?: string\n\n\t/** URL du dossier d'icones png (état ouvert) pour les itemTypes de famille folder (doit se terminer par un '/'). */\n\ticonsPngOpen?: string\n\n\t/** URL de l'icone de dossier interne à un item de famille 'folder'. */\n\ticonResFolder?: string\n\n\t/** URL de l'icone de dossier interne à un item de famille 'folder' (état ouvert). */\n\ticonResFolderOpen?: string\n\n\t/** URL de l'icone de fichier interne à un item de famille 'folder'. */\n\ticonResFile?: string\n\n\t/** Config de la vue principale des items (hors tasks) dans le contexte de l'atelier. */\n\tmainView?: IDataSrcMainView\n\n\t/**\n\t * Config de la vue restreinte en lecture et simplifiée à l'item lui-même. Destinée à être utilisée\n\t * pour visualiser le contenu de l'item, sans fonction d'écriture et sans intégration avec le reste\n\t * du réseau des items (ie pas de dyn-gen qui abstrait la fragmentation par exemple). Usages prévus:\n\t * - vue d'une entrée d'historique,\n\t * - vue de l'item surchargé dans le contexte d'un item dans un atelier calque ou dérivé,\n\t * - vue de la source d'un item clone et proxy\n\t */\n\tisolatedView?: IDatasSrcView\n\n\t/** Config de mainViews supplémentaires exploitées dans des contextes particuliers (contribution externe...) */\n\totherMainViews?: Dict<IDataSrcMainView>\n\n\t/**\n\t * Config de la prévisualisation de l'item utilisée au survol d'une référence à cet item.\n\t * A n'exploiter que lorsque l'item se prête à un vision synthétique image, résumé...\n\t */\n\tpreviewMini?: {\n\t\t/** Tag à utiliser pour intégrer la preview. */\n\t\ttag: 'img' | 'video' | 'audio' | 'iframe' | 'wsp-dyngen-preview' | 'wsp-remote-view' | 'wsp-code-view'\n\t\t/** Paramètres de transformation du flux principal de l'item (ex: \"transform=img2img&...\"). */\n\t\ttransform?: string\n\t\t/** Pour le tag video, possibilité de spécifier les paramètres de transformation pour obtenir un poster (ex: \"transform=img2img&...\"). */\n\t\tposter?: string\n\t\t/** Pour les tags iframe,  et wsp-dyngen-preview, valeurs css 'width' et 'height' optimales de la preview. */\n\t\tw?: string\n\t\th?: string\n\t\t/** Pour wsp-dyngen-preview : code du dynGen */\n\t\tcodeGen?: string\n\t\t/** Pour wsp-dyngen-preview : (skin...) */\n\t\tparams?: Jsonisable\n\t\t/** Pour wsp-remote-view : paramètres d'init. */\n\t\tinit?: Dict<any>\n\t}\n\n\t/**\n\t * Wizards de création de tasks (et d'items 'complexes' ? ).\n\t * Une même tâche / item peut proposer plusieurs wizards : la définition de la fonction customSelector\n\t * est alors nécessaire pour fournir des libellés différents.\n\t */\n\tcreateViews?: {\n\t\t/** Permission à valider pour utiliser ce wizard de création. */\n\t\tperm?: string\n\t\t/** Contraintes de sélection supplémentaires et/ou personnalisation du libéllé d'accès à ce wizard. Retourne le libellé à afficher. */\n\t\tcustomSelector?: (reg: IReg<IWspUiEnv>, options?: any) => false | string\n\t\t/** Définition de la vue. */\n\t\tviewDef: IDatasSrcView\n\t}[]\n\n\t/** Nom de l'attribut racine du document dans lequel injecter un ctId issu du svc de l'atelier. */\n\tcreateWithCtIdInAtt?: string\n\n\t//Projet d'ajout de conversions sélectionnable dans l'itemCreator.\n\t//createActions?: (IDatasItemConvertor | IAction<IRegPointer<IItemUiEnv>>)[]\n\n\t/** Arbre des générateurs. */\n\tgenerators?: (IDatasItemGenNode | IDatasItemCidNode)[]\n\n\t/** Indique que ce type d'item peut-être vu comme un document. */\n\tasDoc?: {\n\t\t/** Liste des types d'items constituant des \"supports\" (ie racines de publications) pour ce \"document\". */\n\t\tsupports?: {\n\t\t\t/** Modèle du support. */\n\t\t\titModel: string\n\t\t\t/** Clé de l'éditeur à utiliser pour éditer ce support (masquant le lien vers le document). */\n\t\t\tkeyEditor: string\n\t\t\t/** Constructeur d'un nouveau contenu pour ce support intégrant un lien vers le document dont le shortDesc est passée dans ONewContent.docShortDesc. */\n\t\t\tnewContentBuilder: (wsp: Wsp, space: null | string, codeItem: string, options?: ONewContent) => Promise<IBody | null>\n\t\t}[]\n\t}\n\n\t/**\n\t * Méthode optionnelle de configuration \"free\" en surchargeant les comportements par défaut de ItemType.\n\t *\n\t * L'impl peut s'appuyer sur des propriétés de itemType.reg par exemple pour connaitre\n\t * le contexte de déploiemnt, mais ne doit pas s'appuyer sur les caractéristiques\n\t * ou permissons du user courant (propriétés dynamiques).\n\t *\n\t * Peut retourner un autre objet ItemType que celui passé en paramètre.\n\t */\n\tconfigItemType?(itemType: ItemType): ItemType\n\n\t/** EndPoint du wspRes à l'origine de ce module. */\n\twspResUrl?: IEndPoint\n}\n\n/** Item type des tasks */\nexport interface IDatasTaskItemType extends IDatasItemType {\n\n\t/** URL Schema XML du champ description de la task */\n\tdescriptionSchema?: string\n\n\t/** URL Schema XML d'un champ commentaire */\n\tcommentSchema?: string\n\n\t/**\n\t * Vues de consultation / édition des tasks.\n\t * Liste ordonnée : la première vue qui matche les critères de sélection (ifInvolvement, ifLifeCycleState et customSelector)\n\t * est utilisée.\n\t */\n\ttaskViews?: IDatasTaskView[]\n\n\t/** Intitulé de ce LC */\n\tlcName?: string;\n\n\t/** Liste des states de cette task */\n\tlcStates: IDatasLcState[]\n\n\t/** Liste des transitions entre les states de cette task */\n\tlcTrans: IDatasLcSimpleTransition[]\n\n\t/** Ordonnancement des groupes des transitions de cette task */\n\tlcTransGroupOrder?: string\n\n\t/** Liste des transitison à la création d'une task. */\n\tcreateTrans: IDatasLcSimpleTransition[]\n\n\t/** Pré-remplissage de la task à la création. */\n\tonCreate?: (\n\t\t{ addUserToResp: string } |\n\t\t{ detailsTpl: string } |\n\t\t((ctx: ITaskCreationCtx, taskType: ItemTypeTask, states: JTaskStates) => void)\n\t\t)[]\n\n\t/** Liste des responsabilités de la tâche.*/\n\tresps: IDatasResp[]\n\n\t/** Features actives sur cette task */\n\tfeatures?: ETaskFeatures[]\n}\n\nexport enum ETaskFeatures {\n\tdeadline = 'deadline',\n\tscheduling = 'scheduling'\n}\n\n\n/** Cycles de vie d'un item ou d'une task. */\nexport interface IDatasLcState {\n\tcode: string\n\tname: string\n\ticon?: string\n\ticonUrl?: string // URL résolue dynamiquement à partir de 'icon'\n\tcolor?: string\n\ttaskStage?: ETaskStage // Pour les Lc des tasks uniquement.\n}\n\n/** Cycle de vie : default state - code\n * @see  com.scenari.src.search.exp.LifeCycleStates.DEFAULT_STATE */\nexport const LC_STATE_DEFAULT_KEY = \"#default\";\n\n/** Cycle de vie : default state - name (si non spécifié dans le modèle)\n * @see  com.scenari.src.search.exp.LifeCycleStates.DEFAULT_STATE */\nexport const LC_STATE_DEFAULT_NAME = \"Non défini\";\n\n/** Cycle de vie : default name */\nexport const LC_DEFAULT_NAME = \"Cycle de vie\";\n\nexport interface IDatasLcSimpleTransition {\n\tcode: string\n\ttargetState: string\n\trestrictFromStates?: string[]\n\trestrictForItemTypes?: string[] // Pour les transitions des items uniquement (hors tasks).\n\tname: string\n\ticon?: string\n\ticonUrl?: string // URL résolue dynamiquement à partir de 'icon'\n\tsortKey?: string\n\tgroup?: string\n\tshowPerm?: string\n\tenablePerm?: string\n\tisTransitionVisible?: (shortDescs: JSrcFields[], reg: IReg<IWspUiEnv>, emitter: HTMLElement) => boolean\n\tisTransitionEnabled?: (shortDescs: JSrcFields[], reg: IReg<IWspUiEnv>, emitter: HTMLElement) => boolean\n\tparamsProvider?: ILcTransitionParamsProvider\n\t/* Contrôle libre avant l'exécution, pouvant renvoyer des messages UI */\n\tcontrolBeforeExecute?: (shortDescs: JSrcFields[], reg: IReg<IWspUiEnv>, emitter: HTMLElement, transitionParams?: { [srcUri: string]: { [key: string]: Jsonisable } }) => Promise<boolean>\n}\n\nexport interface ILcTransitionParamsProvider {\n\t/** @return false si le processus de construction a été annulé ou est en erreur, true pour poursuivre l'exécution de la transition\n\t * @param params : liste des paramètres pour chaque srcUri, ou '*' pour toutes */\n\tcomputeParams: (params: { [srcUri: string]: { [key: string]: Jsonisable } }, shortDescs: JSrcFields[], reg: IReg<IWspUiEnv>, emitter: HTMLElement) => Promise<boolean>\n\trollbackTransition?: (params: { [srcUri: string]: { [key: string]: Jsonisable } }, shortDescs: JSrcFields[], reg: IReg<IWspUiEnv>) => Promise<void>\n}\n\nexport interface IDatasResp {\n\tcode: string\n\tname: string\n\tdesc?: string\n\tuserCard: 'single' | 'multi'\n\tusersSelection?: {\n\t\tuserType: 'users' | 'groups' | 'all'\n\t\trestrictFromGroups: string[] //Opérateur OR\n\t}\n\trequired?: boolean | RegExp //regexp sur le state de la task\n\t//Pour les tasks uniquement.\n\tinvolvementRules?: {\n\t\taddInv: EInvolvement\n\t\tifState?: RegExp\n\t}[]\n}\n\n\n/** */\nexport interface IDatasEditor {\n\t/** Key du wed pour la zone principale d'édition. */\n\tmainWed: string\n\n\t/** Key du wed pour l'outline. */\n\toutlineWed?: string\n\n\t/** Key du wed pour la altview. */\n\tpreviewWed?: string\n\n\t/**\n\t * Si help est renseigné, mais pas help.helpDbProv, ce dernier sera automatiquement renseigné\n\t * avec celui du wspMeta (qui devrait alors être configuré).\n\t */\n\thelp?: OHelpViewsInit\n\n\t/** TODO Surcharge des perms pour configurer les restrictions en écriture. */\n\t//writePerms?: string | string[]\n\n\t/**\n\t * Configure le registre appliqué à cet éditor. Si la méthode existe, cela implique\n\t * que le contexte appelant DOIT créer un SubReg dédié à cet éditor avant d'appeler\n\t * cette méthode.\n\t */\n\tinitReg?: (reg: IReg<IItemUiEnv>, editor: IWedEditor) => Promise<void>\n\n\t/** Surcharge les configs de l'éditor. */\n\toverrideConfigs?: (editorConfig: OWedEditorBoxConfig, wedMgrConfig: OWedManagerConfig, editor: IWedEditor) => Promise<void>\n}\n\nexport interface IDataSrcMainView {\n\t/** Clé de l'éditeur xml. Pour les items de la famille \"xml\" et \"res\" (metas). */\n\txmlEditor?: string\n\t/** Config de la view affichant le contenu. Pour les items de la famille \"res\" et \"folder\". */\n\tresView?: IDatasSrcView\n\t/** Onglets secondaires. Pour tous les types d'items. */\n\tsubTabs?: IDatasItemTab[]\n\t/** Libellé de l'onglet principal. */\n\tmainTabLabel?: string\n\t/** Icon de l'onglet principal. */\n\tmainTabIcon?: string\n\t/** Ajoute un bandeau des erreurs issues des SS. */\n\tshowSsErrors?: {\n\t\terrors: { code: RegExp }[]\n\t}\n\t/** Actions de conversion / transformation de cet item. */\n\tconvertors?: (IDatasItemConvertor | IAction<IRegPointer<IItemUiEnv>>)[]\n\t/** Surcharge du reg à l'init de la mainView. */\n\tconfigReg?: (reg: IReg<IItemUiEnv>) => void\n}\n\nexport type IDatasItemConvertor = {\n\tlabel: string\n\tperm?: string\n\t/* Contrôle libre avant l'exécution, pouvant renvoyer des messages UI */\n\tcontrolBeforeExecute?: (ctx: IRegPointer<IItemUiEnv>, ev?: Event) => Promise<boolean>\n\texecutor: { algo: 'switch', tagName: string, tagNs: string, cleanupSchemaItModel?: string }\n\t\t| { algo: 'xsl', xslPath?: string, xsl: string | XSLTProcessor, cleanupSchemaItModel?: string, xslParams: { name: string, value: string }[] }\n}\n\nexport interface IDatasItemTab {\n\tcode: string //identité pour last-datas notamment.\n\tlabel: string\n\tdescription?: string\n\ticon?: string\n\tshowPerms?: string | string[]\n\tview: IDatasSrcView\n}\n\n/** Config d'une view de l'item. */\nexport interface IDatasSrcView {\n\t/** Obligatoire: Nom du tag de la view. */\n\ttag: \"wsp-item-img\" | \"wsp-item-video\" | \"wsp-item-audio\" | \"wsp-item-iframe\" | \"wsp-item-txt\" | \"wsp-item-code-ed\" | \"wsp-item-xmled\" | \"wsp-item-dyngen\" | \"wsp-item-remote\"\n\t\t| \"wsp-task-layout\" | \"wsp-task-field\" | \"wsp-task-xmlfield\" | \"wsp-task-dyngen\" | \"wsp-task-ct-edit\" | \"wsp-task-ct-dyngen\"\n\t\t| \"c-free\" | \"c-free-async\" | any\n\n\t/** Attributs statiques affectés au tag. */\n\tatts?: Dict<string>\n\n\t/** Config du tag. */\n\tinit?: OItemImgInit | OItemVideoInit | OItemAudioInit | OItemIframeInit | OItemTxtInit | OItemCodeEdInit | OItemXmlEdInit | OItemDynGenInit | OItemRemoteInit\n\t\t| OTaskLayoutInit | OTaskFieldInit | OTaskXmlFieldInit | OTaskDynGenInit | OTaskCtEditInit | OTaskCtDynGenInit\n\t\t| OFreeElementInit | OFreeElementAsyncInit | any\n\n\t/**\n\t * View free : url du module à charger définissant 'tag'.\n\t * Si le Module implémente IFreeLibSrcView.initFreeLib(), cette méthoe est appelée une seule fois\n\t * après son chargement.\n\t * L'alias :wspRes: peut être utilisé pour pointer une ressource du pack courant SI l'itemType appartient au pack courant.\n\t * ATTENTION : Si on est en extension qui surcharge un ItemType d'un autre pack, l'URL doit être résolue\n\t * en amont à l'injection : `{tag: \"c-free-async\", freeLib: wspResUrl.resolvePath(\":wspRes:...\")}`\n\t */\n\tfreeLib?: string\n}\n\n/** @see IDatasSrcView.freeLib */\nexport interface IFreeLibSrcView extends Dict<any> {\n\n\t/** Appelé une et une seule fois. Permet de lier le code free au code de dev-core (via reg.env.resolver). */\n\tinitFreeLib?(reg: IReg<IChainEnv>): Promise<void>\n\n\t/** Instanciation custom de l'objet d'init pour le srcView.tag qui est généralement \"c-free\" ou \"c-free-async\". */\n\tnewFreeSrcViewInit?(srcView: IDatasSrcView, reg: IReg<IItemUiEnv>): OFreeElementInit | OFreeElementAsyncInit | any\n}\n\n/**\n * Charge une lib et garanti l'appel une ET UNE SEULE fois à initFreeLib(reg).\n */\nexport async function loadFreeLib(lib: IEndPoint, reg: IReg<IChainEnv>): Promise<IFreeLibSrcView> {\n\treturn lib.importJs().then(async (module: IFreeLibSrcView) => {\n\t\tif (module.initFreeLib && !(module.initFreeLib as any).called) {\n\t\t\tawait module.initFreeLib(reg);\n\t\t\t(module.initFreeLib as any).called = true;\n\t\t}\n\t\treturn module;\n\t})\n}\n\n/** Structuration complexe de IDatasSrcView */\nexport interface IDatasTagView extends IDatasSrcView {\n\tchildren?: (IDatasTagView | string)[];\n}\n\n/** Config d'une view d'une tâche. */\nexport interface IDatasTaskView {\n\t/** Vue accessible aux users qui ont au moins une des implications listées sur cette tâche. */\n\tifInvolvement?: EInvolvement | EInvolvement\n\t/** Vue accessible si la tâche est dans un états listés. */\n\tifLifeCycleState?: RegExp\n\t/** Vue accessible si elle dans une app dont le localName du tag match cette regexp. */\n\tifInApp?: RegExp\n\t/** Vue accessible si la perm spécifiée est autorisée */\n\tifPerm?: string\n\t/** Filtre custom supplémentaire lié au contexte d'appel. */\n\tcustomSelector?: (reg: IReg<IItemUiEnv>, options?: any) => boolean\n\t/** Définition de la vue. */\n\tviewDef: IDatasSrcView\n}\n\n\n/** Structure de donnée d'un dossier de classification des itemTypes. */\nexport interface IDatasDirItemType {\n\tcode: string\n\tsortKey: string\n\tlabel: string\n\tclosed: boolean\n\thelpId?: helpId\n}\n\nexport interface IDirItemType extends IDatasDirItemType {\n\tchildren: (IDirItemType | ItemType)[]\n}\n\nexport function isDirItemType(d: any): d is IDirItemType {return d && Array.isArray(d.children)}\n\n/**\n * Définition d'un noeud dans l'arbre des publications.\n * Propriétés communes aux dir, gen, subGen et cid.\n */\nexport interface IDatasItemPubNode {\n\t/** Type de noeud. */\n\tgenNodeType: 'dir' | 'gen' | 'subGen' | 'cid'\n\t/** Code du dossier (dir) ou identification du gen_subGen_deploy dans sa stack (code unique dans un niveau de l'arbre). */\n\tcodeGenStack: string\n\t/** Libélé court du génrateur afiché dans l'arbre. */\n\tlabel: string\n\t/** Icone custom liée au gen (ie indépendant du skin). Par défaut : icone en fonction de genNature. */\n\ticon?: string //path de type :wspRes:...\n\ticonUrl?: string //url résolue dynamiquement à partir de 'icon'\n\t/** Visibilité du noeud. */\n\tperms?: string | string[]\n\t/** Noeuds fils. */\n\tch?: IDatasItemPubNode[]\n\t/** Codes de listes définissant des actions (en plus des listes par défaut) */\n\tactionListsCode?: string[]\n}\n\n/** Propriétés spécifiques aux générateurs et subGen. */\nexport interface IDatasItemGenNode extends IDatasItemPubNode {\n\t/** Nature du générateur. */\n\tgenNature?: 'web' | 'pdf' | 'odt' | 'xml' | 'pack' | 'deploy' | 'other'\n\t/** Surcharge du titre du générateur (JGenInfo.title). */\n\tgenTitle?: string\n\t/** Skin class de ce générateur */\n\tgenSkinClass?: string\n\t/** Image d'illustration */\n\tillus?: string //path de type :wspRes:...\n\tillusUrl?: string //url résolue dynamiquement à partir de 'illus'\n\t/** Template xhtml des propriétés du générateur */\n\tprops?: (ctx: IPubCtx) => Promise<TemplateResult>\n\tneedExtraProps?: boolean\n\tshowRefreshBtn?: boolean\n\t/** Surcharge de la zone d'infos. */\n\tinfos?: (ctx: IPubCtx) => Promise<TemplateResult>\n}\n\n/** Propriétés spécifiques aux déploiements CID. */\nexport interface IDatasItemCidNode extends IDatasItemPubNode {\n\t/** Restriction des serveurs cid possibles fournit par le serveur via un is.\n\t * si cidHostIs === null on ne retient aucun des serveurs fournis */\n\tcidHostIs?: string[][]\n\n\t/** Ajoute un champ libre de saisie de l'URL du manifest CID. */\n\tcidManifestUrlInput?: boolean\n\n\t/** Alternative : imposition d'un manifest précis (independamment de ceux fournis par le serveur).*/\n\t//manifestUrl?: string A voir si usage...\n\n\t/** Restriction des process possibles via une fonction. */\n\tcidProcessSelector?: (ctx: IPubCtx) => Promise<CidProcess[]>\n\n\t/** Si cidProcessSelector null, restriction des process possibles via un is. */\n\tcidProcessIs?: string[]\n\n}\n\n/** Contexte pour les actions et les propriétés des générateurs. */\nexport interface IPubCtx {\n\treg: IReg<IItemUiEnv>\n\tuiContext: HTMLElement\n\twsp: Wsp\n\tshortDesc: JSrcFields\n\tpubNode: IItemPubNode\n\n\t/** Pour les générateurs. */\n\tgenInfo?: JGenInfo\n\n\t/** destination fixée de la génératon. Usage styler */\n\tcustomDestPath?: wspUri\n\n\t/**\n\t * Pour les générateurs.\n\t * Construit les props pour lancer une génération.\n\t * ATTENTION doit retourner une nouvelle instance, pas une constante car peut être surchargé.\n\t * @return false : propriétés invalides, la génération doit être annulée.\n\t */\n\tgenProps(): Promise<Jsonisable | null | false>\n\n\t/** Pour un déploiement CID. */\n\tcidInfo?: ICidInfos\n}\n\n\n/** Noeud de l'arbre des générateurs, avec ses noeuds fils. */\nexport interface IItemPubNode extends IDatasItemGenNode, IDatasItemCidNode {\n\t//genSt?: string//todo... issu du serveur\n\tch?: IItemPubNode[]\n}\n\n\n/** Définition des fichiers WED. */\ntype IWedDef = {\n\tpath: string\n}\n\nexport interface IItemTypePointer {\n\titemType: ItemType\n}\n\n/** Un environnement d'itemType est issu d'un env d'un Wsp et l'itemType défini. */\nexport type IItemTypeEnv = IWspEnv & IItemTypePointer;\n\nexport type IItemTypeUiEnv = IWspUiEnv & IItemTypeEnv;\n\n/** Options de construction du nouveau contenu.  */\nexport interface ONewContent {\n\t/** Pour wspDocApp : création d'un item de type .support avec une ref à son contenu principal. */\n\tdocShortDesc?: JSrcFields\n\n\t/** Pour les RemotePrims : url cible. */\n\tremoteUrl?: string\n}\n\n/**\n * Factory de la vue principale d'un item ou d'une task (voire d'un space ?).\n *\n * Idée générale : le contexte de cette factory initialisé en amont par le container (ItemViewer) intègre\n * déjà le reg<IItemTypeEnv & IUiEnv> et le shortDesc (voir le longDesc si dispo) de l'item.\n *\n * Avantages :\n * - Le reg propre au contexte graphique et à cet itemType peut être mutualisé pour différents items de l'ItemViewer.\n * - Cet ItemMainArea peut retourner les icones / labels / descriptions et surtout les perms spécifiques à l'item.\n * - L'implémentation du widget ItemMain qui instancie ses propres WspLivePlace et Reg<IItemEnv> ne s'occupe que de\n *   rafraichir son longDesc, considérant l'itemType et le reg parfaitement stables (ie, si l'itemType est changé,\n *   la view est renouvelée par le container).\n *\n * Contraintes : le container (ItemViewer) doit\n * - charger le shortDesc (ou mieux le longDeesc), associer le reg, etc en amont\n * - écouter via une WspLivePlace instanciée en 1er pour détecter les changements de ces items, rafraichir les représentations\n *   graphique des entêtes (tab), détecter un changement d'itemType et remplacer les views instanciées à la volée si nécessaire.\n *\n */\nexport class SrcMainArea extends Area<ISrcMainCtx, SrcMain> {\n\n\tskinMainView: string;\n\n\tskinOverMainView: string;\n\n\tconstructor(public tagName: string, public titleAsLabel?: boolean) {\n\t\tsuper(tagName);\n\t}\n\n\tgetLabel(ctx: ISrcMainCtx): string {\n\t\tif (typeof this._label === 'function') return this._label(ctx, this);\n\t\treturn this.titleAsLabel ? ctx.shortDesc.itTi || SRC.extractLeafFromUri(ctx.shortDesc.srcUri) : SRC.extractLeafFromUri(ctx.shortDesc.srcUri);\n\t}\n\n\tgetIcon(ctx: ISrcMainCtx): string {\n\t\tif (typeof this._icon === 'function') return this._icon(ctx, this);\n\t\treturn ctx.reg.env.itemType.getIcon(ctx.shortDesc);\n\t}\n\n\tbuildBody(ctx: ISrcMainCtx, lastDatas?: JLastDatas): SrcMain {\n\t\treturn (document.createElement(this.tagName) as SrcMain).initialize({\n\t\t\treg: ctx.reg,\n\t\t\tarea: this,\n\t\t\tareaContext: ctx,\n\t\t\tskin: this.skinMainView,\n\t\t\tskinOver: this.skinOverMainView,\n\t\t\tlastDatasKey: this.getLastDatasKey(ctx),\n\t\t\tlastDatas\n\t\t});\n\t}\n}\n\nlet genRng: Promise<Schema>;\n\nfunction getGenericSchema(): Promise<Schema> {\n\tif (!genRng) genRng = getSchema(IO.asEndPoint(\"/@lib@/wsp/generic.rng\"));\n\treturn genRng;\n}\n\n\nasync function getSchema(ep: IEndPoint): Promise<Schema> {\n\tif (!SKMETALIB) {\n\t\tconst mdWsp = import (\"back/wsp/widgets/wed/schemaMetaWsp.js\");\n\t\tconst mdSk = import (\"lib/edit/schema/schemaBuilder.js\");\n\t\tSKMETALIB = (await mdWsp).SKMETALIB_WSP;\n\t\tSchemaBuilder = (await mdSk).RelaxNgSchemaBuilder;\n\t}\n\treturn new SchemaBuilder(SKMETALIB).buildRelaxNgFromUrl(ep);\n}\n\nlet SKMETALIB: SkMetaLib; //lazy Loading\nlet SchemaBuilder: typeof RelaxNgSchemaBuilder; //lazy Loading\n\nfunction hasTasks(types: Dict<IDatasItemType>): boolean {\n\tfor (const md in types) {\n\t\tif (types[md]?.family === EItemTypeFamily.task) return true;\n\t}\n\treturn false;\n}\n\nfunction hasResps(types: Dict<IDatasItemType>): boolean {\n\tfor (const md in types) {\n\t\tconst resps = types[md]?.resps;\n\t\tif (resps && resps.length) return true;\n\t}\n\treturn false;\n}\n\nclass ItemMainConvert extends actions.Action<IRegPointer<IItemUiEnv>> {\n\n\tconstructor(public dataConvertor: IDatasItemConvertor) {\n\t\tsuper();\n\t\tthis._label = dataConvertor.label;\n\t\tthis.requireVisiblePerm(dataConvertor.perm);\n\t}\n\n\tasync execute(ctx: IRegPointer<IItemUiEnv>, ev?: Event) {\n\t\tconst mod = await import(\"back/wsp/views/itemMain.js\");\n\t\tconst exec = this.dataConvertor.executor;\n\t\tif (this.dataConvertor.controlBeforeExecute && !await this.dataConvertor.controlBeforeExecute(ctx, ev)) return;\n\t\tswitch (exec.algo) {\n\t\tcase \"switch\":\n\t\t\treturn mod.convertBySwitchTag(ctx, exec);\n\t\tcase \"xsl\":\n\t\t\treturn mod.convertByXsl(ctx, exec);\n\t\t}\n\t}\n}\n\n\nconst defaultItemMainAreaXml = new SrcMainArea('wsp-itemmain-xml');\nconst defaultItemMainAreaRes = new SrcMainArea('wsp-itemmain-res');\nconst defaultItemMainAreaFolder = new SrcMainArea('wsp-itemmain-folder');\nconst defaultTaskMainArea = new SrcMainArea('wsp-taskmain').setLabel((ctx: ISrcMainCtx) => ctx.shortDesc.actTi || ctx.reg.env.itemType.getTitle());\n"]}