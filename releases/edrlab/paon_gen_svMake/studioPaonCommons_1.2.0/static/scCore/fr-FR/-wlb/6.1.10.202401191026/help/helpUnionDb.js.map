{"version":3,"sources":["/@lib@/help/helpUnionDb.tsx"],"names":["HELP","LANG","HelpUnionDb","[object Object]","reg","baseDb","subDbs","this","dbInits","pushIfDefined","_a","initIfNeeded","forEach","v","db","length","Promise","all","then","id","undefined","sep","indexOf","UNIONDB_SEP_ID","getFragment","get","substring","crit","results","search","dbHolder","values","push","sort","r1","r2","score","key","found","getIndex","members","index","getMembers","UnionHelpIndex","indexRole","role","indexes","getKeyIndexes","Set","add","frag","getIndexesFor","getIndexesWithRoleFor","indexKey"],"mappings":"OAAwBA,SAAiG;OAEjHC,SAAK;OAEP,MAAOC,YACZC,YAAmBC,IAA2BC,OAAoCC,QAA/DC,KAAAH,IAAAA;AAA2BG,KAAAF,OAAAA;AAAoCE,KAAAD,OAAAA,OAElFH;AACC,IAAIK,QAA8B;AAClCP,KAAKQ,cAAcD,SAASE,GAAAH,KAAKF,UAAM,MAAAK,UAAA,OAAA,EAAAA,GAAEC;AACzCJ,KAAKD,OAAOM,QAAQC,GAAKZ,KAAKQ,cAAcD,QAASK,EAAEC,GAAGH;AAC1D,OAAOH,QAAQO,OAAS,EAAIC,QAAQC,IAAIT,SAASU,KAAK,IAAMX,MAAQA,KAGrEJ,YAAYgB;AACX,IAAKA,GAAI,OAAOC;AAChB,MAAMC,IAAMF,GAAGG,QAAQtB,KAAKuB;AAC5B,GAAIF,IAAM,EAAG,CACZ,OAAOd,KAAKF,OAAOmB,YAAYL,QACzB,CACN,OAAOT,GAAAH,KAAKD,OAAOmB,IAAIN,GAAGO,UAAU,EAAGL,SAAK,MAAAX,UAAA,OAAA,EAAAA,GAAEI,GAAGU,YAAYL,KAI/DhB,aAAawB,MACZ,IAAIC,cAAgBrB,KAAKF,OAAOwB,OAAOF;AACvC,IAAK,MAAMG,YAAYvB,KAAKD,OAAOyB,SAAU,CAC5CH,QAAQI,cAAcF,SAAShB,GAAGe,OAAOF,OAE1CC,QAAQK,KAAK,CAACC,GAAIC,KAAOA,GAAGC,MAAQF,GAAGE;AACvC,OAAOR,QAGRzB,eAAekC,KACd,MAAMC,MAAsB;AAC5BrC,KAAKQ,cAAc6B,MAAO/B,KAAKF,aAAeE,KAAKF,OAAOkC,SAASF,KAAOjB;AAC1E,IAAK,MAAMU,YAAYvB,KAAKD,OAAOyB,SAAU,CAC5C9B,KAAKQ,cAAc6B,YAAaR,SAAShB,GAAGyB,SAASF,MAEtD,GAAIC,MAAMvB,SAAW,EAAG,OAAOK;AAC/B,GAAIkB,MAAMvB,SAAW,EAAG,OAAOuB,MAAM;AACrC,MAAME,QAA0C;AAChD,IAAK,MAAMC,SAASH,MAAOE,QAAQR,cAAcS,MAAMC;AACvD,OAAO,IAAIC,eAAeN,IAAKC,MAAM,GAAGM,UAAWJ,SAGpDrC,oBAAoB0C,MACnB,IAAIC,QAAUvC,KAAKF,aAAeE,KAAKF,OAAO0C,cAAcF,MAAQ,IAAIG;AACxE,IAAK,MAAMlB,YAAYvB,KAAKD,OAAOyB,SAAU,CAC5C,IAAK,MAAMM,aAAaP,SAAShB,GAAGiC,cAAcF,MAAOC,QAAQG,IAAIZ,KAEtE,OAAOS,QAGR3C,oBAAoB+C,MACnB,IAAIJ,cAAgBvC,KAAKF,OAAO8C,cAAcD;AAC9C,IAAK,MAAMpB,YAAYvB,KAAKD,OAAOyB,SAAU,CAC5Ce,QAAQd,cAAcF,SAAShB,GAAGqC,cAAcD,OAEjD,OAAOJ,QAGR3C,4BAA4B+C,KAAiBN,WAC5C,IAAIE,cAAgBvC,KAAKF,OAAO+C,sBAAsBF,KAAMN;AAC5D,IAAK,MAAMd,YAAYvB,KAAKD,OAAOyB,SAAU,CAC5Ce,QAAQd,cAAcF,SAAShB,GAAGsC,sBAAsBF,KAAMN,YAE/D,OAAOE,SAIT,MAAMH,eAELxC,YAAmBkD,SAAyBT,UAAqCJ,SAA9DjC,KAAA8C,SAAAA;AAAyB9C,KAAAqC,UAAAA;AAAqCrC,KAAAiC,QAAAA,QAEjFrC,mBAA6D,OAAOI,KAAKiC,QAEzErC,aAAsC,OAAO","sourcesContent":["import {EHelpIndexRole, HELP, helpId, IHelpDb, IHelpFrag, IHelpIndex, IHelpIndexNode, IHelpSearchResults, OHelpSearchExp} from \"back/help/helpApi\";\nimport {IReg} from \"lib/commons/registry\";\nimport {LANG} from \"lib/commons/lang\";\n\nexport class HelpUnionDb implements IHelpDb {\n\tconstructor(public reg: IReg<unknown>, public baseDb: IHelpDb | undefined, public subDbs: Map<string, { db: IHelpDb, title: string }>) {}\n\n\tinitIfNeeded(): Promise<this> | this {\n\t\tlet dbInits: Promise<IHelpDb>[] = [];\n\t\tLANG.pushIfDefined(dbInits, this.baseDb?.initIfNeeded())\n\t\tthis.subDbs.forEach(v => LANG.pushIfDefined(dbInits, v.db.initIfNeeded()));\n\t\treturn dbInits.length > 0 ? Promise.all(dbInits).then(() => this) : this;\n\t}\n\n\tgetFragment(id: helpId | null): Promise<IHelpFrag | undefined> {\n\t\tif (!id) return undefined;\n\t\tconst sep = id.indexOf(HELP.UNIONDB_SEP_ID);\n\t\tif (sep < 0) {\n\t\t\treturn this.baseDb.getFragment(id);\n\t\t} else {\n\t\t\treturn this.subDbs.get(id.substring(0, sep))?.db.getFragment(id);\n\t\t}\n\t}\n\n\tasync search(crit: OHelpSearchExp): Promise<IHelpSearchResults> {\n\t\tlet results = await this.baseDb.search(crit);\n\t\tfor (const dbHolder of this.subDbs.values()) {\n\t\t\tresults.push(...await dbHolder.db.search(crit));\n\t\t}\n\t\tresults.sort((r1, r2) => r2.score - r1.score);\n\t\treturn results;\n\t}\n\n\tasync getIndex(key: string): Promise<IHelpIndex | undefined> {\n\t\tconst found: IHelpIndex[] = [];\n\t\tLANG.pushIfDefined(found, this.baseDb ? await this.baseDb.getIndex(key) : undefined)\n\t\tfor (const dbHolder of this.subDbs.values()) {\n\t\t\tLANG.pushIfDefined(found, await dbHolder.db.getIndex(key));\n\t\t}\n\t\tif (found.length === 0) return undefined;\n\t\tif (found.length === 1) return found[0];\n\t\tconst members: (IHelpFrag | IHelpIndexNode)[] = [];\n\t\tfor (const index of found) members.push(...await index.getMembers());\n\t\treturn new UnionHelpIndex(key, found[0].indexRole, members);\n\t}\n\n\tasync getKeyIndexes(role: EHelpIndexRole): Promise<Set<string>> {\n\t\tlet indexes = this.baseDb ? await this.baseDb.getKeyIndexes(role) : new Set<string>();\n\t\tfor (const dbHolder of this.subDbs.values()) {\n\t\t\tfor (const key of await dbHolder.db.getKeyIndexes(role)) indexes.add(key);\n\t\t}\n\t\treturn indexes;\n\t}\n\n\tasync getIndexesFor(frag: IHelpFrag): Promise<(IHelpIndex | IHelpIndexNode)[]> {\n\t\tlet indexes = await this.baseDb.getIndexesFor(frag);\n\t\tfor (const dbHolder of this.subDbs.values()) {\n\t\t\tindexes.push(...await dbHolder.db.getIndexesFor(frag));\n\t\t}\n\t\treturn indexes;\n\t}\n\n\tasync getIndexesWithRoleFor(frag: IHelpFrag, indexRole: EHelpIndexRole): Promise<(IHelpIndex | IHelpIndexNode)[]> {\n\t\tlet indexes = await this.baseDb.getIndexesWithRoleFor(frag, indexRole);\n\t\tfor (const dbHolder of this.subDbs.values()) {\n\t\t\tindexes.push(...await dbHolder.db.getIndexesWithRoleFor(frag, indexRole));\n\t\t}\n\t\treturn indexes;\n\t}\n}\n\nclass UnionHelpIndex implements IHelpIndex {\n\n\tconstructor(public indexKey: string, public indexRole: EHelpIndexRole, protected members: (IHelpFrag | IHelpIndexNode)[]) {}\n\n\tasync getMembers(): Promise<(IHelpFrag | IHelpIndexNode)[]> {return this.members}\n\n\tisTreeNode(): this is IHelpIndexNode {return false}\n}"]}