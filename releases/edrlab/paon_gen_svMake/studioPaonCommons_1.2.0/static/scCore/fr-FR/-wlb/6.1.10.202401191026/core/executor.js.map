{"version":3,"sources":["/@lib@/core/executor.tsx"],"names":["IO","REG","CDM","Action","DOM","JSX","ShadowJsx","Signboard","LANG","POPUP","ERROR","GridSmall","GridColDef","CellBuilderBarActions","CellBuilderDate","CellBuilderEnum","GridDataHolderJsonArray","CellBuilderAccount","FORMS","AREAS","JobPlanificatorInputArea","ExecutorSrv","[object Object]","config","this","feat","features","undefined","configExecutorSrv","webFrameUrl","executorUrl","resolve","EJobSucess","EJobStatus","EXECUTOR","JOBS_FACTORIES_LIST","isJobAlive","jobStatus","waiting","launched","pending","isJobFinished","done","failed","async","findMyJobs","executor","criterions","fetchJson","qs","stringify","findJobs","getJob","jobId","getStats","freezeExecutor","param","method","createJob","jobFactoryCode","jobDatas","plannedDate","formData","FormData","append","toString","body","forceExecuteJob","scheduleJob","deleteJob","resp","fetch","ok","moveJobInQueue","position","newOffsetInQueue","UiJobFactory","uiJobSng","_uiJobSng","factoryCode","_jobFactoryCode","getId","job","_matchJob","jobSgn","patterns","forEach","str","pos","push","escape4Regexp","regExp","RegExp","join","match","matchJob","jobBuilder","target","ctx","options","id","jobLabel","getLabel","appendChild","createElement","buildLongDescForJob","buildJobPropsDetails","buildJobTriesDetails","reg","desc","getDescription","class","jobProps","JSON","tries","grid","initialize","selType","columnDefs","setLabel","setFlex","setCellBuilder","setCellClass","setOptions","year","month","day","hour","minute","second","Map","attemptFailed","finalFailure","finished","override","row","success","getData","mappingTable","has","get","planned","setSortable","setIcon","setVisible","_a","_b","_c","try","error","result","system","setExecute","show","Error","_e","_d","_g","_f","setActionContextMaker","actionContext","rowDatas","dataHolder","hideHeaders","skinOver","hideSortBtns","emptyBody","label","level","lineDrawer","redrawLine","line","setAttrBool","addEventListener","evt","stopPropagation","setDatas","registerSkin","JobBuilderAction","uiJobFactory","super","_planned","_plannedByUserPropName","_jobDatasBuilder","_jobDatasValidity","Set","addJobDataBuilder","datasPending","jobsParameters","getBaseJobDatas","Object","assign","dialogAreas","getJobDialogAreas","UI_PROPS","area","isAvailable","_description","_label","getIcon","isVisible","isEnabled","_jobDatasBase","form","msg","getPlanned","autocomplete","area-ids","areas","concat","applyLayout","buildControlLabel","jsonToForm","checkValidity","confirm","style","skin","resizer","okLbl","titleBar","barLabel","formToJson","params","_jobDialogAreas","Promise","all","resolvedAreas","map","ind","call","fct","sort","set","dataBuilders","Array","from","values","a","b","bd","add","datas","fcts","i","length","env","universe","hasFeature","ev","jobDialog","date","buildJobDatas","rulesSgn","getUiJobSng","checkJobDatasValidity","getJobFactoryCode","e","report","name","val"],"mappings":"OAAmBA,OAAG;OAEaC,QAAI;OAC/BC,QAAI;OACJC,WAAO;OACPC,IAAKC,IAAKC,cAAU;OACpBC,cAAU;OACVC,SAAK;OACLC,UAAM;OACNC,UAAM;OACNC,cAA0B;OAC1BC,eAAW;OACXC,sBAAuBC,gBAAiBC,gBAAiBC,4BAAyC;OAClGC,uBAAmB;OACnBC,UAAM;OACNC,UAAkC;OAClCC,6BAAyB;OAsB3B,MAAOC,YACZC,YAA4BC,QAAAC,KAAAD,OAAAA,OAG5BD,WAAWG,MACV,OAAOD,KAAKD,OAAOG,SAAWF,KAAKD,OAAOG,SAASD,MAAQE,kBAcvD,SAAUC,kBAAkBC,YAAwBN,QACzD,IAAKA,OAAQA,OAAS;AACtB,IAAKA,OAAOO,YAAaP,OAAOO,YAAcD,YAAYE,QAAQ;AAClE,OAAOR,cAqCR,IAAkBS,YAAlB,SAAkBA,YAEjBA,WAAA,YAAA;AAEAA,WAAA,gBAAA;AAEAA,WAAA,iBAAA,iBAND,CAAkBA,aAAAA,WAAU;OAgC5B,IAAkBC,YAAlB,SAAkBA,YACjBA,WAAA,WAAA;AACAA,WAAA,YAAA;AACAA,WAAA,WAAA;AACAA,WAAA,QAAA;AACAA,WAAA,UAAA;AACAA,WAAA,WAAA,WAND,CAAkBA,aAAAA,WAAU;OA4BtB,IAAWC,UAAjB,SAAiBA,UAGHA,SAAAC,oBAAsB;AAMnC,SAAgBC,WAAWC,WAC1B,OAAQA,WAAaJ,WAAWK,SAAWD,WAAaJ,WAAWM,UAAYF,WAAaJ,WAAWO,QAAW,KAAO,MAD1GN,SAAAE,WAAUA;AAQ1B,SAAgBK,cAAcJ,WAC7B,OAAQA,WAAaJ,WAAWS,MAAQL,WAAaJ,WAAWU,OAAU,KAAO,MADlET,SAAAO,cAAaA;AAWtBG,eAAeC,WAAWC,SAAuBC,YACvD,OAAOD,SAASvB,OAAOO,YAAYkB,UAAqBhD,GAAGiD,GAAG,WAAY,aAAc,aAAcF,WAAa7C,IAAIgD,UAAUH,YAAc,OAD1Hb,SAAAW,WAAUA;AAUzBD,eAAeO,SAASL,SAAuBC,YACrD,OAAOD,SAASvB,OAAOO,YAAYkB,UAAqBhD,GAAGiD,GAAG,WAAY,WAAY,aAAcF,WAAa7C,IAAIgD,UAAUH,YAAc,OADxHb,SAAAiB,SAAQA;AAUvBP,eAAeQ,OAAON,SAAuBO,OACnD,OAAOP,SAASvB,OAAOO,YAAYkB,UAAgBhD,GAAGiD,GAAG,WAAY,SAAU,QAASI,QADnEnB,SAAAkB,OAAMA;AASrBR,eAAeU,SAASR,UAC9B,OAAOA,SAASvB,OAAOO,YAAYkB,UAAsBhD,GAAGiD,GAAG,WAAY,aADtDf,SAAAoB,SAAQA;AASvBV,eAAeW,eAAeT,SAAuBU,OAC3D,OAAOV,SAASvB,OAAOO,YAAYkB,UAAsBhD,GAAGiD,GAAG,WAAY,iBAAkB,QAASO,OAAQ,CAACC,OAAQ,SADlGvB,SAAAqB,eAAcA;AAY7BX,eAAec,UAAUZ,SAAuBa,eAAwBC,SAAuBC,aACrG,MAAMC,SAAW,IAAIC;AACrB,GAAIF,YAAaC,SAASE,OAAO,OAAQH,YAAYI;AACrD,GAAIL,SAAUE,SAASE,OAAO,WAAY9D,IAAIgD,UAAUU;AACxD,OAAOd,SAASvB,OAAOO,YAAYkB,UAAgBhD,GAAGiD,GAAG,WAAY,YAAa,QAASU,gBAAiB,CAACF,OAAQ,OAAQS,KAAMJ,WAJ9G5B,SAAAwB,UAASA;AAaxBd,eAAeuB,gBAAgBrB,SAAuBO,OAC5D,OAAOP,SAASvB,OAAOO,YAAYkB,UAAgBhD,GAAGiD,GAAG,WAAY,kBAAmB,QAASI,OAAQ,CAACI,OAAQ,SAD7FvB,SAAAiC,gBAAeA;AAW9BvB,eAAewB,YAAYtB,SAAuBO,MAAeQ,aACvE,OAAOf,SAASvB,OAAOO,YAAYkB,UAAgBhD,GAAGiD,GAAG,WAAY,cAAe,QAASI,MAAO,OAAQQ,aAAc,CAACJ,OAAQ,SAD9GvB,SAAAkC,YAAWA;AAU1BxB,eAAeyB,UAAUvB,SAAuBO,OACtD,IAAIiB,WAAaxB,SAASvB,OAAOO,YAAYyC,MAAMvE,GAAGiD,GAAG,WAAY,YAAa,QAASI,OAAQ,KAAM,CAACI,OAAQ;AAClH,OAAOa,KAAKE,GAFStC,SAAAmC,UAASA;AAaxBzB,eAAe6B,eAAe3B,SAAuBO,MAAeqB,UAC1E,IAAIJ,WAAaxB,SAASvB,OAAOO,YAAYkB,UAAwChD,GAAGiD,GAAG,WAAY,iBAAkB,QAASI,MAAO,WAAYqB,UAAW,CAACjB,OAAQ;AACzK,OAAOa,KAAKK,iBAFSzC,SAAAuC,eAAcA,gBA7HrC,CAAiBvC,WAAAA,SAAQ;OAoJnB,MAAO0C,qBAAqHrE,UAWjIe,YAAYuD,UACXrD,KAAKsD,UAAYD;AACjB,OAAOrD,KAGRF,cACC,OAAOE,KAAKsD,UAObxD,kBAAkByD,aACjBvD,KAAKwD,gBAAkBD;AACvB,OAAOvD,KAGRF,oBACC,OAAOE,KAAKwD,iBAAmBxD,KAAKyD,QAIrC3D,SAAS4D,KACR,GAAI1D,KAAK2D,UACR,OAAO3D,KAAK2D,UAAUD;KAClB,GAAIA,IAAIE,QAAU5D,KAAKsD,UAAW,CACtC,IAAIO,SAAqB;AACzB7D,KAAKsD,UAAUQ,QAAQ,CAACC,IAAKC,OAC5BH,SAASI,KAAKjF,KAAKkF,cAAcH;AACjCF,SAASI,KAAK,MAAQjF,KAAKkF,cAAcH,KAAO;AAEjD,IAAII,OAAS,IAAIC,OAAO,MAAMP,SAASQ,KAAK;AAC5C,OAAOX,IAAIE,OAAOU,MAAMH,QAAU,KAAO,MAE1C,OAAO,MAGRrE,YAAYyE,UACXvE,KAAK2D,UAAYY;AACjB,OAAOvE,KAGRF,cAAc0E,YACbxE,KAAKwE,WAAaA;AAClB,OAAOxE,KAGRF,gBACC,OAAOE,KAAKwE,WAGb1E,sBAAsB2E,OAAqBC,IAAQhB,IAAWiB,SAC7D,IAAI9C,MAAQ6B,IAAIkB;AAChB,IAAIC,SAAW7E,KAAK8E,SAAS,CAACpB,IAAKA;AACnCe,OAAOM,YAAYlG,IAAAmG,cAAA,KAAA,KAAK,gBAAgBnD,UAAUgD;MAC5C7E,KAAKiF,oBAAoBP,IAAKhB,IAAKe,OAAOM,YAAYlG,IAAAmG,cAAA,MAAA;AAC5DP,OAAOM,YAAY3B,aAAa8B,qBAAqBxB;AACrDe,OAAOM,YAAY3B,aAAa+B,qBAAqBzB,IAAKgB,IAAIU,MAQ/DtF,0BAA0B4E,IAAQhB,IAAWe,QAC5C,MAAMY,KAAOrF,KAAKsF,eAAe,CAAC5B,IAAKA;AACvC,GAAI2B,KACHZ,OAAOM,YAAYlG,IAAAmG,cAAA,MAAA,CAAKO,MAAM,UAAUF,OAG1CvF,4BAA4B4D,KAC3B,GAAIA,IAAK,CACR,IAAI7B,MAAQ6B,IAAIkB;AAChB,OAAO/F,IAAAmG,cAAA,KAAA,KAAK,gBAAgBnD,YAI9B/B,4BAA4B4D,KAC3B,GAAIA,IAAI8B,SAAU,CACjB,OAAO3G,IAAAmG,cAAA,MAAA,KACNnG,IAAAmG,cAAA,KAAA,KAAA,gBACAnG,IAAAmG,cAAA,MAAA,CAAKO,MAAM,gBACTE,KAAK/D,UAAUgC,IAAI8B,aAMxB1F,4BAA4B4D,IAAW0B,KACtC,GAAI1B,IAAIgC,MAAO,CACd,IAAIC,MAAO,IAAIxG,WAAYyG,WAAW,CACrCC,QAAS,OACTC,WAAY,CAAC,IAAI1G,WAAW,WAC1B2G,SAAS,WACTC,QAAQ,OAAQ,EAAG,GACnBC,eAAe,IAAI3G,gBAAgB,WAAW4G,aAAa,UAAUC,WAAW,CAACC,KAAM,UAAWC,MAAO,UAAWC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,aACjL,IAAIrH,WAAW,YACb2G,SAAS,SACTC,QAAQ,OAAQ,EAAG,GACnBC,eAAe,IAAI3G,gBAAgB,YAAY4G,aAAa,UAAUC,WAAW,CAACC,KAAM,UAAWC,MAAO,UAAWC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,aACnL,IAAIrH,WAAW,MACb2G,SAAS,eACTC,QAAQ,OAAQ,EAAG,GACnBC,eAAe,IAAIxG,mBAAmB2F,IAAK,KAAM,OACnD,IAAIhG,WAAW,UACb2G,SAAS,cACTC,QAAQ,OAAQ,EAAG,GACnBC,eAAe,IAAI1G,gBAAgB,SAAU,IAAImH,IAAI,CACrD,CAAClG,WAAWmG,cAAe,wBAC3B,CAACnG,WAAWoG,aAAc,cAC1B,CAACpG,WAAWqG,SAAU,gBACnBX,aAAa,UAAUY,SAAS,aAAa,SAAiCC,KACjF,IAAIC,QAAUD,IAAIE,QAAQ,UAAYF,IAAIE,QAAQ,UAAUD,QAAU;AACtE,OAAQA,SAAWhH,KAAKkH,aAAaC,IAAIH,SAAYhH,KAAKkH,aAAaE,IAAIJ,SAAWA,YAExF,IAAI5H,WAAW,UACb2G,SAAS,YACTC,QAAQ,OAAQ,EAAG,GACnBC,eAAe,IAAI1G,gBAAgB,SAAU,IAAImH,IAAI,CACrD,CAACjG,WAAWK,QAAS,gBACrB,CAACL,WAAWM,SAAU,YACtB,CAACN,WAAWO,QAAS,0BACrB,CAACP,WAAWS,KAAM,aAClB,CAACT,WAAWU,OAAQ,cACpB,CAACV,WAAW4G,QAAS,iBAClBnB,aAAa,WAClB,IAAI9G,WAAW,WACb2G,SAAS,IACTuB,YAAY,OACZrB,eAAe,IAAI5G,sBAAiF,UAAW,EAC/G,IAAIV,QACFoH,SAAS,wBACTwB,QAAQ,yCACRC,WAAY9C,MAAkC,IAAA+C,GAAAC,GAAAC;AAAC,QAACF,GAAA/C,IAAIkD,OAAG,MAAAH,UAAA,OAAA,EAAAA,GAAEI,UAASF,IAAAD,GAAAhD,IAAIkD,OAAG,MAAAF,UAAA,OAAA,EAAAA,GAAEI,UAAM,MAAAH,UAAA,OAAA,EAAAA,GAAEI,QAAU,KAAO,QACpGC,WAAW5G,MAAOsD;AAElB,IAAI+C,GAAA/C,IAAIkD,OAAG,MAAAH,UAAA,OAAA,EAAAA,GAAEI,MAAO,OACb3I,MAAM+I,KAAK,6BAA8B,IAAIC,MAAMxD,IAAIkD,IAAIC,MAAQ,QAAQF,IAAAD,GAAAhD,IAAIkD,OAAG,MAAAF,UAAA,OAAA,EAAAA,GAAEI,UAAM,MAAAH,UAAA,OAAA,EAAAA,GAAEI,QAAStC,KAAK/D,WAAUyG,IAAAC,GAAA1D,IAAIkD,OAAG,MAAAQ,UAAA,OAAA,EAAAA,GAAEN,UAAM,MAAAK,UAAA,OAAA,EAAAA,GAAEJ,QAAU,iBAE/I7I,MAAM+I,KAAK,yCAA0C,IAAIC,MAAMzC,KAAK/D,WAAU2G,IAAAC,GAAA5D,IAAIkD,OAAG,MAAAU,UAAA,OAAA,EAAAA,GAAER,UAAM,MAAAO,UAAA,OAAA,EAAAA,GAAEN,aAStG,CACF3C,IAAKA,MACHmD,sBAAsB,CAACxB,IAAoCyB,iBAC7DA,cAAcZ,IAAMb,IAAI0B,aAG3BC,WAAY,IAAIlJ,wBAChBmJ,YAAa,MACbC,SAAU,4BACVC,aAAc,KACdC,UAAW,IACHjK,IAAAmG,cAAA,QAAA,CAAO+D,MAAM,WAAWC,MAAM,SAGtCC,WAAY,CACXC,WAAY,CAACnC,IAAoCoC;AAChDvK,IAAIwK,YAAYD,KAAM,aAAcpC,IAAIE,QAAQ,WAAaxG,WAAWU,UAAUsG,GAAAV,IAAIE,QAAQ,aAAS,MAAAQ,UAAA,OAAA,EAAAA,GAAET,WAAYxG,WAAWoG;AAInIjB,KAAK0D,iBAAiB,cAAgBC,MACrCA,IAAIC;AAGJ5D,KAAK+C,WAAqDc,SAAS9F,IAAIgC;AAExE,OAAO7G,IAAAmG,cAAA,MAAA,KACNnG,IAAAmG,cAAA,KAAA,KAAA,4BACAnG,IAAAmG,cAAA,MAAA,CAAKO,MAAM,WACTI,SAQNlH,IAAI2G,IAAIqE,aAAa,4BAA6B,EAAsB;OAkBlE,MAAOC,yBAA6D/K,OAazEmB,YAAmB6J,cAClBC;AADkB5J,KAAA2J,aAAAA;AANT3J,KAAA6J,SAA2C;AAE3C7J,KAAA8J,uBAAiC;AA+I3C9J,KAAA+J,iBAAwI,IAAIrD;AAsB5I1G,KAAAgK,kBAA0E,IAAIC;AA9J7EjK,KAAKkK,kBAAkB,gBAAiB9I,MAAO+I,aAAcC,eAAgB1F,OAC5E,GAAI1E,KAAKqK,kBAAmBC,OAAOC,OAAOJ,aAAcnK,KAAKqK,oBAC3D;AACHrK,KAAKkK,kBAAkB,WAAY9I,MAAO+I,aAAcC,eAAgB1F,OACvE,MAAM8F,kBAAoBxK,KAAKyK,kBAAkB/F;AACjD,GAAI8F,YAAa,CAChBL,aAAaT,iBAAiBgB,UAAY;AAC1CF,YAAY1G,QAAS6G,OAAsB,GAAIA,KAAKC,YAAYlG,KAAMyF,aAAaT,iBAAiBgB,UAAUC,KAAKlH,SAAW2G,eAAeO,KAAKlH,aAEjJ;AACHzD,KAAKkK,kBAAkB,kBAAmB,CAACC,aAAcC,eAAgB1F,MAAQ4F,OAAOC,OAAOJ,aAAcC,gBAAiB,GAG/HtK,eAAe4E,KACd,OAAO1E,KAAK6K,aAAejB,MAAMtE,eAAeZ,KAAO1E,KAAK2J,aAAarE,eAAeZ,KAGzF5E,SAAS4E,KACR,OAAO1E,KAAK8K,OAASlB,MAAM9E,SAASJ,KAAO1E,KAAK2J,aAAa7E,SAASJ,KAGvE5E,QAAQ4E,KACP,OAAOkF,MAAMmB,QAAQrG,KAAOkF,MAAMmB,QAAQrG,KAAO1E,KAAK2J,aAAaoB,QAAQrG,KAG5E5E,UAAU4E,KACT,IAAK1E,KAAK2J,aAAaqB,UAAUtG,KAAM,OAAO;AAC9C,OAAOkF,MAAMoB,UAAUtG,KAGxB5E,UAAU4E,KACT,IAAK1E,KAAK2J,aAAasB,UAAUvG,KAAM,OAAO;AAC9C,OAAOkF,MAAMqB,UAAUvG,KAOxB5E,gBAAgBsC,UACfpC,KAAKkL,cAAgBZ,OAAOC,OAAOvK,KAAKkL,eAAiB,GAAI9I;AAC7D,OAAOpC,KAGRF,kBACC,OAAOE,KAAKkL,cAQbpL,gBAAgB4E,KACf,MAAMqE,MAAQ/I,KAAK8E,SAASJ;AAC5B,IAAIyG;AACJ,IAAIC,IAAMvM,IAAAmG,cAAA,MAAA,KACTnG,IAAAmG,cAAA,KAAA,KAAK,kBAAkB+D;AAExB,MAAMyB,kBAAoBxK,KAAKyK,kBAAkB/F;AACjD,GAAI8F,aAAexK,KAAKqL,WAAW3G,OAAS,SAAU,CACrDyG,KAAOC,IAAIrG,YAAYlG,IAAAmG,cAAA,OAAA,CAAMJ,GAAG,OAAO0G,aAAa,OACnDzM,IAAAmG,cAAA,WAAA,CAAUJ,GAAG,WAAU2G,WAAU;AAElC,IAAIC,MAAwD;AAC5D,GAAIhB,YACHgB,MAAQA,MAAMC,OAAOjB;AACtB,GAAIxK,KAAKqL,WAAW3G,OAAS,SAC5B8G,MAAMvH,KAAK,IAAIrE,yBAAyBI,KAAK8J;MACxCnK,MAAM+L,YAAYP,KAAMK,MAAO,CACpCG,kBAAmB,KACnBvG,IAAKV,IAAIU,IACTuE,aAAc3J,KAAK2J,cACE;AACtB,GAAIjF,IAAIhB,KAAOgB,IAAIhB,IAAI8B,UAAYd,IAAIhB,IAAI8B,SAASkE,iBAAiBgB,UACpEhL,MAAMkM,WAAWlH,IAAIhB,IAAI8B,SAASkE,iBAAiBgB,UAAWS,KAAM,MAAO;AAC5EA,KAAKU,gBAGN,SAAU5M,MAAM6M,QAAQjN,IAAAmG,cAAA,MAAA,CAAK+G,MAAM,sBAAqBlN,IAAAmG,cAAClG,UAAS,CAACkN,KAAK,qBAAqBpD,SAAS,mBAAmBwC,MAAwB,KAAM,CACtJa,QAAS,GACTC,MAAO,UACPC,SAAU,CAACC,SAAU,CAACrD,MAAO,2BAC1B,CAEH,OAAOoC,KAAOzL,MAAM2M,WAAWlB,MAAQ,QAEvC,OAAO,KAyBTrL,kBAAkBwM,QACjB,IAAKtM,KAAKuM,gBAAiBvM,KAAKuM,gBAAkB;AAClDvM,KAAKuM,gBAAkBvM,KAAKuM,gBAAgBd,OAAOa;AACnD,OAAOtM,KAGRF,wBAAwB4E,KACvB,IAAK1E,KAAKuM,gBACT,OAAO;AACR,MAAMf,YAAcgB,QAAQC,IAAIzM,KAAKuM;AACrC,MAAMG,cAAgE;MAChEF,QAAQC,IAAIjB,MAAMmB,IAAIvL,MAAOuJ,KAAMiC,OACxC,UAAWjC,OAAS,WAAY,CAC/B,MAAM7C,aAAe0E,QAAQjM,QAAQoK,KAAKkC,KAAK7M,KAAM0E;AACrD,GAAIoD,OAAQ4E,cAAczI,KAAK6D,aAE/B4E,cAAczI,KAAK0G;AAErB,OAAO+B,cAQR5M,kBAAkB8E,GAAYkI,IAAsFC,MACnH/M,KAAK+J,iBAAiBiD,IAAIpI,GAAI,CAACmI,KAAMA,MAAQ,EAAGD,IAAAA;AAChD,OAAO9M,KAGRF,oBAAoBsK,eAA4B1F,KAC/C,IAAItC,SAAuB;AAC3B,MAAM6K,aAAeC,MAAMC,KAAKnN,KAAK+J,iBAAiBqD,UAAUL,KAAK,CAACM,EAAGC,IAAMD,EAAEN,KAAOO,EAAEP;MACpFP,QAAQC,IAAIQ,aAAaN,IAAIvL,MAAOmM,WACnCA,GAAGT,IAAID,KAAK7M,KAAMoC,SAAUgI,eAAgB1F;AAEnD,OAAOtC,SAWRtC,mBAAmBgN,KAClB9M,KAAKgK,kBAAkBwD,IAAIV;AAC3B,OAAO9M,KAGRF,4BAA4B2N,MAAmB/I,KAC9C,MAAMgJ,KAAOR,MAAMC,KAAKnN,KAAKgK,kBAAkBoD;AAC/C,IAAK,IAAIO,EAAI,EAAGA,GAAKD,KAAKE,OAAQD,IAAK,CACtC,GAAID,KAAKC,WAAaD,KAAKC,GAAGd,KAAK7M,KAAMyN,MAAO/I,KAAM,OAAO,MAE9D,OAAO,KAOR5E,WAAWuH,SACVrH,KAAK6J,SAAWxC;AAChB,OAAOrH,KAGRF,WAAW4E,KACV,IAAKA,IAAIU,IAAIyI,IAAIC,SAASxM,SAASyM,WAAW,cAC7C,OAAO;AACR,OAAO/N,KAAK6J,SAGb/J,cAAc4E,IAAQsJ,IACrB,IACC,MAAM5D,qBAAuBpK,KAAKiO,UAAUvJ;AAC5C,GAAI0F,iBAAmB,KAAM,CAE5B,IAAI/H;AACJ,MAAMgF,QAAUrH,KAAKqL,WAAW3G;AAChC,GAAI2C,UAAY,SAAU,CACzBhF,YAAc+H,eAAepK,KAAK8J,wBAA0BM,eAAepK,KAAK8J,wBAAwBoE,KAAO;AAC/G9D,eAAepK,KAAK8J,wBAA0B3J,eACxC,UAAWkH,UAAY,WAAY,CACzChF,YAAcgF,QAAQwF,KAAK7M,KAAM0E,KAGlC,IAAItC;AACJA,eAAiBpC,KAAKmO,cAAc/D,eAAgB1F;AACpD,GAAItC,UAAYA,SAASgM,WAAajO,UAAWiC,SAASgM,SAAWpO,KAAK2J,aAAa0E;AAEvF,SAAUrO,KAAKsO,sBAAsBlM,SAAUsC,KAC9C,aAAahE,SAASwB,UAAUwC,IAAIU,IAAIyI,IAAIC,SAASxM,SAAUtB,KAAK2J,aAAa4E,oBAAqBnM,SAAUC,cAEjH,MAAOmM,SACFtP,MAAMuP,OAAO,qFAAsFD,IAI3G1O,SAAS4O,KAAyCC,KACjD,OAAO/E,MAAM9C,SAAS4H,KAAaC,MApO7BjF,iBAAAgB,SAAW;AAwOnBjM,IAAI2G,IAAIqE,aAAa,kBAAmB,EAAsB","sourcesContent":["import {IEndPoint, IO} from \"lib/commons/io/io\";\nimport {CoreUniverse, ICoreUniverseEnv, IUniversePointer} from \"lib/core/universe\";\nimport {IReg, IRegPointer, IUiEnv, REG} from \"lib/commons/registry\";\nimport {CDM} from \"lib/commons/utils/cdm\";\nimport {Action} from \"lib/commons/actions\";\nimport {DOM, JSX, ShadowJsx} from \"lib/commons/xml/dom\";\nimport {Signboard} from \"lib/commons/utils/signboard\";\nimport {LANG} from \"lib/commons/lang\";\nimport {POPUP} from \"back/commons/widgets/popups\";\nimport {ERROR} from \"lib/core/errorReport\";\nimport {GridSmall, OGridSmallInit} from \"back/commons/widgets/grid-tags\";\nimport {GridColDef} from \"back/commons/widgets/grid-core\";\nimport {CellBuilderBarActions, CellBuilderDate, CellBuilderEnum, GridDataHolderJsonArray, GridDataRowJson} from \"back/commons/widgets/grid-libs\";\nimport {CellBuilderAccount} from \"back/core/widgets/usersGrid\";\nimport {FORMS} from \"lib/commons/forms\";\nimport {AREAS, IArea, IControlAreaContext} from \"lib/commons/areas\";\nimport {JobPlanificatorInputArea} from \"back/core/widgets/jobsInput\";\n\ntype dynAny<C, T = any> = (ctx: C) => T;\n\n/** **/\n\nexport interface OExecutorInUniverseConfig {\n\t/** Si la propriété est présente ET null, celà indique que l'executor ne doit pas être instancié (ie fonction non active dans ce contexte) **/\n\texecutor?: OExecutorSrvConfig\n}\n\nexport interface IExecutorInUniversePointer extends IUniversePointer {\n\tuniverse: CoreUniverse & IExecutorInUniverse\n}\n\nexport interface IExecutorInUniverse {\n\texecutor: ExecutorSrv;\n}\n\n/**\n * Service \"executor\"\n */\nexport class ExecutorSrv {\n\tconstructor(public readonly config: OExecutorSrvConfig) {}\n\n\t/** Evalue les features */\n\thasFeature(feat: 'scheduling' | 'freezable'): boolean | undefined {\n\t\treturn this.config.features ? this.config.features[feat] : undefined;\n\t}\n}\n\nexport interface OExecutorSrvConfig {\n\texecutorUrl?: IEndPoint;\n\tfeatures?: {\n\t\t/** si true, activation des fonctions de programmation */\n\t\tscheduling?: boolean,\n\t\t/** si true, activation de la capacité de freeze de l'éxécution des jobs */\n\t\tfreezable?: boolean,\n\t}\n}\n\nexport function configExecutorSrv(webFrameUrl: IEndPoint, config?: OExecutorSrvConfig): OExecutorSrvConfig {\n\tif (!config) config = {} as OExecutorSrvConfig;\n\tif (!config.executorUrl) config.executorUrl = webFrameUrl.resolve(\"u/executor/\");\n\treturn config;\n}\n\nexport interface IJobPointer {\n\tjob: JJob\n}\n\nexport interface JJobBase {\n\tid: string,\n\tjobSgn?: string,\n\tcreated: number,\n\tcreatedBy: string,\n\tlastQueued: number,\n\tlastStatus: EJobStatus,\n\t/* Actif que dans l'implémentation odb */\n\tplanned?: number,\n}\n\nexport interface JJob extends JJobBase {\n\ttries?: JJobPropsTry[],\n\tjobProps?: Jsonisable,\n}\n\nexport interface JJobPropsTry {\n\tstarted: number,\n\tfinished: number,\n\tby?: string,\n\tstatus: EJobStatus,\n\tresult?: {\n\t\tsuccess: EJobSucess,\n\t\tsystem?: Jsonisable,\n\t},\n\terror: string,\n}\n\n\n/** Etat d'une session WebSocket */\nexport const enum EJobSucess {\n\t/** job abouti. */\n\tfinished = 'finished',\n\t/** Echec définitif, inutile de lancer une nouvelle tentative. */\n\tfinalFailure = 'finalFailure',\n\t/** Echec de cette tentative. Peut être retenté ultérieurement. */\n\tattemptFailed = 'attemptFailed'\n}\n\n\n/** liste ordonnée de jobs */\nexport interface JListJobs {\n\tjobs: JJobBase[],\n}\n\n/** Informations sur les jobs du service\n * @see CDACTION_GetStats\n */\nexport interface JJobsStats {\n\tcountInQueue: number,\n\tcountFailed: number,\n\tfrozen?: boolean,\n}\n\n/**\n * Interface des actionContext pour les actions relatives à un ensemble de jobs\n */\nexport interface IJobsCtx {\n\tjobs: JJobBase[],\n\treg: IReg<IExecutorInUniversePointer & IUiEnv>,\n}\n\nexport const enum EJobStatus {\n\t'waiting' = 'waiting',\n\t'launched' = 'launched',\n\t'pending' = 'pending',\n\t'done' = 'done',\n\t'failed' = 'failed',\n\t'planned' = 'planned',\n}\n\n/** Critères de filtres des jobs */\nexport interface JJobCriterion {\n\t/** Identifiant du propriétaire\n\t * NOTE : sans effet dans findMyJobs */\n\towner?: string,\n\tregexpSgn?: string,\n\tstatuses?: EJobStatus[],\n\tmaxCount?: number,\n\t/** Recherche spécifique dans la file d'attente, avec acces par offset et on par date */\n\tinQueue?: boolean,\n\tfrom?: number,\n\t/** Recherche par date */\n\tafter?: number,\n\tbefore?: number,\n}\n\n// ###\n// # EXECUTOR\n\nexport namespace EXECUTOR {\n\n\t/** Liste de promises de UiJobFactory, ou de fctions retournant cette promise */\n\texport const JOBS_FACTORIES_LIST = \"executor:jobs:factories\";\n\n\t/**\n\t * Retourne true si le job est actif\n\t * @param jobStatus\n\t */\n\texport function isJobAlive(jobStatus: EJobStatus): boolean {\n\t\treturn (jobStatus == EJobStatus.waiting || jobStatus == EJobStatus.launched || jobStatus == EJobStatus.pending) ? true : false;\n\t}\n\n\t/**\n\t * Retourne true si le job est terminé\n\t * @param jobStatus\n\t */\n\texport function isJobFinished(jobStatus: EJobStatus): boolean {\n\t\treturn (jobStatus == EJobStatus.done || jobStatus == EJobStatus.failed) ? true : false;\n\t}\n\n\n\t/**\n\t * Recherche les jobs parmi ceux dont le user courant est le créateur\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_FindMyJobs\n\t * @param executor\n\t * @param criterions\n\t */\n\texport async function findMyJobs(executor: ExecutorSrv, criterions: JJobCriterion): Promise<JListJobs> {\n\t\treturn executor.config.executorUrl.fetchJson<JListJobs>(IO.qs(\"cdaction\", \"FindMyJobs\", \"criterions\", criterions ? CDM.stringify(criterions) : null));\n\t}\n\n\t/**\n\t * Recherche les jobs\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_FindJobs\n\t * @param executor\n\t * @param criterions\n\t */\n\texport async function findJobs(executor: ExecutorSrv, criterions?: JJobCriterion): Promise<JListJobs> {\n\t\treturn executor.config.executorUrl.fetchJson<JListJobs>(IO.qs(\"cdaction\", \"FindJobs\", \"criterions\", criterions ? CDM.stringify(criterions) : null));\n\t}\n\n\t/**\n\t * Retourne les propriétés complètes d'un job\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_GetJob\n\t * @param executor\n\t * @param jobId : ID du job concerné\n\t */\n\texport async function getJob(executor: ExecutorSrv, jobId: string): Promise<JJob> {\n\t\treturn executor.config.executorUrl.fetchJson<JJob>(IO.qs(\"cdaction\", \"GetJob\", \"jobId\", jobId));\n\t}\n\n\t/**\n\t * Retourne les stats sur les jobs (en cours et en erreur)\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_GetStats\n\t * @param executor\n\t */\n\texport async function getStats(executor: ExecutorSrv): Promise<JJobsStats> {\n\t\treturn executor.config.executorUrl.fetchJson<JJobsStats>(IO.qs(\"cdaction\", \"GetStats\"));\n\t}\n\n\t/**\n\t * Gèle ou relance (dégèle) l'executor.\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_FreezeExecutor\n\t * @param executor\n\t */\n\texport async function freezeExecutor(executor: ExecutorSrv, param: boolean | number): Promise<JJobsStats> {\n\t\treturn executor.config.executorUrl.fetchJson<JJobsStats>(IO.qs(\"cdaction\", \"FreezeExecutor\", \"param\", param), {method: \"POST\"});\n\t}\n\n\t/**\n\t * Création d'un Job\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_CreateJob\n\t * @param executor\n\t * @param jobFactoryCode\n\t * @param jobDatas\n\t * @param plannedDate\n\t */\n\texport async function createJob(executor: ExecutorSrv, jobFactoryCode: string, jobDatas?: Jsonisable, plannedDate?: number): Promise<JJob> {\n\t\tconst formData = new FormData();\n\t\tif (plannedDate) formData.append('date', plannedDate.toString());\n\t\tif (jobDatas) formData.append('jobDatas', CDM.stringify(jobDatas));\n\t\treturn executor.config.executorUrl.fetchJson<JJob>(IO.qs(\"cdaction\", \"CreateJob\", \"param\", jobFactoryCode), {method: 'POST', body: formData});\n\t}\n\n\t/**\n\t * Force l'exécution d'un job existant\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_ForceExecuteJob\n\t * @param executor\n\t * @param jobId : ID du job concerné\n\t */\n\texport async function forceExecuteJob(executor: ExecutorSrv, jobId: string): Promise<JJob> {\n\t\treturn executor.config.executorUrl.fetchJson<JJob>(IO.qs(\"cdaction\", \"ForceExecuteJob\", \"jobId\", jobId), {method: \"POST\"});\n\t}\n\n\t/**\n\t * Planifie un job existant pour une (ré)exécution à venir\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_ScheduleJob\n\t * @param executor\n\t * @param jobId : ID du job concerné\n\t * @param plannedDate : date de planification\n\t */\n\texport async function scheduleJob(executor: ExecutorSrv, jobId: string, plannedDate: number): Promise<JJob> {\n\t\treturn executor.config.executorUrl.fetchJson<JJob>(IO.qs(\"cdaction\", \"ScheduleJob\", \"jobId\", jobId, \"date\", plannedDate), {method: \"POST\"});\n\t}\n\n\t/**\n\t * Supprime définitivement d'un job\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_DeleteJob\n\t * @param executor\n\t * @param jobId : ID du job concerné\n\t */\n\texport async function deleteJob(executor: ExecutorSrv, jobId: string): Promise<boolean> {\n\t\tlet resp = await executor.config.executorUrl.fetch(IO.qs(\"cdaction\", \"DeleteJob\", \"jobId\", jobId), null, {method: \"POST\"});\n\t\treturn resp.ok;\n\t}\n\n\t/**\n\t * Déplace un job dans la file d'attente\n\t * @see  eu.scenari.core.service.executor.SvcExecutorDialog.CDACTION_MoveJobInQueue\n\t * @param executor\n\t * @param jobId : ID du job concerné\n\t * @param position\n\t * @return -1 si le job n'est pas dans le statut {@link EJobStatus#waiting}, sinon offset de la nouvelle position dans la file d'attente\n\t */\n\texport async function moveJobInQueue(executor: ExecutorSrv, jobId: string, position: 'top' | 'bottom' | number): Promise<number> {\n\t\tlet resp = await executor.config.executorUrl.fetchJson<{ newOffsetInQueue: number }>(IO.qs(\"cdaction\", \"MoveJobInQueue\", \"jobId\", jobId, \"jobDatas\", position), {method: \"POST\"});\n\t\treturn resp.newOffsetInQueue;\n\t}\n\n}\n\n// ###\n// # Job : représentation UI d'un job, et fonction de création\ntype dynBoolean<C> = (job: JJob) => boolean;\n\nexport interface UiJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>, D extends IJobBuilderActionContext> {\n\t/** Action de création du Job */\n\tjobBuilder?: JobBuilderAction<D>,\n\n\t/** Retourne true si cet objet peut s'appliquer au Job */\n\tmatchJob(job: JJob): boolean\n\n\t/** Construit une forme HTML lisible du job */\n\tbuildJobDetails(target: HTMLElement, ctx: C, job: JJob, options?: any): Promise<void>,\n}\n\n\nexport class UiJobFactory<C extends IRegPointer<IExecutorInUniversePointer & IUiEnv>, D extends IJobBuilderActionContext> extends Signboard<D> implements UiJobFactory<C, D> {\n\tprotected _matchJob: dynBoolean<C>;\n\n\tprotected _uiJobSng: string[]\n\n\tprotected _jobFactoryCode: string\n\n\t/**\n\t * Signature UI du job\n\t * @param uiJobSng\n\t */\n\tsetUiJobSng(uiJobSng: string[]): this {\n\t\tthis._uiJobSng = uiJobSng;\n\t\treturn this;\n\t}\n\n\tgetUiJobSng(): string[] {\n\t\treturn this._uiJobSng;\n\t}\n\n\t/**\n\t * Factory serveur du job\n\t * @param factoryCode\n\t */\n\tsetJobFactoryCode(factoryCode: string): this {\n\t\tthis._jobFactoryCode = factoryCode;\n\t\treturn this;\n\t}\n\n\tgetJobFactoryCode(): string {\n\t\treturn this._jobFactoryCode || this.getId();\n\t}\n\n\t/** Retourne true si cet objet peut s'appliquer au Job */\n\tmatchJob(job: JJob): boolean {\n\t\tif (this._matchJob)\n\t\t\treturn this._matchJob(job);\n\t\telse if (job.jobSgn && this._uiJobSng) {\n\t\t\tlet patterns: string[] = [];\n\t\t\tthis._uiJobSng.forEach((str, pos) => {\n\t\t\t\tpatterns.push(LANG.escape4Regexp(str));\n\t\t\t\tpatterns.push(\".*#\" + LANG.escape4Regexp(str) + \"\\\\b.*\");\n\t\t\t});\n\t\t\tlet regExp = new RegExp(`.*(${patterns.join('|')}).*`);\n\t\t\treturn job.jobSgn.match(regExp) ? true : false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tsetMatchJob(matchJob: dynBoolean<C>): this {\n\t\tthis._matchJob = matchJob;\n\t\treturn this;\n\t}\n\n\tsetJobBuilder(jobBuilder: JobBuilderAction<D>): this {\n\t\tthis.jobBuilder = jobBuilder;\n\t\treturn this;\n\t}\n\n\tgetJobBuilder(): JobBuilderAction<D> {\n\t\treturn this.jobBuilder;\n\t}\n\n\tasync buildJobDetails(target: HTMLElement, ctx: C, job: JJob, options?: any): Promise<void> {\n\t\tlet jobId = job.id;\n\t\tlet jobLabel = this.getLabel({job: job} as D);\n\t\ttarget.appendChild(<h1>{`[Traitement ${jobId}] ${jobLabel}]`}</h1>);\n\t\tawait this.buildLongDescForJob(ctx, job, target.appendChild(<div/>));\n\t\ttarget.appendChild(UiJobFactory.buildJobPropsDetails(job));\n\t\ttarget.appendChild(UiJobFactory.buildJobTriesDetails(job, ctx.reg));\n\t}\n\n\t/**\n\t * Construit une forme lisible UI des paramètres de ce job\n\t * @param ctx\n\t * @param form\n\t */\n\tasync buildLongDescForJob(ctx: C, job: JJob, target: HTMLElement): Promise<void> {\n\t\tconst desc = this.getDescription({job: job} as D);\n\t\tif (desc)\n\t\t\ttarget.appendChild(<div class=\"header\">{desc}</div>);\n\t}\n\n\tstatic buildJobTitleDetails(job: JJob): HTMLElement {\n\t\tif (job) {\n\t\t\tlet jobId = job.id;\n\t\t\treturn <h1>{`[Traitement ${jobId}]`}</h1>;\n\t\t}\n\t}\n\n\tstatic buildJobPropsDetails(job: JJob): HTMLElement {\n\t\tif (job.jobProps) {\n\t\t\treturn <div>\n\t\t\t\t<h2>Propriétés</h2>\n\t\t\t\t<div class=\"content code\">\n\t\t\t\t\t{JSON.stringify(job.jobProps)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t}\n\t}\n\n\tstatic buildJobTriesDetails(job: JJob, reg: IReg<ICoreUniverseEnv>): HTMLElement {\n\t\tif (job.tries) {\n\t\t\tlet grid = new GridSmall().initialize({\n\t\t\t\tselType: 'none',\n\t\t\t\tcolumnDefs: [new GridColDef('started')\n\t\t\t\t\t.setLabel(\"Début\")\n\t\t\t\t\t.setFlex('2rem', 1, 1)\n\t\t\t\t\t.setCellBuilder(new CellBuilderDate(\"started\").setCellClass(\"center\").setOptions({year: \"numeric\", month: \"2-digit\", day: \"2-digit\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"})),\n\t\t\t\t\tnew GridColDef('finished')\n\t\t\t\t\t\t.setLabel(\"Fin\")\n\t\t\t\t\t\t.setFlex('2rem', 1, 1)\n\t\t\t\t\t\t.setCellBuilder(new CellBuilderDate(\"finished\").setCellClass(\"center\").setOptions({year: \"numeric\", month: \"2-digit\", day: \"2-digit\", hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"})),\n\t\t\t\t\tnew GridColDef('by')\n\t\t\t\t\t\t.setLabel(\"Exécuteur\")\n\t\t\t\t\t\t.setFlex(\"1rem\", 1, 1)\n\t\t\t\t\t\t.setCellBuilder(new CellBuilderAccount(reg, \"by\", true)),\n\t\t\t\t\tnew GridColDef('result')\n\t\t\t\t\t\t.setLabel(\"Résultat\")\n\t\t\t\t\t\t.setFlex('2rem', 1, 1)\n\t\t\t\t\t\t.setCellBuilder(new CellBuilderEnum('status', new Map([\n\t\t\t\t\t\t\t[EJobSucess.attemptFailed, \"Tentative en échec\"],\n\t\t\t\t\t\t\t[EJobSucess.finalFailure, \"En échec\"],\n\t\t\t\t\t\t\t[EJobSucess.finished, \"Terminé\"],\n\t\t\t\t\t\t])).setCellClass(\"center\").override(\"_getValue\", function (this: CellBuilderEnum, row: GridDataRowJson<JJobPropsTry>) {\n\t\t\t\t\t\t\tlet success = row.getData(\"result\") ? row.getData(\"result\").success : null;\n\t\t\t\t\t\t\treturn (success && this.mappingTable.has(success)) ? this.mappingTable.get(success) : success;\n\t\t\t\t\t\t})),\n\t\t\t\t\tnew GridColDef('status')\n\t\t\t\t\t\t.setLabel(\"Statut\")\n\t\t\t\t\t\t.setFlex('2rem', 1, 1)\n\t\t\t\t\t\t.setCellBuilder(new CellBuilderEnum('status', new Map([\n\t\t\t\t\t\t\t[EJobStatus.waiting, \"En attente\"],\n\t\t\t\t\t\t\t[EJobStatus.launched, \"Chargé\"],\n\t\t\t\t\t\t\t[EJobStatus.pending, \"En cours d'exécution\"],\n\t\t\t\t\t\t\t[EJobStatus.done, \"Terminé\"],\n\t\t\t\t\t\t\t[EJobStatus.failed, \"En échec\"],\n\t\t\t\t\t\t\t[EJobStatus.planned, \"Planifié\"],\n\t\t\t\t\t\t])).setCellClass(\"center\")),\n\t\t\t\t\tnew GridColDef('actions')\n\t\t\t\t\t\t.setLabel(\"\")\n\t\t\t\t\t\t.setSortable(false)\n\t\t\t\t\t\t.setCellBuilder(new CellBuilderBarActions<IRegPointer<ICoreUniverseEnv> & IJobPropsTryActionContext>('actions', [\n\t\t\t\t\t\t\tnew Action()\n\t\t\t\t\t\t\t\t.setLabel(\"Détails techniques\")\n\t\t\t\t\t\t\t\t.setIcon(\"/@skin@/core/actions/jobs/details.svg\")\n\t\t\t\t\t\t\t\t.setVisible((ctx: IJobPropsTryActionContext) => (ctx.try?.error || ctx.try?.result?.system) ? true : false)\n\t\t\t\t\t\t\t\t.setExecute(async (ctx: IJobPropsTryActionContext) => {\n\t\t\t\t\t\t\t\t\t// FIXME : faire un visualiseur JSON (indentation, ...\n\t\t\t\t\t\t\t\t\tif (ctx.try?.error) {\n\t\t\t\t\t\t\t\t\t\tawait ERROR.show(\"Échec d'exécution du job\", new Error(ctx.try.error + \"\\n\" + (ctx.try?.result?.system ? JSON.stringify(ctx.try?.result?.system) : \"\")));\n\t\t\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\t\t\tawait ERROR.show(\"Traces techniques d'exécution du job\", new Error(JSON.stringify(ctx.try?.result?.system)));\n\t\t\t\t\t\t\t\t\t/*await POPUP.showDialog(<div>{JSON.stringify(ctx.try?.result?.system)}</div>, document.body, {\n\t\t\t\t\t\t\t\t\t\ttitleBar: {barLabel: {label: \"Détails techniques de l'exécution\"}},\n\t\t\t\t\t\t\t\t\t\tresizer: {},\n\t\t\t\t\t\t\t\t\t\tinitWidth: '40em',\n\t\t\t\t\t\t\t\t\t\tinitMaxHeight: '80vh',\n\t\t\t\t\t\t\t\t\t\tfixSize: false\n\t\t\t\t\t\t\t\t\t}).onNextClose();*/\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t], {\n\t\t\t\t\t\t\treg: reg,\n\t\t\t\t\t\t}).setActionContextMaker((row: GridDataRowJson<JJobPropsTry>, actionContext) => {\n\t\t\t\t\t\t\tactionContext.try = row.rowDatas;\n\t\t\t\t\t\t}))\n\t\t\t\t],\n\t\t\t\tdataHolder: new GridDataHolderJsonArray<JJobPropsTry>(),\n\t\t\t\thideHeaders: false,\n\t\t\t\tskinOver: 'c-uijobfactory-tries/grid',\n\t\t\t\thideSortBtns: true,\n\t\t\t\temptyBody: (): Node => {\n\t\t\t\t\treturn <c-msg label=\"Aucune\" level=\"info\"/>\n\t\t\t\t}\n\t\t\t\t,\n\t\t\t\tlineDrawer: {\n\t\t\t\t\tredrawLine: (row: GridDataRowJson<JJobPropsTry>, line) => {\n\t\t\t\t\t\tDOM.setAttrBool(line, \"data-error\", row.getData(\"status\") == EJobStatus.failed || row.getData('result')?.success === EJobSucess.finalFailure);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as OGridSmallInit);\n\t\t\tgrid.addEventListener(\"grid-select\", (evt) => {\n\t\t\t\tevt.stopPropagation();\n\t\t\t});\n\n\t\t\t(grid.dataHolder as GridDataHolderJsonArray<JJobPropsTry>).setDatas(job.tries);\n\n\t\t\treturn <div>\n\t\t\t\t<h2>Tentatives d'exécution</h2>\n\t\t\t\t<div class=\"content\">\n\t\t\t\t\t{grid}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t}\n\t}\n\n}\n\nREG.reg.registerSkin('c-uijobfactory-tries/grid', 1, /* language=CSS */ `\n\t*[data-error] {\n\t\tcolor: var(--error-color)\n\t}\n`);\n\n/**\n * Action de construction d'un job\n */\nexport interface IJobBuilderActionContext extends IRegPointer<IExecutorInUniversePointer & IUiEnv> {\n\t/** Job à éditer, ou à utiliser comme source de création d'un autre job */\n\tjob?: JJob\n}\n\nexport interface IJobPropsTryActionContext extends IRegPointer<ICoreUniverseEnv & IUiEnv> {\n\ttry?: JJobPropsTry,\n}\n\nexport class JobBuilderAction<C extends IJobBuilderActionContext> extends Action<C> {\n\n\t/** Prop permettant de sérialiser les éventuels propriétés UI */\n\tstatic UI_PROPS = \"ui-props\";\n\n\tprotected _jobDatasBase: Jsonisable\n\n\tprotected _planned: null | 'byUser' | dynNumber<C> = null\n\n\tprotected _plannedByUserPropName: string = \"plannedDate\"\n\n\tprotected _jobDialogAreas: (IArea<IJobAreaContext & IControlAreaContext> | Promise<IArea<IJobAreaContext & IControlAreaContext>> | dynAny<C, IArea<IJobAreaContext & IControlAreaContext>>)[]\n\n\tconstructor(public uiJobFactory: UiJobFactory<any, any>) {\n\t\tsuper();\n\t\t// - jobDataBuilders\n\t\tthis.addJobDataBuilder('_jobDatasBase', async (datasPending, jobsParameters, ctx) => {\n\t\t\tif (this.getBaseJobDatas()) Object.assign(datasPending, this.getBaseJobDatas())\n\t\t}, 0);\n\t\tthis.addJobDataBuilder('_uiProps', async (datasPending, jobsParameters, ctx) => {\n\t\t\tconst dialogAreas = await this.getJobDialogAreas(ctx);\n\t\t\tif (dialogAreas) {\n\t\t\t\tdatasPending[JobBuilderAction.UI_PROPS] = {};\n\t\t\t\tdialogAreas.forEach((area: IArea<any>) => {if (area.isAvailable(ctx)) datasPending[JobBuilderAction.UI_PROPS][area.getId()] = jobsParameters[area.getId()]})\n\t\t\t}\n\t\t}, 0);\n\t\tthis.addJobDataBuilder('_jobsParameters', (datasPending, jobsParameters, ctx) => Object.assign(datasPending, jobsParameters), 0);\n\t}\n\n\tgetDescription(ctx: C): string {\n\t\treturn this._description ? super.getDescription(ctx) : this.uiJobFactory.getDescription(ctx);\n\t}\n\n\tgetLabel(ctx: C): string {\n\t\treturn this._label ? super.getLabel(ctx) : this.uiJobFactory.getLabel(ctx);\n\t}\n\n\tgetIcon(ctx: C): string {\n\t\treturn super.getIcon(ctx) ? super.getIcon(ctx) : this.uiJobFactory.getIcon(ctx);\n\t}\n\n\tisVisible(ctx: C): boolean {\n\t\tif (!this.uiJobFactory.isVisible(ctx)) return false;\n\t\treturn super.isVisible(ctx);\n\t}\n\n\tisEnabled(ctx: C): boolean {\n\t\tif (!this.uiJobFactory.isEnabled(ctx)) return false;\n\t\treturn super.isEnabled(ctx);\n\t}\n\n\t/**\n\t * Affectation de paramètres fixes du job, définis par défaut\n\t * @param jobDatas\n\t */\n\taddBaseJobDatas(jobDatas?: Jsonisable): this {\n\t\tthis._jobDatasBase = Object.assign(this._jobDatasBase || {}, jobDatas);\n\t\treturn this;\n\t}\n\n\tgetBaseJobDatas(): Jsonisable | null {\n\t\treturn this._jobDatasBase;\n\t}\n\n\t/**\n\t * Dialogue de confirmation du Job, avec affichage d'un formulaire permettant de saisir des paramètres\n\t * dont les valeurs sont retournées en résultat de la promise : planification, ...\n\t * Retourne : {} ou null signifiant une volonté d'annulation du traitement\n\t */\n\tasync jobDialog(ctx: C): Promise<Jsonisable | null> {\n\t\tconst label = this.getLabel(ctx);\n\t\tlet form: HTMLFormElement;\n\t\tlet msg = <div>\n\t\t\t<h4>{`Traitement : \"${label}\"`}</h4>\n\t\t</div>;\n\t\tconst dialogAreas = await this.getJobDialogAreas(ctx);\n\t\tif (dialogAreas || this.getPlanned(ctx) === \"byUser\") {\n\t\t\tform = msg.appendChild(<form id=\"form\" autocomplete=\"off\">\n\t\t\t\t<fieldset id=\"fieldset\" area-ids=\"*\"/>\n\t\t\t</form> as HTMLFormElement)\n\t\t\tlet areas: IArea<IJobAreaContext & IControlAreaContext>[] = [];\n\t\t\tif (dialogAreas)\n\t\t\t\tareas = areas.concat(dialogAreas);\n\t\t\tif (this.getPlanned(ctx) === \"byUser\")\n\t\t\t\tareas.push(new JobPlanificatorInputArea(this._plannedByUserPropName));\n\t\t\tawait AREAS.applyLayout(form, areas, {\n\t\t\t\tbuildControlLabel: true,\n\t\t\t\treg: ctx.reg,\n\t\t\t\tuiJobFactory: this.uiJobFactory,\n\t\t\t} as IJobAreaContext, true);\n\t\t\tif (ctx.job && ctx.job.jobProps && ctx.job.jobProps[JobBuilderAction.UI_PROPS])\n\t\t\t\tFORMS.jsonToForm(ctx.job.jobProps[JobBuilderAction.UI_PROPS], form, false, true);\n\t\t\tform.checkValidity();\n\t\t}\n\n\t\tif (await POPUP.confirm(<div style=\"display: contents;\"><ShadowJsx skin=\"form-control-areas\" skinOver=\"job-create-form\">{msg}</ShadowJsx></div>, null, {\n\t\t\tresizer: {},\n\t\t\tokLbl: \"Créer\",\n\t\t\ttitleBar: {barLabel: {label: \"Nouveau traitement\"},}\n\t\t})) {\n\t\t\t// FIXME : controle de validié du formulaire\n\t\t\treturn form ? FORMS.formToJson(form) : [];\n\t\t} else\n\t\t\treturn null;\n\t}\n\n\t/**\n\t * Exploitation des areas dans un formulaire libre (visualisation, ...)\n\t * @param ctx\n\t * @param form\n\t */\n\n\t/*\n\tasync buildAreasForm(ctx: C, form : HTMLFormElement) : Promise<void>{\n\t\tif (this.getJobDialogAreas()) {\n\t\t\tlet areas: IArea<IJobAreaContext & IControlAreaContext>[] = await Promise.all(this.getJobDialogAreas());\n\t\t\tawait AREAS.applyLayout(form, areas, {\n\t\t\t\tbuildControlLabel: true,\n\t\t\t\treg: ctx.reg,\n\t\t\t\tuiJobFactory: this.uiJobFactory,\n\t\t\t} as IJobAreaContext, true);\n\t\t}\n\t}\n\t*/\n\n\t/**\n\t * Areas permettant de définir le UI du dialogue\n\t */\n\taddJobDialogAreas(params: (IArea<IJobAreaContext & IControlAreaContext> | Promise<IArea<IJobAreaContext & IControlAreaContext>> | dynAny<C, IArea<IJobAreaContext & IControlAreaContext>>)[]): this {\n\t\tif (!this._jobDialogAreas) this._jobDialogAreas = [];\n\t\tthis._jobDialogAreas = this._jobDialogAreas.concat(params);\n\t\treturn this;\n\t}\n\n\tasync getJobDialogAreas(ctx: C): Promise<IArea<IJobAreaContext & IControlAreaContext>[] | null> {\n\t\tif (!this._jobDialogAreas)\n\t\t\treturn null;\n\t\tconst areas = await Promise.all(this._jobDialogAreas);\n\t\tconst resolvedAreas: IArea<IJobAreaContext & IControlAreaContext>[] = [];\n\t\tawait Promise.all(areas.map(async (area, ind) => {\n\t\t\tif (typeof area === \"function\") {\n\t\t\t\tconst result = await Promise.resolve(area.call(this, ctx));\n\t\t\t\tif (result) resolvedAreas.push(result);\n\t\t\t} else\n\t\t\t\tresolvedAreas.push(area)\n\t\t}));\n\t\treturn resolvedAreas;\n\t}\n\n\t/**\n\t * Construit les datas du job\n\t */\n\t_jobDatasBuilder: Map<string, { sort: number, fct: (datasPending: Jsonisable, jobsParameters: Jsonisable, ctx: C) => Promise<void> }> = new Map()\n\n\taddJobDataBuilder(id: string, fct: (datasPending: Jsonisable, jobsParameters: Jsonisable, ctx: C) => Promise<void>, sort: number): this {\n\t\tthis._jobDatasBuilder.set(id, {sort: sort || 0, fct});\n\t\treturn this;\n\t}\n\n\tasync buildJobDatas(jobsParameters: Jsonisable, ctx: C): Promise<Jsonisable> {\n\t\tlet jobDatas: Jsonisable = {};\n\t\tconst dataBuilders = Array.from(this._jobDatasBuilder.values()).sort((a, b) => a.sort - b.sort);\n\t\tawait Promise.all(dataBuilders.map(async (bd) => {\n\t\t\tawait bd.fct.call(this, jobDatas, jobsParameters, ctx);\n\t\t}));\n\t\treturn jobDatas;\n\t}\n\n\n\t/**\n\t * Vérifie la validité des params construits\n\t * NOTE : cette fonction peut afficher un tooltip de notification\n\t */\n\n\t_jobDatasValidity: Set<(datas: Jsonisable, ctx: C) => Promise<boolean>> = new Set()\n\n\taddJobDataValidity(fct: (datas: Jsonisable, ctx: C) => Promise<boolean>): this {\n\t\tthis._jobDatasValidity.add(fct);\n\t\treturn this;\n\t}\n\n\tasync checkJobDatasValidity(datas: Jsonisable, ctx: C): Promise<boolean> {\n\t\tconst fcts = Array.from(this._jobDatasValidity.values());\n\t\tfor (let i = 0; i <= fcts.length; i++) {\n\t\t\tif (fcts[i] && !await fcts[i].call(this, datas, ctx)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Stratégie de spécif de la planification\n\t * @param planned\n\t */\n\tsetPlanned(planned: null | 'byUser' | dynNumber<C>): this {\n\t\tthis._planned = planned;\n\t\treturn this;\n\t}\n\n\tgetPlanned(ctx: C): null | 'byUser' | dynNumber<C> {\n\t\tif (!ctx.reg.env.universe.executor.hasFeature(\"scheduling\"))\n\t\t\treturn null;\n\t\treturn this._planned;\n\t}\n\n\tasync execute(ctx: C, ev?: Event): Promise<JJob | null> {\n\t\ttry {\n\t\t\tconst jobsParameters = await this.jobDialog(ctx);\n\t\t\tif (jobsParameters !== null) {\n\t\t\t\t// Planned\n\t\t\t\tlet plannedDate: number;\n\t\t\t\tconst planned = this.getPlanned(ctx);\n\t\t\t\tif (planned === \"byUser\") {\n\t\t\t\t\tplannedDate = jobsParameters[this._plannedByUserPropName] ? jobsParameters[this._plannedByUserPropName].date : null;\n\t\t\t\t\tjobsParameters[this._plannedByUserPropName] = undefined; // clean\n\t\t\t\t} else if (typeof planned === \"function\") {\n\t\t\t\t\tplannedDate = planned.call(this, ctx);\n\t\t\t\t}\n\t\t\t\t// Params\n\t\t\t\tlet jobDatas: Jsonisable;\n\t\t\t\tjobDatas = await this.buildJobDatas(jobsParameters, ctx);\n\t\t\t\tif (jobDatas && jobDatas.rulesSgn === undefined) jobDatas.rulesSgn = this.uiJobFactory.getUiJobSng();\n\t\t\t\t//console.log(\"Create JOB ::: \", plannedDate, jobDatas);\n\t\t\t\tif (await this.checkJobDatasValidity(jobDatas, ctx))\n\t\t\t\t\treturn await EXECUTOR.createJob(ctx.reg.env.universe.executor, this.uiJobFactory.getJobFactoryCode(), jobDatas, plannedDate);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tawait ERROR.report(`La création du traitement n'a pas pu aboutir. Veuillez réessayer ultérieurement.`, e);\n\t\t}\n\t}\n\n\toverride(name: keyof Action<C> | 'buildJobDatas', val: any): this {\n\t\treturn super.override(name as any, val);\n\t}\n}\n\nREG.reg.registerSkin(\"job-create-form\", 1, /* language=CSS */ `\n\t:host > div{\n\t\tdisplay: contents;\n\t}\n\t\n\tform {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t}\n\t\n\tfieldset {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\tmin-width: 0;\n\t\tmin-height: 0;\n\t\tflex-direction: column;\n\t\tborder: none;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tmin-width: 0;\n\t}\n\n\t*[area-id=\"_processings\"], *[area-id=\"_views\"] {\n\t\tflex: 1;\n\t}\n\n`);\n\ntype dynNumber<C> = (this: JobBuilderAction<any>, ctx: C) => number;\n\nexport interface IJobAreaContext extends IControlAreaContext, IRegPointer<IExecutorInUniversePointer & IUiEnv> {\n\t/** Ui Factory de ce job */\n\tuiJobFactory: UiJobFactory<any, any>\n\t/** Job en cours d'édition, ou nul si création */\n\tjob?: JJob,\n}\n"]}