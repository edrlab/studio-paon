{"version":3,"sources":["/@lib@/styler/styler.ts"],"names":["REG","StylerSrcImportSkin","WSPPACK","IO","Action4SrcPointer","reg","addToList","SINGLETON","getId","SkinClassStl","[object Object]","config","this","code","name","class","skinClass","ownerWspTypeStlName","_a","wsp","STYLER","getSkinClass","SkinClass","sgn","match","other","RegisteredSkin","skin","cLass","wspTypeDef","owner","key","isExt","_b","isOption","_c","title","version","_d","lang","_e","wspServer","iconPath","keyRes","adminWspUrl","resolve","qs","url","path","LIST_SKIN_CLASSES_STL","LIST_SKIN_CLASSES","getSkinClassesStl","getListAsMap","getSkinClassStl","skinClassStlKey","skinCLassesStylerDef","skinClassKey","skinCLassesDef","async","getRegisteredSkins","skinClasses","list","listWspTypesDef","env","universe","packServer","result","Set","forEach","skinCLassDef","indexOf","skins","add","listSkinsFromSkinsPacks","skinPackUrl","fetchJson","getSkin","skinPackId","skinCLass","fetchBlob","getSkinUrl","installGenAsSkinpack","uiContext","srcRef","codeGenStack","props","customFullUriDest","isAvailable","waitForAvailable","resp","wspGenUrl","method","pack"],"mappings":"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","sourcesContent":["import {REG} from \"lib/commons/registry\";\nimport {Wsp, WspSrv} from \"lib/wsp/wsp\";\nimport {StylerSrcImportSkin} from \"back/styler/widgets/stylerSrcDrawer\";\nimport {JSkinEntry, JSkinPackInstalled, JWspOptionDef, JWspTypeDef, PackSrv, WSPPACK} from \"lib/wsp/pack\";\nimport {IO} from \"lib/commons/io/io\";\nimport {Action4SrcPointer} from \"back/wsp/widgets/wed/ptrItem\";\nimport {srcRef} from \"lib/wsp/src\";\n\n/** Initialisation du contexte du registre de l'atelier */\nREG.reg.addToList(\"actions:wsp:wed:ptr-item\", StylerSrcImportSkin.SINGLETON.getId(), 1, new Action4SrcPointer(StylerSrcImportSkin.SINGLETON));\nREG.reg.addToList('srcFields:longDesc', 'itAttr_skClass', 1, 'itAttr_skClass');\nREG.reg.addToList('srcFields:longDesc', 'itAttr_skClassStl', 1, 'itAttr_skClassStl');\n\n//REG.reg.addToList('srcFields:longDesc', 'itAttrList_skModelsTitles', 1, 'itAttrList_skModelsTitles');\n\n\n/**\n * SkinClassStl\n */\n\nexport class SkinClassStl {\n\n\tconstructor(protected config: OSkinClassStlConfig) {}\n\n\tget code(): string {return this.config.code}\n\n\tget name(): string {return this.config.name}\n\n\tget class(): string {return this.config.skinClass}\n\n\tget ownerWspTypeStlName(): string {return this.config?.ownerWspTypeStlName}\n\n\tpublic skinClass(wsp: Wsp): SkinClass {\n\t\treturn STYLER.getSkinClass(wsp, this.config.skinClass);\n\t}\n\n}\n\n/** Configuration d'un skinClassStl. */\ninterface OSkinClassStlConfig {\n\t/** Identifiant unique du skinClassStl dans REG.reg */\n\tcode: string\n\n\t/** Nom affichable du skinClassStl */\n\tname: string\n\n\t/** Référence à la skinClassStl associé à ce skin */\n\tskinClass: string\n\n\t/** Nae du modèle styler d'appartenance */\n\townerWspTypeStlName: string\n\n}\n\n\n/**\n * SkinClass\n */\nexport class SkinClass {\n\tconstructor(protected config: OSkinClassConfig) {}\n\n\tget class(): string {return this.config?.class}\n\n\tget name(): string {return this.config?.name || this.class}\n\n\tget sgn(): string {return this.config?.sgn}\n\n\t/** Retourne true si le skinClassStl est de type \"ODT\" */\n\tstatic isSkinClassOdt(skinClass: SkinClass): boolean {\n\t\treturn skinClass?.sgn.match(/.*#odt\\b.*/) ? true : false;\n\t}\n\n\t/** Retourne true si le skinClassStl est de type \"DOSS\" */\n\tstatic isSkinClassDoss(skinClass: SkinClass): boolean {\n\t\treturn skinClass?.sgn.match(/.*#doss\\b.*/) ? true : false;\n\t}\n\n\tequals(other: SkinClass) {\n\t\treturn other && other.class === this.class;\n\t}\n\n}\n\ninterface OSkinClassConfig {\n\t/** Identifiant unique du skinClassStl dans REG.reg */\n\tclass: string\n\t/** Nom affichable du skinClassStl */\n\tname?: string\n\t/**  */\n\tsgn: string\n}\n\n\n/**\n * RegisteredSkin\n */\nexport class RegisteredSkin {\n\tconstructor(protected skin: JSkinEntry, protected cLass: string, protected wspTypeDef: JWspTypeDef | JWspOptionDef) {}\n\n\t/** Identifiant unique du skin (pour un même skinClass) */\n\tget code(): string {return this.skin?.code}\n\n\t/** Nom affichable du skin */\n\tget name(): string {return this.skin?.name || this.code}\n\n\t/** SkinClass */\n\tpublic skinClass(wsp: Wsp): SkinClass {\n\t\treturn STYLER.getSkinClass(wsp, this.cLass);\n\t}\n\n\t/** wspTypeDef ou wspOptionDef d'appartenance */\n\tget owner(): OSkinWspDefOwner {\n\t\treturn {\n\t\t\tkey: this.wspTypeDef?.key,\n\t\t\tisExt: (this.wspTypeDef as JWspOptionDef)?.isOption,\n\t\t\tname: this.wspTypeDef?.title,\n\t\t\tversion: this.wspTypeDef?.version,\n\t\t\tlang: this.wspTypeDef?.lang,\n\t\t}\n\t}\n\n\t/** Icône du skin\n\t * Remarque : WSP.skinSetsIconUrl` non utilisé car tous les skins sont proposés ici, qu'ils soient activés ou pas sur le svc skinSet\n\t **/\n\tpublic getIconUrl(wspServer: WspSrv): string {\n\t\tif (this.wspTypeDef && this.skin.iconPath && this.skin.keyRes)\n\t\t\treturn wspServer.config.adminWspUrl.resolve(IO.qs(\"cdaction\", \"GetRes\", \"param\", this.skin.keyRes + '~' + this.wspTypeDef.lang + '#' + this.wspTypeDef.version + '#' + this.wspTypeDef.version + \"/\" + this.skin.iconPath)).url\n\t\telse if (this.wspTypeDef && this.skin.iconPath){\n\t\t\t// TODOsc7 : supprimer ce cas. Laissé pour compat asc sc6.0\n\t\t\treturn wspServer.config.adminWspUrl.resolve(IO.qs(\"cdaction\", \"GetRes\", \"param\", this.wspTypeDef.key + '.ss~' + this.wspTypeDef.lang + '#' + this.wspTypeDef.version + '#' + this.wspTypeDef.version + \"/\" + this.skin.iconPath)).url\n\t\t}else return \"/@skin@/styler/actions/skinEntry.svg\";\n\t}\n\n\tpublic getSrcUrl(wspServer: WspSrv): string {\n\t\tif(this.wspTypeDef && this.skin.keyRes){\n\t\t\treturn wspServer.config.adminWspUrl.resolve(IO.qs(\"cdaction\", \"GetRes\", \"param\", this.skin.keyRes + '~' + this.wspTypeDef.lang + '#' + this.wspTypeDef.version + '#' + this.wspTypeDef.version + \"/\" + this.skin.path)).url;\n\t\t}else if(this.wspTypeDef){\n\t\t\t// TODOsc7 : supprimer ce cas. Laissé pour compat asc sc6.0\n\t\t\treturn wspServer.config.adminWspUrl.resolve(IO.qs(\"cdaction\", \"GetRes\", \"param\", this.wspTypeDef.key + '.ss~' + this.wspTypeDef.lang + '#' + this.wspTypeDef.version + '#' + this.wspTypeDef.version + \"/\" + this.skin.path)).url;\n\t\t}\n\t}\n\n}\n\ninterface OSkinWspDefOwner {\n\tkey: string\n\tname: string\n\tversion?: string\n\tlang: string\n\tisExt?: boolean\n}\n\n/** skinClassSstyler */\nexport const LIST_SKIN_CLASSES_STL = \"styler:skinclasses:stl\";\n/** skinClass */\nexport const LIST_SKIN_CLASSES = \"styler:skinclasses\";\n\n/**\n *\n */\nexport namespace STYLER {\n\n\t/** Retourne la liste complète des skinClassesStyler déclarés dans le contexte courant (modèle ET extension) */\n\texport function getSkinClassesStl(wsp: Wsp): Dict<SkinClassStl> {\n\t\treturn wsp.reg.getListAsMap(LIST_SKIN_CLASSES_STL);\n\t}\n\n\t/** Retourne un skinClasseStyler donné si existant */\n\texport function getSkinClassStl(wsp: Wsp, skinClassStlKey: string): SkinClassStl | undefined {\n\t\tconst skinCLassesStylerDef: Dict<SkinClassStl> = wsp.reg.getListAsMap(LIST_SKIN_CLASSES_STL);\n\t\treturn skinCLassesStylerDef ? skinCLassesStylerDef[skinClassStlKey] : null;\n\t}\n\n\t/** Retourne un skinClass donné si existant */\n\texport function getSkinClass(wsp: Wsp, skinClassKey: string): SkinClass | undefined {\n\t\tconst skinCLassesDef: Dict<SkinClass> = wsp.reg.getListAsMap(LIST_SKIN_CLASSES);\n\t\treturn skinCLassesDef ? skinCLassesDef[skinClassKey] : null;\n\t}\n\n\t/** Retourne la liste des skins déclarés dans les différents packs installés pour un skinClass donné */\n\texport async function getRegisteredSkins(wsp: Wsp, skinClasses: string[]): Promise<Set<RegisteredSkin>> {\n\t\tconst list = await WSPPACK.listWspTypesDef(wsp.reg.env.universe.packServer, skinClasses, true);\n\t\tconst result: Set<RegisteredSkin> = new Set();\n\t\tif (list)\n\t\t\tlist.forEach((wspTypeDef) => {\n\t\t\t\tif (wspTypeDef.skinClasses) wspTypeDef.skinClasses.forEach((skinCLassDef) => {\n\t\t\t\t\tif (!skinClasses || skinClasses.indexOf(skinCLassDef.class) > -1) {\n\t\t\t\t\t\tconst skins = skinCLassDef.skins;\n\t\t\t\t\t\tif (skins)\n\t\t\t\t\t\t\tskins.forEach((skin) => {\n\t\t\t\t\t\t\t\tresult.add(new RegisteredSkin(skin, skinCLassDef.class, wspTypeDef));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * SCENARIstyler : Liste tous les skinSets installés dans cet univers compatibles avec ce WspType\n\t * @see eu.scenari.wsp.service.skinpack.SvcSkinPackDialog.CDACTION_ListSkinsForSkinClass\n\t * @param skinClass\n\t * @param keyWspType : key du wspType (racine, pas d'un WspOption)\n\t * @param langWspType : langue du wspType\n\t * @param versionWspType : version du wspType\n\t */\n\texport function listSkinsFromSkinsPacks(packServer: PackSrv, skinClass: string, lang?: string): Promise<JSkinPackSkin[]> {\n\t\treturn packServer.config.skinPackUrl.fetchJson(IO.qs(\"cdaction\", \"ListSkinsForSkinClass\", \"param\", skinClass, \"lang\", lang));\n\t}\n\n\texport interface JSkinPackSkin {\n\t\tcode: string\n\t\ttitle: string\n\t}\n\n\t/**\n\t * SCENARIstyler : télécharge le skin d'un générateur\n\t * @see eu.scenari.wsp.service.skinpack.SvcSkinPackDialog.CDACTION_GetSkin\n\t * @param genCode : code du generator\n\t * @param skinPackId :\n\t * @param keyWspType : key du wspType (racine, pas d'un WspOption)\n\t * @param langWspType : langue du wspType\n\t * @param versionWspType : version du wspType\n\t */\n\texport async function getSkin(packServer: PackSrv, skinPackId: string, skinCLass: string, lang?: string): Promise<Blob> {\n\t\treturn packServer.config.skinPackUrl.fetchBlob(IO.qs(\"cdaction\", \"GetSkin\", \"param\", skinCLass, \"skinPackId\", skinPackId, \"lang\", lang));\n\t}\n\n\texport function getSkinUrl(packServer: PackSrv, skinPackId: string, skinCLass: string, lang?: string): string {\n\t\treturn packServer.config.skinPackUrl.resolve(IO.qs(\"cdaction\", \"GetSkin\", \"param\", skinCLass, \"skinPackId\", skinPackId, \"lang\", lang)).url;\n\t}\n\n\n\t/**\n\t * Génération\n\t * @param wsp\n\t * @param uiContext\n\t * @param srcRef\n\t * @param codeGenStack\n\t * @param props\n\t * @param customFullUriDest : spécification libre d'une fullUri de destination (usage : styler)\n\t * \tATTENTION : nécessite des habilitations dédiées\n\t */\n\texport async function installGenAsSkinpack(wsp: Wsp, uiContext: HTMLElement, srcRef: srcRef, codeGenStack: string, props: Jsonisable, customFullUriDest?: string, lang?: string): Promise<JSkinPackInstalled> {\n\t\tif (!wsp.isAvailable) await wsp.waitForAvailable(uiContext);\n\t\tlet resp = await wsp.wspServer.config.wspGenUrl.fetchJson<{ pack: JSkinPackInstalled }>(IO.qs(\"cdaction\", \"InstallGenAsSkinPack\", \"format\", \"json\", \"param\", wsp.code, \"refUri\", srcRef, \"codeGenStack\", codeGenStack, \"lang\", lang), {method: \"POST\"});\n\t\treturn resp.pack;\n\t}\n\n}\n\n\n"]}