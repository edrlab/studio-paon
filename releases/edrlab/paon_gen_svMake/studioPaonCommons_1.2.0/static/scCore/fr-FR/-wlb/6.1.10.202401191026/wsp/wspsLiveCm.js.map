{"version":3,"sources":["/@lib@/wsp/wspsLiveCm.ts"],"names":["WSP","EditorState","Text","Transaction","EditorView","EventsMgr","EWspChangesEvts","EWspWorkingSt","ITEM","EHttpStatusCode","IO","RespError","POPUP","CmEditors","[object Object]","wspsLive","this","editorsByUri","Map","editorsByItemUri","wspUri","_a","get","refetchContent","m","type","u","buildWspUri","wspCd","srcUri","syncEd","ctState","syncEds","eds","filter","ed","length","newSts","wspServer","config","wspSrcUrl","fetchJson","qs","map","s","join","i","newSt","srcStamp","fields","srcDt","r","urisStates","uriStates","reject","refreshLockState","states","uri","state","w","lock","clId","account","lockedBy","unlock","wspRef","addWaiterTo","values","push","save","findWsp","wspItemUri","waiters","wspUriItem","getSrcUriType","extractItemUri","SynchedEditors","set","list","delete","idx","indexOf","splice","Array","super","initing","cmContent","empty","cancelSaveTimer","setCtEdState","getSrcFieldNames","resp","fetch","ok","status","notFound","asText","console","log","error","headers","JSON","parse","wsp","isAvailable","waitForAvailable","itemType","wspMetaUi","getItemType","itModel","cmText","of","split","cmEd","editorView","dispatch","changes","from","to","doc","insert","e","fromWsp","uiContext","chain","txt","sliceString","desc","method","body","Error","_getStates","then","bind","itemFields","fetchShortDesc","dispatchLocalChange","contentEvents","emitCatched","response","forbidden","navigator","clipboard","writeText","showNotifForbidden","autoHide","showNotifError","launchSaveTimer","_saveTimer","clearInterval","saveInterval","reg","getPref","setTimeout","cmEditor","cmEditors","removeSyncEd","stEvt","_wsFrame","postMsg","svc","_getMergedServerStateFor","writeState","find","st","byClId","byAccount","CmEditor","contentState","env","dom","remove","destroy","cmView","tr","docChanged","canChangeCmDoc","update","forEach","annotations","remote","onDocChanged","createCmEditor","extensions","root","getOrCreateSyncEd","code","setView","create","cmDispatch"],"mappings":"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","sourcesContent":["import {JWspUriChangeMsg, JWspWorkingInitStates, JWspWorkingState, Wsp, WSP, wspCd, wspRef, wspUri} from \"lib/wsp/wsp\";\nimport {JSrcFields, srcUri} from \"lib/wsp/src\";\nimport {EditorState, Extension, Text, Transaction} from \"res/codemirror/state\";\nimport {EditorView} from \"res/codemirror/view\";\nimport {EventsMgr, IEvents, IEventsMgr} from \"lib/commons/events\";\nimport {IReg} from \"lib/commons/registry\";\nimport {IItemUiEnv} from \"back/wsp/views/itemMain\";\nimport {ItemType} from \"lib/wsp/wspMetaUi\";\nimport {EWspChangesEvts, EWspWorkingSt, ICollabLock, JWspWorkingMsgStateIn, JWspWorkingMsgStateOut, WspsLive} from \"lib/wsp/wspsLive\";\nimport {ITEM} from \"lib/wsp/item\";\nimport {EHttpStatusCode, IO, RespError} from \"lib/commons/io/io\";\nimport {POPUP} from \"back/commons/widgets/popups\";\n\n/**\n * Gestionnaire de tous les CmEditor en cours d'un atelier\n * avec synchronisation des éditeurs référençant le même contenu.\n * @see WspsLive.cmEditors\n */\nexport interface ICmEditors {\n\n\t/** Charge ou recharge le contenu abandonnant les modifs en cours. */\n\trefetchContent(wspUri: wspUri): Promise<void>\n\n\t/** Eneregistre toutes les sources dirty. */\n\tsaveAll(addWaiterTo: Promise<void>[]): void\n\n\tsave(wspItemUri: wspUri, waiters: Promise<any>[]): void\n\n\t/** Appelé sur les msg JWspUriChangeMsg par le WspsLive. */\n\tonWspUriChangeMsg(m: JWspUriChangeMsg,): Promise<void>\n\n\tonWspWorkingInitMsg(urisStates: JWspWorkingInitStates): Promise<void>\n\n\tonWspWorkingStateMsg(m: JWspWorkingMsgStateIn): void\n\n\tisDirty(wspUri: wspUri): boolean\n\n\t/** Demande si le WspsLive peut poser un lock externe (comments dynGen) et l'ajoute le cas échénat pour cette source. */\n\ttryLockExternals(wspRef: wspRef): boolean\n\n\t/** Supprime le lock externe */\n\tunlockExternals(wspRef: wspRef): void\n}\n\n/** Enveloppe un EditorView */\nexport interface ICmEditor {\n\n\twspUri: wspUri\n\n\teditorView: EditorView\n\n\tcontentEvents: IEventsMgr<IContentCmEditorEvents>\n\n\tcontentState: ICtEdState\n\n\t/** Autre device verrouillant actuellement cette source. */\n\tlockedBy: ICollabLock | undefined\n\n\tsave(): void\n\n\tclose(): void\n}\n\nexport type ICtEdState = 'fetching' | 'fetchFailed' | 'saving' | 'fresh' | 'dirty';\nexport type ICtEdEvent = ICtEdState | 'saveFailed';\n\n/** Events pour la getrsion commune d'une source inter-CmEditor. */\nexport interface IContentCmEditorEvents extends IEvents {\n\n\t/** Evènements relatifs au changement d'état du contenu. */\n\tonCtStateChange: (state: ICtEdEvent, e?: any) => void;\n\n\t/** Evènements relatifs vérrouillage / déverrouillage de l'éditeur modifiant l'état readOnly des éditeurs. */\n\tonLock: (locked: boolean) => void;\n\n\t// /** Détection d'un changement de permission sur cette source. NON géré par la place de la mainView. */\n\t// onPermChange: (newFields: JSrcFields) => void;\n}\n\nclass CmEditors implements ICmEditors {\n\n\t/** CM Editeurs synchronisés référencés par son wspUri (de la res source de l'item). */\n\teditorsByUri = new Map<wspUri, SynchedEditors>();\n\n\t/** CM Editeurs synchronisés référencés par le wspUri de son item. */\n\teditorsByItemUri = new Map<wspUri, SynchedEditors[]>();\n\n\tconstructor(public wspsLive: WspsLive) {}\n\n\tasync refetchContent(wspUri: wspUri): Promise<void> {\n\t\treturn this.editorsByUri.get(wspUri)?.refetchContent();\n\t}\n\n\tasync onWspUriChangeMsg(m: JWspUriChangeMsg): Promise<void> {\n\t\t//console.log(\"onWspUriChangeMsg::::::\", m);\n\t\tif (m.type === EWspChangesEvts.u) {\n\t\t\tconst wspUri = WSP.buildWspUri(m.wspCd, m.srcUri);\n\t\t\t//Si item mono-res\n\t\t\tconst syncEd = this.editorsByUri.get(wspUri);\n\t\t\tif (syncEd && syncEd.ctState !== \"saving\") syncEd.refetchContent();\n\t\t\t//Si item multi-res\n\t\t\tconst syncEds = this.editorsByItemUri.get(wspUri);\n\t\t\tif (syncEds) {\n\t\t\t\tconst eds = syncEds.filter((ed) => ed.ctState !== \"saving\");\n\t\t\t\tif (eds.length > 0) {\n\t\t\t\t\tconst newSts = await this.wspsLive.wspServer.config.wspSrcUrl.fetchJson<JSrcFields[]>(IO.qs(\"param\", m.wspCd, \"refUris\", eds.map((s) => s.srcUri).join('\\t'), \"fields\", \"srcStamp*srcDt\"));\n\t\t\t\t\tfor (let i = 0; i < newSts.length; i++) {\n\t\t\t\t\t\tconst newSt = newSts[i];\n\t\t\t\t\t\tconst syncEd = eds[i];\n\t\t\t\t\t\tif (newSt.srcStamp ? syncEd.fields.srcStamp !== newSt.srcStamp : syncEd.fields.srcDt !== newSt.srcDt) syncEd.refetchContent();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (m.type === EWspChangesEvts.r) {\n\t\t\t//no-op les EditorView seront éliminés ce qui purgera le syncEd.\n\t\t}\n\n\t\t// Géré par abonnement du widget à la place de l'item directement.\n\t\t// else if (m.type === EWspChangesEvts.perm) {\n\t\t// } else if (m.type === EWspChangesEvts.lcSt || m.type === EWspChangesEvts.rspUsrs) {\n\t\t// }\n\t}\n\n\tasync onWspWorkingInitMsg(urisStates: JWspWorkingInitStates): Promise<void> {\n\t\tfor (const wspUri in urisStates) {\n\t\t\tconst syncEd = this.editorsByUri.get(wspUri);\n\t\t\tif (syncEd) {\n\t\t\t\t//un editeur existe...\n\t\t\t\tconst uriStates = urisStates[wspUri];\n\t\t\t\tif (uriStates.reject || uriStates.srcStamp ? uriStates.srcStamp !== syncEd.fields.srcStamp : uriStates.srcDt !== syncEd.fields.srcDt) {\n\t\t\t\t\t//édition concurrente ou chgt de droits pendant la rupture de la connection WebSocket\n\t\t\t\t\t//XXX dispatch info avant reload ? Si dirty, createItemConflict , copie presse-papier ?\n\t\t\t\t\tawait syncEd.refetchContent();\n\t\t\t\t} else {\n\t\t\t\t\tsyncEd.refreshLockState(uriStates.states);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonWspWorkingStateMsg(m: JWspWorkingMsgStateIn) {\n\t\tconst syncEd = this.editorsByUri.get(m.uri);\n\t\tif (syncEd) {\n\t\t\tif (m.state === EWspWorkingSt.w) {\n\t\t\t\tsyncEd.lock(m.clId, m.account);\n\t\t\t} else {\n\t\t\t\tif (syncEd.lockedBy && syncEd.lockedBy.clId === m.clId) {\n\t\t\t\t\tsyncEd.unlock();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tisDirty(wspUri: wspUri): boolean {\n\t\tconst syncEd = this.editorsByUri.get(wspUri);\n\t\treturn syncEd ? syncEd.ctState === \"dirty\" : false;\n\t}\n\n\t/** Pas de comments actuellement dans les fichiers de type code source. */\n\ttryLockExternals(wspRef: wspRef): boolean {return true}\n\n\tunlockExternals(wspRef: wspRef) {}\n\n\tsaveAll(addWaiterTo: Promise<void>[]) {\n\t\tfor (const ed of this.editorsByUri.values()) {\n\t\t\tif (ed.ctState === \"dirty\") addWaiterTo.push(ed.save(this.wspsLive.findWsp(ed.wspCd, true), null));\n\t\t}\n\t}\n\n\tsave(wspItemUri: wspUri, waiters: Promise<any>[]) {\n\t\tconst eds = this.editorsByItemUri.get(wspItemUri);\n\t\tif (eds) for (const ed of eds) {\n\t\t\tif (ed.ctState === \"dirty\") waiters.push(ed.save(this.wspsLive.findWsp(ed.wspCd, true), null));\n\t\t}\n\t}\n\n\tgetOrCreateSyncEd(wspCd: wspCd, srcUri: srcUri): SynchedEditors {\n\t\tconst wspUri = WSP.buildWspUri(wspCd, srcUri);\n\t\tlet syncEd = this.editorsByUri.get(wspUri);\n\t\tif (!syncEd) {\n\t\t\tconst wspUriItem = ITEM.getSrcUriType(wspUri) === \"res\" ? ITEM.extractItemUri(wspUri) : null;\n\t\t\tsyncEd = new SynchedEditors(this.wspsLive, wspCd, srcUri, wspUri, wspUriItem);\n\t\t\tthis.editorsByUri.set(wspUri, syncEd);\n\t\t\tif (wspUriItem) {\n\t\t\t\tconst list = this.editorsByItemUri.get(wspUriItem);\n\t\t\t\tif (list) {\n\t\t\t\t\tlist.push(syncEd);\n\t\t\t\t} else {\n\t\t\t\t\tthis.editorsByItemUri.set(wspUriItem, [syncEd]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsyncEd.refetchContent();\n\t\t}\n\t\treturn syncEd;\n\t}\n\n\tremoveSyncEd(syncEd: SynchedEditors) {\n\t\tthis.editorsByUri.delete(syncEd.wspUri);\n\t\tconst list = this.editorsByItemUri.get(syncEd.wspUriItem);\n\t\tif (list) {\n\t\t\tif (list.length === 1) {\n\t\t\t\tif (list[0] === syncEd) this.editorsByItemUri.delete(syncEd.wspUriItem);\n\t\t\t} else {\n\t\t\t\tconst idx = list.indexOf(syncEd);\n\t\t\t\tif (idx >= 0) list.splice(idx, 1);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Regroupement des CmEditor qui pointent la même source. */\nclass SynchedEditors extends Array<CmEditor> {\n\n\tfields: JSrcFields;\n\titemType: ItemType\n\n\tctState: ICtEdState = 'fetching';\n\n\t/** état pendant un (ré)init du contenu de l'éditeur. */\n\tiniting = false;\n\n\tlockedBy?: ICollabLock | undefined\n\n\tconstructor(public wspsLive: WspsLive, public wspCd: wspCd, public srcUri: srcUri, public wspUri: wspUri, public wspUriItem: wspUri) {\n\t\tsuper();\n\t}\n\n\tcmContent: Text = Text.empty;\n\n\tasync refetchContent(): Promise<void> {\n\t\tthis.cancelSaveTimer();\n\t\tthis.setCtEdState(\"fetching\");\n\t\ttry {\n\t\t\tconst qs = IO.qs(\"format\", \"stream\", \"param\", this.wspCd, \"refUri\", this.srcUri, \"srcTrashed\", \"false\", \"fields\", this.wspsLive.getSrcFieldNames(this.srcUri));\n\t\t\tconst resp = await this.wspsLive.wspServer.config.wspSrcUrl.fetch(qs, 'text');\n\t\t\tif (!resp.ok) {\n\t\t\t\tif (resp.status === EHttpStatusCode.notFound) {\n\t\t\t\t\tresp.asText = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tthis.setCtEdState(\"fetchFailed\");\n\t\t\t\t\tconsole.log(\"Get Text failed for \" + this.wspUri, resp.error);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst fields = resp.headers.get(\"X-SCFIELDS\");\n\t\t\tif (!fields) {\n\t\t\t\tthis.setCtEdState(\"fetchFailed\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthis.fields = JSON.parse(fields) as JSrcFields;\n\t\t\tconst wsp = this.wspsLive.findWsp(this.wspCd, true);\n\t\t\tif (!wsp.isAvailable) await wsp.waitForAvailable();\n\t\t\tthis.itemType = wsp.wspMetaUi.getItemType(this.fields.itModel);\n\t\t\tconst cmText = Text.of(resp.asText.split(/\\r\\n?|\\n/));\n\t\t\tthis.initing = true;\n\t\t\ttry {\n\t\t\t\tfor (const cmEd of this) {\n\t\t\t\t\t// cmEd.editorView.setState(EditorState.create({\n\t\t\t\t\t// \tdoc: cmText,\n\t\t\t\t\t// \textensions: cmEd.editorView.state.EditorStateConfig.extensions\n\t\t\t\t\t// }));\n\t\t\t\t\tcmEd.editorView.dispatch({changes: {from: 0, to: cmEd.editorView.state.doc.length, insert: cmText}})\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis.initing = true;\n\t\t\t}\n\t\t\tthis.setCtEdState(\"fresh\");\n\t\t} catch (e) {\n\t\t\tthis.setCtEdState(\"fetchFailed\");\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\n\tasync save(fromWsp: Wsp, uiContext: HTMLElement | null): Promise<void> {\n\t\tif (this.ctState !== \"dirty\") return;\n\t\tthis.cancelSaveTimer();\n\t\tconst qs = IO.qs(\"cdaction\", \"PutSrc\", \"param\", this.wspCd, \"refUri\", this.srcUri, \"clId\", this.wspsLive.wspServer.chain.clId, \"fields\", this.wspsLive.getSrcFieldNames(this.srcUri));\n\t\tthis.setCtEdState(\"saving\");\n\t\tconst txt = this.cmContent.sliceString(0);\n\t\ttry {\n\t\t\tconst desc = await this.wspsLive.wspServer.config.wspSrcUrl.fetchJson<JSrcFields>(qs, {method: \"PUT\", body: txt});\n\t\t\tif (!desc) throw Error(\"saveContent result desc is null\");\n\t\t\tif (!fromWsp.isAvailable) await fromWsp.waitForAvailable();\n\t\t\tthis.wspsLive._getStates(this.wspUri, false, null).then(this.refreshLockState.bind(this));\n\t\t\tthis.itemType = fromWsp.wspMetaUi.getItemType(this.fields.itModel);\n\t\t\tif (ITEM.getSrcUriType(desc.srcUri) === \"res\") {\n\t\t\t\tconst itemFields = await fromWsp.fetchShortDesc(ITEM.extractItemUri(desc.srcUri));\n\t\t\t\tawait this.wspsLive.dispatchLocalChange(null, fromWsp, itemFields, EWspChangesEvts.u, itemFields);\n\t\t\t} else {\n\t\t\t\tawait this.wspsLive.dispatchLocalChange(null, fromWsp, desc, EWspChangesEvts.u, desc);\n\t\t\t}\n\t\t\tthis.setCtEdState(\"fresh\");\n\t\t} catch (e) {\n\t\t\tfor (const cmEd of this) cmEd.contentEvents.emitCatched(\"onCtStateChange\", \"saveFailed\", e);\n\t\t\tif (e instanceof RespError && e.response.status === EHttpStatusCode.forbidden) {\n\t\t\t\tnavigator.clipboard.writeText(txt).then(() => {\n\t\t\t\t\tPOPUP.showNotifForbidden(\"Vous ne disposez plus des droits en édition, vos modifications annulées ont été copiées dans le presse-papier.\", uiContext, {autoHide: 20000});\n\t\t\t\t}, () => {\n\t\t\t\t\tPOPUP.showNotifForbidden(\"Vous ne disposez plus des droits en édition, vos modifications ont dû être annulées.\", uiContext, {autoHide: 20000});\n\t\t\t\t});\n\t\t\t\tthis.refetchContent();\n\t\t\t} else {\n\t\t\t\tPOPUP.showNotifError(\"Échec à l'enregistrement, connexion au serveur impossible. Attention, vous risquez de perdre vos modifications.\", uiContext);\n\t\t\t\tthis.setCtEdState(\"dirty\");\n\t\t\t\tthis.launchSaveTimer();\n\t\t\t}\n\t\t}\n\t}\n\n\tcanChangeCmDoc() {\n\t\t//Que si état stable et pas locked\n\t\treturn this.initing || (!this.lockedBy && this.ctState === 'dirty' || this.ctState === 'fresh' || this.ctState === 'saving');\n\t}\n\n\tonDocChanged() {\n\t\tif (this.ctState === 'fresh') {\n\t\t\tthis.launchSaveTimer();\n\t\t\tthis.setCtEdState('dirty');\n\t\t}\n\t}\n\n\tprotected _saveTimer: number;\n\n\tprotected cancelSaveTimer() {\n\t\tif (this._saveTimer) clearInterval(this._saveTimer);\n\t}\n\n\tprotected launchSaveTimer() {\n\t\tconst saveInterval = this.itemType.reg.getPref(\"item.saveInterval\", 10000);\n\t\tif (saveInterval) this._saveTimer = setTimeout(() => {\n\t\t\tthis._saveTimer = 0;\n\t\t\tthis.save(this.wspsLive.findWsp(this.wspCd, true), null);\n\t\t}, saveInterval);\n\t}\n\n\tremove(cmEditor: CmEditor) {\n\t\tif (this.length === 1) {\n\t\t\tif (this[0] === cmEditor) (this.wspsLive.cmEditors as CmEditors).removeSyncEd(this);\n\t\t} else {\n\t\t\tconst idx = this.indexOf(cmEditor);\n\t\t\tif (idx >= 0) this.splice(idx, 1);\n\t\t}\n\t}\n\n\tsetCtEdState(stEvt: ICtEdState, e?: any) {\n\t\tif (this.ctState !== stEvt) {\n\t\t\tif (this.ctState === \"dirty\") {\n\t\t\t\tthis.ctState = stEvt;\n\t\t\t\tthis.wspsLive._wsFrame.postMsg({svc: 'wspWorking', type: 'state', uri: this.wspUri, state: this.wspsLive._getMergedServerStateFor(this.wspUri)} as JWspWorkingMsgStateOut);\n\t\t\t} else {\n\t\t\t\tthis.ctState = stEvt;\n\t\t\t\tif (stEvt === \"dirty\") this.wspsLive._wsFrame.postMsg({svc: 'wspWorking', type: 'state', uri: this.wspUri, state: EWspWorkingSt.w} as JWspWorkingMsgStateOut);\n\t\t\t}\n\t\t\tfor (const cmEd of this) cmEd.contentEvents.emitCatched(\"onCtStateChange\", stEvt, e);\n\t\t}\n\t}\n\n\trefreshLockState(uriStates: JWspWorkingState[]) {\n\t\tconst writeState = uriStates ? uriStates.find((st) => {return st.state === EWspWorkingSt.w}) : null;\n\t\tif (writeState) this.lock(writeState.clId, writeState.account);\n\t\telse if (this.lockedBy != null) this.unlock();\n\t}\n\n\tlock(byClId: string, byAccount: string) {\n\t\tif (this.ctState === \"dirty\") {\n\t\t\t//Conflit (race condition) !\n\t\t\t//reload de l'editeur.\n\t\t\tthis.refetchContent();\n\t\t\treturn;\n\t\t}\n\t\tif (!this.lockedBy || this.lockedBy.clId !== byClId || this.lockedBy.account !== byAccount) {\n\t\t\tthis.lockedBy = {clId: byClId, account: byAccount};\n\t\t\tfor (const ed of this) ed.contentEvents.emitCatched(\"onLock\", true);\n\t\t}\n\t}\n\n\tunlock() {\n\t\tthis.lockedBy = null;\n\t\tfor (const ed of this) ed.contentEvents.emitCatched(\"onLock\", false);\n\t}\n}\n\nclass CmEditor implements ICmEditor {\n\n\tcontentEvents = new EventsMgr<IContentCmEditorEvents>();\n\n\teditorView: EditorView\n\n\tget wspUri(): wspUri {return this.syncEd.wspUri}\n\n\tget contentState(): ICtEdState {return this.syncEd.ctState}\n\n\tget lockedBy(): ICollabLock | undefined {return this.syncEd.lockedBy}\n\n\tconstructor(public reg: IReg<IItemUiEnv>, public syncEd: SynchedEditors) {\n\t}\n\n\tsave(): Promise<void> {\n\t\treturn this.syncEd.save(this.reg.env.wsp, this.editorView.dom);\n\t}\n\n\tclose() {\n\t\tthis.syncEd.remove(this);\n\t\tthis.editorView.destroy();\n\t}\n\n\tsetView(cmView: EditorView) {\n\t\tthis.editorView = cmView;\n\t}\n\n\tcmDispatch(tr: Transaction) {\n\t\tif (tr.docChanged) {\n\t\t\tif (!this.syncEd.canChangeCmDoc()) return; //on bloque tout changement pendant un état instable.\n\t\t\tthis.editorView.update([tr]);\n\t\t\tthis.syncEd.cmContent = this.editorView.state.doc;\n\t\t\tthis.syncEd.forEach((cmEd) => {\n\t\t\t\tif (cmEd !== this) {\n\t\t\t\t\tcmEd.editorView.update([cmEd.editorView.state.update({\n\t\t\t\t\t\tchanges: tr.changes,\n\t\t\t\t\t\tannotations: Transaction.remote.of(true)\n\t\t\t\t\t})]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.syncEd.onDocChanged();\n\t\t} else {\n\t\t\tthis.editorView.update([tr]);\n\t\t}\n\t}\n}\n\n/** Création d'un nouvel éditeur. */\nexport function createCmEditor(srcUri: srcUri, reg: IReg<IItemUiEnv>, extensions: Extension, root?: Document | ShadowRoot): ICmEditor {\n\tconst wspsLive = reg.env.wsp.wspServer.wspsLive;\n\tconst cmEditors = wspsLive.cmEditors as CmEditors || (wspsLive.cmEditors = new CmEditors(wspsLive));\n\tconst syncEd = cmEditors.getOrCreateSyncEd(reg.env.wsp.code, srcUri);\n\tconst cmEd = new CmEditor(reg, syncEd);\n\tsyncEd.push(cmEd);\n\tcmEd.setView(new EditorView({\n\t\tstate: EditorState.create({doc: syncEd.cmContent, extensions}),\n\t\troot: root,\n\t\tdispatch: cmEd.cmDispatch.bind(cmEd)\n\t}));\n\treturn cmEd;\n}\n"]}